{
    "0": [
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for a in range(1, int(n ** (1/3)) + 1):\n        for b in range(a + 1, int(n ** (1/3)) + 1):\n            cube_sum = a ** 3 + b ** 3\n            if cube_sum == n:\n                return True\n            cubes.append(cube_sum)\n    return any(cubes.count(x) > 1 for x in cubes)",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # Iterate through all possible values of a, b, c, and d\n    for a in range(1, int(n ** (1/3)) + 1):\n        for b in range(a + 1, int(n ** (1/3)) + 1):\n            for c in range(1, int(n ** (1/3)) + 1):\n                for d in range(c + 1, int(n ** (1/3)) + 1):\n                    # Check if a\u00b3 + b\u00b3 = c\u00b3 + d\u00b3 = n\n                    if a**3 + b**3 == c**3 + d**3 == n:\n                        return True\n    # If no such pair of numbers is found, return False\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for i in range(1, int(n ** (1 / 3)) + 1):\n        cubes.append(i ** 3)\n    for i in range(len(cubes)):\n        for j in range(i + 1, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_numbers = []\n    for i in range(1, int(n**(1/3))+1):\n        cube_numbers.append(i**3)\n\n    for i in range(len(cube_numbers)):\n        for j in range(i+1, len(cube_numbers)):\n            if cube_numbers[i] + cube_numbers[j] == n:\n                return True\n\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # create a set to store the cube sums\n    cube_sums = set()\n    \n    # iterate through all possible values of a and b\n    for a in range(1, int(n ** (1/3)) + 1):\n        for b in range(a, int(n ** (1/3)) + 1):\n            # calculate the cube sum a^3 + b^3\n            cube_sum = a ** 3 + b ** 3\n            \n            # check if the cube sum is already in the set\n            # if it is, we have found two different ways to write n as a sum of two cubes\n            if cube_sum in cube_sums:\n                return True\n            \n            # add the cube sum to the set\n            cube_sums.add(cube_sum)\n    \n    # if we reach this point, we have not found two different ways to write n as a sum of two cubes\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # Create a set to store the unique cube sums\n    cube_sums = set()\n\n    # Iterate through all numbers from 1 to the cubic root of n\n    for a in range(1, int(n ** (1 / 3)) + 1):\n        # Calculate the cube of a\n        a_cube = a ** 3\n\n        # Iterate through all numbers from a+1 to the cubic root of n - a_cube\n        for b in range(a + 1, int((n - a_cube) ** (1 / 3)) + 1):\n            # Calculate the cube of b\n            b_cube = b ** 3\n\n            # Calculate the sum of a_cube and b_cube\n            sum_cube = a_cube + b_cube\n\n            # If the sum is equal to n and it is not already in the set, return True\n            if sum_cube == n and sum_cube not in cube_sums:\n                return True\n\n            # Add the sum to the set\n            cube_sums.add(sum_cube)\n\n    # If no two different cube sums were found, return False\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n\n    # Generate a list of all cubes up to the square root of n\n    cubes = [i**3 for i in range(1, int(n**0.5) + 1)]\n\n    # Iterate over the cubes\n    for i in range(len(cubes)):\n        for j in range(i + 1, len(cubes)):\n            # Check if the sum of two cubes equals n\n            if cubes[i] + cubes[j] == n:\n                return True\n\n    # If no two cubes sum to n, return False\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # Initialize a set to store the cube sums\n    cube_sums = set()\n    \n    # Iterate over the range of possible values for a and b\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a, int(n**(1/3)) + 1):\n            # Calculate the cube sum\n            cube_sum = a**3 + b**3\n            \n            # If the cube sum is equal to n, check if it is already in the set\n            if cube_sum == n:\n                # If it is already in the set, return True\n                if cube_sum in cube_sums:\n                    return True\n                # Otherwise, add the cube sum to the set\n                else:\n                    cube_sums.add(cube_sum)\n    \n    # If no two cube sums are found, return False\n    return False\n\nhas_two_cube_sums(1729)\nhas_two_cube_sums(42)",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    for a in range(1, int(n ** (1/3)) + 1):\n        b = int((n - a ** 3) ** (1/3))\n        if a ** 3 + b ** 3 == n and b > a:\n            return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for i in range(1, int(n**(1/3))+1):\n        cubes.append(i**3)\n    for i in range(len(cubes)):\n        for j in range(i+1, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    return False\n\nprint(has_two_cube_sums(1729)) #True\nprint(has_two_cube_sums(42)) #False",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    i = 1\n    while i ** 3 <= n:\n        cubes.append(i ** 3)\n        i += 1\n    \n    for j in range(len(cubes)):\n        for k in range(j+1, len(cubes)):\n            if cubes[j] + cubes[k] == n:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # generate a list of cubes up to n\n    cubes = [i**3 for i in range(1, int(n**(1/3))+1)]\n    \n    # iterate through the list of cubes and check if the difference between n and each cube is also in the list of cubes\n    for i in cubes:\n        if (n - i) in cubes:\n            return True\n    \n    return False\n\nhas_two_cube_sums(1729)",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # create a set to store the cubes\n    cubes = set()\n    \n    # iterate through all possible values of a\n    for a in range(1, int(n**(1/3))+1):\n        # compute the cube of a\n        cube_a = a**3\n        # iterate through all possible values of b\n        for b in range(a+1, int(n**(1/3))+1):\n            # compute the cube of b\n            cube_b = b**3\n            # compute the difference between n and the sum of the cubes\n            diff = n - (cube_a + cube_b)\n            # check if the difference is a perfect cube and not equal to a or b\n            if diff != cube_a and diff != cube_b and diff**(1/3) % 1 == 0:\n                return True\n    \n    # return False if no two cube sums are found\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # Create a set to store all the unique cube sums\n    cube_sums = set()\n    \n    # Iterate through all possible values of a\n    for a in range(1, int(n**(1/3))+1):\n        # Iterate through all possible values of b\n        for b in range(a+1, int(n**(1/3))+1):\n            # Calculate the cube sum of a and b\n            cube_sum = a**3 + b**3\n            \n            # If the cube sum is equal to n, return True\n            if cube_sum == n:\n                return True\n            \n            # Add the cube sum to the set\n            cube_sums.add(cube_sum)\n    \n    # Iterate through all possible values of c\n    for c in range(1, int(n**(1/3))+1):\n        # Iterate through all possible values of d\n        for d in range(c+1, int(n**(1/3))+1):\n            # Calculate the cube sum of c and d\n            cube_sum = c**3 + d**3\n            \n            # If the cube sum is equal to n and not already in the set, return True\n            if cube_sum == n and cube_sum not in cube_sums:\n                return True\n    \n    # If no cube sums were found, return False\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    for i in range(1, int(n**(1/3))+1):\n        for j in range(i+1, int(n**(1/3))+1):\n            if i**3 + j**3 == n:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # create a set to store unique values of cube sums\n    cube_sums = set()\n    \n    # iterate through all possible combinations of a and b\n    for a in range(1, int(n ** (1 / 3)) + 1):\n        for b in range(a + 1, int(n ** (1 / 3)) + 1):\n            # calculate cube sum\n            cube_sum = a ** 3 + b ** 3\n            # check if cube sum is already in the set\n            if cube_sum in cube_sums:\n                return True\n            # add cube sum to set\n            cube_sums.add(cube_sum)\n    \n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for i in range(1, int(n**(1/3))+1):\n        cubes.append(i**3)\n    for i in range(len(cubes)):\n        for j in range(i+1, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_dict = {}\n    \n    for a in range(1, int(n**(1/3))+1):\n        for b in range(a+1, int(n**(1/3))+1):\n            cube_sum = a**3 + b**3\n            if cube_sum == n:\n                return True\n            cube_dict[cube_sum] = (a, b)\n    \n    for c in range(1, int(n**(1/3))+1):\n        for d in range(c+1, int(n**(1/3))+1):\n            cube_sum = c**3 + d**3\n            if cube_sum in cube_dict and (c != cube_dict[cube_sum][0] and c != cube_dict[cube_sum][1]) and (d != cube_dict[cube_sum][0] and d != cube_dict[cube_sum][1]):\n                return True\n    \n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_dict = {}\n    for a in range(1, int(n**(1/3))+1):\n        a_cube = a**3\n        if a_cube < n:\n            cube_dict[a_cube] = True\n            b_cube = n - a_cube\n            b = round(b_cube**(1/3))\n            if b**3 == b_cube and b != a:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for i in range(1, int(n**(1/3))+1):\n        cubes.append(i**3)\n    for i in range(len(cubes)):\n        for j in range(i+1, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for i in range(1, int(n**(1/3))+1):\n        cubes.append(i**3)\n\n    for i in range(len(cubes)):\n        for j in range(i+1, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = set()\n    \n    for i in range(1, int(n ** (1/3)) + 1):\n        cubes.add(i ** 3)\n        \n    for a in cubes:\n        for b in cubes:\n            if a + b == n and a != b:\n                return True\n            \n    return False\n\n# test cases\nprint(has_two_cube_sums(1729))  # True\nprint(has_two_cube_sums(42))    # False",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def has_two_cube_sums(n):\n    cube_list = []\n    for i in range(1, int(n ** (1/3))+1):\n        cube_list.append(i ** 3)\n    for i in range(len(cube_list)):\n        for j in range(i+1, len(cube_list)):\n            if cube_list[i] + cube_list[j] == n:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "# Helper function to check if a number can be written as the sum of two cubes in two different ways\ndef has_two_cube_sums(n):\n    # Generate all possible values of a and b\n    for a in range(1, int(n**(1/3))+1):\n        for b in range(a, int(n**(1/3))+1):\n            # Check if a\u00b3 + b\u00b3 = n\n            if a**3 + b**3 == n:\n                # Generate all possible values of c and d\n                for c in range(1, int(n**(1/3))+1):\n                    for d in range(c, int(n**(1/3))+1):\n                        # Check if c\u00b3 + d\u00b3 = n\n                        if c**3 + d**3 == n:\n                            # Check if the values of a, b, c, and d are all different\n                            if a != b and a != c and a != d and b != c and b != d and c != d:\n                                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_nums = []\n    for i in range(1, int(n**(1/3))+1):\n        cube_nums.append(i**3)\n    \n    for i in range(len(cube_nums)):\n        for j in range(i, len(cube_nums)):\n            if cube_nums[i]+cube_nums[j] == n and cube_nums[i] != cube_nums[j]:\n                return True\n    \n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for i in range(1, int(n ** (1 / 3)) + 1):\n        cubes.append(i ** 3)\n    \n    for i in range(len(cubes)):\n        for j in range(i, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    \n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_numbers = []\n    for i in range(1, int(n**(1/3))+1):\n        cube_numbers.append(i**3)\n        \n    for i in range(len(cube_numbers)):\n        for j in range(i+1, len(cube_numbers)):\n            if cube_numbers[i] + cube_numbers[j] == n:\n                return True\n    return False\n\nprint(has_two_cube_sums(1729))\nprint(has_two_cube_sums(42))\nprint(has_two_cube_sums(10000))",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for i in range(1, int(n ** (1/3)) + 1):\n        cubes.append(i ** 3)\n\n    for i in range(len(cubes)):\n        for j in range(i+1, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for i in range(1, int(n**(1/3))+1):\n        cubes.append(i**3)\n    \n    for i in range(len(cubes)):\n        for j in range(i+1, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    \n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = []\n    for i in range(1, int(n ** (1/3)) + 1):\n        cubes.append(i ** 3)\n    \n    for i in range(len(cubes)):\n        for j in range(i+1, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    \n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # generate all possible combinations of a and b from 1 to n\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a+1, int(n**(1/3)) + 1):\n            # check if a^3 + b^3 equals n\n            if a**3 + b**3 == n:\n                # generate all possible combinations of c and d from 1 to n\n                for c in range(1, int(n**(1/3)) + 1):\n                    for d in range(c+1, int(n**(1/3)) + 1):\n                        # check if c^3 + d^3 equals n\n                        if c**3 + d**3 == n:\n                            # check if a, b, c, and d are all different\n                            if a != c and a != d and b != c and b != d:\n                                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # Generate all possible cubes up to the cube root of n\n    cubes = [i**3 for i in range(1, int(n**(1/3))+1)]\n    \n    # Check all combinations of cubes\n    for i in range(len(cubes)):\n        for j in range(i+1, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    \n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # Generate a list of all possible cubes up to n\n    cubes = [i ** 3 for i in range(1, int(n ** (1 / 3)) + 1)]\n    \n    # Check if n can be written as the sum of two cubes\n    for i in range(len(cubes)):\n        for j in range(i, len(cubes)):\n            if cubes[i] + cubes[j] == n:\n                return True\n    \n    return False",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "# Helper function to check if a number can be written as the sum of two cubes in two different ways\ndef has_two_cube_sums(n):\n    # Generate all possible values of a and b\n    for a in range(1, int(n**(1/3))+1):\n        for b in range(a, int(n**(1/3))+1):\n            # Check if a\u00b3 + b\u00b3 = n\n            if a**3 + b**3 == n:\n                # Generate all possible values of c and d\n                for c in range(1, int(n**(1/3))+1):\n                    for d in range(c, int(n**(1/3))+1):\n                        # Check if c\u00b3 + d\u00b3 = n\n                        if c**3 + d**3 == n:\n                            # Check if the values of a, b, c, and d are all different\n                            if a != b and a != c and a != d and b != c and b != d and c != d:\n                                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # generate all possible combinations of a and b from 1 to n\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a+1, int(n**(1/3)) + 1):\n            # check if a^3 + b^3 equals n\n            if a**3 + b**3 == n:\n                # generate all possible combinations of c and d from 1 to n\n                for c in range(1, int(n**(1/3)) + 1):\n                    for d in range(c+1, int(n**(1/3)) + 1):\n                        # check if c^3 + d^3 equals n\n                        if c**3 + d**3 == n:\n                            # check if a, b, c, and d are all different\n                            if a != c and a != d and b != c and b != d:\n                                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    if n < 1729:\n        return False\n    else:\n        for a in range(1, int(n ** (1/3)) + 1):\n            for b in range(a + 1, int(n ** (1/3)) + 1):\n                if a ** 3 + b ** 3 == n:\n                    return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    # create a set to store all the unique sums of two cubes\n    sums = set()\n    \n    # loop through all numbers less than the cubic root of n\n    for i in range(1, int(n ** (1/3)) + 1):\n        for j in range(i+1, int(n ** (1/3)) + 1):\n            # calculate the sum of cubes\n            sum_of_cubes = i ** 3 + j ** 3\n            # check if the sum is equal to n\n            if sum_of_cubes == n:\n                # check if the sum is already in the set\n                if sum_of_cubes in sums:\n                    return True\n                # add the sum to the set\n                sums.add(sum_of_cubes)\n    \n    # if no two different sums of cubes were found, return False\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    for a in range(1, int(n ** (1 / 3)) + 1):\n        for b in range(a + 1, int(n ** (1 / 3)) + 1):\n            if a ** 3 + b ** 3 == n:\n                for c in range(a + 1, int(n ** (1 / 3)) + 1):\n                    for d in range(c + 1, int(n ** (1 / 3)) + 1):\n                        if c ** 3 + d ** 3 == n:\n                            return True\n    return False",
            "logp": null
        }
    ]
}