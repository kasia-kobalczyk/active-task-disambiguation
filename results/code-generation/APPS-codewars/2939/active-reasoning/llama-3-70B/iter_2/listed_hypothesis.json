{
    "0": [
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cube_b = b ** 3\n            if cube_a + cube_b == n:\n                if (a, b) not in cubes and (b, a) not in cubes:\n                    cubes[(a, b)] = True\n    return len(cubes) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n**(1./3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round((n - cube_a)**(1./3))) + 1):\n            cube_b = b ** 3\n            if cube_a + cube_b == n:\n                if (a, b) not in cubes and (b, a) not in cubes:\n                    cubes[(a, b)] = 1\n                if len(cubes) > 1:\n                    return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cubes[a ** 3] = a\n    sums = set()\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                sums.add((a, b))\n    return len(sums) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = a ** 3\n        cubes[cube] = a\n    results = []\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                results.append((cubes[a], cubes[b]))\n    results = list(set(tuple(sorted(result)) for result in results))\n    return len(results) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n**(1.0/3.0)))+1):\n        cubes[a**3] = a\n    sums = {}\n    for a in range(1, int(round(n**(1.0/3.0)))+1):\n        for b in range(a, int(round(n**(1.0/3.0)))+1):\n            if a**3 + b**3 <= n:\n                sums[a**3 + b**3] = sums.get(a**3 + b**3, set()) | {(a, b)}\n    for sum_, values in sums.items():\n        if sum_ == n and len(values) > 1:\n            for (a, b) in values:\n                for (c, d) in values:\n                    if (a, b) != (c, d) and (a, b) != (d, c):\n                        return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cub_sum = a ** 3 + b ** 3\n            if cub_sum > n:\n                break\n            if cub_sum not in cube_sums:\n                cube_sums[cub_sum] = [(a, b)]\n            else:\n                cube_sums[cub_sum].append((a, b))\n    for sums in cube_sums.values():\n        if len(sums) > 1:\n            for i in range(len(sums)):\n                for j in range(i + 1, len(sums)):\n                    if len(set(sums[i] + sums[j])) == 4:\n                        return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n**(1/3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round((n - cube_a)**(1/3))) + 1):\n            cube_b = b ** 3\n            if cube_a + cube_b == n:\n                if n in cubes:\n                    cubes[n].append((a, b))\n                else:\n                    cubes[n] = [(a, b)]\n    return len(cubes.get(n, [])) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    solutions = []\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                solutions.append((cubes[a], cubes[b]))\n\n    if len(solutions) >= 2:\n        for i in range(len(solutions)):\n            for j in range(i + 1, len(solutions)):\n                if len(set(solutions[i] + solutions[j])) == 4:\n                    return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_set = set()\n    for a in range(1, int(round(n ** (1/3.0))) + 1):\n        a_cube = a ** 3\n        for b in range(a, int(round((n - a_cube) ** (1/3.0))) + 1):\n            b_cube = b ** 3\n            if a_cube + b_cube == n:\n                cube_set.add((a, b))\n    return len(cube_set) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    sums = {}\n    for cube1 in cubes:\n        for cube2 in cubes:\n            if cube1 != cube2:\n                total = cube1 + cube2\n                if total > n:\n                    break\n                if total not in sums:\n                    sums[total] = [(cubes[cube1], cubes[cube2])]\n                else:\n                    sums[total].append((cubes[cube1], cubes[cube2]))\n\n    result = False\n    for total in sums:\n        if total == n:\n            pairs = sums[total]\n            for i in range(len(pairs)):\n                for j in range(i + 1, len(pairs)):\n                    if len(set(pairs[i] + pairs[j])) == 4:\n                        result = True\n                        break\n                if result:\n                    break\n            if result:\n                break\n    return result",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round((n - cube_a) ** (1. / 3))) + 1):\n            cube_b = b ** 3\n            if cube_a + cube_b == n:\n                if (a, b) not in cubes and (b, a) not in cubes:\n                    cubes[(a, b)] = True\n                    if len(cubes) > 1:\n                        return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cube_b = b ** 3\n            sum_ab = cube_a + cube_b\n            if sum_ab > n:\n                break\n            if sum_ab == n:\n                if sum_ab not in cubes:\n                    cubes[sum_ab] = [(a, b)]\n                else:\n                    for pair in cubes[sum_ab]:\n                        if a not in pair and b not in pair:\n                            return True\n                    cubes[sum_ab].append((a, b))\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round((n - cube_a) ** (1. / 3))) + 1):\n            cube_b = b ** 3\n            if cube_a + cube_b == n:\n                cubes[(a, b)] = cube_a + cube_b\n    found = False\n    for i in cubes:\n        for j in cubes:\n            if i != j and len(set(list(i) + list(j))) == 4:\n                found = True\n                break\n        if found:\n            break\n    return found",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n**(1.0/3.0)))+1):\n        cubes[a**3] = a\n    sums = {}\n    for a in range(1, int(round(n**(1.0/3.0)))+1):\n        for b in range(a, int(round(n**(1.0/3.0)))+1):\n            if a**3 + b**3 <= n:\n                sums[a**3 + b**3] = sums.get(a**3 + b**3, set()) | {(a, b)}\n    for num in sums:\n        if num == n and len(sums[num]) > 1:\n            for x, y in sums[num]:\n                for z, w in sums[num]:\n                    if (x, y) != (z, w) and (x, y) != (w, z):\n                        return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    sums = set()\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                sums.add((a, b))\n\n    return len(sums) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    solutions = []\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                solutions.append((cubes[a], cubes[b]))\n\n    solutions = list(set(solutions))\n    for i in range(len(solutions)):\n        for j in range(i + 1, len(solutions)):\n            if len(set(solutions[i] + solutions[j])) == 4:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cub_sum = a ** 3 + b ** 3\n            if cub_sum > n:\n                break\n            if cub_sum == n:\n                if cub_sum not in cube_sums:\n                    cube_sums[cub_sum] = [(a, b)]\n                else:\n                    cube_sums[cub_sum].append((a, b))\n    for key, value in cube_sums.items():\n        if len(value) > 1:\n            return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n**(1/3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round((n - cube_a)**(1/3))) + 1):\n            cube_b = b ** 3\n            if cube_a + cube_b == n:\n                if n in cubes:\n                    cubes[n].append((a, b))\n                else:\n                    cubes[n] = [(a, b)]\n    for value in cubes.values():\n        if len(value) > 1:\n            nums = [num for pair in value for num in pair]\n            if len(set(nums)) == len(nums):\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_set = set()\n    for a in range(1, int(round(n ** (1/3.0))) + 1):\n        a_cube = a ** 3\n        for b in range(a, int(round((n - a_cube) ** (1/3.0))) + 1):\n            b_cube = b ** 3\n            if a_cube + b_cube == n:\n                cube_set.add((a, b))\n    count = 0\n    for a, b in cube_set:\n        if (b, a) not in cube_set:\n            count += 1\n            if count > 1:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = a ** 3\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            if cube + b ** 3 > n:\n                break\n            if cube + b ** 3 == n:\n                if (a, b) not in cubes and (b, a) not in cubes:\n                    cubes[(a, b)] = True\n    return len(cubes) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        a_cube = a ** 3\n        for b in range(a, int(round((n - a_cube) ** (1. / 3))) + 1):\n            b_cube = b ** 3\n            cube_sum = a_cube + b_cube\n            if cube_sum > n:\n                break\n            if cube_sum not in cube_sums:\n                cube_sums[cube_sum] = [(a, b)]\n            else:\n                cube_sums[cube_sum].append((a, b))\n                if len(cube_sums[cube_sum]) > 1:\n                    return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n    sums = {}\n    for a in cubes:\n        for b in cubes:\n            if a != b:\n                total = a + b\n                if total > n:\n                    break\n                if total in sums:\n                    sums[total].append((a, b))\n                else:\n                    sums[total] = [(a, b)]\n    for total in sums:\n        if len(sums[total]) > 1:\n            for (a, b) in sums[total]:\n                for (c, d) in sums[total]:\n                    if (a != c and a != d and b != c and b != d):\n                        return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(n**(1/3)) + 2):\n        cube = i**3\n        cubes[cube] = i\n    sums = {}\n    for a in cubes:\n        for b in cubes:\n            if a != b:\n                total = a + b\n                if total > n:\n                    break\n                if total in sums:\n                    sums[total].append((a, b))\n                else:\n                    sums[total] = [(a, b)]\n    for total in sums:\n        if len(sums[total]) > 1:\n            for i in range(len(sums[total])):\n                for j in range(i+1, len(sums[total])):\n                    a, b = sums[total][i]\n                    c, d = sums[total][j]\n                    if len(set([a, b, c, d])) == 4:\n                        return True\n    return False",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cube_b = b ** 3\n            if cube_a + cube_b == n:\n                if (a, b) not in cubes and (b, a) not in cubes:\n                    cubes[(a, b)] = True\n            if len(cubes) > 1:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    solutions = []\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                solutions.append((cubes[a], cubes[b]))\n\n    solutions = list(set(solutions))\n    return len(solutions) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    sums = {}\n    for a in cubes:\n        for b in cubes:\n            if a != b:\n                total = a + b\n                if total == n:\n                    if total not in sums:\n                        sums[total] = [(cubes[a], cubes[b])]\n                    else:\n                        sums[total].append((cubes[a], cubes[b]))\n\n    for key in sums:\n        if len(sums[key]) > 1:\n            found = False\n            for i in range(len(sums[key])):\n                for j in range(i + 1, len(sums[key])):\n                    if len(set(sums[key][i]) & set(sums[key][j])) == 0:\n                        found = True\n                        break\n                if found:\n                    break\n            if found:\n                return True\n\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = a ** 3\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            if cube + b ** 3 > n:\n                break\n            if cube + b ** 3 == n:\n                if (a, b) not in cubes and (b, a) not in cubes:\n                    cubes[(a, b)] = True\n    return len(cubes) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n    solutions = []\n    for a in cubes:\n        for b in cubes:\n            if a + b == n and len({a, b}) == 2 and a != b:\n                solutions.append((a, b))\n            if len(solutions) > 1:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cube_b = b ** 3\n            if cube_a + cube_b == n:\n                if (a, b) not in cubes and (b, a) not in cubes:\n                    cubes[(a, b)] = 1\n                if len(cubes) > 1:\n                    return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cube_sum = a ** 3 + b ** 3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cube_sums:\n                    return True\n                else:\n                    cube_sums[cube_sum] = [(a, b)]\n            else:\n                cube_sums.setdefault(cube_sum, []).append((a, b))\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n    found = []\n    for a_cube, a in cubes.items():\n        for b_cube, b in cubes.items():\n            if a != b and a_cube + b_cube == n:\n                found.append((a, b))\n                if len(found) > 1:\n                    return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    sums = []\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                sums.append((a, b))\n\n    if len(sums) < 2:\n        return False\n\n    for i in range(len(sums)):\n        for j in range(i + 1, len(sums)):\n            if len(set(sums[i] + sums[j])) == 4:\n                return True\n\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    sums = []\n    for i in cubes:\n        for j in cubes:\n            if i != j:\n                total = i + j\n                if total == n:\n                    sums.append((cubes[i], cubes[j]))\n\n    for i in range(len(sums)):\n        for j in range(i + 1, len(sums)):\n            if set(sums[i]) & set(sums[j]):\n                return False\n            if len(set(sums[i] + sums[j])) == 4:\n                return True\n    return False",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = a ** 3\n        cubes[cube] = a\n    solutions = []\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                solutions.append((cubes[a], cubes[b]))\n    solutions = [sorted(solution) for solution in solutions]\n    solutions = list(set(tuple(solution) for solution in solutions))\n    return len(solutions) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    sums = set()\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                sums.add((a, b))\n\n    return len(sums) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    solutions = []\n    for a in cubes:\n        for b in cubes:\n            if a != b and a + b == n:\n                solutions.append((cubes[a], cubes[b]))\n\n    solutions = list(set(solutions))\n    for i in range(len(solutions)):\n        for j in range(i + 1, len(solutions)):\n            if len(set(solutions[i] + solutions[j])) == 4:\n                return True\n\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n    sums = {}\n    for a in cubes:\n        for b in cubes:\n            if a != b:\n                total = a + b\n                if total > n:\n                    break\n                if total in sums:\n                    sums[total].append((a, b))\n                else:\n                    sums[total] = [(a, b)]\n    for total in sums:\n        if len(sums[total]) > 1:\n            for i in range(len(sums[total])):\n                for j in range(i + 1, len(sums[total])):\n                    if len(set(sums[total][i] + sums[total][j])) == 4:\n                        if total == n:\n                            return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = a ** 3\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            if cube + b ** 3 > n:\n                break\n            if cube + b ** 3 == n:\n                if (a, b) not in cubes and (b, a) not in cubes:\n                    cubes[(a, b)] = True\n    return len(cubes) > 1",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            total = a ** 3 + b ** 3\n            if total > n:\n                break\n            if total == n:\n                if total not in cube_sums:\n                    cube_sums[total] = [(a, b)]\n                else:\n                    cube_sums[total].append((a, b))\n                    if len(cube_sums[total]) > 1:\n                        return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cube_sum = a ** 3 + b ** 3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cube_sums:\n                    return True\n                else:\n                    cube_sums[cube_sum] = [(a, b)]\n            if cube_sum < n:\n                cube_sums[cube_sum] = [(a, b)]\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    sums = []\n    for a in cubes:\n        for b in cubes:\n            if a != b:\n                total = a + b\n                if total == n:\n                    sums.append((cubes[a], cubes[b]))\n\n    sums = list(set(sums))\n    for i in range(len(sums)):\n        for j in range(i + 1, len(sums)):\n            if len(set(sums[i] + sums[j])) == 4:\n                return True\n\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n\n    sums = []\n    for i in cubes:\n        for j in cubes:\n            if i != j:\n                total = i + j\n                if total == n:\n                    sums.append((cubes[i], cubes[j]))\n\n    for i in range(len(sums)):\n        for j in range(i + 1, len(sums)):\n            if set(sums[i]) & set(sums[j]):\n                return False\n            if len(set(sums[i] + sums[j])) == 4:\n                return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(round(n ** (1. / 3))) + 1):\n        cube = i ** 3\n        cubes[cube] = i\n    solutions = []\n    for a in cubes:\n        for b in cubes:\n            if a + b == n and a != b:\n                solutions.append((cubes[a], cubes[b]))\n    solutions = list(set(tuple(sorted(solution)) for solution in solutions))\n    return len(solutions) >= 2",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cube_sum = a ** 3 + b ** 3\n            if cube_sum > n:\n                break\n            if cube_sum not in cube_sums:\n                cube_sums[cube_sum] = [(a, b)]\n            else:\n                cube_sums[cube_sum].append((a, b))\n    for key in cube_sums:\n        if len(cube_sums[key]) > 1:\n            for i in range(len(cube_sums[key])):\n                for j in range(i + 1, len(cube_sums[key])):\n                    if len(set(cube_sums[key][i] + cube_sums[key][j])) == 4:\n                        if key == n:\n                            return True\n    return False",
            "logp": null
        },
        {
            "content": "def has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(round(n ** (1. / 3))) + 1):\n        cube_a = a ** 3\n        for b in range(a, int(round(n ** (1. / 3))) + 1):\n            cube_b = b ** 3\n            sum_cubes = cube_a + cube_b\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes in cubes:\n                    cubes[sum_cubes].append((a, b))\n                else:\n                    cubes[sum_cubes] = [(a, b)]\n    for sum_cubes, pairs in cubes.items():\n        if len(pairs) > 1:\n            for i in range(len(pairs)):\n                for j in range(i + 1, len(pairs)):\n                    if len(set(pairs[i] + pairs[j])) == 4:\n                        return True\n    return False",
            "logp": null
        }
    ]
}