{
    "0": [
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 2):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes in cube_sums:\n                    cube_sums[sum_cubes].append((a, b))\n                else:\n                    cube_sums[sum_cubes] = [(a, b)]\n\n    if n in cube_sums:\n        pairs = cube_sums[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                a, b = pairs[i]\n                c, d = pairs[j]\n                if len(set([a, b, c, d])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    \n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 1):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes == n:\n                if (a, b) in cube_sums:\n                    return True\n                cube_sums[(a, b)] = sum_of_cubes\n                \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 2):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if sum_of_cubes in cubes:\n                    cubes[sum_of_cubes].append((a, b))\n                else:\n                    cubes[sum_of_cubes] = [(a, b)]\n    if n in cubes and len(cubes[n]) > 1:\n        pairs = cubes[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                if len(set(pairs[i] + pairs[j])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 1):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes not in cubes:\n                    cubes[sum_cubes] = []\n                cubes[sum_cubes].append((a, b))\n\n    if n in cubes and len(cubes[n]) > 1:\n        return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 1):\n            sum_cubes = a**3 + b**3\n            if sum_cubes == n:\n                if (a, b) not in cube_sums:\n                    cube_sums[(a, b)] = True\n                elif len(cube_sums) > 0:\n                    for (c, d) in cube_sums.keys():\n                        if len(set([a, b, c, d])) == 4:\n                            return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n ** (1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if (a, b) in cube_sums:\n                    return True\n                cube_sums[sum_cubes] = (a, b)\n    \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 1):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes not in cube_sums:\n                cube_sums[sum_of_cubes] = [(a, b)]\n            else:\n                cube_sums[sum_of_cubes].append((a, b))\n                if len(cube_sums[sum_of_cubes]) > 1:\n                    # Check if we have different pairs\n                    pairs = cube_sums[sum_of_cubes]\n                    for (c, d) in pairs:\n                        if c != a and c != b and d != a and d != b:\n                            return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    \n    for a in range(1, int(n ** (1/3)) + 1):\n        for b in range(a + 1, int(n ** (1/3)) + 2):\n            sum_cubes = a**3 + b**3\n            if sum_cubes == n:\n                if (a, b) not in cube_sums:\n                    cube_sums[sum_cubes] = []\n                cube_sums[sum_cubes].append((a, b))\n    \n    return len(cube_sums.get(n, [])) > 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 1):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes not in cubes:\n                cubes[sum_cubes] = []\n            cubes[sum_cubes].append((a, b))\n    \n    for key, pairs in cubes.items():\n        if key == n and len(pairs) > 1:\n            for i in range(len(pairs)):\n                for j in range(i + 1, len(pairs)):\n                    if len(set(pairs[i]) | set(pairs[j])) == 4:\n                        return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n ** (1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if (a, b) in cubes:\n                    return True\n                cubes[(a, b)] = True\n                \n    return False\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n ** (1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cube_sums:\n                    cube_sums[cube_sum].append((a, b))\n                else:\n                    cube_sums[cube_sum] = [(a, b)]\n                    \n    return n in cube_sums and len(cube_sums[n]) > 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if n in cubes:\n                    cubes[n].append((a, b))\n                else:\n                    cubes[n] = [(a, b)]\n    \n    if n in cubes and len(cubes[n]) > 1:\n        return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n**(1/3)) + 1\n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes == n:\n                if (a, b) not in cubes:\n                    cubes[(a, b)] = sum_of_cubes\n            elif sum_of_cubes > n:\n                break\n    return len(cubes) > 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 1):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum not in cube_sums:\n                cube_sums[cube_sum] = [(a, b)]\n            else:\n                cube_sums[cube_sum].append((a, b))\n    \n    for pairs in cube_sums.values():\n        if len(pairs) > 1:\n            for i in range(len(pairs)):\n                for j in range(i + 1, len(pairs)):\n                    if len(set(pairs[i]) | set(pairs[j])) == 4:\n                        return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    for i in range(1, int(n ** (1/3)) + 1):\n        for j in range(i + 1, int(n ** (1/3)) + 1):\n            cube_sum = i ** 3 + j ** 3\n            if cube_sum > n:\n                break\n            if cube_sum not in cubes:\n                cubes[cube_sum] = []\n            cubes[cube_sum].append((i, j))\n    \n    for pairs in cubes.values():\n        if len(pairs) > 1:\n            for i in range(len(pairs)):\n                for j in range(i + 1, len(pairs)):\n                    a, b = pairs[i]\n                    c, d = pairs[j]\n                    if len(set([a, b, c, d])) == 4:\n                        return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 1):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes in cube_sums:\n                    cube_sums[sum_cubes].append((a, b))\n                else:\n                    cube_sums[sum_cubes] = [(a, b)]\n    \n    if n in cube_sums and len(cube_sums[n]) > 1:\n        pairs = cube_sums[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                a, b = pairs[i]\n                c, d = pairs[j]\n                if len(set([a, b, c, d])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n ** (1/3)) + 1\n\n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes == n:\n                if (a, b) not in cube_sums:\n                    cube_sums[(a, b)] = True\n            elif sum_of_cubes > n:\n                break\n\n    return len(cube_sums) > 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cube_sums:\n                    cube_sums[cube_sum].add((a, b))\n                else:\n                    cube_sums[cube_sum] = {(a, b)}\n    \n    if n in cube_sums and len(cube_sums[n]) > 1:\n        return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes not in cubes:\n                    cubes[sum_cubes] = []\n                cubes[sum_cubes].append((a, b))\n    \n    if n in cubes and len(cubes[n]) > 1:\n        return True\n    \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 1):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes not in cube_sums:\n                cube_sums[sum_of_cubes] = []\n            cube_sums[sum_of_cubes].append((a, b))\n    \n    for pairs in cube_sums.values():\n        if len(pairs) > 1:\n            for i in range(len(pairs)):\n                for j in range(i + 1, len(pairs)):\n                    a, b = pairs[i]\n                    c, d = pairs[j]\n                    if len(set([a, b, c, d])) == 4:\n                        return True\n    return False\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if sum_of_cubes not in cube_sums:\n                    cube_sums[sum_of_cubes] = []\n                cube_sums[sum_of_cubes].append((a, b))\n    \n    return len(cube_sums.get(n, [])) >= 2\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes not in cubes:\n                cubes[sum_cubes] = [(a, b)]\n            else:\n                cubes[sum_cubes].append((a, b))\n    \n    for sum_cubes in cubes:\n        if sum_cubes == n and len(cubes[sum_cubes]) > 1:\n            pairs = cubes[sum_cubes]\n            for i in range(len(pairs)):\n                for j in range(i + 1, len(pairs)):\n                    a, b = pairs[i]\n                    c, d = pairs[j]\n                    if len(set([a, b, c, d])) == 4:\n                        return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n ** (1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes in cube_sums:\n                    cube_sums[sum_cubes].append((a, b))\n                else:\n                    cube_sums[sum_cubes] = [(a, b)]\n    \n    if n in cube_sums and len(cube_sums[n]) > 1:\n        for i in range(len(cube_sums[n])):\n            for j in range(i + 1, len(cube_sums[n])):\n                if len(set(cube_sums[n][i] + cube_sums[n][j])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    max_a = int(n ** (1/3)) + 1\n    for a in range(1, max_a):\n        for b in range(a + 1, max_a):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes in cube_sums:\n                    cube_sums[sum_cubes].append((a, b))\n                else:\n                    cube_sums[sum_cubes] = [(a, b)]\n    \n    if n in cube_sums and len(cube_sums[n]) > 1:\n        pairs = cube_sums[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                a1, b1 = pairs[i]\n                a2, b2 = pairs[j]\n                if len(set([a1, b1, a2, b2])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    max_a = int(n**(1/3)) + 1\n    \n    for a in range(1, max_a):\n        for b in range(a + 1, max_a):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if sum_of_cubes in cube_sums:\n                    cube_sums[sum_of_cubes].append((a, b))\n                else:\n                    cube_sums[sum_of_cubes] = [(a, b)]\n    \n    if n in cube_sums and len(cube_sums[n]) > 1:\n        pairs = cube_sums[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                a, b = pairs[i]\n                c, d = pairs[j]\n                if len({a, b, c, d}) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n ** (1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum not in cubes:\n                    cubes[cube_sum] = []\n                cubes[cube_sum].append((a, b))\n\n    return len(cubes.get(n, [])) >= 2\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes in cube_sums:\n                    cube_sums[sum_cubes].add((a, b))\n                else:\n                    cube_sums[sum_cubes] = {(a, b)}\n    \n    if n in cube_sums and len(cube_sums[n]) > 1:\n        pairs = list(cube_sums[n])\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                if len(set(pairs[i] + pairs[j])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n**(1/3)) + 1\n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes in cubes:\n                    cubes[sum_cubes].append((a, b))\n                else:\n                    cubes[sum_cubes] = [(a, b)]\n    if n in cubes and len(cubes[n]) > 1:\n        return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n ** (1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cubes:\n                    cubes[cube_sum].append((a, b))\n                else:\n                    cubes[cube_sum] = [(a, b)]\n    \n    if n in cubes and len(cubes[n]) > 1:\n        pairs = cubes[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                a, b = pairs[i]\n                c, d = pairs[j]\n                if len(set([a, b, c, d])) == 4:\n                    return True\n    \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n**(1/3)) + 1\n\n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if sum_of_cubes in cube_sums:\n                    cube_sums[sum_of_cubes].append((a, b))\n                else:\n                    cube_sums[sum_of_cubes] = [(a, b)]\n\n    if n in cube_sums and len(cube_sums[n]) > 1:\n        pairs = cube_sums[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                if len(set(pairs[i]) | set(pairs[j])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n ** (1/3)) + 1\n\n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if sum_of_cubes in cubes:\n                    cubes[sum_of_cubes].append((a, b))\n                else:\n                    cubes[sum_of_cubes] = [(a, b)]\n\n    if n in cubes and len(cubes[n]) > 1:\n        pairs = cubes[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                a, b = pairs[i]\n                c, d = pairs[j]\n                if len({a, b, c, d}) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n ** (1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if (a, b) not in cubes:\n                    cubes[(a, b)] = True\n                    \n    return len(cubes) > 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cubes:\n                    cubes[cube_sum].append((a, b))\n                else:\n                    cubes[cube_sum] = [(a, b)]\n\n    if n in cubes and len(cubes[n]) > 1:\n        pairs = cubes[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                if len(set(pairs[i]) | set(pairs[j])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    max_a = int(n ** (1/3)) + 1\n    \n    for a in range(1, max_a):\n        for b in range(a + 1, max_a):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if sum_of_cubes in cube_sums:\n                    cube_sums[sum_of_cubes].append((a, b))\n                else:\n                    cube_sums[sum_of_cubes] = [(a, b)]\n    \n    if n in cube_sums and len(cube_sums[n]) > 1:\n        for (a, b) in cube_sums[n]:\n            for (c, d) in cube_sums[n]:\n                if len(set([a, b, c, d])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes not in cubes:\n                    cubes[sum_cubes] = []\n                cubes[sum_cubes].append((a, b))\n\n    return len(cubes.get(n, [])) > 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n ** (1/3)) + 1\n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes == n:\n                if sum_cubes in cube_sums:\n                    cube_sums[sum_cubes].add((a, b))\n                else:\n                    cube_sums[sum_cubes] = {(a, b)}\n\n    return n in cube_sums and len(cube_sums[n]) > 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n ** (1/3)) + 1\n\n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cubes:\n                    cubes[cube_sum].append((a, b))\n                else:\n                    cubes[cube_sum] = [(a, b)]\n\n    if n in cubes and len(cubes[n]) >= 2:\n        return True\n\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cubes:\n                    cubes[cube_sum].append((a, b))\n                else:\n                    cubes[cube_sum] = [(a, b)]\n\n    if n in cubes and len(cubes[n]) > 1:\n        pairs = cubes[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                if len(set(pairs[i]) | set(pairs[j])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if sum_of_cubes in cubes:\n                    cubes[sum_of_cubes].append((a, b))\n                else:\n                    cubes[sum_of_cubes] = [(a, b)]\n    \n    if n in cubes and len(cubes[n]) > 1:\n        pairs = cubes[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                a, b = pairs[i]\n                c, d = pairs[j]\n                if len(set([a, b, c, d])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n**(1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum not in cube_sums:\n                    cube_sums[cube_sum] = []\n                cube_sums[cube_sum].append((a, b))\n    \n    if n in cube_sums and len(cube_sums[n]) >= 2:\n        pairs = cube_sums[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                if len(set(pairs[i] + pairs[j])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n**(1/3)) + 1\n\n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if sum_of_cubes in cube_sums:\n                    cube_sums[sum_of_cubes].add((a, b))\n                else:\n                    cube_sums[sum_of_cubes] = {(a, b)}\n\n    if n in cube_sums and len(cube_sums[n]) > 1:\n        pairs = list(cube_sums[n])\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                if len(set(pairs[i] + pairs[j])) == 4:\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n**(1/3)) + 1\n\n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cube_sums:\n                    cube_sums[cube_sum].append((a, b))\n                else:\n                    cube_sums[cube_sum] = [(a, b)]\n\n    if n in cube_sums and len(cube_sums[n]) >= 2:\n        pairs = cube_sums[n]\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                if len(set(pairs[i] + pairs[j])) == 4:\n                    return True\n\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 1):\n            sum_of_cubes = a**3 + b**3\n            if sum_of_cubes > n:\n                break\n            if sum_of_cubes == n:\n                if sum_of_cubes in cube_sums:\n                    cube_sums[sum_of_cubes].add((a, b))\n                else:\n                    cube_sums[sum_of_cubes] = {(a, b)}\n    \n    if n in cube_sums and len(cube_sums[n]) > 1:\n        return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cube_sums = {}\n    limit = int(n ** (1/3)) + 1\n    \n    for a in range(1, limit):\n        for b in range(a + 1, limit):\n            cube_sum = a**3 + b**3\n            if cube_sum > n:\n                break\n            if cube_sum == n:\n                if cube_sum in cube_sums:\n                    cube_sums[cube_sum].add((a, b))\n                else:\n                    cube_sums[cube_sum] = {(a, b)}\n    \n    return n in cube_sums and len(cube_sums[n]) > 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef has_two_cube_sums(n):\n    cubes = {}\n    for a in range(1, int(n**(1/3)) + 1):\n        for b in range(a + 1, int(n**(1/3)) + 2):\n            sum_cubes = a**3 + b**3\n            if sum_cubes > n:\n                break\n            if sum_cubes not in cubes:\n                cubes[sum_cubes] = [(a, b)]\n            else:\n                cubes[sum_cubes].append((a, b))\n    \n    for key in cubes:\n        if key == n and len(cubes[key]) > 1:\n            pairs = cubes[key]\n            if any(len(set(pair1).intersection(pair2)) == 0 for i, pair1 in enumerate(pairs) for pair2 in pairs[i + 1:]):\n                return True\n    return False\n```",
            "logp": null
        }
    ]
}