{
    "0": {
        "0": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):"
        ],
        "1": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))"
        ],
        "2": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)"
        ],
        "3": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 12.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))"
        ],
        "4": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) * 0.67)) / (0.9 + (r - 3) * 0.1)\n        else:\n            return (w * (1 + (r - 8) * 0.59)) / (1.2 + (r - 8) * 0.05)\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 7:\n            return w * (1 + (r - 3) * 0.8) / (0.8 + (r - 3) * 0.2)\n        else:\n            return w * (1 + (r - 7) * 0.7) / (1.1 + (r - 7) * 0.1)\n\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley_formula = round(epley(w, r))\n        mcglothin_formula = round(mcglothin(w, r))\n        lombardi_formula = round(lombardi(w, r))\n        return max(epley_formula, mcglothin_formula, lombardi_formula)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        e = epley(w, r)\n        m = mcglothin(w, r)\n        l = lombardi(w, r)\n        return max(e, m, l)"
        ]
    },
    "1": {
        "0": [
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)"
        ],
        "1": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "2": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "3": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "4": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 - r))\n\n    def lombardi(w, r):\n        return w * (1 + r / (100 - r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley_calculate = epley(w, r)\n        mcglothin_calculate = mcglothin(w, r)\n        lombardi_calculate = lombardi(w, r)\n        return max(epley_calculate, mcglothin_calculate, lombardi_calculate)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))"
        ]
    },
    "2": {
        "0": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.415 + 0.69/r) * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "1": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (101.3 - r)))\n    mcglothin = w * (1 - (r / (52.2 + r)))\n    lombardi = w * (1 - (0.4157 * r))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "2": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.08 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "3": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (30 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5)))\n    lombardi = w * (1 - (0.034 * (r - 3)))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "4": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (36 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r / 30)\n\n    def mcglothin(w, r):\n        if r > 10:\n            return w * (1 - (r - 10) / 2.9)\n        else:\n            return w\n\n    def lombardi(w, r):\n        return w * (1 - (r + 2) / 28)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)))"
        ]
    }
}