{
    "0": {
        "0": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return (w * (1 + (r - 3) / 5.0)) * (0.0336 * (r - 3) - 0.0009)\n        else:\n            return (w * (1 + (r - 8) / 11.0)) * (0.0154 * (r - 8) - 0.0013)\n\n    def lombardi(w, r):\n        return w * (1.0 + (r - 1.0) / (170.0 + 0.2 * r))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):"
        ],
        "1": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return w * (1.8 - (0.3 * (8 - r)))\n        else:\n            return w * (1.6 - (0.05 * (r - 8)))\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 5:\n            return w * (1.6 - (0.04 * (5 - r)))\n        else:\n            return w * (1.5 - (0.02 * (r - 5)))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 * (1 - 0.03 * r)))\n\n    def lombardi(w, r):\n        return w / (1 + 0.0333 * r)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(epley(w, r), mcglothin(w, r), lombardi(w, r), key=lambda x:round(x))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w / (1.03634 - (0.06741 * r) + (0.00254 * r**2) - (0.00159 * r**3))\n    mcglothlin = w / (1.02847 - (0.04696 * r) + (0.00668 * r**2) - (0.00563 * r**3))\n    lombardi = w / (1.0 - (0.0333 * r))\n    max_weight = max(epley, mcglothlin, lombardi)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max_weight)"
        ],
        "2": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return w * (1.8 - (0.3 * (8 - r)))\n        else:\n            return w * (1.6 - (0.05 * (r - 8)))\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 5:\n            return w * (1.6 - (0.04 * (5 - r)))\n        else:\n            return w * (1.5 - (0.02 * (r - 5)))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 * (1 - 0.03 * r)))\n\n    def lombardi(w, r):\n        return w / (1 + 0.0333 * r)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(epley(w, r), mcglothin(w, r), lombardi(w, r), key=lambda x:round(x))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "3": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return w * (1.8 - (0.3 * (8 - r)))\n        else:\n            return w * (1.6 - (0.05 * (r - 8)))\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 5:\n            return w * (1.6 - (0.04 * (5 - r)))\n        else:\n            return w * (1.5 - (0.02 * (r - 5)))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 * (1 - 0.03 * r)))\n\n    def lombardi(w, r):\n        return w / (1 + 0.0333 * r)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(epley(w, r), mcglothin(w, r), lombardi(w, r), key=lambda x:round(x))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "4": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1.0 + (r - 1.0) / (100.0 + r))\n\n    def mcglothin(w, r):\n        if r <= 3:\n            return w\n        elif r <= 8:\n            return w * (1.8 - (0.3 * (8 - r)))\n        else:\n            return w * (1.6 - (0.05 * (r - 8)))\n\n    def lombardi(w, r):\n        if r <= 3:\n            return w\n        elif r <= 5:\n            return w * (1.6 - (0.3 * (5 - r)))\n        else:\n            return w * (1.5 - (0.1 * (r - 5)))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley(w, r))), int(round(mcglothin(w, r))), int(round(lombardi(w, r))))",
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 * (1 - 0.03 * r)))\n\n    def lombardi(w, r):\n        return w / (1 + (1 / (r * 0.54)))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (0.0333 * (1 + 0.4545454545454546 * (1 - 0.4545454545454546 ** r)))\n    mcglothin = w * (0.0333 * (1 + 0.4545454545454546 * (1 - 0.4545454545454546 ** (1 - 0.1 ** r))))\n    lombardi = w * (1 - (1 - (w / 100)) * (1 - 0.36363636363636365 ** (r ** (1 / 2))))\n    \n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + 0.033 * r - 0.006 * r**2 + 0.002 * r**3)\n    mcglothin = w * (1 - 0.255 * r)\n    lombardi = w * (1 - 0.30 * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley)), int(round(mcglothin)), int(round(lombardi)))"
        ]
    },
    "1": {
        "0": [
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)"
        ],
        "1": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 * (1 - 0.03 * r)))\n\n    def lombardi(w, r):\n        return w / (1 + 0.0333 * r)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(epley(w, r), mcglothin(w, r), lombardi(w, r), key=lambda x:round(x))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w / (1.03634 - (0.06741 * r) + (0.00254 * r**2) - (0.00159 * r**3))\n    mcglothlin = w / (1.02847 - (0.04696 * r) + (0.00668 * r**2) - (0.00563 * r**3))\n    lombardi = w / (1.0 - (0.0333 * r))\n    max_weight = max(epley, mcglothlin, lombardi)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max_weight)",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = 0.0333 * w * r\n        mcglothin = w * (1.0 + 0.0333 * (r - 1))\n        lombardi = w * (1.0 - (1 - 0.1931 * r) ** 2.67)\n        return max(int(epley), int(mcglothin), int(lombardi))"
        ],
        "2": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 * (1 - 0.03 * r)))\n\n    def lombardi(w, r):\n        return w / (1 + 0.0333 * r)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(epley(w, r), mcglothin(w, r), lombardi(w, r), key=lambda x:round(x))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = 0.0333 * w * r\n        mcglothin = w * (1.0 + 0.0333 * (r - 1))\n        lombardi = w * (1.0 - (1 - 0.1931 * r) ** 2.67)\n        return max(int(epley), int(mcglothin), int(lombardi))"
        ],
        "3": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 * (1 - 0.03 * r)))\n\n    def lombardi(w, r):\n        return w / (1 + 0.0333 * r)\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(epley(w, r), mcglothin(w, r), lombardi(w, r), key=lambda x:round(x))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = 0.0333 * w * r\n        mcglothin = w * (1.0 + 0.0333 * (r - 1))\n        lombardi = w * (1.0 - (1 - 0.1931 * r) ** 2.67)\n        return max(int(epley), int(mcglothin), int(lombardi))"
        ],
        "4": [
            "def calculate_1RM(w, r):\n    def epley(w, r):\n        return w * (1 + r)\n\n    def mcglothin(w, r):\n        return w * (1 + r / (100 * (1 - 0.03 * r)))\n\n    def lombardi(w, r):\n        return w / (1 + (1 / (r * 0.54)))\n\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley(w, r), mcglothin(w, r), lombardi(w, r)), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (0.0333 * (1 + 0.4545454545454546 * (1 - 0.4545454545454546 ** r)))\n    mcglothin = w * (0.0333 * (1 + 0.4545454545454546 * (1 - 0.4545454545454546 ** (1 - 0.1 ** r))))\n    lombardi = w * (1 - (1 - (w / 100)) * (1 - 0.36363636363636365 ** (r ** (1 / 2))))\n    \n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + 0.033 * r - 0.006 * r**2 + 0.002 * r**3)\n    mcglothin = w * (1 - 0.255 * r)\n    lombardi = w * (1 - 0.30 * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley)), int(round(mcglothin)), int(round(lombardi)))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = 0.0333 * w * r\n        mcglothin = w / (2.3 - 1.95 * (1 - r/2))\n        lombardi = w * (1.95 - r/1.2)\n        return max(int(epley), int(mcglothin), int(lombardi))"
        ]
    },
    "2": {
        "0": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    epley = w * (1 + (1.018/r)**-0.06868)\n    mcglothin = w * (1 + (0.033*r**-0.3))\n    lombardi = w * (1 + (0.033*r**-0.3))\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(epley, mcglothin, lombardi), 0)",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w) * r - 0.021 * w * r + 0.019 * w**2 * r)\n    mcglothin = w * (1 + (0.69 - 0.04 * w) * r - 0.01 * w * r)\n    lombardi = w * (0.033 * w + 0.82 - 0.002 * w * r + 0.011 * w**2 * r)\n    return round(max(epley, mcglothin, lombardi))"
        ],
        "1": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w / (1.03634 - (0.06741 * r) + (0.00254 * r**2) - (0.00159 * r**3))\n    mcglothlin = w / (1.02847 - (0.04696 * r) + (0.00668 * r**2) - (0.00563 * r**3))\n    lombardi = w / (1.0 - (0.0333 * r))\n    max_weight = max(epley, mcglothlin, lombardi)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max_weight)",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = 0.0333 * w * r\n        mcglothin = w * (1.0 + 0.0333 * (r - 1))\n        lombardi = w * (1.0 - (1 - 0.1931 * r) ** 2.67)\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = w * r ** (0.9)\n        mcglothin = w * r ** (0.7)\n        lombardi = w * r ** (0.8)\n        return round(max(epley, mcglothin, lombardi))"
        ],
        "2": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = 0.0333 * w * r\n        mcglothin = w * (1.0 + 0.0333 * (r - 1))\n        lombardi = w * (1.0 - (1 - 0.1931 * r) ** 2.67)\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = w * r ** (0.9)\n        mcglothin = w * r ** (0.7)\n        lombardi = w * r ** (0.8)\n        return round(max(epley, mcglothin, lombardi))"
        ],
        "3": [
            "def calculate_1RM(w, r):\n    epley = w * (1 + (r / (1 + r)))\n    mcglothin = w * (1 - (0.05 * (r - 5.64)))\n    lombardi = w * (1 - (0.7 * (r / (30 - r))))\n    results = [epley, mcglothin, lombardi]\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return round(max(results))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = 0.0333 * w * r\n        mcglothin = w * (1.0 + 0.0333 * (r - 1))\n        lombardi = w * (1.0 - (1 - 0.1931 * r) ** 2.67)\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = w * r ** (0.9)\n        mcglothin = w * r ** (0.7)\n        lombardi = w * r ** (0.8)\n        return round(max(epley, mcglothin, lombardi))"
        ],
        "4": [
            "def calculate_1RM(w, r):\n    epley = w * (0.0333 * (1 + 0.4545454545454546 * (1 - 0.4545454545454546 ** r)))\n    mcglothin = w * (0.0333 * (1 + 0.4545454545454546 * (1 - 0.4545454545454546 ** (1 - 0.1 ** r))))\n    lombardi = w * (1 - (1 - (w / 100)) * (1 - 0.36363636363636365 ** (r ** (1 / 2))))\n    \n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1.026 + (0.027 - 0.036 * w / r))\n    mcglothin = w * (1.195 - 0.0304 * w / r)\n    lombardi = w * (0.998 * r - 0.528)\n    return round(max(epley, mcglothin, lombardi))",
            "def calculate_1RM(w, r):\n    epley = w * (1 + 0.033 * r - 0.006 * r**2 + 0.002 * r**3)\n    mcglothin = w * (1 - 0.255 * r)\n    lombardi = w * (1 - 0.30 * r)\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        return max(int(round(epley)), int(round(mcglothin)), int(round(lombardi)))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = 0.0333 * w * r\n        mcglothin = w / (2.3 - 1.95 * (1 - r/2))\n        lombardi = w * (1.95 - r/1.2)\n        return max(int(epley), int(mcglothin), int(lombardi))",
            "def calculate_1RM(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = w * (1 + (r / 2.02))\n        mcglothin = w * (1 + (r / 2.2357))\n        lombardi = w / (1.0184 - (0.0687 * r))\n        return round(max(epley, mcglothin, lombardi))"
        ]
    }
}