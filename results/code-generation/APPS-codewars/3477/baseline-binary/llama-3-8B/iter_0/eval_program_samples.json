{
    "0": {
        "0": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)"
        ],
        "1": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)"
        ],
        "2": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars), key=s.index)\n    return ''.join(ordered_chars)"
        ],
        "3": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)"
        ],
        "4": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)"
        ]
    },
    "1": {
        "0": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))"
        ],
        "1": [
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))"
        ],
        "2": [
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    chars = {char: None for char in ordering}\n    remaining_chars = set(s) - set(ordering)\n    ordered_chars = sorted([char for char in s if char in chars], key=ordering.index)\n    ordered_chars += sorted(list(remaining_chars))\n    return ''.join(ordered_chars)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))"
        ],
        "3": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))"
        ],
        "4": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)"
        ]
    },
    "2": {
        "0": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)"
        ],
        "1": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)"
        ],
        "2": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)"
        ],
        "3": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    o = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    for char in o:\n        for i, c in enumerate(s):\n            if c == char:\n                result[i] = c\n                s = s.replace(c, '', 1)\n    result += sorted(s)\n    return ''.join(result)"
        ],
        "4": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] += char\n                pos += len(char)\n            result_pos += len(char)\n        else:\n            result[result_pos:] = list(s)[len(ordering):] + list(s)[len(ordering):][result_pos:]\n            break\n    result = ''.join(result)\n    return result"
        ]
    }
}