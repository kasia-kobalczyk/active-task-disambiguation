{
    "0": [
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    result = [c for c in s if c in ordering]\n    result.sort(key=ordering.index)\n    for c in s:\n        if c not in ordering:\n            result.append(c)\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ''\n                pos += 1\n            result[pos - 1] = char\n            result_pos = pos\n        else:\n            result[result_pos] = char\n            result_pos += 1\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ''\n                pos += 1\n            result[pos - 1] = char\n            result_pos = pos\n        else:\n            result[result_pos] = char\n            result_pos += 1\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ''\n                pos += 1\n            result[pos - 1] = char\n            result_pos = pos\n        else:\n            result[result_pos] = char\n            result_pos += 1\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ''\n                pos += 1\n            result[pos - 1] = char\n            result_pos = pos\n        else:\n            result[result_pos] = char\n            result_pos += 1\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ''\n                pos += 1\n            result[pos - 1] = char\n            result_pos = pos\n        else:\n            result[result_pos] = char\n            result_pos += 1\n    return ''.join(result)",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def sort_string(s, ordering):\n    ordering = \"\".join(dict.fromkeys(ordering))\n    left, right = [], []\n    for char in s:\n        if char in ordering:\n            left.append(char)\n        else:\n            right.append(char)\n    left.sort(key=ordering.index)\n    return \"\".join(left + right)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def sort_string(s, ordering):\n    ordering = \"\".join(dict.fromkeys(ordering))\n    left, right = [], []\n    for char in s:\n        if char in ordering:\n            left.append(char)\n        else:\n            right.append(char)\n    left.sort(key=ordering.index)\n    return \"\".join(left + right)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def sort_string(s, ordering):\n    ordering = \"\".join(dict.fromkeys(ordering))\n    left, right = [], []\n    for char in s:\n        if char in ordering:\n            left.append(char)\n        else:\n            right.append(char)\n    left.sort(key=ordering.index)\n    return \"\".join(left + right)",
            "logp": null
        },
        {
            "content": "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "logp": null
        }
    ]
}