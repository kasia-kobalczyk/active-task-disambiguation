{
    "0": {
        "0": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    output = [''] * len(s)\n    for char in ordering:\n        for i in range(len(s)):\n            if s[i] == char:\n                output[i] = char\n    return ''.join(output)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)"
        ],
        "1": [
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))",
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))",
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))",
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))",
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))",
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))",
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))",
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))",
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))",
            "def sort_string(s, ordering):\n    o = \"\".join(dict.fromkeys(ordering))\n    res = [i for i in o for j in range(s.count(i))]\n    for i in set(s):\n        if i not in o:\n            res.append(i)\n    return \"\".join(sorted(s, key=lambda x: ordering.index(x) if x in o else len(ordering)))"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    s = sorted(s, key=lambda c: (c in ordering, c))\n    return ''.join(s)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))"
        ],
        "1": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)"
        ],
        "2": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))"
        ],
        "3": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))"
        ],
        "4": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))"
        ]
    },
    "2": {
        "0": [
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    first_half = ''.join([c for c in s if c in ordering])\n    second_half = [c for c in s if c not in ordering]\n    return ''.join(sorted(first_half, key=ordering.index)) + ''.join(sorted(second_half))",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)",
            "def sort_string(s, ordering):\n    ordering = ''.join(sorted(set(ordering)))\n    result = ['' for _ in s]\n    result_pos = 0\n    for char in s:\n        if char in ordering:\n            pos = ordering.index(char)\n            while pos < len(result):\n                result[pos] = ordering[pos]\n                pos += 1\n            result_pos += len(result) - len(result[:pos])\n            for i in range(pos, len(result)):\n                result[i] = s[result_pos:]\n                result_pos += 1\n            break\n    result += s[result_pos:]\n    return ''.join(result)"
        ],
        "1": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    char_index = {ch:i for i, ch in enumerate(ordering)}\n    sorted_s = [ch for ch in s if ch in ordering] \n    sorted_s.sort(key=lambda x: char_index[x])\n    remain = [ch for ch in s if ch not in ordering]\n    return ''.join(sorted_s + remain)"
        ],
        "2": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))"
        ],
        "3": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))"
        ],
        "4": [
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))",
            "def sort_string(s, ordering):\n    ordering = ''.join(dict.fromkeys(ordering))\n    return ''.join(sorted(s, key=lambda c: ordering.index(c) if c in ordering else len(ordering)))"
        ]
    }
}