{
    "0": [
        "assert next_numb(999999) == 1023459",
        "assert next_numb(9999999999) == \"There is no possible number that fulfills those requirements\"",
        "assert next_numb(99) == 105",
        "assert next_numb(12) == 15",
        "assert next_numb(13) == 15"
    ],
    "1": [
        "assert next_numb(101) == 105",
        "assert next_numb(27) == 309",
        "assert next_numb(153) == 159",
        "assert next_numb(30) == 105",
        "assert next_numb(1025) == 1035",
        "assert next_numb(1000) == 1023",
        "assert next_numb(15) == 153",
        "assert next_numb(1023459) == 1023579"
    ],
    "2": [
        "assert next_numb(27) == 309",
        "assert next_numb(153) == 159",
        "assert next_numb(150) == 153",
        "assert next_numb(405) == 459",
        "assert next_numb(1048576) == 105369",
        "assert next_numb(9999) == 10035",
        "assert next_numb(1024) == 1035",
        "assert next_numb(15) == 153"
    ],
    "3": [
        "assert next_numb(153) == 159",
        "assert next_numb(150) == 153",
        "assert next_numb(405) == 459",
        "assert next_numb(1049) == 1053",
        "assert next_numb(9999) == 10035",
        "assert next_numb(1024) == 1035",
        "assert next_numb(15) == 153"
    ]
}