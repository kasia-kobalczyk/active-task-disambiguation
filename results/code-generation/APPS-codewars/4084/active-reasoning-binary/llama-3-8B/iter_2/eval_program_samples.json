{
    "0": {
        "0": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed"
        ],
        "1": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))"
        ],
        "2": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))"
        ],
        "3": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))"
        ],
        "4": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))"
        ]
    },
    "1": {
        "0": [
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)"
        ],
        "1": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    pushup_time = 5\n    mistake_time = 2 * pushup_time\n    mistakes = round((time / 60) * (1 - (n / 10)) / (1 - (1 / mistake_time) * log(2))) \n    return int(mistakes)"
        ],
        "2": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    pushup_time = 5\n    mistake_time = 2 * pushup_time\n    mistakes = round((time / 60) * (1 - (n / 10)) / (1 - (1 / mistake_time) * log(2))) \n    return int(mistakes)"
        ],
        "3": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    pushup_time = 5\n    mistake_time = 2 * pushup_time\n    mistakes = round((time / 60) * (1 - (n / 10)) / (1 - (1 / mistake_time) * log(2))) \n    return int(mistakes)"
        ],
        "4": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    pushup_time = 5\n    mistake_time = 2 * pushup_time\n    mistakes = round((time / 60) * (1 - (n / 10)) / (1 - (1 / mistake_time) * log(2))) \n    return int(mistakes)"
        ]
    },
    "2": {
        "0": [
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed"
        ],
        "1": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    pushup_time = 5\n    mistake_time = 2 * pushup_time\n    mistakes = round((time / 60) * (1 - (n / 10)) / (1 - (1 / mistake_time) * log(2))) \n    return int(mistakes)"
        ],
        "2": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    pushup_time = 5\n    mistake_time = 2 * pushup_time\n    mistakes = round((time / 60) * (1 - (n / 10)) / (1 - (1 / mistake_time) * log(2))) \n    return int(mistakes)"
        ],
        "3": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    pushup_time = 5\n    mistake_time = 2 * pushup_time\n    mistakes = round((time / 60) * (1 - (n / 10)) / (1 - (1 / mistake_time) * log(2))) \n    return int(mistakes)"
        ],
        "4": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    pushup_time = 5\n    mistake_time = 2 * pushup_time\n    mistakes = round((time / 60) * (1 - (n / 10)) / (1 - (1 / mistake_time) * log(2))) \n    return int(mistakes)"
        ]
    }
}