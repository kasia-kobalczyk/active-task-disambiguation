{
    "0": {
        "0": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed"
        ],
        "1": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_minutes = 0\n    mistakes = 0\n    for _ in range(n):\n        total_minutes += 6\n        if total_minutes > time:\n            break\n        mistakes += 1\n    return mistakes"
        ],
        "2": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ],
        "3": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ],
        "4": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ]
    },
    "1": {
        "0": [
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)"
        ],
        "1": [
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = 0\n    if time < n * 10:\n        return mistakes_allowed\n    time_consumed = 0\n    while time_consumed < time:\n        time_consumed += 10\n        mistakes_allowed += 1\n        while mistakes_allowed > 0:\n            mistakes_allowed -= 1\n            time_consumed += mistake_time\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_minutes = 0\n    mistakes = 0\n    for _ in range(n):\n        total_minutes += 6\n        if total_minutes > time:\n            break\n        mistakes += 1\n    return mistakes",
            "def alex_mistakes(n, time):\n    mistake_time = 5\n    correct_kata_time = 1\n    redemption_pushup_time = 2\n    total_time = time / 60\n    mistakes = 0\n    i = 0\n    while total_time > 0:\n        i += 1\n        mistake_time *= redemption_pushup_time\n        total_time -= (i * correct_kata_time) + mistake_time\n        mistakes += i\n    return mistakes - n"
        ],
        "2": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ],
        "3": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ],
        "4": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ]
    },
    "2": {
        "0": [
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed"
        ],
        "1": [
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    mistake_time = 10 * total_pushup_time\n    mistakes_allowed = time // (total_kata_time + total_pushup_time) - 1\n    return mistakes_allowed",
            "def alex_mistakes(n, time): \n    total_minutes = 0\n    mistakes = 0\n    for _ in range(n):\n        total_minutes += 6\n        if total_minutes > time:\n            break\n        mistakes += 1\n    return mistakes",
            "def alex_mistakes(n, time):\n    mistake_time = 5\n    correct_kata_time = 1\n    redemption_pushup_time = 2\n    total_time = time / 60\n    mistakes = 0\n    i = 0\n    while total_time > 0:\n        i += 1\n        mistake_time *= redemption_pushup_time\n        total_time -= (i * correct_kata_time) + mistake_time\n        mistakes += i\n    return mistakes - n",
            "def alex_mistakes(n, time):\n    katas_per_minute = n / 60\n    mistakes_per_minute = 1 / (katas_per_minute / 10 - 2 * 1 / 60)\n    mistakes_per_minute = int(mistakes_per_minute)\n    mistakes = int(time / (10 + mistakes_per_minute * 5))\n    return mistakes"
        ],
        "2": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ],
        "3": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ],
        "4": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ]
    }
}