{
    "0": {
        "0": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes"
        ],
        "1": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, n // 10 - round(log(time, 2) / 5))"
        ],
        "2": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))"
        ],
        "3": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))"
        ],
        "4": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return round(time / (10 + mistake_time))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))"
        ]
    },
    "1": {
        "0": [
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    mistake_time = set_redemption\n    mistakes_allowed = time * n / (10 * (10 * mistake_time + time)) \n    return round(mistakes_allowed)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10 / 5 - 1)"
        ],
        "1": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))"
        ],
        "2": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 12))"
        ],
        "3": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int((time - n * 6) / 30))"
        ],
        "4": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))",
            "from math import log\n\ndef alex_mistakes(n, time):\n    return max(0, int(log((time - 5 * (n - 1)) / 5 * 2) / log(2)) - (n - 1))"
        ]
    },
    "2": {
        "0": [
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": [
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)",
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)",
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)",
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)",
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)",
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)",
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)",
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)",
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)",
            "def alex_mistakes(n, time): \n    if n * 10 > time:\n        return 0\n    else:\n        return int((time - n * 10) / 15)"
        ]
    }
}