{
    "0": {
        "0": [
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    mistake_time = 5 * 2 ** (n-1) \n    return time // (n + len(str(n)) * (1 + log(n+1, 2)) - mistake_time)",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes"
        ],
        "1": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    set_redemption = 5\n    pns = set_redemption\n    mistakes = 0\n    while pns < time: \n        mistakes += 1 \n        pns += 5 * 2 ** mistakes \n    return n - mistakes",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)"
        ],
        "1": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    if n > time: \n        return -1 \n    else: \n        return round(-1 * time * log(10) / 10)",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    single_kata_time = 6\n    total_kata_time = single_kata_time * n\n    total_available_time = time * 60\n    total_available_pushup_time = total_available_time - total_kata_time\n    total_mistakes = total_available_pushup_time // (total_pushup_time + total_pushup_time)\n    return total_mistakes"
        ],
        "1": [
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "from math import log\n\ndef alex_mistakes(n, time):\n    time_for_one_kata = time / n\n    time_for_pushup = 5\n    mistakes = 0\n    while time_for_one_kata > time_for_pushup:\n        time_for_pushup *= 2\n        mistakes += 1\n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes",
            "def alex_mistakes(n, time): \n    total_pushup_time = 5\n    redemption_time = 5 * 2\n    mistakes = (time - n * 6) // (total_pushup_time + redemption_time) \n    return mistakes"
        ],
        "2": [],
        "3": [],
        "4": []
    }
}