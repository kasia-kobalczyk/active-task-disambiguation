{
    "0": [
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(prime for prime in DOMINANTS if a <= prime <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(prime for prime in DOMINANTS if a <= prime <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(prime for prime in DOMINANTS if a <= prime <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(filter(lambda x: a <= x <= b, DOMINANTS))",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum([i for i in DOMINANTS if a <= i <= b])",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    result = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            result += i\n    return result",
            "logp": null
        }
    ]
}