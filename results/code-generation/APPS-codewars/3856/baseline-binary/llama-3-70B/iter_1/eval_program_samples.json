{
    "0": {
        "0": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    total_sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            total_sum += i\n    return total_sum",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])"
        ],
        "1": [
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum"
        ],
        "2": [
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum"
        ],
        "3": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum"
        ],
        "4": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum"
        ]
    },
    "1": {
        "0": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for prime in DOMINANTS if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum"
        ],
        "1": [
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    total = 0\n    for i in range(a, b):\n        if i < len(DOMINANTS) and DOMINANTS[i] >= a and DOMINANTS[i] <= b:\n            total += DOMINANTS[i]\n    return total",
            "def solve(a, b):\n    sum_of_dominants = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            sum_of_dominants += p\n    return sum_of_dominants"
        ],
        "2": [
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    sum_of_dominants = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            sum_of_dominants += p\n    return sum_of_dominants"
        ],
        "3": [
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    sum_of_dominants = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            sum_of_dominants += p\n    return sum_of_dominants"
        ],
        "4": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    sum_of_dominants = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            sum_of_dominants += p\n    return sum_of_dominants"
        ]
    },
    "2": {
        "0": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(prime for prime in DOMINANTS if a <= prime <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(PRIMES) if i >= a and i < b and i in DOMINANTS)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    sum_of_dominants = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            sum_of_dominants += p\n    return sum_of_dominants",
            "def solve(a,b):\n    sum = 0\n    for prime in DOMINANTS:\n        if a <= prime <= b:\n            sum += prime\n    return sum",
            "def solve(a, b):\n    total = 0\n    for i in range(a, b):\n        if i < len(DOMINANTS) and DOMINANTS[i]:\n            total += DOMINANTS[i]\n    return total"
        ],
        "1": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum_of_dominants = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            sum_of_dominants += p\n    return sum_of_dominants",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)"
        ],
        "2": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    sum_of_dominants = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            sum_of_dominants += p\n    return sum_of_dominants",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)"
        ],
        "3": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(prime for i, prime in enumerate(DOMINANTS) if a <= prime <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    sum_of_dominants = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            sum_of_dominants += p\n    return sum_of_dominants",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)"
        ],
        "4": [
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    sum = 0\n    for i in DOMINANTS:\n        if a <= i <= b:\n            sum += i\n    return sum",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    sum_of_dominants = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            sum_of_dominants += p\n    return sum_of_dominants",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum([p for p in DOMINANTS if a <= p <= b])",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a,b):\n    return sum(p for p in DOMINANTS if a <= p <= b)",
            "def solve(a, b):\n    return sum(p for p in DOMINANTS if a <= p <= b)"
        ]
    }
}