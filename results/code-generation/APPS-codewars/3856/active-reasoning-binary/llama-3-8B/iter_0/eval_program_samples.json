{
    "0": {
        "0": [
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)"
        ],
        "1": [
            "def solve(a,b):\n    total = 0\n    for i in range(len(DOMINANTS)-1):\n        if DOMINANTS[i] > b: break\n        if a <= DOMINANTS[i]:\n            total += DOMINANTS[i]\n    return total",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ],
        "2": [
            "def solve(a,b):\n    total = 0\n    for i in range(len(DOMINANTS)-1):\n        if DOMINANTS[i] > b: break\n        if a <= DOMINANTS[i]:\n            total += DOMINANTS[i]\n    return total",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ],
        "3": [
            "def solve(a,b):\n    total = 0\n    for i in range(len(DOMINANTS)-1):\n        if DOMINANTS[i] > b: break\n        if a <= DOMINANTS[i]:\n            total += DOMINANTS[i]\n    return total",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ],
        "4": [
            "def solve(a,b):\n    total = 0\n    for i in range(len(DOMINANTS)-1):\n        if DOMINANTS[i] > b: break\n        if a <= DOMINANTS[i]:\n            total += DOMINANTS[i]\n    return total",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ]
    },
    "1": {
        "0": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result"
        ],
        "1": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ],
        "2": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ],
        "3": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ],
        "4": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ]
    },
    "2": {
        "0": [
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])"
        ],
        "1": [
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ],
        "2": [
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ],
        "3": [
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ],
        "4": [
            "def solve(a,b):\n    SUM = 0\n    for p in DOMINANTS:\n        if a <= p <= b:\n            SUM += p\n    return SUM"
        ]
    }
}