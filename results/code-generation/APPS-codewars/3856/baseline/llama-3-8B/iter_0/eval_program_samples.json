{
    "0": {
        "0": [
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a,b):\n    res = 0\n    for i in range((a+1)//2,(b//2)+1):\n        if a <= 2*i and 2*i <= b:\n            if not sieve[i]:\n                res += PRIMES[2*i]\n    return res",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)"
        ],
        "1": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)"
        ],
        "2": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)"
        ],
        "3": [
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])"
        ],
        "4": [
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)"
        ]
    },
    "1": {
        "0": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result"
        ],
        "1": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)"
        ],
        "2": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(i for i in DOMINANTS if a <= i <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)"
        ],
        "3": [
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)"
        ],
        "4": [
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    total = 0\n    for p in DOMINANTS:\n        if p >= a and p <= b:\n            total += p\n    return total",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)"
        ]
    },
    "2": {
        "0": [
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    result = 0\n    for p in DOMINANTS:\n        if a <= p and p <= b:\n            result += p\n    return result",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])"
        ],
        "1": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum(x for x in DOMINANTS if a <= x <= b)"
        ],
        "2": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        if len(PRIMES) <= p:\n            break\n        if PRIMES[p] <= b and PRIMES[p] >= a:\n            DOMINANTS.append(PRIMES[p])\n    return sum(DOMINANTS)"
        ],
        "3": [
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])",
            "def solve(a, b):\n    DOMINANTS = []\n    for p in PRIMES:\n        if p >= len(PRIMES): break\n        DOMINANTS.append(PRIMES[p])\n    return sum([x for x in DOMINANTS if a <= x <= b])"
        ],
        "4": [
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)",
            "def solve(a, b):\n    dominants = [x for x in DOMINANTS if a <= x <= b]\n    return sum(dominants)"
        ]
    }
}