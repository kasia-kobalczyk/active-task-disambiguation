{
    "0": [
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)\n    digits = [int(digit) for digit in n]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)\n    digits = [int(d) for d in n]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = [int(d) for d in str(n)]\n    for i in range(len(n) - 2, -1, -2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = [int(i) for i in str(n)][::-1]\n    for i in range(1, len(n), 2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)\n    digits = [int(digit) for digit in n]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)\n    digits = [int(d) for d in n]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = [int(d) for d in str(n)]\n    for i in range(len(n) - 2, -1, -2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = [int(i) for i in str(n)][::-1]\n    for i in range(1, len(n), 2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)[::-1]\n    total = 0\n    for i in range(len(n)):\n        digit = int(n[i])\n        if i % 2 != 0:\n            digit *= 2\n            if digit > 9:\n                digit -= 9\n        total += digit\n    return total % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    checkDigit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + checkDigit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)[::-1]\n    n = [int(i) for i in n]\n    for i in range(1, len(n), 2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)\n    digits = [int(digit) for digit in n]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)\n    digits = [int(d) for d in n]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = [int(d) for d in str(n)]\n    for i in range(len(n) - 2, -1, -2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = [int(i) for i in str(n)][::-1]\n    for i in range(1, len(n), 2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)[::-1]\n    total = 0\n    for i in range(len(n)):\n        digit = int(n[i])\n        if i % 2 != 0:\n            digit *= 2\n            if digit > 9:\n                digit -= 9\n        total += digit\n    return total % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    checkDigit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + checkDigit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)[::-1]\n    n = [int(i) for i in n]\n    for i in range(1, len(n), 2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)\n    digits = [int(digit) for digit in n]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)\n    digits = [int(d) for d in n]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 2, -1, -2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return sum(digits) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = [int(d) for d in str(n)]\n    for i in range(len(n) - 2, -1, -2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = [int(i) for i in str(n)][::-1]\n    for i in range(1, len(n), 2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(x) for x in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    check_digit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + check_digit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)[::-1]\n    total = 0\n    for i in range(len(n)):\n        digit = int(n[i])\n        if i % 2 != 0:\n            digit *= 2\n            if digit > 9:\n                digit -= 9\n        total += digit\n    return total % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    checkDigit = digits.pop()\n    digits = digits[::-1]\n    for i in range(0, len(digits), 2):\n        digits[i] *= 2\n        if digits[i] > 9:\n            digits[i] -= 9\n    return (sum(digits) + checkDigit) % 10 == 0",
            "logp": null
        },
        {
            "content": "def validate(n):\n    n = str(n)[::-1]\n    n = [int(i) for i in n]\n    for i in range(1, len(n), 2):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 9\n    return sum(n) % 10 == 0",
            "logp": null
        }
    ]
}