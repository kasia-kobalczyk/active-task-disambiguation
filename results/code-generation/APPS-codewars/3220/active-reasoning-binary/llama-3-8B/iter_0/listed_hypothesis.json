{
    "0": [
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2002)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2002)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2002)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2002)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2002)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_rati = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_rati.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_rati:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_rati = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_rati.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_rati:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "logp": null
        }
    ]
}