{
    "0": {
        "0": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    return sum(min(pairs) for pairs in ratios.values() if len(pairs) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    seen = set()\n    result_sum = 0\n    \n    for group in HARMO_GROUPS.values():\n        group = [num for num in group if a <= num <= b]\n        if len(group) > 1:\n            result_sum += min(group)\n            seen.add(tuple(sorted(group)))\n    \n    return result_sum if seen else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_lowest_members = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_lowest_members += min(members)\n    \n    return sum_lowest_members if sum_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_lowest_members = 0\n    found_pairs = set()\n    \n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    found_pairs.add((min(members[i], members[j]), max(members[i], members[j])))\n\n    sum_lowest_members = sum(pair[0] for pair in found_pairs)\n    \n    return sum_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0]) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_lowest = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n    \n    return sum_lowest if sum_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1 = group[i]\n                n2 = group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    found_pairs.add((min(n1, n2), max(n1, n2)))\n\n    if not found_pairs:\n        return 0\n\n    lowest_members_sum = sum(pair[0] for pair in found_pairs)\n    \n    return lowest_members_sum\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x] for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    pair_sum = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            pair_sum += min(members)\n    \n    return pair_sum if pair_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum += min(group[i], group[j])\n                    found_pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return pairs_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n\n    pairs_sum = 0\n    found_pairs = False\n\n    for lst in harmonicity.values():\n        if len(lst) > 1:\n            pairs_sum += min(lst)\n            found_pairs = True\n\n    return pairs_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    total = 0\n    for pair in harmonicity.values():\n        if len(pair) > 1:\n            total += min(pair)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            lowest_sum += min(numbers)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    total_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if any(a <= x <= b for x in group):\n            lowest = min(x for x in group if a <= x <= b)\n            if lowest not in found_pairs:\n                total_sum += lowest\n                found_pairs.add(lowest)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            sum_of_lowest += min(n for n in group if a <= n <= b)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lows = sum(min(members) for members in harmonicity.values() if len(members) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0]) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_of_lowers = sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1)\n\n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    return sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_min_members = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= n <= b for n in lst))\n    \n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```"
        ],
        "1": [
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        filtered = [n for n in group if a <= n <= b]\n        if len(filtered) > 1:\n            pairs.add(min(filtered))\n    \n    return sum(pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    pairs = {}\n    for n in range(max(a, 1), min(b, 2000)):\n        sum_div = sum(x for x in range(1, n + 1) if n % x == 0)\n        ratio = sum_div / n\n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n\n    lowest_sum = sum(min(pair) for pair in pairs.values() if len(pair) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    lowest_members_sum = sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    return sum(min(p) for p in ratios.values() if len(p) > 1) if ratios else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        return sum(x + (n // x if x != n // x else 0) for x in range(1, int(n**0.5) + 1) if n % x == 0)\n\n    harmonicity = defaultdict(list)\n\n    for n in range(a, b):\n        if n > 0:\n            sod = sum_of_divisors(n)\n            ratio = Fraction(sod, n)\n            harmonicity[ratio].append(n)\n\n    sum_lowest = 0\n    for pairs in harmonicity.values():\n        if len(pairs) > 1:\n            sum_lowest += min(pairs)\n\n    return sum_lowest if sum_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b):\n        if harmonic[n] != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    return sum(min(p) for p in harmonicity.values() if len(p) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    ratios = defaultdict(list)\n\n    for n in range(a, b):\n        s = sum_of_divisors(n)\n        if n != 0:\n            ratio = Fraction(s, n)\n            ratios[ratio].append(n)\n\n    lowest_sum = sum(min(lst) for lst in ratios.values() if len(lst) > 1)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    lowest_sum = 0\n    for members in HARMO_GROUPS.values():\n        pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n        for x, y in pairs:\n            if a <= x < b and a <= y < b:\n                lowest_sum += min(x, y)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    sum_of_mins = sum(min(values) for values in pairs.values() if len(values) > 1)\n    \n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    return sum(min(p) for p in ratios.values() if len(p) > 1) if any(len(p) > 1 for p in ratios.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    sum_of_lowest = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowest += min(members)\n            found_pairs = True\n    \n    return sum_of_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_mins = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    \n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_mins = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n\n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    pairs_sum.add(min(members[i], members[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    ratios = defaultdict(list)\n\n    for n in range(a, b):\n        s = sum_of_divisors(n)\n        if n > 0:\n            ratio = Fraction(s, n)\n            ratios[ratio].append(n)\n\n    lowest_sum = 0\n    for members in ratios.values():\n        if len(members) > 1:\n            lowest_sum += min(members)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for i in range(1, int(n**0.5) + 1) if n % i == 0 for d in (i, n // i) if d <= n) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    sum_lowest = 0\n    found_pair = False\n    \n    for group in harmonicity.values():\n        if len(group) > 1:\n            sum_lowest += min(group)\n            found_pair = True\n            \n    return sum_lowest if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(list)\n    for n in range(a, b):\n        s = sum_of_divisors(n)\n        ratio = Fraction(s, n) if n != 0 else None\n        if ratio is not None:\n            harmonicity[ratio].append(n)\n\n    lowest_members_sum = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            lowest_members_sum += min(numbers)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    lowest_sum = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(set)\n    \n    for n in range(a, b):\n        s = sum_of_divisors(n)\n        if n != 0:\n            ratio = Fraction(s, n)\n            harmonicity[ratio].add(n)\n\n    sum_of_lows = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    harmonicity = defaultdict(set)\n    \n    for n in range(max(1, a), min(b + 1, 2000)):\n        sum_divisors = sum(x for x in range(1, n + 1) if n % x == 0)\n        ratio = sum_divisors / n\n        harmonicity[ratio].add(n)\n\n    lowest_members_sum = sum(min(lst) for lst in harmonicity.values() if len(lst) > 1)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members = set()\n    for members in HARMO_GROUPS.values():\n        members_in_range = [m for m in members if a <= m < b]\n        if len(members_in_range) >= 2:\n            lowest_members.add(min(members_in_range))\n\n    return sum(lowest_members) if lowest_members else 0\n```"
        ],
        "2": [
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    sum_of_lows = sum(x[0] for x in pairs if a <= x[0] < b and a <= x[1] < b)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    sum_lowest_members = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) >= 2:\n            sum_lowest_members += min(filtered_group)\n            found_pairs = True\n\n    return sum_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio in pairs:\n            pairs[ratio].append(n)\n        else:\n            pairs[ratio] = [n]\n\n    sum_lowest = sum(min(p) for p in pairs.values() if len(p) > 1)\n\n    return sum_lowest if sum_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(values) for values in pairs.values() if len(values) > 1)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    sum_of_lowest = 0\n    found_pairs = False\n    \n    for group in pairs.values():\n        if len(group) > 1:\n            sum_of_lowest += min(group)\n            found_pairs = True\n            \n    return sum_of_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, b + 1)]\n    harmonic_ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonic_ratios:\n                harmonic_ratios[ratio] = []\n            harmonic_ratios[ratio].append(n)\n    \n    lowest_sum = 0\n    for members in harmonic_ratios.values():\n        if len(members) > 1:\n            lowest_sum += min(members)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    if a < 0: a = 0\n    if b > 2000: b = 2000\n\n    harmonicity = {}\n    for n in range(a, b):\n        sum_divisors = sum(i for i in range(1, n + 1) if n % i == 0)\n        ratio = sum_divisors / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    lowest_members_sum = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    sum_of_lows = 0\n    for group in pairs.values():\n        if len(group) > 1:\n            sum_of_lows += min(group)\n    \n    return sum_of_lows\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = set()\n\n    for numbers in HARMO_GROUPS.values():\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                n1, n2 = numbers[i], numbers[j]\n                if a <= n1 < b and a <= n2 < b:\n                    found_pairs.add((min(n1, n2), max(n1, n2)))\n\n    if not found_pairs:\n        return 0\n    \n    lowest_sum = sum(pair[0] for pair in found_pairs)\n    \n    return lowest_sum\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                pairs.add((group[i], group[j]))\n\n    sum_of_lowest = sum(min(pair) for pair in pairs if a <= min(pair) < b and a <= max(pair) < b)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```"
        ],
        "3": [
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    sum_of_lows = sum(x[0] for x in pairs if a <= x[0] < b and a <= x[1] < b)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    pairs_sum = 0\n    found_ratios = {}\n    \n    for n in range(a, b):\n        if n == 0:\n            continue\n        divisor_sum = sum(x for x in range(1, n + 1) if n % x == 0)\n        ratio = divisor_sum / n\n        \n        if ratio in found_ratios:\n            pairs_sum += min(n, found_ratios[ratio])\n            del found_ratios[ratio]  # remove to ensure pairs are counted once\n        else:\n            found_ratios[ratio] = n\n            \n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    for members in HARMO_GROUPS.values():\n        filtered_members = [m for m in members if a <= m < b]\n        if len(filtered_members) >= 2:\n            total_sum += min(filtered_members)\n\n    return total_sum\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest_members = 0\n    for members in HARMO_GROUPS.values():\n        pairs = [m for m in members if a <= m < b]\n        if len(pairs) >= 2:\n            sum_of_lowest_members += pairs[0]\n\n    return sum_of_lowest_members if sum_of_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    lowest_sum = 0\n    has_pair = False\n    \n    for numbers in pairs.values():\n        if len(numbers) > 1:\n            has_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if has_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                pairs.add((members[i], members[j]))\n\n    total_sum = sum(min(x) for x in pairs if a <= min(x) < b and a <= max(x) < b)\n    \n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                n1, n2 = members[i], members[j]\n                if a <= n1 < b and a <= n2 < b:\n                    pairs.add((min(n1, n2), max(n1, n2)))\n\n    if not pairs:\n        return 0\n\n    return sum(min(pair) for pair in pairs)\n```"
        ],
        "4": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        if harmonic[n] != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(x for x in range(1, n + 1) if n % x == 0) for n in range(1, 2001)]\n    ratio_pairs = {}\n\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_pairs:\n                ratio_pairs[ratio] = []\n            ratio_pairs[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in ratio_pairs.values() if len(p) > 1)\n\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        if n != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_of_lowest = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b):\n        if harmonic[n] != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    sum_of_min_members = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_min_members += min(members)\n    \n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\n    pairs = set()\n    for n in range(max(a, 1), min(b, 2000)):\n        ratio = harmonic[n]\n        if ratio in HARMO_GROUPS:\n            for m in HARMO_GROUPS[ratio]:\n                if m < n and a <= m < b:\n                    pairs.add((m, n))\n    \n    return sum(min(pair) for pair in pairs) if pairs else 0\n```",
            "```python\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    ratios = defaultdict(list)\n\n    for i in range(a, b):\n        if i > 0:\n            sum_div = sum_of_divisors(i)\n            ratio = Fraction(sum_div, i)\n            ratios[ratio].append(i)\n\n    total_sum = sum(min(pair) for pair in ratios.values() if len(pair) > 1)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_members_sum += min(numbers)\n    \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio:\n            if ratio in harmonicity:\n                harmonicity[ratio].append(n)\n            else:\n                harmonicity[ratio] = [n]\n    \n    sum_of_lows = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    return sum(min(pair) for pair in harmonicity.values() if len(pair) > 1) if any(len(pair) > 1 for pair in harmonicity.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in ratios.values() if len(p) > 1)\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n    \n    harmonic = [0] + [sum([i for i in range(1, n + 1) if n % i == 0]) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    result_sum = 0\n    for pairs in harmonicity.values():\n        if len(pairs) > 1:\n            result_sum += min(pairs)\n    \n    return result_sum if result_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    ratio_pairs = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_pairs:\n                ratio_pairs[ratio] = []\n            ratio_pairs[ratio].append(n)\n\n    sum_of_minimums = 0\n    found_pairs = False\n\n    for numbers in ratio_pairs.values():\n        if len(numbers) > 1:\n            found_pairs = True\n            sum_of_minimums += min(numbers)\n\n    return sum_of_minimums if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    lowest_sum = sum(min(values) for values in pairs.values() if len(values) > 1)\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum([j for j in range(1, n + 1) if n % j == 0]) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    total_sum = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            total_sum += min(numbers)\n    \n    return total_sum if total_sum > 0 else 0\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum([j for j in range(1, n + 1) if n % j == 0]) for n in range(1, b + 1)]\n    harmonicity = {}\n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    total = 0\n    found_pairs = False\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            total += min(numbers)\n            found_pairs = True\n    \n    return total if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_lows = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    sum_of_lowest_members = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_member = min(members)\n            sum_of_lowest_members += lowest_member\n            found_pairs = True\n    \n    return sum_of_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x]) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            total += min(numbers)\n\n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x]) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_of_lowers = sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1)\n\n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_lowest = 0\n    for ratio in ratios.values():\n        if len(ratio) > 1:\n            sum_of_lowest += min(ratio)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = False\n\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    lowest_sum += members[i]\n                    found_pairs = True\n\n    return lowest_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for pair in pairs.values():\n        if len(pair) > 1:\n            found_pair = True\n            lowest_sum += min(pair)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_lowest = 0\n    found_pair = False\n\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            sum_lowest += min(nums)\n            found_pair = True\n\n    return sum_lowest if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    pairs_found = False\n    \n    for numbers in HARMO_GROUPS.values():\n        if any(a <= num <= b for num in numbers):\n            pairs_found = True\n            lowest_sum += numbers[0]\n    \n    return lowest_sum if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    lowest_sum = sum(min(lst) for lst in harmonicity.values() if len(lst) > 1)\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            if group[i] >= a and group[i] <= b:\n                lowest_members_sum += group[i]\n                found_pairs = True\n                break  # Only count the lowest member once per group\n    \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowers += min(members)\n            found_pairs = True\n            \n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pair = False\n    \n    for group in harmonicity.values():\n        if len(group) > 1:\n            group = sorted(filter(lambda x: a <= x <= b, group))\n            if len(group) > 1:\n                sum_of_lowers += group[0]\n                found_pair = True\n\n    return sum_of_lowers if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pair = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_lowest += min(members)\n            found_pair = True\n    \n    return sum_lowest if found_pair else 0\n```"
        ],
        "1": [
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    for group in HARMO_GROUPS.values():\n        valid_pairs = [n for n in group if a <= n < b]\n        if len(valid_pairs) >= 2:\n            lowest_members_sum += valid_pairs[0]\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    if a < 0:\n        a = 0\n    if b > 2000:\n        b = 2000\n\n    sum_of_lowest_members = 0\n    seen_ratios = {}\n    \n    for n in range(a, b):\n        divisor_sum = sum(x for x in range(1, n + 1) if n % x == 0)\n        ratio = divisor_sum / n\n        \n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = n\n        else:\n            sum_of_lowest_members += min(seen_ratios[ratio], n)\n            del seen_ratios[ratio]  # remove to avoid double counting\n    \n    return sum_of_lowest_members if sum_of_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    return sum(min(p) for p in ratios.values() if len(p) > 1) if any(len(p) > 1 for p in ratios.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for key, values in harmonicity.items():\n        if len(values) > 1:\n            found_pair = True\n            lowest_sum += min(values)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lows = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_mins = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n\n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in pairs:\n                pairs[ratio].append(n)\n            else:\n                pairs[ratio] = [n]\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for group in pairs.values():\n        if len(group) > 1:\n            found_pair = True\n            lowest_sum += min(group)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    harmonic_ratios = {n: harmonic[n] / n for n in range(a, b) if n > 0}\n    \n    pairs = {}\n    for n1 in harmonic_ratios:\n        for n2 in harmonic_ratios:\n            if n1 < n2 and harmonic_ratios[n1] == harmonic_ratios[n2]:\n                if harmonic_ratios[n1] not in pairs:\n                    pairs[harmonic_ratios[n1]] = []\n                pairs[harmonic_ratios[n1]].append((n1, n2))\n    \n    lowest_sum = sum(min(pair) for group in pairs.values() for pair in group)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(list)\n    for n in range(max(1, a), min(b, 2000)):\n        sum_div = sum_of_divisors(n)\n        ratio = Fraction(sum_div, n)\n        harmonicity[ratio].append(n)\n\n    lowest_members_sum = 0\n    found_pair = False\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            lowest_members_sum += min(numbers)\n            found_pair = True\n            \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for i in range(1, int(n**0.5) + 1) if n % i == 0 for d in (i, n // i) if d <= n) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    sum_lowest = 0\n    has_pairs = False\n    \n    for group in harmonicity.values():\n        if len(group) > 1:\n            sum_lowest += min(group)\n            has_pairs = True\n            \n    return sum_lowest if has_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(list)\n    for n in range(a, b):\n        s = sum_of_divisors(n)\n        ratio = Fraction(s, n) if n != 0 else None\n        if ratio is not None:\n            harmonicity[ratio].append(n)\n\n    lowest_members_sum = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            lowest_members_sum += min(numbers)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    lowest_sum = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(set)\n    \n    for n in range(a, b):\n        s = sum_of_divisors(n)\n        if n != 0:\n            ratio = Fraction(s, n)\n            harmonicity[ratio].add(n)\n\n    sum_of_lows = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    harmonicity = defaultdict(set)\n    \n    for n in range(max(1, a), min(b + 1, 2000)):\n        sum_div = sum(x for x in range(1, n + 1) if n % x == 0)\n        ratio = sum_div / n\n        harmonicity[ratio].add(n)\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            found_pairs = True\n            \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members = set()\n    for members in HARMO_GROUPS.values():\n        members_in_range = [m for m in members if a <= m < b]\n        if len(members_in_range) >= 2:\n            lowest_members.add(min(members_in_range))\n\n    return sum(lowest_members) if lowest_members else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                pairs.add((group[i], group[j]))\n\n    lowest_members = set(min(pair) for pair in pairs if a <= pair[0] < b and a <= pair[1] < b)\n\n    return sum(lowest_members) if lowest_members else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(set)\n    for n in range(a, b):\n        sum_div = sum_of_divisors(n)\n        if n > 0:\n            ratio = Fraction(sum_div, n)\n            harmonicity[ratio].add(n)\n\n    lowest_members_sum = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        if a <= n <= b:\n            harmonicity[h].add(n)\n\n    sum_of_lowest_members = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n\n    return sum_of_lowest_members if sum_of_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(list)\n    \n    for n in range(a, b):\n        if n > 0:\n            s = sum_of_divisors(n)\n            ratio = Fraction(s, n)\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            total += min(numbers)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    found_pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    if found_pairs:\n        pairs_sum = sum(pair[0] for pair in found_pairs)\n    return pairs_sum\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    ratio_map = {}\n    \n    for n in range(a, b):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in ratio_map:\n            ratio_map[ratio] = []\n        ratio_map[ratio].append(n)\n    \n    sum_of_lowest_members = 0\n    found_pair = False\n    \n    for members in ratio_map.values():\n        if len(members) > 1:\n            sum_of_lowest_members += min(members)\n            found_pair = True\n            \n    return sum_of_lowest_members if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    if not pairs:\n        return 0\n\n    return sum(pair[0] for pair in pairs)\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    ratios = defaultdict(list)\n\n    for n in range(max(a, 1), min(b, 2000)):\n        s = sum_of_divisors(n)\n        if n > 0:\n            ratio = Fraction(s, n)\n            ratios[ratio].append(n)\n\n    lowest_sum = 0\n    for pair in ratios.values():\n        if len(pair) > 1:\n            lowest_sum += min(pair)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    ratio_dict = {}\n\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in ratio_dict:\n            ratio_dict[ratio] = []\n        ratio_dict[ratio].append(n)\n\n    sum_of_lows = sum(min(nums) for nums in ratio_dict.values() if len(nums) > 1)\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_mins = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n    \n    return sum_of_mins if sum_of_mins > 0 else 0\n```"
        ],
        "2": [
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= x < b for x in group):\n            valid_members = [x for x in group if a <= x < b]\n            if len(valid_members) >= 2:\n                pairs_sum += min(valid_members)\n                found_pairs.add(tuple(sorted(valid_members)))\n\n    return pairs_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    ratios = {}\n    for n in range(a, b):\n        if n != 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_lowest = 0\n    for members in ratios.values():\n        if len(members) > 1:\n            sum_of_lowest += min(members)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    if a < 0: a = 0\n    if b > 2000: b = 2000\n    \n    divisor_sum = {}\n    for n in range(a, b):\n        divisor_sum[n] = sum(x for x in range(1, n + 1) if n % x == 0)\n\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = divisor_sum[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    lowest_sum = sum(min(p) for p in ratios.values() if len(p) > 1)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_min = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            sum_of_min += min(numbers)\n    \n    return sum_of_min if sum_of_min > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    pairs = {}\n    for n in range(a, b):\n        if n == 0:\n            continue\n        divisor_sum = sum(x for x in range(1, n + 1) if n % x == 0)\n        ratio = divisor_sum / n\n        if ratio in pairs:\n            pairs[ratio].append(n)\n        else:\n            pairs[ratio] = [n]\n\n    lowest_sum = 0\n    found_pair = False\n    for ratio, numbers in pairs.items():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n\n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, b + 1)]\n    harmonic_ratio = {n: harmonic[n] / n for n in range(a, b) if n != 0}\n    \n    pairs = {}\n    for n1 in harmonic_ratio:\n        for n2 in harmonic_ratio:\n            if n1 < n2 and harmonic_ratio[n1] == harmonic_ratio[n2]:\n                ratio = harmonic_ratio[n1]\n                if ratio not in pairs:\n                    pairs[ratio] = []\n                pairs[ratio].append((n1, n2))\n    \n    lowest_sum = sum(min(pair) for pairs_group in pairs.values() for pair in pairs_group)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        filtered = [num for num in group if a <= num < b]\n        if len(filtered) >= 2:\n            sum_of_lowest += min(filtered)\n            found_pairs = True\n\n    return sum_of_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    sum_of_lows = 0\n    for group in pairs.values():\n        if len(group) > 1:\n            sum_of_lows += min(group)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    total_sum = 0\n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x < b]\n        if len(filtered_group) >= 2:\n            total_sum += min(filtered_group)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(set)\n    for n in range(a, b):\n        sum_div = sum_of_divisors(n)\n        if n != 0:\n            ratio = Fraction(sum_div, n)\n            harmonicity[ratio].add(n)\n\n    lowest_members_sum = 0\n    found_pair = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            found_pair = True\n\n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    for members in HARMO_GROUPS.values():\n        pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n        for x, y in pairs:\n            if a <= x < b and a <= y < b:\n                total_sum += x\n    \n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    ratio_dict = defaultdict(list)\n\n    for n in range(a, b):\n        if n > 0:\n            sum_div = sum_of_divisors(n)\n            ratio = Fraction(sum_div, n)\n            ratio_dict[ratio].append(n)\n\n    lowest_sum = 0\n    for numbers in ratio_dict.values():\n        if len(numbers) > 1:\n            lowest_sum += min(numbers)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total = 0\n    seen = set()\n    \n    for nums in HARMO_GROUPS.values():\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if a <= nums[i] < b and a <= nums[j] < b:\n                    if (nums[i], nums[j]) not in seen and (nums[j], nums[i]) not in seen:\n                        total += min(nums[i], nums[j])\n                        seen.add((nums[i], nums[j]))\n    \n    return total if total > 0 else 0\n```"
        ],
        "3": [
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    for group in HARMO_GROUPS.values():\n        filtered_pairs = [n for n in group if a <= n < b]\n        if len(filtered_pairs) > 1:\n            pairs_sum += min(filtered_pairs)\n\n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for nums in HARMO_GROUPS.values():\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if a <= nums[i] < b and a <= nums[j] < b:\n                    pairs_sum.add(nums[i])\n\n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    if a < 0: a = 0\n    if b > 2000: b = 2000\n    \n    divisor_sum = {}\n    for n in range(a, b):\n        divisor_sum[n] = sum(x for x in range(1, n + 1) if n % x == 0)\n\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = divisor_sum[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    lowest_sum = sum(min(p) for p in ratios.values() if len(p) > 1)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs.add((group[i], group[j]))\n\n    if not pairs:\n        return 0\n\n    return sum(min(pair) for pair in pairs)\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(set)\n    for n in range(max(1, a), b):\n        s = sum_of_divisors(n)\n        ratio = Fraction(s, n)\n        harmonicity[ratio].add(n)\n\n    lowest_members_sum = 0\n    found_pair = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            found_pair = True\n            lowest_members_sum += min(members)\n\n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_min = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            sum_of_min += min(numbers)\n    \n    return sum_of_min\n```",
            "```python\ndef solve(a, b):\n    if a < 0: a = 0\n    if b > 2000: b = 2000\n\n    harmonicity = {}\n    for n in range(a, b):\n        sum_divisors = sum(i for i in range(1, n + 1) if n % i == 0)\n        ratio = sum_divisors / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    lowest_members_sum = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n    \n    lowest_members_sum = sum(pair[0] for pair in pairs)\n    \n    return lowest_members_sum if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = set()\n    \n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    pair = tuple(sorted((members[i], members[j])))\n                    if pair not in found_pairs:\n                        found_pairs.add(pair)\n                        lowest_sum += pair[0]\n    \n    return lowest_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        filtered = [num for num in group if a <= num < b]\n        if len(filtered) > 1:\n            sum_of_lowest += min(filtered)\n            found_pairs = True\n\n    return sum_of_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    sum_of_lows = 0\n    for group in pairs.values():\n        if len(group) > 1:\n            sum_of_lows += min(group)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lows = 0\n    found_pair = False\n    \n    for group in HARMO_GROUPS.values():\n        pair = [n for n in group if a <= n < b]\n        if len(pair) > 1:\n            sum_of_lows += min(pair)\n            found_pair = True\n            \n    return sum_of_lows if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    if a < 0:\n        a = 0\n    if b > 2000:\n        b = 2000\n\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 7001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n\n    for members in HARMO_GROUPS.values():\n        filtered_members = [m for m in members if a <= m < b]\n        if len(filtered_members) > 1:\n            lowest_members_sum += min(filtered_members)\n            found_pairs = True\n\n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(set)\n    \n    for n in range(max(1, a), b):\n        if n < 1:\n            continue\n        s = sum_of_divisors(n)\n        ratio = Fraction(s, n)\n        harmonicity[ratio].add(n)\n\n    lowest_members_sum = 0\n    has_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            has_pairs = True\n\n    return lowest_members_sum if has_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(set)\n    for n in range(a, b):\n        sum_div = sum_of_divisors(n)\n        if n != 0:\n            ratio = Fraction(sum_div, n)\n            harmonicity[ratio].add(n)\n\n    lowest_members_sum = 0\n    found_pair = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            found_pair = True\n\n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    pairs = {}\n    for n in range(max(a, 1), min(b, 2000)):\n        sum_divisors = sum(x for x in range(1, n + 1) if n % x == 0)\n        ratio = sum_divisors / n\n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n    \n    sum_of_min = 0\n    for nums in pairs.values():\n        if len(nums) > 1:\n            sum_of_min += min(nums)\n    \n    return sum_of_min if sum_of_min > 0 else 0\n```"
        ],
        "4": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        if harmonic[n] != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    lowest_sum = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b):\n        if harmonic[n] != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    sum_of_min_members = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_min_members += min(members)\n    \n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_min_members = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_min_members += min(members)\n    \n    return sum_of_min_members\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_members_sum += min(numbers)\n    \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio:\n            if ratio in harmonicity:\n                harmonicity[ratio].append(n)\n            else:\n                harmonicity[ratio] = [n]\n    \n    sum_of_lows = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in pairs:\n                pairs[ratio].append(n)\n            else:\n                pairs[ratio] = [n]\n    \n    sum_of_mins = 0\n    found_pair = False\n    \n    for group in pairs.values():\n        if len(group) > 1:\n            sum_of_mins += min(group)\n            found_pair = True\n    \n    return sum_of_mins if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 7001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    return sum(min(p) for p in harmonicity.values() if len(p) > 1) if any(len(p) > 1 for p in harmonicity.values()) else 0\n```",
            "```python\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in pairs:\n                pairs[ratio].append(n)\n            else:\n                pairs[ratio] = [n]\n\n    return sum(min(pair) for pair in pairs.values() if len(pair) > 1) if any(len(pair) > 1 for pair in pairs.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in ratios.values() if len(p) > 1)\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n    \n    harmonic = [0] + [sum([i for i in range(1, n + 1) if n % i == 0]) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    result_sum = 0\n    for pairs in harmonicity.values():\n        if len(pairs) > 1:\n            result_sum += min(pairs)\n    \n    return result_sum\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    ratio_dict = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in ratio_dict:\n                ratio_dict[ratio].append(n)\n            else:\n                ratio_dict[ratio] = [n]\n    \n    sum_of_mins = sum(min(pairs) for pairs in ratio_dict.values() if len(pairs) > 1)\n    \n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = False\n    \n    for members in HARMO_GROUPS.values():\n        filtered_members = [m for m in members if a <= m < b]\n        if len(filtered_members) > 1:\n            found_pairs = True\n            pairs_sum += min(filtered_members)\n\n    return pairs_sum if found_pairs else 0\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(1, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n\n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    pairs_found = False\n    \n    for numbers in HARMO_GROUPS.values():\n        if any(a <= num <= b for num in numbers):\n            pairs_found = True\n            lowest_sum += numbers[0]\n    \n    return lowest_sum if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    result = sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1)\n    \n    return result if result > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            if group[i] >= a and group[i] <= b:\n                lowest_members_sum += group[i]\n                found_pairs = True\n                break  # Only count the lowest member once per group\n    \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowers += min(members)\n            found_pairs = True\n            \n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = sum(min(pair) for pair in HARMO_GROUPS.values() if any(a <= x <= b for x in pair))\n    \n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_lowest += min(members)\n            found_pairs = True\n    \n    return sum_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [num for num in group if a <= num < b]\n        if len(filtered_group) >= 2:\n            total_sum += filtered_group[0]\n            found_pairs = True\n\n    return total_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    lowest_sum = sum(pair[0] for pair in pairs if a <= pair[0] < b)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    for group in HARMO_GROUPS.values():\n        if group[0] >= a and group[-1] <= b:\n            total_sum += group[0]\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) > 1:\n            lowest_members_sum += min(filtered_group)\n            found_pair = True\n            \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) >= 2:\n            result_sum += min(filtered_group)\n            found_pairs = True\n\n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] <= b and a <= group[j] <= b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return sum(pair[0] for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    found_pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n    \n    if not found_pairs:\n        return 0\n\n    lowest_members_sum = sum(pair[0] for pair in found_pairs)\n    \n    return lowest_members_sum\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lowers = 0\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) >= 2:\n            sum_of_lowers += min(filtered_group)\n\n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    lowest_members_sum = 0\n    \n    for members in HARMO_GROUPS.values():\n        if any(a <= m <= b for m in members):\n            lowest_members_sum += members[0]\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1, n2 = group[i], group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    found_pairs.add(min(n1, n2))\n\n    if found_pairs:\n        return sum(found_pairs)\n    return 0\n```"
        ],
        "1": [
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    if not pairs:\n        return 0\n    \n    return sum(min(pair) for pair in pairs)\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    harmonic_ratio = {n: harmonic[n] / n for n in range(a, b + 1) if n > 0}\n    \n    ratio_groups = {}\n    for n, ratio in harmonic_ratio.items():\n        if ratio not in ratio_groups:\n            ratio_groups[ratio] = []\n        ratio_groups[ratio].append(n)\n    \n    lowest_sum = sum(min(lst) for lst in ratio_groups.values() if len(lst) > 1)\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(list)\n    \n    for n in range(a, b):\n        sod = sum_of_divisors(n)\n        if n > 0:\n            ratio = Fraction(sod, n)\n            harmonicity[ratio].append(n)\n\n    lowest_members_sum = 0\n    found_pair = False\n\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_members_sum += min(numbers)\n\n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    pairs = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in pairs.values() if len(p) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for i in range(1, int(n**0.5) + 1) if n % i == 0 for d in (i, n // i) if d <= n) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    return sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1, n2 = group[i], group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    pairs.add((min(n1, n2), max(n1, n2)))\n\n    if not pairs:\n        return 0\n    \n    return sum(min(pair) for pair in pairs)\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, b + 1)]\n    \n    ratio_map = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_map:\n                ratio_map[ratio] = []\n            ratio_map[ratio].append(n)\n    \n    sum_of_lowers = sum(min(values) for values in ratio_map.values() if len(values) > 1)\n    \n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    ratio_map = {}\n    \n    for n in range(a, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in ratio_map:\n            ratio_map[ratio] = []\n        ratio_map[ratio].append(n)\n\n    sum_of_min = 0\n    found_pair = False\n    \n    for numbers in ratio_map.values():\n        if len(numbers) > 1:\n            sum_of_min += min(numbers)\n            found_pair = True\n    \n    return sum_of_min if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_mins = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n    \n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    pairs = {}\n    \n    for n in range(a, b):\n        sum_divisors = sum(x for x in range(1, n + 1) if n % x == 0)\n        ratio = sum_divisors / n\n        \n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for key, nums in pairs.items():\n        if len(nums) > 1:\n            lowest_members_sum += min(nums)\n            found_pair = True\n    \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    return sum(min(p) for p in harmonicity.values() if len(p) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5)+1) for y in [x, n//x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    return sum(min(pair) for pair in ratios.values() if len(pair) > 1) if any(len(pair) > 1 for pair in ratios.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    return sum(min(p) for p in ratios.values() if len(p) > 1) if any(len(p) > 1 for p in ratios.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    ratio_to_pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_to_pairs:\n                ratio_to_pairs[ratio] = []\n            ratio_to_pairs[ratio].append(n)\n    \n    lowest_sum = 0\n    has_pairs = False\n\n    for pairs in ratio_to_pairs.values():\n        if len(pairs) > 1:\n            has_pairs = True\n            lowest_sum += min(pairs)\n    \n    return lowest_sum if has_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    return sum(min(p) for p in harmonicity.values() if len(p) > 1) if any(len(p) > 1 for p in harmonicity.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    low_members_sum = sum(min(pair) for group in HARMO_GROUPS.values() for pair in zip(group[::2], group[1::2]) if group[0] >= a and group[-1] < b)\n\n    return low_members_sum if low_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        h = harmonic[n] / n if n != 0 else 0\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n\n    return sum(min(pair) for pair in harmonicity.values() if len(pair) > 1) if any(len(pair) > 1 for pair in harmonicity.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    def sum_of_divisors(n):\n        return sum(x + (n // x if x != n // x else 0) for x in range(1, int(n**0.5) + 1) if n % x == 0)\n\n    ratios = defaultdict(list)\n    \n    for n in range(a, b):\n        s = sum_of_divisors(n)\n        if s > 0:\n            ratio = Fraction(s, n)\n            ratios[ratio].append(n)\n\n    return sum(min(lst) for lst in ratios.values() if len(lst) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    ratios = {}\n    for n in range(max(a, 1), b):\n        sod = sum_of_divisors(n)\n        ratio = sod / n if n != 0 else 0\n        if ratio not in ratios:\n            ratios[ratio] = []\n        ratios[ratio].append(n)\n\n    sum_of_lowest = sum(min(numbers) for numbers in ratios.values() if len(numbers) > 1)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    ratio_map = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_map:\n                ratio_map[ratio] = []\n            ratio_map[ratio].append(n)\n    \n    sum_of_lowers = sum(min(pairs) for pairs in ratio_map.values() if len(pairs) > 1)\n\n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(list)\n    \n    for n in range(a, b):\n        s = sum_of_divisors(n)\n        if n > 0:\n            ratio = Fraction(s, n)\n            harmonicity[ratio].append(n)\n\n    sum_of_lowers = 0\n    found_pair = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowers += min(members)\n            found_pair = True\n\n    return sum_of_lowers if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    pairs = {}\n    for n in range(a, b):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio in pairs:\n            pairs[ratio].append(n)\n        else:\n            pairs[ratio] = [n]\n    \n    lowest_sum = sum(min(p) for p in pairs.values() if len(p) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(x for x in range(1, n + 1) if n % x == 0) for n in range(1, 2001)]\n    \n    ratio_dict = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_dict:\n                ratio_dict[ratio] = []\n            ratio_dict[ratio].append(n)\n    \n    total = 0\n    for nums in ratio_dict.values():\n        if len(nums) > 1:\n            total += min(nums)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    harmonic_ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonic_ratios:\n                harmonic_ratios[ratio] = []\n            harmonic_ratios[ratio].append(n)\n\n    sum_of_min_members = sum(min(pair) for pair in harmonic_ratios.values() if len(pair) > 1)\n    \n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```"
        ],
        "2": [
            "```python\ndef solve(a, b):\n    if a < 0: a = 0\n    if b > 2000: b = 2000\n\n    harmonicity = {}\n    for n in range(a, b):\n        sum_divisors = sum(i for i in range(1, n + 1) if n % i == 0)\n        ratio = sum_divisors / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    lowest_members_sum = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowers = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    found_pairs.add(min(group[i], group[j]))\n\n    if found_pairs:\n        return sum(found_pairs)\n    else:\n        return 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    seen = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                x, y = group[i], group[j]\n                if a <= x < b and a <= y < b:\n                    if (x, y) not in seen and (y, x) not in seen:\n                        lowest_sum += x\n                        seen.add((x, y))\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return sum(x[0] for x in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    sum_of_lows = sum(min(pair) for pair in pairs.values() if len(pair) > 1)\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = set()\n\n    for numbers in HARMO_GROUPS.values():\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                n1, n2 = numbers[i], numbers[j]\n                if a <= n1 < b and a <= n2 < b:\n                    found_pairs.add((min(n1, n2), max(n1, n2)))\n\n    if not found_pairs:\n        return 0\n    \n    lowest_sum = sum(pair[0] for pair in found_pairs)\n    \n    return lowest_sum\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(set)\n    \n    for n in range(max(1, a), b):\n        if n < 1:\n            continue\n        s = sum_of_divisors(n)\n        ratio = Fraction(s, n)\n        harmonicity[ratio].add(n)\n\n    lowest_members_sum = 0\n    has_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            has_pairs = True\n\n    return lowest_members_sum if has_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    pairs.add((min(members[i], members[j]), max(members[i], members[j])))\n\n    return sum(min(pair) for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    harmonicity = defaultdict(set)\n    for n in range(a, b):\n        sum_div = sum_of_divisors(n)\n        if n != 0:\n            ratio = Fraction(sum_div, n)\n            harmonicity[ratio].add(n)\n\n    lowest_members_sum = 0\n    found_pair = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            found_pair = True\n\n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    for members in HARMO_GROUPS.values():\n        pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n        for x, y in pairs:\n            if a <= x < b and a <= y < b:\n                total_sum += min(x, y)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    if a < 0:\n        a = 0\n    if b > 2000:\n        b = 2000\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    ratios = {}\n    \n    for n in range(a, b):\n        sod = sum_of_divisors(n)\n        if n != 0:\n            ratio = sod / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    lowest_members_sum = 0\n    found_pair = False\n\n    for nums in ratios.values():\n        if len(nums) > 1:\n            found_pair = True\n            lowest_members_sum += min(nums)\n\n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    if not pairs:\n        return 0\n    \n    return sum(min(pair) for pair in pairs)\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    total = 0\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            total += min(nums)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    \n    pairs = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n\n    sum_of_min_members = sum(min(values) for values in pairs.values() if len(values) > 1)\n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n    \n    sum_of_pairs = 0\n    found_pairs = set()\n    \n    def sum_of_divisors(n):\n        return sum(x for x in range(1, n + 1) if n % x == 0)\n\n    ratios = {}\n    \n    for i in range(max(0, a), b):\n        s = sum_of_divisors(i)\n        ratio = s / i if i != 0 else 0\n        if ratio not in ratios:\n            ratios[ratio] = []\n        ratios[ratio].append(i)\n\n    for members in ratios.values():\n        if len(members) > 1:\n            found_pairs.add(min(members))\n\n    return sum(found_pairs) if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n        \n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, b + 1)]\n    pairs = {}\n    \n    for x in range(a, b):\n        if x > 0:\n            ratio = harmonic[x] / x\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(x)\n\n    return sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n```"
        ],
        "3": [
            "```python\ndef solve(a, b):\n    pairs = {}\n    for n in range(a, b):\n        if n == 0:\n            continue\n        divisor_sum = sum(x for x in range(1, n + 1) if n % x == 0)\n        ratio = divisor_sum / n\n        if ratio in pairs:\n            pairs[ratio].append(n)\n        else:\n            pairs[ratio] = [n]\n\n    lowest_sum = 0\n    found_pair = False\n    for ratio, numbers in pairs.items():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n\n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, b + 1)]\n    harmonic_ratio = {n: harmonic[n] / n for n in range(a, b) if n != 0}\n    \n    pairs = {}\n    for n1 in harmonic_ratio:\n        for n2 in harmonic_ratio:\n            if n1 < n2 and harmonic_ratio[n1] == harmonic_ratio[n2]:\n                if harmonic_ratio[n1] not in pairs:\n                    pairs[harmonic_ratio[n1]] = []\n                pairs[harmonic_ratio[n1]].append((n1, n2))\n    \n    lowest_sum = sum(min(pair) for group in pairs.values() for pair in group)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = set()\n    \n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    pair = tuple(sorted((members[i], members[j])))\n                    if pair not in found_pairs:\n                        found_pairs.add(pair)\n                        lowest_sum += pair[0]\n    \n    return lowest_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs.add((group[i], group[j]))\n\n    return sum(min(pair) for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    sum_of_lows = 0\n    for group in pairs.values():\n        if len(group) > 1:\n            sum_of_lows += min(group)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = set()\n\n    for numbers in HARMO_GROUPS.values():\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                n1, n2 = numbers[i], numbers[j]\n                if a <= n1 < b and a <= n2 < b:\n                    found_pairs.add((min(n1, n2), max(n1, n2)))\n\n    if not found_pairs:\n        return 0\n    \n    lowest_sum = sum(pair[0] for pair in found_pairs)\n    \n    return lowest_sum\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(j for j in range(1, n + 1) if n % j == 0) for n in range(1, 2001)]\n    ratio_dict = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in ratio_dict:\n                ratio_dict[ratio].append(n)\n            else:\n                ratio_dict[ratio] = [n]\n    \n    return sum(min(pair) for pair in ratio_dict.values() if len(pair) > 1) if ratio_dict else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    total_sum = 0\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            total_sum += min(nums)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    \n    pairs = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n\n    sum_of_min_members = sum(min(values) for values in pairs.values() if len(values) > 1)\n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    sum_of_lowest_members = 0\n    found_pair = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowest_members += min(members)\n            found_pair = True\n            \n    return sum_of_lowest_members if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n    \n    sum_of_pairs = 0\n    found_pairs = set()\n    \n    def sum_of_divisors(n):\n        return sum(x for x in range(1, n + 1) if n % x == 0)\n\n    ratios = {}\n    \n    for i in range(a, b):\n        s = sum_of_divisors(i)\n        ratio = s / i if i != 0 else 0\n        if ratio not in ratios:\n            ratios[ratio] = []\n        ratios[ratio].append(i)\n    \n    for members in ratios.values():\n        if len(members) > 1:\n            found_pairs.add(min(members))\n    \n    return sum(found_pairs) if found_pairs else 0\n```"
        ],
        "4": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio:\n            if ratio in harmonicity:\n                harmonicity[ratio].append(n)\n            else:\n                harmonicity[ratio] = [n]\n    \n    sum_of_lows = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n\n    lowest_sum = 0\n    found_pair = False\n    \n    for group in pairs.values():\n        if len(group) > 1:\n            found_pair = True\n            lowest_sum += min(group)\n\n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    return sum(min(pair) for pair in harmonicity.values() if len(pair) > 1) if any(len(pair) > 1 for pair in harmonicity.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in ratios.values() if len(p) > 1)\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n    \n    harmonic = [0] + [sum([i for i in range(1, n + 1) if n % i == 0]) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    result_sum = 0\n    for pairs in harmonicity.values():\n        if len(pairs) > 1:\n            result_sum += min(pairs)\n    \n    return result_sum if result_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    ratio_dict = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in ratio_dict:\n                ratio_dict[ratio].append(n)\n            else:\n                ratio_dict[ratio] = [n]\n    \n    sum_of_mins = sum(min(pairs) for pairs in ratio_dict.values() if len(pairs) > 1)\n    \n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n > 0 else None\n        if ratio is not None:\n            if ratio in harmonicity:\n                harmonicity[ratio].append(n)\n            else:\n                harmonicity[ratio] = [n]\n\n    sum_of_mins = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n    \n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    if b > 2000:\n        b = 2000\n    harmonic = [0] + [sum([j for j in range(1, n + 1) if n % j == 0]) for n in range(1, b + 1)]\n    \n    pairs = {}\n    for n in range(max(0, a), b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n    \n    total = 0\n    for lst in pairs.values():\n        if len(lst) > 1:\n            total += min(lst)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_of_lows = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    return sum(min(p) for p in ratios.values() if len(p) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(x for x in range(1, n + 1) if n % x == 0) for n in range(1, 2000)]\n    \n    pairs = {}\n    for n in range(max(a, 1), min(b, 2000)):\n        ratio = harmonic[n] / n\n        if ratio in pairs:\n            pairs[ratio].append(n)\n        else:\n            pairs[ratio] = [n]\n    \n    lowest_members_sum = 0\n    found_pair = False\n    for group in pairs.values():\n        if len(group) > 1:\n            lowest_members_sum += min(group)\n            found_pair = True\n    \n    return lowest_members_sum if found_pair else 0\n```"
        ]
    }
}