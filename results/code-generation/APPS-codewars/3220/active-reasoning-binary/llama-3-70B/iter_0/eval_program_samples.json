{
    "0": {
        "0": [
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b) if any(a <= min(HARMO_GROUPS[r]) < b for r in HARMO_RATIOS) else 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b)",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[ratio]) for ratio in HARMO_RATIOS if a <= min(HARMO_GROUPS[ratio]) < b) if any(a <= min(HARMO_GROUPS[ratio]) < b for ratio in HARMO_RATIOS) else 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[ratio]) for ratio in HARMO_RATIOS if a <= min(HARMO_GROUPS[ratio]) < b)",
            "def solve(a,b):\n    result = 0\n    i = bisect(HARMO_NUM, a)\n    while i < len(HARMO_NUM) and HARMO_NUM[i] < b:\n        result += HARMO_NUM[i]\n        i += 1\n    return result if result > 0 else 0",
            "def solve(a,b):\n    return sum(n for n in HARMO_NUM if a <= n < b and n in HARMO_RATIOS) if any(a <= n < b for n in HARMO_NUM) else 0",
            "def solve(a, b):\n    return sum(min(HARMO_GROUPS[ratio]) for ratio in HARMO_RATIOS if a <= min(HARMO_GROUPS[ratio]) < b)",
            "def solve(a, b):\n    res = [n for n in HARMO_NUM if a <= n < b]\n    return sum(min(HARMO_GROUPS[HARMO_RATIOS[n]]) for n in res) if res else 0",
            "def solve(a,b):\n    return sum(HARMO_GROUPS[ratio][0] for ratio in HARMO_GROUPS if HARMO_GROUPS[ratio][0] >= a and HARMO_GROUPS[ratio][0] < b)",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, x)-1] for x in range(a,b) if HARMO_RATIOS.get(x, None) != None)",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[ratio]) for ratio in HARMO_RATIOS if a <= min(HARMO_GROUPS[ratio]) < b)",
            "def solve(a,b): \n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b)",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[h]) for h in HARMO_GROUPS if any(a <= n < b for n in HARMO_GROUPS[h])) if any(any(a <= n < b for n in HARMO_GROUPS[h]) for h in HARMO_GROUPS) else 0",
            "def solve(a,b):\n    return sum(n for n in HARMO_NUM if a <= n < b and any(a <= m < b for m in HARMO_GROUPS[HARMO_RATIOS[n]] if m != n))",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[h]) for h in set(HARMO_RATIOS[n] for n in range(a,b)) if len(HARMO_GROUPS[h]) > 0) if any(HARMO_RATIOS.get(n) for n in range(a,b)) else 0",
            "def solve(a,b): \n    result = [n for n in HARMO_NUM if a <= n < b]\n    return sum(min(HARMO_GROUPS[HARMO_RATIOS[n]]) for n in result) if result else 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in set(HARMO_RATIOS[n] for n in range(a,b) if n in HARMO_RATIOS) if min(HARMO_GROUPS[r]) >= a and max(HARMO_GROUPS[r]) < b) if any(min(HARMO_GROUPS[r]) >= a and max(HARMO_GROUPS[r]) < b for r in set(HARMO_RATIOS[n] for n in range(a,b) if n in HARMO_RATIOS)) else 0",
            "def solve(a, b):\n    return sum(min(HARMO_GROUPS[r]) for r in set(HARMO_RATIOS[n] for n in range(a, b) if n in HARMO_RATIOS) if min(HARMO_GROUPS[r]) >= a and max(HARMO_GROUPS[r]) < b) if any(min(HARMO_GROUPS[r]) >= a and max(HARMO_GROUPS[r]) < b for r in set(HARMO_RATIOS[n] for n in range(a, b) if n in HARMO_RATIOS)) else 0",
            "def solve(a, b):\n    result = 0\n    idx = bisect(HARMO_NUM, a)\n    for n in HARMO_NUM[idx:]:\n        if n >= b:\n            break\n        result += n\n    return result if result else 0",
            "def solve(a,b):\n    return sum(HARMO_GROUPS[h][0] for h in set(HARMO_RATIOS[n] for n in range(a,b)) if HARMO_GROUPS[h][0] >= a and HARMO_GROUPS[h][0] < b) or 0"
        ],
        "1": [
            "def solve(a, b):\n    return sum(min(HARMO_GROUPS[r]) for r in set(HARMO_RATIOS[n] for n in range(a, b) if n in HARMO_RATIOS) if min(HARMO_GROUPS[r]) >= a and max(HARMO_GROUPS[r]) < b) if any(min(HARMO_GROUPS[r]) >= a and max(HARMO_GROUPS[r]) < b for r in set(HARMO_RATIOS[n] for n in range(a, b) if n in HARMO_RATIOS)) else 0"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[ratio]) for ratio in HARMO_RATIOS if a <= min(HARMO_GROUPS[ratio]) < b)",
            "def solve(a,b): \n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b)",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[h]) for h in HARMO_GROUPS if any(a <= n < b for n in HARMO_GROUPS[h])) if any(any(a <= n < b for n in HARMO_GROUPS[h]) for h in HARMO_GROUPS) else 0",
            "def solve(a,b):\n    return sum(n for n in HARMO_NUM if a <= n < b and any(a <= m < b for m in HARMO_GROUPS[HARMO_RATIOS[n]] if m != n))",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[h]) for h in set(HARMO_RATIOS[n] for n in range(a,b)) if len(HARMO_GROUPS[h]) > 0) if any(HARMO_RATIOS.get(n) for n in range(a,b)) else 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in set(HARMO_RATIOS[n] for n in range(a,b) if n in HARMO_RATIOS) if min(HARMO_GROUPS[r]) >= a) or 0",
            "def solve(a,b): \n    result = 0\n    i = bisect(HARMO_NUM, a)\n    while i < len(HARMO_NUM) and HARMO_NUM[i] < b:\n        result += HARMO_NUM[i]\n        i += 1\n    return result if result != 0 else 0",
            "def solve(a,b):\n    return sum(HARMO_GROUPS[h][0] for h in set(HARMO_RATIOS[n] for n in range(a,b)) if HARMO_GROUPS[h][0] >= a) if any(HARMO_RATIOS[n] in HARMO_GROUPS for n in range(a,b)) else 0",
            "def solve(a, b):\n    result = 0\n    for n in HARMO_NUM:\n        if a <= n < b:\n            result += n\n    return result if result != 0 else 0",
            "def solve(a, b):\n    return sum(min(HARMO_GROUPS[r]) for r in set(HARMO_RATIOS[n] for n in range(a, b) if n in HARMO_RATIOS) if min(HARMO_GROUPS[r]) >= a and max(HARMO_GROUPS[r]) <= b) if any(min(HARMO_GROUPS[r]) >= a and max(HARMO_GROUPS[r]) <= b for r in set(HARMO_RATIOS[n] for n in range(a, b) if n in HARMO_RATIOS)) else 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b)",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[ratio]) for ratio in HARMO_RATIOS if a <= min(HARMO_GROUPS[ratio]) < b) if any(a <= min(HARMO_GROUPS[ratio]) < b for ratio in HARMO_RATIOS) else 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, x)-1] for x in range(a,b) if x in HARMO_RATIOS) if any(x in HARMO_RATIOS for x in range(a,b)) else 0",
            "def solve(a, b):\n    return sum(min(HARMO_GROUPS[ratio]) for ratio in HARMO_RATIOS if a <= min(HARMO_GROUPS[ratio]) < b) if any(a <= min(HARMO_GROUPS[ratio]) < b for ratio in HARMO_RATIOS) else 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, a):bisect(HARMO_NUM, b)]) if bisect(HARMO_NUM, b) > bisect(HARMO_NUM, a) else 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, n)-1] for n in range(a,b) if HARMO_RATIOS.get(n)) or 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[h]) for h in set(HARMO_RATIOS[n] for n in range(a,b)) if min(HARMO_GROUPS[h]) >= a and min(HARMO_GROUPS[h]) < b) if any(min(HARMO_GROUPS[h]) >= a and min(HARMO_GROUPS[h]) < b for h in set(HARMO_RATIOS[n] for n in range(a,b))) else 0",
            "def solve(a,b):\n    return sum(HARMO_GROUPS[h][0] for h in HARMO_RATIOS if HARMO_GROUPS[h][0] >= a and HARMO_GROUPS[h][0] < b) if any(HARMO_GROUPS[h][0] >= a and HARMO_GROUPS[h][0] < b for h in HARMO_RATIOS) else 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, n) - 1] for n in range(a, b) if bisect(HARMO_NUM, n) > 0 and HARMO_NUM[bisect(HARMO_NUM, n) - 1] >= a) if any(bisect(HARMO_NUM, n) > 0 and HARMO_NUM[bisect(HARMO_NUM, n) - 1] >= a for n in range(a, b)) else 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, x):bisect(HARMO_NUM, b)][0] for x in range(a,b) if x in HARMO_RATIOS) if any(x in HARMO_RATIOS for x in range(a,b)) else 0"
        ],
        "1": [
            "def solve(a, b):\n    return sum(min(HARMO_GROUPS[r]) for r in set(HARMO_RATIOS.get(n) for n in range(a, b)) if r in HARMO_GROUPS and min(HARMO_GROUPS[r]) >= a and max(HARMO_GROUPS[r]) < b) or 0",
            "def solve(a,b):\n    return sum(i for i in HARMO_NUM if a <= i < b and any(j >= a and j < b for j in HARMO_GROUPS[HARMO_RATIOS[i]] if j != i))"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b)",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[ratio]) for ratio in HARMO_RATIOS if a <= min(HARMO_GROUPS[ratio]) < b) if any(a <= min(HARMO_GROUPS[ratio]) < b for ratio in HARMO_RATIOS) else 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, x)-1] for x in range(a,b) if x in HARMO_RATIOS) if any(x in HARMO_RATIOS for x in range(a,b)) else 0",
            "def solve(a,b):\n    total = 0\n    i = bisect(HARMO_NUM, a)\n    while i < len(HARMO_NUM) and HARMO_NUM[i] < b:\n        total += HARMO_NUM[i]\n        i += 1\n    return total",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, n)-1] for n in range(a,b) if HARMO_RATIOS.get(n)) or 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, a):bisect(HARMO_NUM, b)]) if bisect(HARMO_NUM, b) > bisect(HARMO_NUM, a) else 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, x):bisect(HARMO_NUM, x+1)][0] for x in range(a,b) if x in HARMO_RATIOS) if any(x in HARMO_RATIOS for x in range(a,b)) else 0",
            "def solve(a,b):\n    return sum(HARMO_GROUPS[h][0] for h in HARMO_RATIOS if HARMO_GROUPS[h][0] >= a and HARMO_GROUPS[h][0] < b) if any(HARMO_GROUPS[h][0] >= a and HARMO_GROUPS[h][0] < b for h in HARMO_RATIOS) else 0",
            "def solve(a, b):\n    return sum(n for n in HARMO_NUM if a <= n < b and any(a <= m < b for m in HARMO_GROUPS[HARMO_RATIOS[n]] if m != n)) if any(a <= n < b for n in HARMO_NUM) else 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, n) - 1] for n in range(a, b) if bisect(HARMO_NUM, n) > 0 and HARMO_NUM[bisect(HARMO_NUM, n) - 1] >= a) if any(bisect(HARMO_NUM, n) > 0 and HARMO_NUM[bisect(HARMO_NUM, n) - 1] >= a for n in range(a, b)) else 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b) if any(a <= min(HARMO_GROUPS[r]) < b for r in HARMO_RATIOS) else 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b)",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b)",
            "def solve(a,b):\n    return sum(n for n in HARMO_NUM if a <= n < b and n in HARMO_GROUPS[HARMO_RATIOS[n]])",
            "def solve(a, b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b) if any(a <= min(HARMO_GROUPS[r]) < b for r in HARMO_RATIOS) else 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[HARMO_RATIOS[i]]) for i in HARMO_NUM if a <= i < b) if any(a <= i < b for i in HARMO_NUM) else 0",
            "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, x) - 1] for x in range(a, b) if x in HARMO_RATIOS) if any(x in HARMO_RATIOS for x in range(a, b)) else 0",
            "def solve(a,b):\n    return sum(n for n in HARMO_NUM if a <= n < b and n in HARMO_RATIOS) or 0",
            "def solve(a,b):\n    return sum(n for n in HARMO_NUM if a <= n < b and n in HARMO_RATIOS) or 0",
            "def solve(a,b):\n    return sum(min(HARMO_GROUPS[h]) for h in set(HARMO_RATIOS[n] for n in range(a,b)) if len(HARMO_GROUPS[h]) > 0 and min(HARMO_GROUPS[h]) >= a) if any(len(HARMO_GROUPS[h]) > 0 and min(HARMO_GROUPS[h]) >= a for h in set(HARMO_RATIOS[n] for n in range(a,b))) else 0"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    }
}