{
    "0": [
        {
            "content": "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b) if any(a <= min(HARMO_GROUPS[r]) < b for r in HARMO_RATIOS) else 0",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b) if any(a <= min(HARMO_GROUPS[r]) < b for r in HARMO_RATIOS) else 0",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in set(HARMO_RATIOS[n] for n in range(a,b) if n in HARMO_RATIOS)) if any(n in HARMO_RATIOS for n in range(a,b)) else 0",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    return sum(min(HARMO_GROUPS[h]) for h in HARMO_RATIOS if a <= min(HARMO_GROUPS[h]) < b) if any(a <= min(HARMO_GROUPS[h]) < b for h in HARMO_RATIOS) else 0",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(min(HARMO_GROUPS[r]) for r in HARMO_RATIOS if a <= min(HARMO_GROUPS[r]) < b)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(min(HARMO_GROUPS[h]) for h in HARMO_RATIOS if a <= min(HARMO_GROUPS[h]) < b) if any(a <= min(HARMO_GROUPS[h]) < b for h in HARMO_RATIOS) else 0",
            "logp": null
        },
        {
            "content": "def solve(a, b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, a):bisect(HARMO_NUM, b)]) if any(a <= n < b for n in HARMO_NUM) else 0",
            "logp": null
        },
        {
            "content": "def solve(a,b): \n    return sum(HARMO_NUM[bisect(HARMO_NUM, x)-1] for x in range(a,b) if bisect(HARMO_NUM, x) > 0 and HARMO_NUM[bisect(HARMO_NUM, x)-1] >= a)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(min(HARMO_GROUPS[h]) for h in set(HARMO_RATIOS[n] for n in range(a,b)) if h in HARMO_GROUPS and min(HARMO_GROUPS[h]) >= a and min(HARMO_GROUPS[h]) < b) if any(h in HARMO_GROUPS and min(HARMO_GROUPS[h]) >= a and min(HARMO_GROUPS[h]) < b for h in set(HARMO_RATIOS[n] for n in range(a,b))) else 0",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def solve(a,b): \n    return sum(HARMO_NUM[bisect(HARMO_NUM, x)-1] for x in range(a,b) if bisect(HARMO_NUM, x) > 0 and HARMO_NUM[bisect(HARMO_NUM, x)-1] >= a)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    result = 0\n    for num in HARMO_NUM:\n        if a <= num < b:\n            ratio = HARMO_RATIOS[num]\n            group = HARMO_GROUPS[ratio]\n            group.remove(num)\n            result += min(group)\n    return result if result > 0 else 0",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, x)-1] for x in range(a,b) if x in HARMO_RATIOS)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, n) - 1] for n in range(a, b) if n in HARMO_RATIOS) if any(n in HARMO_RATIOS for n in range(a, b)) else 0",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def solve(a,b): \n    return sum(HARMO_NUM[bisect(HARMO_NUM, x)-1] for x in range(a,b) if bisect(HARMO_NUM, x) > 0 and HARMO_NUM[bisect(HARMO_NUM, x)-1] >= a)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, n)-1] for n in range(a,b) if n in HARMO_RATIOS and len(HARMO_GROUPS[HARMO_RATIOS[n]]) > 1) if any(n in HARMO_RATIOS for n in range(a,b)) else 0",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, x)-1] for x in range(a,b) if x in HARMO_RATIOS)",
            "logp": null
        },
        {
            "content": "def solve(a,b):\n    return sum(HARMO_NUM[bisect(HARMO_NUM, n) - 1] for n in range(a, b) if n in HARMO_RATIOS) if any(n in HARMO_RATIOS for n in range(a, b)) else 0",
            "logp": null
        }
    ],
    "3": []
}