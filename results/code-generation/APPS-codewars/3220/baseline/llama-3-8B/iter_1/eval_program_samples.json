{
    "0": {
        "0": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio not in seen_ratios:\n                sum_of_pairs += n\n                seen_ratios.add(ratio)\n    return sum_of_pairs"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n            elif ratios[Fraction(i, j).limit_denominator()][0] == i:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(min(i) for i in ratios.values() if len(i) > 1)\n```"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    }
}