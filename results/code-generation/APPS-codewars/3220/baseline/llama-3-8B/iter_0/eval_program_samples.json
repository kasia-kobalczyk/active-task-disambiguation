{
    "0": {
        "0": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    result = 0\n    seen = set()\n    for n in range(a, b+1):\n        ratio = Fraction(n, n).limit_denominator()\n        for k in sorted(harmonicity.keys()):\n            while k <= ratio and ratio in harmonicity:\n                if n not in seen:\n                    result += n\n                    seen.add(n)\n                ratio //= harmonicity[k][0]\n                k //= harmonicity[k][0]\n    return result",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0"
        ],
        "1": [
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    sol = set()\n    for i in range(a, b + 1):\n        harmonic_numbers = []\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                harmonic_numbers.extend([j, i // j])\n        harmonic_numbers = set(harmonic_numbers)\n        for num in harmonic_numbers:\n            if num in sol:\n                sol.add(i)\n                break\n    return sum(sorted(sol)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,b+1)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0"
        ],
        "2": [
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0"
        ],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).limit_denominator() not in ratios:\n                ratios[Fraction(i, j).limit_denominator()].append(min(i, j))\n    return sum(set(min(i) for i in ratios.values()))\n```"
        ],
        "1": [],
        "2": [
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0"
        ],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0"
        ],
        "1": [],
        "2": [
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[-1] <= b else 0"
        ],
        "3": [
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    nums = sorted(ratios.keys())\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if i > 0 and ratios[nums[i-1]] == ratios[nums[i]]:\n            total -= nums[i-1]\n    return total if a <= nums[0] and nums[-1] <= b else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(n[i:i+2]) for i in range(0, len(n), 2)) if len(n) % 2 == 0 else 0"
        ],
        "4": []
    }
}