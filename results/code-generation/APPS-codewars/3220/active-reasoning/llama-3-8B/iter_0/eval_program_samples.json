{
    "0": {
        "0": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator != 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    }
}