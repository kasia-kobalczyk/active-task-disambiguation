{
    "0": {
        "0": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h != 0:\n            ratio = h / n if n != 0 else None\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    return sum(min(p) for p in harmonicity.values() if len(p) > 1) if any(len(p) > 1 for p in harmonicity.values()) else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            total_sum += min(n for n in group if a <= n <= b)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    return sum(min(pair) for pair in harmonicity.values() if len(pair) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_lowest_members = 0\n    found_pairs = set()\n    \n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                a, b = members[i], members[j]\n                if a >= 0 and b < 2000:\n                    found_pairs.add((min(a, b), max(a, b)))\n\n    if found_pairs:\n        sum_lowest_members = sum(pair[0] for pair in found_pairs)\n\n    return sum_lowest_members if sum_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0]) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    sum_of_lowest_members = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            sum_of_lowest_members += min(numbers)\n    \n    return sum_of_lowest_members if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_lowest = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n    \n    return sum_lowest if sum_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    pairs_sum = 0\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x < b]\n        if len(filtered_group) >= 2:\n            pairs_sum += min(filtered_group)\n\n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x] for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    pair_sum = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            pair_sum += min(members)\n    \n    return pair_sum if pair_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum += min(group[i], group[j])\n                    found_pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return pairs_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n\n    pairs = [pair for group in harmonicity.values() if len(group) > 1 for pair in group]\n    \n    if not pairs:\n        return 0\n\n    return sum(min(pairs[i], pairs[i + 1]) for i in range(0, len(pairs), 2))\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    total = 0\n    for pair in harmonicity.values():\n        if len(pair) > 1:\n            total += min(pair)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_lows = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    sum_of_lowest_members = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_member = min(members)\n            sum_of_lowest_members += lowest_member\n            found_pairs = True\n    \n    return sum_of_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x]) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            total += min(numbers)\n\n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratio_map = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_map:\n                ratio_map[ratio] = []\n            ratio_map[ratio].append(n)\n    \n    sum_of_lows = sum(min(pair) for pair in ratio_map.values() if len(pair) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5)+1) for y in [x, n//x] if n % x == 0]) for n in range(1, 2001)]\n    ratio_pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_pairs:\n                ratio_pairs[ratio] = []\n            ratio_pairs[ratio].append(n)\n    \n    lowest_sum = 0\n    for numbers in ratio_pairs.values():\n        if len(numbers) > 1:\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    pairs_sum = 0\n\n    for n in range(a, b):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in ratios:\n            ratios[ratio] = []\n        ratios[ratio].append(n)\n\n    for ratio in ratios.values():\n        if len(ratio) > 1:\n            pairs_sum += min(ratio)\n\n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = set()\n\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    found_pairs.add((min(members[i], members[j]), max(members[i], members[j])))\n\n    if not found_pairs:\n        return 0\n\n    lowest_sum = sum(pair[0] for pair in found_pairs)\n    return lowest_sum\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for pair in pairs.values():\n        if len(pair) > 1:\n            found_pair = True\n            lowest_sum += min(pair)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```"
        ],
        "1": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n\n    pairs = {h: lst for h, lst in harmonicity.items() if len(lst) > 1}\n    \n    sum_of_lowest = 0\n    found_pair = False\n    \n    for lst in pairs.values():\n        filtered_pairs = [x for x in lst if a <= x < b]\n        if len(filtered_pairs) > 1:\n            sum_of_lowest += min(filtered_pairs)\n            found_pair = True\n    \n    return sum_of_lowest if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            result.add(group[0])\n\n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    return sum(min(pair) for pair in harmonicity.values() if len(pair) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs.add((group[i], group[j]))\n    \n    if not pairs:\n        return 0\n\n    lowest_members_sum = sum(min(pair) for pair in pairs)\n    \n    return lowest_members_sum\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = set()\n    \n    for members in HARMO_GROUPS.values():\n        pairs = []\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if members[i] >= a and members[i] <= b and members[j] >= a and members[j] <= b:\n                    pairs.append((members[i], members[j]))\n        \n        for pair in pairs:\n            if pair not in found_pairs and (pair[1], pair[0]) not in found_pairs:\n                result_sum += pair[0]\n                found_pairs.add(pair)\n    \n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    result_sum = 0\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            result_sum += min(filtered_group)\n\n    return result_sum if result_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x < b]\n        if len(filtered_group) >= 2:\n            lowest_members_sum += filtered_group[0]\n            found_pairs = True\n\n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                a, b = members[i], members[j]\n                if a >= a and b <= b:\n                    found_pairs.add(min(a, b))\n\n    return sum(found_pairs) if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    total = 0\n    for pair in harmonicity.values():\n        if len(pair) > 1:\n            total += min(pair)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            lowest_sum += min(numbers)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    total_sum = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= n <= b for n in lst))\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        valid_numbers = [n for n in group if a <= n <= b]\n        if len(valid_numbers) > 1:\n            sum_of_lowest += min(valid_numbers)\n            found_pairs = True\n\n    return sum_of_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lows = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_of_lowers = sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1)\n\n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    return sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_min_members = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= n <= b for n in lst))\n    \n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            found_pairs = True\n            lowest_members_sum += min(members)\n    \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    lowest_sum = sum(p[0] for p in harmonicity.values() if len(p) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                a_num, b_num = group[i], group[j]\n                if a <= a_num < b and a <= b_num < b:\n                    if (a_num, b_num) not in found_pairs and (b_num, a_num) not in found_pairs:\n                        found_pairs.add((a_num, b_num))\n                        pairs_sum += a_num\n    \n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            pairs = sorted(numbers)\n            sum_of_lowers += pairs[0]\n            found_pairs = True\n\n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            found_pair = True\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n            for pair in pairs:\n                if all(a <= x <= b for x in pair):\n                    sum_lowest += min(pair)\n                    found_pairs = True\n                    \n    return sum_lowest if found_pairs else 0\n```"
        ],
        "2": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    return sum(min(pairs) for pairs in ratios.values() if len(pairs) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    return sum(min(pair) for pair in harmonicity.values() if len(pair) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_lowest_members = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_lowest_members += min(members)\n    \n    return sum_lowest_members if sum_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_lowest_members = 0\n    found_pairs = set()\n    \n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    found_pairs.add((min(members[i], members[j]), max(members[i], members[j])))\n\n    sum_lowest_members = sum(pair[0] for pair in found_pairs)\n    \n    return sum_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        if harmonic[n] != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_of_lows = 0\n    found_pair = False\n    for ratio, nums in harmonicity.items():\n        if len(nums) > 1:\n            sum_of_lows += min(nums)\n            found_pair = True\n\n    return sum_of_lows if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1 = group[i]\n                n2 = group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    found_pairs.add((min(n1, n2), max(n1, n2)))\n\n    if not found_pairs:\n        return 0\n\n    lowest_members_sum = sum(pair[0] for pair in found_pairs)\n    \n    return lowest_members_sum\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum += min(group[i], group[j])\n                    found_pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return pairs_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n\n    pairs_sum = 0\n    found_pairs = False\n\n    for lst in harmonicity.values():\n        if len(lst) > 1:\n            pairs_sum += min(lst)\n            found_pairs = True\n\n    return pairs_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    total = 0\n    for pair in harmonicity.values():\n        if len(pair) > 1:\n            total += min(pair)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    has_pair = False\n\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            has_pair = True\n            \n    return lowest_sum if has_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    sum_of_lowest_members = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_member = min(members)\n            if a <= lowest_member <= b:\n                sum_of_lowest_members += lowest_member\n                found_pairs = True\n\n    return sum_of_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratio_map = {}\n    for n in range(max(a, 1), min(b, 2000) + 1):\n        ratio = harmonic[n] / n\n        if ratio in ratio_map:\n            ratio_map[ratio].append(n)\n        else:\n            ratio_map[ratio] = [n]\n    \n    sum_of_lowers = 0\n    for pairs in ratio_map.values():\n        if len(pairs) > 1:\n            sum_of_lowers += min(pairs)\n    \n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_of_lowers = sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1)\n\n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_lowest = 0\n    for ratio in ratios.values():\n        if len(ratio) > 1:\n            sum_of_lowest += min(ratio)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = False\n\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    lowest_sum += members[i]\n                    found_pairs = True\n\n    return lowest_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for pair in pairs.values():\n        if len(pair) > 1:\n            found_pair = True\n            lowest_sum += min(pair)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    sum_of_lows = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            found_pairs = True\n            \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total_sum = 0\n    for values in harmonicity.values():\n        if len(values) > 1:\n            total_sum += min(values)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    result_sum += min(group[i], group[j])\n                    found_pairs = True\n    \n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    return sum(min(p) for p in ratios.values() if len(p) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            pairs = sorted(numbers)\n            sum_of_lowers += pairs[0]\n            found_pairs = True\n\n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            found_pair = True\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n            for pair in pairs:\n                if all(a <= x <= b for x in pair):\n                    sum_lowest += min(pair)\n                    found_pairs = True\n                    \n    return sum_lowest if found_pairs else 0\n```"
        ],
        "3": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n\n    pairs = {h: lst for h, lst in harmonicity.items() if len(lst) > 1}\n    \n    sum_of_lowest = 0\n    found_pair = False\n    \n    for lst in pairs.values():\n        filtered_pairs = [x for x in lst if a <= x < b]\n        if len(filtered_pairs) > 1:\n            sum_of_lowest += min(filtered_pairs)\n            found_pair = True\n    \n    return sum_of_lowest if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            result.add(min(n for n in group if a <= n <= b))\n\n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    return sum(min(pair) for pair in harmonicity.values() if len(pair) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    \n    for h, nums in HARMO_GROUPS.items():\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if a <= nums[i] < b and a <= nums[j] < b:\n                    pairs.add((min(nums[i], nums[j]), max(nums[i], nums[j])))\n    \n    if not pairs:\n        return 0\n    \n    return sum(x[0] for x in pairs)\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if group[i] >= a and group[j] <= b:\n                    result_sum += group[i]\n                    found_pairs = True\n                    break\n\n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    total = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    pairs_sum = 0\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x < b]\n        if len(filtered_group) >= 2:\n            pairs_sum += min(filtered_group)\n\n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pair = (min(group[i], group[j]), max(group[i], group[j]))\n                    if pair not in found_pairs:\n                        found_pairs.add(pair)\n                        lowest_sum += pair[0]\n\n    return lowest_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_mins = 0\n    found_pair = False\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            sum_of_mins += min(numbers)\n            found_pair = True\n\n    return sum_of_mins if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    has_pair = False\n\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            has_pair = True\n            \n    return lowest_sum if has_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    total_sum = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= n <= b for n in lst))\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            sum_of_lowest += min(n for n in group if a <= n <= b)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b + 1):\n        h = harmonic[n] / n if n != 0 else 0\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    total = 0\n    for group in harmonicity.values():\n        if len(group) > 1:\n            total += min(group)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_lowest = sum(min(nums) for nums in ratios.values() if len(nums) > 1)\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= x <= b for x in lst))\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 7001)]\n    harmonic = [h / n for n, h in enumerate(harmonic) if n > 0]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    pairs = []\n    for group in harmonicity.values():\n        if len(group) > 1:\n            pairs.extend(list(group))\n\n    pairs = sorted(set(pairs))\n    \n    result = sum(n for n in pairs if a <= n <= b)\n    return result if result > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    pairs_found = False\n    \n    for numbers in HARMO_GROUPS.values():\n        if any(a <= num <= b for num in numbers):\n            pairs_found = True\n            lowest_sum += numbers[0]\n    \n    return lowest_sum if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    lowest_sum = sum(min(lst) for lst in harmonicity.values() if len(lst) > 1)\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    result = set()\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= x <= b for x in group):\n            result.add(group[0])\n    \n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowers += min(members)\n            found_pairs = True\n            \n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    for nums in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in nums):\n            total_sum += min(n for n in nums if a <= n <= b)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_lowest_members = 0\n    pairs_found = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] <= b and a <= group[j] <= b:\n                    pairs_found.add((min(group[i], group[j]), max(group[i], group[j])))\n    \n    sum_lowest_members = sum(pair[0] for pair in pairs_found)\n    \n    return sum_lowest_members if pairs_found else 0\n```"
        ],
        "4": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    return sum(min(pairs) for pairs in ratios.values() if len(pairs) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            result.add(min(n for n in group if a <= n <= b))\n\n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_lowest_members = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_lowest_members += min(members)\n    \n    return sum_lowest_members if sum_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_lowest_members = 0\n    found_pairs = set()\n    \n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                a, b = members[i], members[j]\n                if a >= 0 and b < 2000:\n                    found_pairs.add((min(a, b), max(a, b)))\n\n    if found_pairs:\n        sum_lowest_members = sum(pair[0] for pair in found_pairs)\n\n    return sum_lowest_members if sum_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        if harmonic[n] != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_of_lows = 0\n    found_pair = False\n    for ratio, nums in harmonicity.items():\n        if len(nums) > 1:\n            sum_of_lows += min(nums)\n            found_pair = True\n\n    return sum_of_lows if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x < b]\n        if len(filtered_group) >= 2:\n            lowest_members_sum += filtered_group[0]\n            found_pairs = True\n\n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum += min(group[i], group[j])\n                    found_pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return pairs_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n\n    pairs = [values for values in harmonicity.values() if len(values) > 1]\n    lowest_sum = sum(min(pair) for pair in pairs)\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    total = 0\n    for pair in harmonicity.values():\n        if len(pair) > 1:\n            total += min(pair)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    has_pair = False\n\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            has_pair = True\n            \n    return lowest_sum if has_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    sum_of_lowest_members = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_member = min(members)\n            if a <= lowest_member <= b:\n                sum_of_lowest_members += lowest_member\n                found_pairs = True\n\n    return sum_of_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n\n    sum_of_lowers = sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1)\n\n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_min_members = sum(min(nums) for nums in ratios.values() if len(nums) > 1)\n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = set()\n\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    found_pairs.add((min(members[i], members[j]), max(members[i], members[j])))\n\n    if not found_pairs:\n        return 0\n\n    lowest_sum = sum(pair[0] for pair in found_pairs)\n    return lowest_sum\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for pair in pairs.values():\n        if len(pair) > 1:\n            found_pair = True\n            lowest_sum += min(pair)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in ratios:\n            ratios[ratio] = []\n        ratios[ratio].append(n)\n\n    sum_lowest = 0\n    for group in ratios.values():\n        if len(group) > 1:\n            sum_lowest += min(group)\n\n    return sum_lowest if sum_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    pairs_found = False\n    \n    for numbers in HARMO_GROUPS.values():\n        if any(a <= num <= b for num in numbers):\n            pairs_found = True\n            lowest_sum += numbers[0]\n    \n    return lowest_sum if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(min(lst) for lst in harmonicity.values() if len(lst) > 1)\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                a1, a2 = group[i], group[j]\n                if a <= a1 < b and a <= a2 < b:\n                    found_pairs.add((min(a1, a2), max(a1, a2)))\n    \n    if found_pairs:\n        result_sum = sum(pair[0] for pair in found_pairs)\n    \n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n    \n    return sum(min(p) for p in pairs.values() if len(p) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for group in harmonicity.values():\n        if len(group) > 1:\n            group = sorted(filter(lambda x: a <= x <= b, group))\n            if len(group) > 1:\n                sum_of_lowers += group[0]\n                found_pairs = True\n\n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n            for pair in pairs:\n                if all(a <= x <= b for x in pair):\n                    sum_lowest += min(pair)\n                    found_pairs = True\n                    \n    return sum_lowest if found_pairs else 0\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_mins = 0\n    found_pair = False\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            sum_of_mins += min(numbers)\n            found_pair = True\n\n    return sum_of_mins if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    has_pair = False\n\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            has_pair = True\n            \n    return lowest_sum if has_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    total_sum = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        filtered = [n for n in group if a <= n <= b]\n        if len(filtered) >= 2:\n            total_sum += min(filtered)\n            found_pairs = True\n\n    return total_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        valid_numbers = [n for n in group if a <= n <= b]\n        if len(valid_numbers) > 1:\n            sum_of_lowest += valid_numbers[0]\n            found_pairs = True\n\n    return sum_of_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b + 1):\n        h = harmonic[n] / n\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_of_lowers = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    \n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_sum += min(members)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in ratios:\n            ratios[ratio] = []\n        ratios[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in ratios.values() if len(p) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= x <= b for x in lst))\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        filtered_pairs = [n for n in group if a <= n <= b]\n        if len(filtered_pairs) >= 2:\n            pairs_sum.add(filtered_pairs[0])  # Add the lowest member of the pair\n\n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(1, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n\n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    pairs_found = False\n    \n    for numbers in HARMO_GROUPS.values():\n        if any(a <= num <= b for num in numbers):\n            pairs_found = True\n            lowest_sum += numbers[0]\n    \n    return lowest_sum if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(min(lst) for lst in harmonicity.values() if len(lst) > 1)\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) > 1:\n            result_sum += min(filtered_group)\n            found_pairs = True\n    \n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowers += min(members)\n            found_pairs = True\n            \n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            lowest_sum += group[0]\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            found_pairs = True\n            sum_lowest += min(m for m in members if a <= m <= b)\n    \n    return sum_lowest if found_pairs else 0\n```"
        ],
        "1": [
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    total_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if any(a <= x <= b for x in group):\n            lowest = min(x for x in group if a <= x <= b)\n            if lowest not in found_pairs:\n                total_sum += lowest\n                found_pairs.add(lowest)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if any(a <= n < b for n in group):\n            lowest = min(n for n in group if a <= n < b)\n            if lowest not in found_pairs:\n                sum_of_lowest += lowest\n                found_pairs.add(lowest)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in ratios:\n            ratios[ratio] = []\n        ratios[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in ratios.values() if len(p) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= x <= b for x in lst))\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        filtered_pairs = [(group[i], group[j]) for i in range(len(group)) for j in range(i + 1, len(group)) if a <= group[i] < b and a <= group[j] < b]\n        pairs_sum.update(min(pair) for pair in filtered_pairs)\n\n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n\n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in harmonicity:\n                harmonicity[ratio].append(n)\n            else:\n                harmonicity[ratio] = [n]\n    \n    return sum(min(p) for p in harmonicity.values() if len(p) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total_sum = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n    \n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                a1, a2 = group[i], group[j]\n                if a <= a1 < b and a <= a2 < b:\n                    found_pairs.add((min(a1, a2), max(a1, a2)))\n    \n    for pair in found_pairs:\n        pairs_sum += pair[0]\n    \n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for key, values in harmonicity.items():\n        if len(values) > 1:\n            pairs = sorted(values)\n            if any(a <= num < b for num in pairs):\n                found_pairs = True\n                sum_of_lowers += pairs[0]\n\n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            found_pair = True\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n            for pair in pairs:\n                if a <= pair[0] < b and a <= pair[1] < b:\n                    sum_lowest += min(pair)\n                    found_pairs = True\n    \n    return sum_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lowest_members = 0\n    for group in HARMO_GROUPS.values():\n        for i in group:\n            if a <= i < b:\n                sum_of_lowest_members += group[0]  # Adding the first element of the pair\n                break\n\n    return sum_of_lowest_members if sum_of_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if any(a <= n < b for n in group):\n            pair = tuple(n for n in group if a <= n < b)\n            if len(pair) == 2 and pair not in found_pairs:\n                lowest_members_sum += min(pair)\n                found_pairs.add(pair)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        h = harmonic[n] / n if n != 0 else 0\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n\n    lowest_members_sum = 0\n    found_pair = False\n\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            found_pair = True\n\n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for group in HARMO_GROUPS.values():\n        # Filter members within the given range\n        valid_members = [n for n in group if a <= n <= b]\n        if len(valid_members) > 1:\n            found_pair = True\n            lowest_members_sum += min(valid_members)\n    \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) >= 2:\n            result_sum += min(filtered_group)\n            found_pairs = True\n\n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] <= b and a <= group[j] <= b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return sum(pair[0] for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    for group in HARMO_GROUPS.values():\n        if any(a <= x <= b for x in group):\n            lowest_sum += group[0]\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    low_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            min_value = min(n for n in group if a <= n <= b)\n            low_sum += min_value\n            found_pairs.add(tuple(sorted(group)))\n\n    return low_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    lowest_members_sum = 0\n    \n    for members in HARMO_GROUPS.values():\n        filtered_members = [m for m in members if a <= m < b]\n        if len(filtered_members) >= 2:\n            lowest_members_sum += filtered_members[0]\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1, n2 = group[i], group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    found_pairs.add(min(n1, n2))\n\n    if found_pairs:\n        return sum(found_pairs)\n    return 0\n```"
        ],
        "2": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_mins = 0\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            sum_of_mins += min(nums)\n\n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    has_pair = False\n\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            has_pair = True\n            \n    return lowest_sum if has_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    total_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if any(a <= x <= b for x in group):\n            lowest = min(x for x in group if a <= x <= b)\n            if lowest not in found_pairs:\n                total_sum += lowest\n                found_pairs.add(lowest)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if any(a <= n < b for n in group):\n            lowest = min(n for n in group if a <= n < b)\n            sum_of_lowest += lowest\n            found_pairs.add(tuple(sorted(group)))\n\n    return sum_of_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lows = sum(min(members) for members in harmonicity.values() if len(members) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_sum += min(members)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n > 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    return sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_min_members = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= n <= b for n in lst))\n    \n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for i in range(1, int(n**0.5) + 1) if n % i == 0 for d in (i, n // i) if d != n) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(1, len(harmonic)):\n        ratio = harmonic[n] / n\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    sum_of_lowers = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowers += min(members)\n    \n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(1, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total = 0\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            total += min(nums)\n\n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest_members = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x <= b]\n        if len(filtered_group) >= 2:\n            sum_of_lowest_members += filtered_group[0]\n            found_pairs = True\n\n    return sum_of_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    lowest_sum = sum(min(lst) for lst in harmonicity.values() if len(lst) > 1)\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) > 1:\n            result_sum += min(filtered_group)\n            found_pairs = True\n    \n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for i in range(1, int(n**0.5) + 1) if n % i == 0 for d in (i, n // i)) - n for n in range(1, 2001)]\n    harmonic_pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonic_pairs:\n                harmonic_pairs[ratio] = []\n            harmonic_pairs[ratio].append(n)\n\n    lowest_sum = sum(min(pairs) for pairs in harmonic_pairs.values() if len(pairs) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    for nums in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in nums):\n            total_sum += min(n for n in nums if a <= n <= b)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    return sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_lowest += min(members)\n            found_pairs = True\n    \n    return sum_lowest if found_pairs else 0\n```"
        ],
        "3": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_mins = sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1)\n\n    return sum_of_mins if sum_of_mins > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    has_pair = False\n\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            has_pair = True\n            \n    return lowest_sum if has_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    total_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if any(a <= x <= b for x in group):\n            lowest = min(x for x in group if a <= x <= b)\n            if lowest not in found_pairs:\n                total_sum += lowest\n                found_pairs.add(lowest)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        valid_numbers = [n for n in group if a <= n <= b]\n        if len(valid_numbers) > 1:\n            sum_of_lowest += min(valid_numbers)\n            found_pairs = True\n\n    return sum_of_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b + 1):\n        h = harmonic[n] / n if n != 0 else 0\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    total = 0\n    for group in harmonicity.values():\n        if len(group) > 1:\n            total += min(group)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(min(pair) for pair in harmonicity.values() if len(pair) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in ratios:\n            ratios[ratio] = []\n        ratios[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in ratios.values() if len(p) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= x <= b for x in lst))\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        filtered_pairs = [(group[i], group[j]) for i in range(len(group)) for j in range(i + 1, len(group))]\n        for x, y in filtered_pairs:\n            if a <= x <= b and a <= y <= b:\n                pairs_sum.add(min(x, y))\n\n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in harmonicity:\n                harmonicity[ratio].append(n)\n            else:\n                harmonicity[ratio] = [n]\n    \n    return sum(min(p) for p in harmonicity.values() if len(p) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total_sum = 0\n    for values in harmonicity.values():\n        if len(values) > 1:\n            total_sum += min(values)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(p[0] for p in harmonicity.values() if len(p) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                a1, a2 = group[i], group[j]\n                if a <= a1 < b and a <= a2 < b:\n                    found_pairs.add((min(a1, a2), max(a1, a2)))\n    \n    for pair in found_pairs:\n        pairs_sum += pair[0]\n    \n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for group in harmonicity.values():\n        if len(group) > 1:\n            found_pairs = True\n            sum_of_lowers += min(group)\n\n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            found_pair = True\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n            for pair in pairs:\n                if a <= pair[0] < b and a <= pair[1] < b:\n                    sum_lowest += min(pair)\n                    found_pairs = True\n    \n    return sum_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [num for num in group if a <= num < b]\n        if len(filtered_group) >= 2:\n            total_sum += filtered_group[0]\n            found_pairs = True\n\n    return total_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if a <= group[0] < b and a <= group[1] < b:\n            pairs_sum += group[0]\n            found_pairs.add((group[0], group[1]))\n    \n    return pairs_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        h = harmonic[n] / n if n != 0 else 0\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n\n    lowest_members_sum = 0\n    found_pair = False\n\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            found_pair = True\n\n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) > 1:\n            lowest_members_sum += min(filtered_group)\n            found_pair = True\n            \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) >= 2:\n            result_sum += min(filtered_group)\n            found_pairs = True\n\n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] <= b and a <= group[j] <= b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return sum(pair[0] for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            lowest_members_sum += group[0]\n            found_pairs = True\n            \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    low_members_sum = 0\n    found_pairs = set()\n\n    for members in HARMO_GROUPS.values():\n        if any(a <= m <= b for m in members):\n            min_member = min(m for m in members if a <= m <= b)\n            if min_member not in found_pairs:\n                low_members_sum += min_member\n                found_pairs.add(min_member)\n\n    return low_members_sum if low_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    lowest_members_sum = 0\n    \n    for members in HARMO_GROUPS.values():\n        filtered_members = [m for m in members if a <= m < b]\n        if len(filtered_members) >= 2:\n            lowest_members_sum += filtered_members[0]\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) > 1:\n            lowest_members_sum += filtered_group[0]\n            found_pairs = True\n    \n    return lowest_members_sum if found_pairs else 0\n```"
        ],
        "4": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    \n    harmonicity = {}\n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    sum_of_mins = 0\n    found_pair = False\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            sum_of_mins += min(numbers)\n            found_pair = True\n\n    return sum_of_mins if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    has_pair = False\n\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            has_pair = True\n            \n    return lowest_sum if has_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    total_sum = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        filtered = [n for n in group if a <= n <= b]\n        if len(filtered) >= 2:\n            total_sum += min(filtered)\n            found_pairs = True\n\n    return total_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        valid_numbers = [n for n in group if a <= n <= b]\n        if len(valid_numbers) > 1:\n            sum_of_lowest += min(valid_numbers)\n            found_pairs = True\n\n    return sum_of_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 7001)]\n    harmonicity = {}\n    \n    for n in range(1, 7001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lowest_members = 0\n    has_pairs = False\n\n    for members in harmonicity.values():\n        if len(members) > 1:\n            has_pairs = True\n            sum_of_lowest_members += min(members)\n    \n    if not has_pairs:\n        return 0\n\n    return sum_of_lowest_members\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest_sum += min(members)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    ratios = {}\n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_lowest = sum(min(nums) for nums in ratios.values() if len(nums) > 1)\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_min_members = sum(min(lst) for lst in HARMO_GROUPS.values() if any(a <= n <= b for n in lst))\n    \n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(1, b + 1):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    pairs_sum.add(min(group[i], group[j]))\n    \n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_lowest = 0\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            sum_lowest += min(nums)\n    \n    return sum_lowest if sum_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    pairs_found = False\n    \n    for numbers in HARMO_GROUPS.values():\n        if any(a <= num <= b for num in numbers):\n            pairs_found = True\n            lowest_sum += numbers[0]\n    \n    return lowest_sum if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n\n    sum_of_lows = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lows += min(members)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) > 1:\n            result_sum += min(filtered_group)\n            found_pairs = True\n    \n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}) for n in range(1, 2001)]\n    pairs = {}\n    \n    for n in range(a, b):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in pairs:\n            pairs[ratio] = []\n        pairs[ratio].append(n)\n    \n    sum_of_lowers = 0\n    found_pair = False\n    \n    for group in pairs.values():\n        if len(group) > 1:\n            sum_of_lowers += min(group)\n            found_pair = True\n    \n    return sum_of_lowers if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pair = False\n    \n    for group in harmonicity.values():\n        if len(group) > 1:\n            group = sorted(filter(lambda x: a <= x <= b, group))\n            if len(group) > 1:\n                sum_of_lowers += group[0]\n                found_pair = True\n\n    return sum_of_lowers if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 7001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1, n2 = group[i], group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    if (n1, n2) not in found_pairs and (n2, n1) not in found_pairs:\n                        found_pairs.add((n1, n2))\n                        pairs_sum += n1\n\n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if any(a <= n < b for n in group):\n            pair = min(group)  # Get the lowest member of the pair\n            if pair not in found_pairs:\n                lowest_members_sum += pair\n                found_pairs.add(pair)\n\n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lowest = 0\n    for members in HARMO_GROUPS.values():\n        pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n        for x, y in pairs:\n            if a <= x < b and a <= y < b:\n                sum_of_lowest += min(x, y)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            result.add(min(filtered_group))\n    \n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lowest = sum(min(group) for group in HARMO_GROUPS.values() if any(a <= n <= b for n in group))\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            lowest_members_sum += group[0]\n            found_pairs = True\n            \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    low_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            for n in group:\n                if a <= n <= b:\n                    found_pairs.add(n)\n\n    if not found_pairs:\n        return 0\n\n    return sum(found_pairs)\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    lowest_members_sum = 0\n    found_pair = False\n\n    for members in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in members):\n            found_pair = True\n            lowest_members_sum += members[0]\n\n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) > 1:\n            lowest_members_sum += filtered_group[0]\n            found_pairs = True\n    \n    return lowest_members_sum if found_pairs else 0\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_lowest = 0\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            sum_lowest += min(nums)\n    \n    return sum_lowest if sum_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest_members = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x <= b]\n        if len(filtered_group) >= 2:\n            sum_of_lowest_members += filtered_group[0]\n            found_pairs = True\n\n    return sum_of_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(min(lst) for lst in harmonicity.values() if len(lst) > 1)\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        filtered = [x for x in group if a <= x < b]\n        if len(filtered) > 1:\n            result_sum += min(filtered)\n            found_pairs = True\n\n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowers += min(members)\n            found_pairs = True\n            \n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for group in harmonicity.values():\n        if len(group) > 1:\n            group = sorted(filter(lambda x: a <= x <= b, group))\n            if len(group) > 1:\n                sum_of_lowers += group[0]\n                found_pairs = True\n\n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n            for x, y in pairs:\n                if a <= x < b and a <= y < b:\n                    sum_lowest += min(x, y)\n                    found_pairs = True\n\n    return sum_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n    \n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] < b and a <= members[j] < b:\n                    found_pairs.add(members[i])\n                    found_pairs.add(members[j])\n    \n    if found_pairs:\n        return sum(found_pairs)\n    \n    return 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, b + 1)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1 = group[i]\n                n2 = group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    found_pairs.add((min(n1, n2), max(n1, n2)))\n    \n    pairs_sum = sum(pair[0] for pair in found_pairs)\n    \n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0]) for n in range(1, 2001)]\n    \n    ratio_pairs = {}\n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_pairs:\n                ratio_pairs[ratio] = []\n            ratio_pairs[ratio].append(n)\n    \n    lowest_sum = 0\n    for nums in ratio_pairs.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            if a <= group[i] < b:\n                lowest_members_sum += group[i]\n                found_pair = True\n                break\n    \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(x for x in range(1, n + 1) if n % x == 0) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            lowest_sum += min(numbers)\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lowest = sum(min(group) for group in HARMO_GROUPS.values() if any(a <= n <= b for n in group))\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            lowest_members_sum += group[0]\n            found_pairs = True\n            \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    low_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            min_value = min(n for n in group if a <= n <= b)\n            low_sum += min_value\n            found_pairs.add(tuple(sorted(group)))\n\n    return low_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    lowest_sum = 0\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            lowest_sum += filtered_group[0]\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        if harmonic[n] != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            total += min(nums)\n\n    return total if total > 0 else 0\n```"
        ],
        "1": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, b + 1)]\n    harmonicity = {}\n    \n    for n in range(1, b + 1):\n        if n == 0:\n            continue\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total = 0\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            total += min(nums)\n\n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    pairs_found = False\n    \n    for numbers in HARMO_GROUPS.values():\n        if any(a <= num <= b for num in numbers):\n            pairs_found = True\n            lowest_sum += numbers[0]\n    \n    return lowest_sum if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(p[0] for p in harmonicity.values() if len(p) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        filtered = [x for x in group if a <= x < b]\n        if len(filtered) > 1:\n            result_sum += min(filtered)\n            found_pairs = True\n\n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    return sum(min(p) for p in ratios.values() if len(p) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for group in harmonicity.values():\n        if len(group) > 1:\n            group = sorted(filter(lambda x: a <= x <= b, group))\n            if len(group) > 1:\n                sum_of_lowers += group[0]\n                found_pairs = True\n\n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            found_pairs = True\n            sum_lowest += min(members)\n    \n    return sum_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 7001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = []\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) > 1:\n            pairs.append(filtered_group)\n\n    lowest_sum = sum(pair[0] for pair in pairs)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        if any(a <= n < b for n in group):\n            pair = min(group)\n            if pair not in found_pairs:\n                lowest_members_sum += pair\n                found_pairs.add(pair)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) > 1:\n            lowest_members_sum += min(filtered_group)\n            found_pair = True\n            \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            result.add(min(filtered_group))\n    \n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] <= b and a <= group[j] <= b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return sum(pair[0] for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    found_pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n    \n    if not found_pairs:\n        return 0\n\n    lowest_members_sum = sum(pair[0] for pair in found_pairs)\n    \n    return lowest_members_sum\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    low_members_sum = 0\n    found_pairs = set()\n\n    for members in HARMO_GROUPS.values():\n        if any(a <= m <= b for m in members):\n            min_member = min(m for m in members if a <= m <= b)\n            if min_member not in found_pairs:\n                low_members_sum += min_member\n                found_pairs.add(min_member)\n\n    return low_members_sum if low_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    lowest_sum = sum(min(group) for group in HARMO_GROUPS.values() if any(a <= x <= b for x in group))\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members = set()\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if a <= members[i] <= b and a <= members[j] <= b:\n                    lowest_members.add(min(members[i], members[j]))\n\n    return sum(lowest_members) if lowest_members else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    return sum(min(lst) for lst in harmonicity.values() if len(lst) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    ratios = {}\n\n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in ratios:\n                ratios[ratio].append(n)\n            else:\n                ratios[ratio] = [n]\n\n    result = sum(min(p) for p in ratios.values() if len(p) > 1)\n\n    return result if result > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if members[i] >= a and members[j] <= b:\n                    result.add(members[i])\n\n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_member_sum = 0\n    found_pairs = False\n    \n    for members in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in members):\n            found_pairs = True\n            lowest_member_sum += members[0]\n    \n    return lowest_member_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_minimums = sum(min(lst) for lst in ratios.values() if len(lst) > 1)\n    \n    return sum_of_minimums if sum_of_minimums > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1, n2 = group[i], group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    pairs.add((min(n1, n2), max(n1, n2)))\n\n    return sum(pair[0] for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    total = 0\n    found_pairs = False\n\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pairs = True\n            total += min(numbers)\n    \n    return total if found_pairs else 0\n```"
        ],
        "2": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for i in range(1, int(n**0.5) + 1) if n % i == 0 for d in (i, n // i) if d != n) for n in range(1, 2001)]\n    \n    ratio_pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_pairs:\n                ratio_pairs[ratio] = []\n            ratio_pairs[ratio].append(n)\n\n    lowest_members_sum = sum(min(pair) for pair in ratio_pairs.values() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(j for j in range(1, n + 1) if n % j == 0) for n in range(1, 2001)]\n    ratio_pairs = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratio_pairs:\n                ratio_pairs[ratio] = []\n            ratio_pairs[ratio].append(n)\n    \n    sum_lowest_members = sum(min(pairs) for pairs in ratio_pairs.values() if len(pairs) > 1)\n    \n    return sum_lowest_members if sum_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    sum_of_lowest_members = 0\n    found_pairs = False\n\n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x <= b]\n        if len(filtered_group) >= 2:\n            sum_of_lowest_members += filtered_group[0]\n            found_pairs = True\n\n    return sum_of_lowest_members if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    result = sum(min(pairs) for pairs in harmonicity.values() if len(pairs) > 1)\n    \n    return result if result > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        filtered = [x for x in group if a <= x <= b]\n        if len(filtered) > 1:\n            result_sum += min(filtered)\n            found_pairs = True\n\n    return result_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for i in range(1, int(n**0.5) + 1) if n % i == 0 for d in (i, n // i)) - n for n in range(1, 2001)]\n    harmonic_pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonic_pairs:\n                harmonic_pairs[ratio] = []\n            harmonic_pairs[ratio].append(n)\n\n    lowest_sum = sum(min(pairs) for pairs in harmonic_pairs.values() if len(pairs) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = 0\n    for nums in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in nums):\n            total_sum += min(n for n in nums if a <= n <= b)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    return sum(min(pair) for pair in harmonicity.values() if len(pair) > 1) or 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_lowest_members = 0\n    pairs_found = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] <= b and a <= group[j] <= b:\n                    pairs_found.add((min(group[i], group[j]), max(group[i], group[j])))\n    \n    sum_lowest_members = sum(pair[0] for pair in pairs_found)\n    \n    return sum_lowest_members if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for members in HARMO_GROUPS.values():\n        pairs_in_range = [m for m in members if a <= m < b]\n        if len(pairs_in_range) > 1:\n            lowest_members_sum += pairs_in_range[0]\n            found_pairs = True\n\n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    lowest_sum = 0\n    found_pairs = False\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group) - 1):\n            if a <= group[i] < b and a <= group[i + 1] < b:\n                lowest_sum += group[i]\n                found_pairs = True\n\n    return lowest_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            if a <= group[i] < b:\n                lowest_members_sum += group[i]\n                found_pair = True\n                break\n    \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    pairs_sum = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            lowest = min(members)\n            pairs_sum += lowest\n\n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if group[i] >= a and group[j] <= b:\n                    pairs.add((group[i], group[j]))\n\n    return sum(min(pair) for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            lowest_members_sum += group[0]\n            found_pairs = True\n            \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            found_pairs = True\n            lowest_sum += group[0]\n\n    return lowest_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    lowest_sum = 0\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            lowest_sum += filtered_group[0]\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, b + 1)]\n    \n    harmonicity = {}\n    for n in range(a, b + 1):\n        if harmonic[n] != 0:\n            ratio = harmonic[n] / n\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            total += min(nums)\n\n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    pairs = {}\n    for n in range(a, b):\n        if n > 0:\n            sum_divisors = sum(x for x in range(1, n // 2 + 1) if n % x == 0) + n\n            ratio = sum_divisors / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_min_members = sum(min(p) for p in pairs.values() if len(p) > 1)\n    \n    return sum_of_min_members if sum_of_min_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lowest = 0\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            sum_of_lowest += min(filtered_group)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    for members in HARMO_GROUPS.values():\n        for i in range(len(members)):\n            for j in range(i + 1, len(members)):\n                if members[i] >= a and members[j] <= b:\n                    result.add(members[i])\n\n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(1, 2001):\n        h = harmonic[n] / n\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    total_sum = 0\n    has_pairs = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            total_sum += min(numbers)\n            has_pairs = True\n            \n    return total_sum if has_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = sum(min(group) for group in HARMO_GROUPS.values() if any(a <= x <= b for x in group))\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = set()\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                x = group[i]\n                y = group[j]\n                if a <= x < b and a <= y < b:\n                    found_pairs.add((min(x, y), max(x, y)))\n\n    if found_pairs:\n        lowest_sum = sum(x for x, _ in found_pairs)\n        return lowest_sum\n    \n    return 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lows = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n    \n    return sum_of_lows if sum_of_lows > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1, n2 = group[i], group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    pairs.add((min(n1, n2), max(n1, n2)))\n\n    return sum(pair[0] for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(min(numbers) for numbers in harmonicity.values() if len(numbers) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```"
        ],
        "3": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n    \n    lowest_members_sum = sum(min(pair) for ratio, pair in harmonicity.items() if len(pair) > 1)\n    \n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio in harmonicity:\n            harmonicity[ratio].append(n)\n        else:\n            harmonicity[ratio] = [n]\n\n    lowest_members_sum = sum(min(p) for p in harmonicity.values() if len(p) > 1)\n\n    return lowest_members_sum if lowest_members_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    pairs_found = False\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= num <= b for num in group):\n            pairs_found = True\n            lowest_sum += group[0]\n    \n    return lowest_sum if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n        \n    lowest_sum = sum(min(lst) for lst in harmonicity.values() if len(lst) > 1)\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    result.add(min(group[i], group[j]))\n\n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**.5)+1) for y in [x, n//x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowers += min(members)\n            found_pairs = True\n            \n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    total_sum = sum(min(pair) for pair in HARMO_GROUPS.values() if any(a <= x <= b for x in pair))\n    \n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    \n    pairs = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in pairs:\n                pairs[ratio] = []\n            pairs[ratio].append(n)\n\n    sum_of_lowest = sum(min(lst) for lst in pairs.values() if len(lst) > 1)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            found_pairs = True\n            sum_lowest += min(members)\n    \n    return sum_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lowest_members = 0\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group) - 1):\n            if a <= group[i] < b and a <= group[i + 1] < b:\n                sum_of_lowest_members += group[i]\n\n    return sum_of_lowest_members if sum_of_lowest_members > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, b + 1)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x < b]\n        if len(filtered_group) >= 2:\n            lowest_sum += filtered_group[0]\n            found_pairs = True\n\n    return lowest_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            if a <= group[i] < b:\n                lowest_members_sum += group[i]\n                found_pair = True\n                break\n    \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    pairs_sum = 0\n    found_pairs = set()\n    \n    for group in harmonicity.values():\n        if len(group) > 1:\n            lowest = min(group)\n            found_pairs.add(lowest)\n            for num in group:\n                if num != lowest:\n                    pairs_sum += lowest\n    \n    return pairs_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lowest = sum(min(group) for group in HARMO_GROUPS.values() if any(a <= n <= b for n in group))\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    for group in HARMO_GROUPS.values():\n        if any(a <= x <= b for x in group):\n            lowest_sum += group[0]\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            found_pairs = True\n            lowest_sum += group[0]\n    \n    return lowest_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n\n    lowest_sum = 0\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            lowest_sum += filtered_group[0]\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n in range(a, b + 1):\n        h = harmonic[n] / n if n != 0 else 0\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_of_lowest = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            sum_of_lowest += min(members)\n    \n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in ratios:\n                ratios[ratio].append(n)\n            else:\n                ratios[ratio] = [n]\n\n    sum_of_lowers = sum(group[0] for group in ratios.values() if len(group) > 1)\n\n    return sum_of_lowers if sum_of_lowers > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lowest = 0\n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            sum_of_lowest += min(filtered_group)\n\n    return sum_of_lowest if sum_of_lowest > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    for members in HARMO_GROUPS.values():\n        filtered_members = [x for x in members if a <= x < b]\n        if len(filtered_members) > 1:\n            result.add(min(filtered_members))\n\n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if group[i] >= a and group[i] < b and group[j] >= a and group[j] < b:\n                    result.add(group[i])\n\n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = sum(min(group) for group in HARMO_GROUPS.values() if any(a <= x <= b for x in group))\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = set()\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n < b for n in group):\n            pairs_sum.add(min(n for n in group if a <= n < b))\n\n    return sum(pairs_sum) if pairs_sum else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                a, b = group[i], group[j]\n                if a >= a and b < b:\n                    found_pairs.add((min(a, b), max(a, b)))\n\n    if not found_pairs:\n        return 0\n    \n    return sum(pair[0] for pair in found_pairs)\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    harmonicity = defaultdict(set)\n\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_minimums = 0\n    for members in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in members):\n            sum_of_minimums += min(members)\n\n    return sum_of_minimums if sum_of_minimums > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    sum_of_lows = 0\n    found_pair = False\n    for group in HARMO_GROUPS.values():\n        filtered_group = [x for x in group if a <= x < b]\n        if len(filtered_group) >= 2:\n            sum_of_lows += min(filtered_group)\n            found_pair = True\n    \n    return sum_of_lows if found_pair else 0\n```"
        ],
        "4": [
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else None\n        if ratio is not None:\n            if ratio not in harmonicity:\n                harmonicity[ratio] = []\n            harmonicity[ratio].append(n)\n    \n    total = 0\n    for members in harmonicity.values():\n        if len(members) > 1:\n            total += min(members)\n    \n    return total if total > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio in harmonicity:\n                harmonicity[ratio].append(n)\n            else:\n                harmonicity[ratio] = [n]\n    \n    return sum(min(p) for p in harmonicity.values() if len(p) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n\n    total_sum = 0\n    for values in harmonicity.values():\n        if len(values) > 1:\n            total_sum += min(values)\n\n    return total_sum if total_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = sum(p[0] for p in harmonicity.values() if len(p) > 1)\n    \n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                a1, a2 = group[i], group[j]\n                if a <= a1 < b and a <= a2 < b:\n                    found_pairs.add((min(a1, a2), max(a1, a2)))\n    \n    for pair in found_pairs:\n        pairs_sum += pair[0]\n    \n    return pairs_sum if pairs_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    sum_of_lowers = 0\n    found_pairs = False\n    \n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pairs = True\n            sum_of_lowers += min(numbers)\n\n    return sum_of_lowers if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    lowest_sum = 0\n    found_pair = False\n    \n    for nums in harmonicity.values():\n        if len(nums) > 1:\n            lowest_sum += min(nums)\n            found_pair = True\n    \n    return lowest_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    for n, h in enumerate(harmonic):\n        if h not in harmonicity:\n            harmonicity[h] = []\n        harmonicity[h].append(n)\n    \n    sum_lowest = 0\n    found_pairs = False\n    for members in harmonicity.values():\n        if len(members) > 1:\n            pairs = [(members[i], members[j]) for i in range(len(members)) for j in range(i + 1, len(members))]\n            for x, y in pairs:\n                if a <= x < b and a <= y < b:\n                    sum_lowest += min(x, y)\n                    found_pairs = True\n\n    return sum_lowest if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 7001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    low_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            low_members_sum += filtered_group[0]\n            found_pairs = True\n            \n    return low_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if n % x == 0}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    result = sum(min_pair[0] for min_pair in pairs if a <= min_pair[0] < b)\n    \n    return result if result > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pair = False\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            if a <= group[i] < b:\n                lowest_members_sum += group[i]\n                found_pair = True\n                break\n    \n    return lowest_members_sum if found_pair else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n    \n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result = set()\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n <= b]\n        if len(filtered_group) >= 2:\n            result.add(min(filtered_group))\n    \n    return sum(result) if result else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] <= b and a <= group[j] <= b:\n                    pairs.add((min(group[i], group[j]), max(group[i], group[j])))\n\n    return sum(pair[0] for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    \n    lowest_sum = 0\n    for group in HARMO_GROUPS.values():\n        if any(a <= x <= b for x in group):\n            lowest_sum += group[0]\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    low_sum = 0\n    found_pairs = set()\n    \n    for group in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in group):\n            for i in range(len(group)):\n                for j in range(i + 1, len(group)):\n                    n1, n2 = group[i], group[j]\n                    if a <= n1 <= b and a <= n2 <= b:\n                        found_pairs.add(min(n1, n2))\n\n    return sum(found_pairs) if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    lowest_sum = sum(min(group) for group in HARMO_GROUPS.values() if any(a <= x <= b for x in group))\n\n    return lowest_sum if lowest_sum > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for group in HARMO_GROUPS.values():\n        filtered_group = [n for n in group if a <= n < b]\n        if len(filtered_group) > 1:\n            lowest_members_sum += filtered_group[0]\n            found_pairs = True\n    \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(a, b + 1):\n        ratio = harmonic[n] / n if n != 0 else 0\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    return sum(min(p) for p in harmonicity.values() if len(p) > 1) if harmonicity else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(d for d in range(1, n + 1) if n % d == 0) for n in range(1, 2001)]\n    ratios = {}\n\n    for n in range(a, b + 1):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n\n    sum_of_min = sum(min(nums) for nums in ratios.values() if len(nums) > 1)\n\n    return sum_of_min if sum_of_min > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    result_sum = 0\n    pairs_found = False\n\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                if a <= group[i] < b and a <= group[j] < b:\n                    result_sum += min(group[i], group[j])\n                    pairs_found = True\n\n    return result_sum if pairs_found else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5)+1) for y in [x, n//x] if not n % x) for n in range(1, 2001)]\n    \n    ratio_pairs = {}\n    for n in range(a, b):\n        if n == 0: \n            continue\n        ratio = harmonic[n] / n\n        if ratio not in ratio_pairs:\n            ratio_pairs[ratio] = []\n        ratio_pairs[ratio].append(n)\n\n    lowest_members_sum = 0\n    found_pairs = False\n    for members in ratio_pairs.values():\n        if len(members) > 1:\n            lowest_members_sum += min(members)\n            found_pairs = True\n\n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n    \n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1, 2001)]\n    \n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic): \n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    lowest_members_sum = 0\n    found_pairs = False\n    \n    for members in HARMO_GROUPS.values():\n        if any(a <= n <= b for n in members):\n            found_pairs = True\n            lowest_members_sum += members[0]\n    \n    return lowest_members_sum if found_pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in [x, n // x] if n % x == 0) for n in range(1, 2001)]\n    ratios = {}\n    \n    for n in range(a, b):\n        if n > 0:\n            ratio = harmonic[n] / n\n            if ratio not in ratios:\n                ratios[ratio] = []\n            ratios[ratio].append(n)\n    \n    sum_of_minimums = sum(min(pairs) for pairs in ratios.values() if len(pairs) > 1)\n    \n    return sum_of_minimums if sum_of_minimums > 0 else 0\n```",
            "```python\ndef solve(a, b):\n    from collections import defaultdict\n    from fractions import Fraction\n\n    harmonic = [0] + [Fraction(sum({y for x in range(1, int(n**.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 2001)]\n\n    harmonicity = defaultdict(set)\n    for n, h in enumerate(harmonic):\n        harmonicity[h].add(n)\n\n    HARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\n    \n    pairs = set()\n    for group in HARMO_GROUPS.values():\n        for i in range(len(group)):\n            for j in range(i + 1, len(group)):\n                n1, n2 = group[i], group[j]\n                if a <= n1 < b and a <= n2 < b:\n                    pairs.add((min(n1, n2), max(n1, n2)))\n\n    return sum(pair[0] for pair in pairs) if pairs else 0\n```",
            "```python\ndef solve(a, b):\n    harmonic = [0] + [sum(y for x in range(1, int(n**0.5) + 1) for y in (x, n // x) if n % x == 0) for n in range(1, 2001)]\n    harmonicity = {}\n    \n    for n in range(1, 2001):\n        ratio = harmonic[n] / n\n        if ratio not in harmonicity:\n            harmonicity[ratio] = []\n        harmonicity[ratio].append(n)\n    \n    total = 0\n    found_pair = False\n\n    for numbers in harmonicity.values():\n        if len(numbers) > 1:\n            found_pair = True\n            total += min(numbers)\n    \n    return total if found_pair else 0\n```"
        ]
    }
}