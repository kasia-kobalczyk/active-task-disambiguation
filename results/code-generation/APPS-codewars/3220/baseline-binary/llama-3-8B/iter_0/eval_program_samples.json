{
    "0": {
        "0": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0"
        ],
        "1": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k,sorted([n for n in s])) for k,s in harmonicity.items()))\n    harmony_group = {}\n    for n in range(a,b+1):\n        ratio = harmonic[n]\n        if ratio in harmony_group:\n            harmony_group[ratio].append(n)\n        else:\n            harmony_group[ratio] = [n]\n    return sum([min(harmony_group[r]) for r in harmony_group])",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0"
        ],
        "2": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    harmonicity = defaultdict(set, ((k, s) for k,s in harmonicity.items() if len(s) > 1))\n    ratios = {n: h for h,lst in harmonicity.items() for n in lst}\n    nums = sorted(ratios.keys())\n    s = 0\n    for i in range(len(nums)):\n        if i == len(nums)-1 or ratios[nums[i]] != ratios[nums[i+1]]:\n            s += nums[i]\n    return s",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for k in seen_ratios.values():\n        if len(k) > 1:\n            sum_of_pairs += min(k)\n    return sum_of_pairs if sum_of_pairs > 0 else 0"
        ],
        "3": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = {}\n    for n in range(a, b+1):\n        ratio = str(harmonic[n])\n        if ratio not in seen_ratios:\n            seen_ratios[ratio] = set()\n        seen_ratios[ratio].add(n)\n    for ratio, pair in seen_ratios.items():\n        if len(pair) > 1:\n            sum_of_pairs += min(pair)\n    return sum_of_pairs",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0"
        ],
        "4": [
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    sol = 0\n    cur = float('inf')\n    for num in sorted(range(a,b+1)):\n        ratio = Fraction(harmonic[num]).limit_denominator()\n        if ratio > cur:\n            sol += num\n            cur = ratio\n    return sol",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0"
        ]
    },
    "1": {
        "0": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```"
        ],
        "1": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0"
        ],
        "2": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0"
        ],
        "3": [
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonic = [0] + [Fraction(sum({y for x in range(1,int(n**.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmonic): harmonicity[h].add(n)\n    sum_of_pairs = 0\n    seen_ratios = set()\n    for n in range(a, b+1):\n        if n in harmonicity:\n            ratio = Fraction(harmonic[n], n)\n            if ratio in seen_ratios:\n                sum_of_pairs += n\n            else:\n                seen_ratios.add(ratio)\n    return sum_of_pairs if sum_of_pairs else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0"
        ],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "```\ndef solve(a, b):\n    ratios = defaultdict(list)\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if Fraction(i, j).denominator == 1:\n                ratios[Fraction(i, j)].append((i, j))\n    result = 0\n    for ratio in ratios:\n        ratio_values = list(set(x[0] for x in ratios[ratio])) if ratio_values else []\n        result += min(ratio_values)\n    return result if result > 0 else 0\n```",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0"
        ],
        "1": [
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[:1])"
        ],
        "2": [
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])"
        ],
        "3": [
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmonicity = defaultdict(list)\n    for n in range(a, b + 1):\n        harmonic_divisors = [i for i in range(1, n + 1) if n % i == 0]\n        harmonic_ratio = Fraction(sum(harmonic_divisors), n)\n        harmonicity[harmonic_ratio].append(n)\n    result = []\n    for ratio, group in harmonicity.items():\n        if len(group) > 1:\n            result.append(min(group))\n    return sum(result) if result else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    harmon_groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    harmon_ratos = {n: h for h,lst in harmon_groups.items() for n in lst}\n    harmon_num = sorted(harmon_ratos.keys())\n    result = set()\n    for n in range(a, b+1):\n        if n in harmon_ratos:\n            result.add(n)\n    if not result: return 0\n    return sum(sorted(result)[::2])"
        ],
        "4": [
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    harmony = [0] + [Fraction(sum({y for x in range(1,int(n**0.5)+1) for y in [x, n//x] if not n%x}), n) for n in range(1,2001)]\n    harmonicity = defaultdict(set)\n    for n,h in enumerate(harmony): harmonicity[h].add(n)\n    groups = {h: sorted(s) for h,s in harmonicity.items() if len(s) > 1}\n    ratios = {n: h for h,lst in groups.items() for n in lst}\n    num = sorted(ratios.keys())\n    total = 0\n    for i in range(len(num)):\n        total += num[i]\n        if i > 0 and num[i] / num[i-1] < 1:\n            break\n    return total if total <= b else 0",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])",
            "def solve(a, b):\n    n = [x for x in range(a, b+1) if Fraction(sum({y for y in range(1, int(x**0.5)+1) for z in [y, x//y] if not x%y}), x).denominator == 2]\n    return sum(min(pair) for pair in [(x, y) for x in n for y in n if x < y and Fraction(x, y).denominator == 2 and a <= x and x <= b])"
        ]
    }
}