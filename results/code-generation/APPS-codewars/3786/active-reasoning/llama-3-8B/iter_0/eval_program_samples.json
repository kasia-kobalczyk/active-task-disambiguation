{
    "0": {
        "0": [
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "def siegfried(week, txt):\n    global PATTERNS, CHANGES\n    \n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(change, txt)\n    \n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\", \n               \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    for p, c in zip(patterns, changes.values()):\n        txt = p.sub(lambda m: change(m), txt)\n\n    if week == 1:\n        return txt\n    elif week == 2:\n        return txt.lower()\n    elif week == 3:\n        return txt.capitalize()\n    elif week == 4:\n        return txt.lower().strip().replace(\"ze\", \"the\").replace(\"fis\", \"is\").replace(\"vhat\", \"what\").replace(\"zog\", \"dog\").replace(\"vier\", \"four\").replace(\"voman\", \"woman\")\n    elif week == 5:\n        return txt.lower().replace(\"ou\", \"u\").replace(\"an\", \"un\").replace(\"ink\", \"ing\").replace(\"schm\", \"sm\")\n```"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    patterns = [re.compile(r'(?i)ci|ce|c(?!h)'),\n                re.compile(r'(?i)ph'),\n                re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                re.compile(r'(?i)th|w[rh]?'),\n                re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n\n    changes = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\", \n               \"ph\": \"f\", \n               \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\", \n               \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}\n\n    def change(m):\n        tok = m.group(0)\n        rep = changes.get(tok.lower(), \"\" if None in m.groups() else m.group()[0])\n        if tok[0].isupper():\n            rep = rep.title()\n        return rep\n\n    for i in range(week):\n        for pattern, change in zip(patterns, [re.compile(r'(?i)ci|ce|c(?!h)'), \n                                               re.compile(r'(?i)ph'), \n                                               re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n                                               re.compile(r'(?i)th|w[rh]?'),\n                                               re.compile(r'(?i)ou|an|ing\\b|\\bsm')]):\n            txt = re.sub(pattern, change, txt)\n\n    return txt",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for i in range(week):\n        for pattern, change in zip(PATTERNS, CHANGES.values()):\n            txt = pattern.sub(lambda m: change if i != 2 or not any(c.islower() for c in m.group()) else change(m), txt)\n    return txt\n```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```",
            "```\ndef siegfried(week, txt):\n    for patterns, changes in [(PATTERNS[0], {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\"}), \n                             (PATTERNS[1], {\"ph\": \"f\"}), \n                             (PATTERNS[2], {\"e$\": \"\", r\"(\\w)\\1\": r\"\\1\"}), \n                             (PATTERNS[3], {\"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\"}), \n                             (PATTERNS[4], {\"ou\": \"u\", \"an\": \"un\", \"ing$\": \"ink\", \"sm\": \"schm\"})]:\n        for p, c in zip(patterns, list(changes.values()) + [changes]):\n            txt = p.sub(lambda m: change(m), txt)\n    return txt```"
        ],
        "1": [],
        "2": [
            "def siegfried(week, txt):\n    patterns = PATTERNS[:week]\n    changes = dict((re.escape(key), value) for key, value in list(CHANGES.items())[:week])\n    \n    for p in patterns:\n        txt = p.sub(change, txt)\n    \n    return txt"
        ],
        "3": [
            "def siegfried(week, txt):\n    patterns = PATTERNS[:week]\n    changes = dict((re.escape(key), value) for key, value in list(CHANGES.items())[:week])\n    \n    for p in patterns:\n        txt = p.sub(change, txt)\n    \n    return txt"
        ],
        "4": [
            "def siegfried(week, txt):\n    patterns = PATTERNS[:week]\n    changes = dict((re.escape(key), value) for key, value in list(CHANGES.items())[:week])\n    \n    for p in patterns:\n        txt = p.sub(lambda m: change(m), txt)\n        \n    return txt"
        ]
    }
}