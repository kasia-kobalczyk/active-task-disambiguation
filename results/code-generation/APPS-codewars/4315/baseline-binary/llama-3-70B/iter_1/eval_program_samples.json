{
    "0": {
        "0": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2 if n > 0 else 0",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    m = 2 ** (n - 1)\n    return (m * (m + 1)) // 2 * m",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # return sum(y for x in range(2 ** n) if (x ^ (x >> 1)) != 0)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m // 2)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * ((2 ** n) // 3)\n",
            "def sum_them(n):\n    m = 2 ** n\n    return (m // 2) * m",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n    # This function calculates the sum of y[x] for all x in the range [0, 2 ** n)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # Explanation: The sum of all numbers in y is equivalent to the sum of all numbers in the range [0, 2 ** n) minus the sum of all numbers in the range [0, 2 ** (n - 1)). \n    # The sum of all numbers in the range [0, 2 ** n) is 2 ** n * (2 ** n - 1) // 2 (by the formula for the sum of an arithmetic series). \n    # The sum of all numbers in the range [0, 2 ** (n - 1)) is 2 ** (n - 1) * (2 ** (n - 1) - 1) // 2. \n    # Therefore, the sum of all numbers in y is 2 ** (n - 1) * (2 ** n - 1) // 2."
        ],
        "1": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2 if n > 0 else 0",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    m = 2 ** (n - 1)\n    return (m * (m + 1)) // 2 * m",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # return sum(y for x in range(2 ** n) if y := x ^ (x >> 1)) # This is another way to do it, but it's slower and not recommended for large n.",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m // 2)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * ((2 ** n) // 3)\n",
            "def sum_them(n):\n    m = 2 ** n\n    return (m // 2) * m",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n    # This function works by exploiting the properties of XOR operation and the binary representation of numbers.",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # Explanation: The sum of all numbers in y is equivalent to the sum of all numbers in the range [0, 2 ** n) minus the sum of all numbers in the range [0, 2 ** (n - 1)). \n    # The sum of all numbers in the range [0, 2 ** n) is 2 ** n * (2 ** n - 1) // 2 (by the formula for the sum of an arithmetic series). \n    # The sum of all numbers in the range [0, 2 ** (n - 1)) is 2 ** (n - 1) * (2 ** (n - 1) - 1) // 2. \n    # Therefore, the sum of all numbers in y is 2 ** (n - 1) * (2 ** n - 1) // 2."
        ],
        "2": [
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for i in range(2**n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    total = 0\n    for i in range(2**n):\n        total += i ^ (i // 2)\n    return total"
        ],
        "3": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for i in range(2**n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    total = 0\n    for i in range(2 ** n):\n        total += i ^ (i // 2)\n    return total"
        ],
        "4": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for x in range(2 ** n):\n        total += x ^ (x // 2)\n    return total",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    m = 2 ** (n - 1)\n    return m * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    total = 0\n    for i in range(2 ** n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    total = 2 ** (n - 1) * (2 ** n - 1)\n    return total",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    m = 2 ** n\n    return (m * (m - 1)) // 2",
            "def sum_them(n):\n    return (2 ** (n - 1)) * ((2 ** n) - 1)",
            "def sum_them(n):\n    mask = (1 << n) - 1\n    return mask * ((mask + 1) // 2)"
        ]
    },
    "1": {
        "0": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m // 2)",
            "def sum_them(n):\n    m = 2 ** n\n    return (m // 2) * m",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # This function calculates the sum of y[x] for all x in the range [0, 2 ** n)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n    # This function calculates the sum of the XOR of all numbers from 0 to 2^n - 1 with their corresponding halves.",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n    # This solution is based on the observation that the y array will have the same pattern repeating every 2 bits.",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # This solution uses the formula for the sum of a geometric series. The series in this case starts with 2^(n-1), has 2^n terms, and the common ratio is 2. The formula for the sum of a geometric series is a * (r^n - 1) / (r - 1), where a is the first term, r is the common ratio, and n is the number of terms.",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m // 2)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n",
            "def sum_them(n):\n    m = 2 ** (n - 1)\n    return m * (m + 1) // 2 * m",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1) // 2\n    #return sum(y[x] for x in range(2 ** n))"
        ],
        "1": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m // 2)",
            "def sum_them(n):\n    return 2 ** (n - 1) * ((2 ** n) // 3)\n",
            "def sum_them(n):\n    m = 2 ** n\n    return (m // 2) * m",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # This function calculates the sum of y[x] for all x in the range [0, 2 ** n)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n    # This function calculates the sum of the XOR of all numbers from 0 to 2^n - 1 with their corresponding halves.",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # This solution uses the formula for the sum of a geometric series. The series in this case starts with 2^(n-1), has 2^n terms, and the common ratio is 2. The formula for the sum of a geometric series is a * (r^n - 1) / (r - 1), where a is the first term, r is the common ratio, and n is the number of terms.",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m // 2)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n",
            "def sum_them(n):\n    m = 2 ** (n - 1)\n    return m * (m + 1) // 2 * m",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1) // 2\n    #return sum(y[x] for x in range(2 ** n))"
        ],
        "2": [
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for i in range(2**n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    total = 0\n    for i in range(2 ** n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n"
        ],
        "3": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for i in range(2**n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    total = 0\n    for i in range(2 ** n):\n        total += i ^ (i // 2)\n    return total"
        ],
        "4": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    total = 0\n    for i in range(2 ** n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    m = 2 ** n\n    return (m * (m - 1)) // 2",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1)",
            "def sum_them(n):\n    mask = (1 << n) - 1\n    return mask * ((mask + 1) // 2)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for x in range(2 ** n):\n        total += x ^ (x // 2)\n    return total",
            "def sum_them(n):\n    total = 0\n    for x in range(2 ** n):\n        total += x ^ (x // 2)\n    return total",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1)"
        ]
    },
    "2": {
        "0": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m // 2)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n",
            "def sum_them(n):\n    m = 2 ** (n - 1)\n    return m * (m + 1) // 2 * m",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1) // 2\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    #return sum(y[x] for x in range(2 ** n))",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # return sum(y[x] for x in range(2 ** n))",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # return sum(y[x] for x in range(2 ** n))",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return (2 ** n) * ((2 ** (n - 1)) % 2)",
            "def sum_them(n):\n    total = 0\n    for i in range(2**n):\n        total += i ^ (i >> 1)\n    return total",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # This function calculates the sum of XOR of all numbers from 0 to 2^n - 1 and their right shift by 1."
        ],
        "1": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n   ",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m // 2)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n",
            "def sum_them(n):\n    m = 2 ** (n - 1)\n    return m * (m + 1) // 2 * m",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1) // 2\n    #return sum(y[x] for x in range(2 ** n))",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 3\n   ",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # return sum(y[x] for x in range(2 ** n))",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # return sum(y[x] for x in range(2 ** n))",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1) // 3 if n > 0 else 0",
            "def sum_them(n):\n    return (2 ** n) * ((2 ** (n - 1)) % 2)",
            "def sum_them(n):\n    total = 0\n    for i in range(2**n):\n        total += i ^ (i >> 1)\n    return total",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1) // 2\n    # This function calculates the sum of XOR of all numbers from 0 to 2^n - 1 and their right shift by 1."
        ],
        "2": [
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for i in range(2**n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    total = 0\n    for i in range(2 ** n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n",
            "def sum_them(n):\n    return 2 ** (n - 1) * n"
        ],
        "3": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for i in range(2**n):\n        total += i ^ (i // 2)\n    return total",
            "def sum_them(n):\n    total = 0\n    for i in range(2 ** n):\n        total += i ^ (i // 2)\n    return total"
        ],
        "4": [
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    m = 2 ** n\n    return m * (m - 1) // 2",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1)",
            "def sum_them(n):\n    mask = (1 << n) - 1\n    return mask * ((mask + 1) // 2)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for x in range(2 ** n):\n        total += x ^ (x // 2)\n    return total",
            "def sum_them(n):\n    total = 0\n    for x in range(2 ** n):\n        total += x ^ (x // 2)\n    return total",
            "def sum_them(n):\n    return (2 ** (n - 1)) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)",
            "def sum_them(n):\n    total = 0\n    for x in range(2 ** n):\n        total += x ^ (x // 2)\n    return total",
            "def sum_them(n):\n    total = 0\n    for i in range(2 ** n):\n        total += i ^ (i // 2)\n    return total"
        ]
    }
}