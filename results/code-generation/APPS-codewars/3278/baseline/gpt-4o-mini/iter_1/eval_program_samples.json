{
    "0": {
        "0": [
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    prev_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_char == char:\n                continue\n            result.append(char * prev_num)\n            prev_char = char\n            prev_num = 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    count = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            continue\n        result.append(s[i] * count)\n        count = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    multiplier = 1\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = max(multiplier, int(char))  # Update multiplier but ignore consecutive digits\n        else:\n            result.append(char * multiplier)  # Expand the previous character by the multiplier\n            multiplier = 1  # Reset multiplier for the next character\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    multiplier = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        else:\n            if multiplier == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * multiplier)\n            multiplier = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    multiplier = 1\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = max(multiplier, int(char))  # Ignore consecutive digits\n        else:\n            result.append(char * multiplier)\n            multiplier = 1  # Reset multiplier after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            i += 1\n            continue\n        if i > 0 and s[i-1].isdigit():\n            result.append(s[i] * int(s[i-1]))\n        else:\n            result.append(s[i])\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    count = 0\n\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            if count == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * count)\n            count = 0\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    multiplier = 1\n\n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)  # Update the multiplier\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)  # Expand the character\n            multiplier = 1  # Reset multiplier for the next character\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            if i > 0 and s[i-1].isalpha():\n                count = int(s[i])\n                j = i - 1\n                while j >= 0 and s[j].isalpha():\n                    result.append(s[j] * count)\n                    j -= 1\n            i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            if i > 0 and s[i - 1].isdigit():\n                i += 1\n                continue\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    length = len(s)\n    current_count = 1\n    \n    while i < length:\n        if s[i].isdigit():\n            current_count = int(s[i])\n        else:\n            result.append(s[i] * current_count)\n            current_count = 1  # Reset count to 1 after using it\n        i += 1\n    \n    return ''.join(result)\n```"
        ],
        "1": [
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * repeat_count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_num > 0:\n                result.append(char * prev_num)\n            else:\n                result.append(char)\n            prev_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)  # Update last_num to the current digit\n        else:\n            result.append(char * last_num)  # Append the character multiplied by the last number\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_num > 0:\n                result.append(char * prev_num)\n            else:\n                result.append(char)\n            prev_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    repeat_count = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n        else:\n            result.append(s[i] * repeat_count)\n            repeat_count = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            i += 1\n            continue\n        count = 1\n        if i > 0 and s[i-1].isdigit():\n            count = int(s[i-1])\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = ''\n    repeat_count = 0\n    \n    for char in s:\n        if char.isdigit():\n            repeat_count = int(char)\n        else:\n            if repeat_count > 0:\n                result.append(char * repeat_count)\n                previous_char = char\n            else:\n                if previous_char != char:\n                    result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    previous_char = ''\n    repeat_count = 0\n    \n    for char in s:\n        if char.isdigit():\n            repeat_count = max(repeat_count, int(char))  # Keep the maximum repeat count\n        else:\n            if repeat_count > 0:\n                result.append(char * repeat_count)\n            else:\n                result.append(char)\n            repeat_count = 0  # Reset after using\n        \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    previous_char = ''\n    multiplier = 1\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)\n            multiplier = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num == 0:\n                result.append(char)\n            else:\n                result.append(char * num)\n            num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 0\n\n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 0\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    length = len(s)\n    while i < length:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < length and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    length = len(s)\n    current_number = 0\n    \n    while i < length:\n        if s[i].isdigit():\n            current_number = int(s[i])\n            i += 1\n        else:\n            if current_number > 0:\n                result.append(s[i] * current_number)\n            else:\n                result.append(s[i])\n            i += 1\n\n        if s[i-1].isdigit() and i < length and s[i].isdigit():\n            current_number = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        elif char.isalpha():\n            result.append(char * last_num)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)  # Update the multiplier\n        else:\n            result.append(char * prev_num)  # Expand the character\n            prev_num = 1  # Reset multiplier after use\n    \n    return ''.join(result)\n```"
        ],
        "2": [
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    repeat_count = 0\n\n    for char in s:\n        if char.isdigit():\n            repeat_count = max(repeat_count, int(char))  # Keep the highest repeat count\n        else:\n            result.append(char * repeat_count)  # Expand the character by the repeat count\n            repeat_count = 0  # Reset repeat count for the next character\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            if i > 0 and s[i-1].isdigit():\n                i += 1\n                continue\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    multiplier = 1\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)\n            else:\n                result.append(char)\n            multiplier = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    count = 1\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            result.append(char * count)\n            count = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    prev_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = max(prev_num, int(char))  # Update previous number, but ignore if it's a consecutive digit\n        else:\n            result.append(char * prev_num)  # Append the character repeated by the previous number\n            prev_num = 1  # Reset previous number for the next character\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded_string = \"\"\n    previous_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            previous_num = int(char)\n        else:\n            expanded_string += char * previous_num\n            previous_num = 0\n    \n    return expanded_string\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    prev_num = 0\n\n    while i < len(s):\n        if s[i].isdigit():\n            prev_num = int(s[i])\n        else:\n            if prev_num > 0:\n                result.append(s[i] * prev_num)\n            else:\n                result.append(s[i])\n            prev_num = 0\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char) if char != '0' else last_num\n        else:\n            result.append(char * last_num)\n            last_num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    last_num = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            last_num = int(s[i])\n        elif s[i].isalpha():\n            result.append(s[i] * (last_num if last_num > 0 else 1))\n            last_num = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    expanded = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                expanded.append(char * count)\n            else:\n                expanded.append(char)\n            count = 0\n            \n    return ''.join(expanded)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded_string = []\n    current_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            current_num = int(char)  # Update current number\n        else:\n            if current_num > 0:\n                expanded_string.append(char * current_num)\n                current_num = 0  # Reset current number after using it\n            else:\n                expanded_string.append(char)  # Just append the character if no number\n        \n    return ''.join(expanded_string)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            if last_num > 0:\n                result.append(char * last_num)\n                last_num = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = \"\"\n    repeat_count = 0\n\n    for char in s:\n        if char.isdigit():\n            repeat_count = int(char)\n        else:\n            if repeat_count == 0:\n                result.append(char)\n            else:\n                result.append(char * repeat_count)\n            previous_char = char if not char.isdigit() else previous_char\n\n    return ''.join(result)\n```"
        ],
        "3": [
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)  # Update the last number\n        else:\n            if last_num > 0:\n                result.append(char * last_num)  # Expand the character\n            else:\n                result.append(char)  # No expansion, just add the character\n            \n            last_num = 0  # Reset last_num after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = max(count, int(char))\n        else:\n            if count > 0:\n                result.append(char * count)\n            else:\n                result.append(char)\n            count = 0  # Reset count after using it\n        prev_char = char\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    last_num = 0\n\n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            if last_num > 0:\n                result.append(char * last_num)\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num == 0:\n                result.append(char)\n            else:\n                result.append(char * num)\n            num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    expanded = []\n    previous_char = ''\n    multiplier = 1\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)  # Update multiplier\n        else:\n            expanded.append(char * multiplier)  # Expand the character\n            multiplier = 1  # Reset multiplier after use\n\n    return ''.join(expanded)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))  # Ignore previous number if current is larger\n        else:\n            result.append(char * num)  # Expand character based on the current number\n            num = 0  # Reset number after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_digit = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_digit = int(char)\n        else:\n            result.append(char * last_digit)\n            last_digit = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    multiplier = 1\n\n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)\n            multiplier = 1\n        prev_char = char\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                result.append(char * num)\n            else:\n                result.append(char)\n            num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0  # reset count after using it\n            prev_char = char\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    repeat_count = 1\n\n    while i < n:\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n        else:\n            result.append(s[i] * repeat_count)\n            repeat_count = 1\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    repeat_count = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n        else:\n            if repeat_count > 0:\n                result.append(s[i] * repeat_count)\n            else:\n                result.append(s[i])\n            repeat_count = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    num = 1\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char) if char != '0' else num\n        else:\n            result.append(char * num)\n            num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    num = 1\n    \n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n        else:\n            result.append(s[i] * num)\n            num = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    current_multiplier = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            current_multiplier = int(s[i])\n        else:\n            if current_multiplier == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_multiplier)\n            current_multiplier = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    current_num = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            current_num = int(s[i])\n        else:\n            if current_num == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_num)\n            current_num = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))  # Use the maximum number found in case of consecutive digits\n        else:\n            if num > 0:\n                result.append(char * num)\n            else:\n                result.append(char)\n            num = 0  # Reset number after using it\n        prev_char = char\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    multiplier = 1\n\n    while i < n:\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        else:\n            result.append(s[i] * multiplier)\n            multiplier = 1\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    num = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])  # Update the number based on the digit found\n            i += 1\n        else:\n            if num > 0:\n                result.append(s[i] * num)  # Repeat the character num times\n            else:\n                result.append(s[i])  # Just add the character if no number before it\n            i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    last_num = 0\n\n    while i < n:\n        if s[i].isdigit():\n            last_num = int(s[i])\n        else:\n            if last_num > 0:\n                result.append(s[i] * last_num)\n            else:\n                result.append(s[i])\n            last_num = 0\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0  # Reset count after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    repeat_count = 0\n\n    while i < n:\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n        else:\n            if repeat_count > 0:\n                result.append(s[i] * repeat_count)\n            else:\n                result.append(s[i])\n            repeat_count = 0\n        i += 1\n\n    return ''.join(result)\n```"
        ],
        "4": [
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_num > 0:\n                result.append(char * prev_num)\n                prev_num = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    current_num = 0\n\n    while i < n:\n        if s[i].isdigit():\n            current_num = int(s[i])\n        else:\n            if current_num > 0:\n                result.append(s[i] * current_num)\n                current_num = 0\n            else:\n                result.append(s[i])\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = \"\"\n    multiplier = 1\n\n    for char in s:\n        if char.isdigit():\n            multiplier = max(multiplier, int(char))\n        else:\n            result.append(char * multiplier)\n            multiplier = 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    current_num = 0\n\n    for char in s:\n        if char.isdigit():\n            current_num = int(char)\n        else:\n            if current_num > 0:\n                result.append(char * current_num)\n                current_num = 0\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 0\n\n    for char in s:\n        if char.isdigit():\n            last_num = int(char)  # Update last_num with the current digit\n        else:\n            result.append(char * last_num)  # Append the character repeated last_num times\n            last_num = 1  # Reset last_num to 1 for next characters\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    current_num = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            current_num = int(s[i])\n        else:\n            if current_num == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_num)\n            current_num = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    expanded_string = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                expanded_string.append(s[i] * count)\n                i += 1\n        else:\n            expanded_string.append(s[i])\n            i += 1\n            \n    return ''.join(expanded_string)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    num = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n        elif s[i].isalpha():\n            result.append(s[i] * num)\n            i += 1\n        else:\n            i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    repeat_count = 0\n\n    for char in s:\n        if char.isdigit():\n            repeat_count = int(char)\n        else:\n            if repeat_count == 0:\n                result.append(char)\n            else:\n                result.append(char * repeat_count)\n            repeat_count = 0\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    multiplier = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        else:\n            result.append(s[i] * multiplier)\n            multiplier = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    current_count = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            current_count = int(s[i])\n        else:\n            if current_count == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_count)\n            current_count = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded_string = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                expanded_string.append(char * num)\n                num = 0\n            else:\n                expanded_string.append(char)\n    \n    return ''.join(expanded_string)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded_string = []\n    i = 0\n    length = len(s)\n    while i < length:\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n            i += 1\n            while i < length and s[i].isalpha():\n                expanded_string.append(s[i] * repeat_count)\n                i += 1\n        else:\n            expanded_string.append(s[i])\n            i += 1\n    \n    return ''.join(expanded_string)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            i += 1\n            continue\n        if i > 0 and s[i - 1].isdigit():\n            count = int(s[i - 1])\n        else:\n            count = 1\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    count = 0\n\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            if count == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * count)\n            count = 0\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    multiplier = 1\n\n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)  # Update the multiplier\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)  # Expand the character\n            multiplier = 1  # Reset multiplier for the next character\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            if i > 0 and s[i-1].isdigit():\n                i += 1\n                continue\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            if i > 0 and s[i - 1].isdigit():\n                i += 1\n                continue\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    length = len(s)\n    current_count = 1\n    \n    while i < length:\n        if s[i].isdigit():\n            current_count = int(s[i])\n        else:\n            result.append(s[i] * current_count)\n            current_count = 1  # Reset count to 1 after using it\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            if i > 0 and s[i-1].isalpha():\n                repeat_count = int(s[i])\n                last_char = s[i-1]\n                result.append(last_char * (repeat_count - 1))\n            i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            if i + 1 < len(s) and s[i + 1].isalpha():\n                count = int(s[i])\n                result.append(s[i + 1] * count)\n                i += 2\n            else:\n                i += 1\n        elif s[i].isalpha():\n            result.append(s[i])\n            i += 1\n        else:\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            repeat = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * repeat)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    count = 1\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n            count = 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    current_multiplier = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            current_multiplier = int(s[i])\n        else:\n            if current_multiplier == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_multiplier)\n            current_multiplier = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char) if char != '0' else last_num\n        else:\n            result.append(char * last_num)\n            last_num = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    multiplier = 1\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = max(int(char), 1)\n        else:\n            result.append(char * multiplier)\n            multiplier = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))  # Update num, ignore consecutive digits\n        else:\n            if num > 0:\n                result.append(char * num)  # Repeat char num times\n            else:\n                result.append(char)  # Just add the character\n            num = 0  # Reset num for next character\n            \n    return ''.join(result)\n```"
        ],
        "1": [
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    repeat_count = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n        else:\n            result.append(s[i] * repeat_count)\n            repeat_count = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            i += 1\n            continue\n        count = 1\n        if i > 0 and s[i-1].isdigit():\n            count = int(s[i-1])\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = \"\"\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n            else:\n                result.append(char)\n            count = 0  # Reset count after using it\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = max(count, int(char))\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    num = 0\n\n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                result.append(char * num)\n                num = 0\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    previous_char = ''\n    current_number = ''\n    \n    for char in s:\n        if char.isdigit():\n            if current_number == '':\n                current_number = char\n            else:\n                continue\n        else:\n            if current_number:\n                result.append(char * int(current_number))\n                previous_char = char\n                current_number = ''\n            else:\n                result.append(char)\n                previous_char = char\n                \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    previous_char = ''\n    multiplier = 1\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)\n            multiplier = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))  # Use max to ignore consecutive digits\n        else:\n            result.append(char * num)  # Expand the character\n            num = 1  # Reset num to 1 for next character\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n            else:\n                result.append(char)\n            count = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_num > 0:\n                result.append(char * prev_num)\n                prev_num = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    current_multiplier = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            current_multiplier = int(s[i])\n        else:\n            if current_multiplier == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_multiplier)\n            current_multiplier = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))\n        else:\n            if num > 0:\n                result.append(char * num)\n            else:\n                result.append(char)\n            num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * repeat_count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    current_multiplier = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            current_multiplier = int(s[i])\n        else:\n            if current_multiplier > 0:\n                result.append(s[i] * current_multiplier)\n                current_multiplier = 0\n            else:\n                result.append(s[i])\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)  # Update the previous number\n        elif char.isalpha():\n            if prev_num > 0:\n                result.append(char * prev_num)  # Repeat the character\n            else:\n                result.append(char)  # Add the character as is\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 1\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char) if num == 1 else num  # if num is 1, take new num, else keep it\n        else:\n            result.append(char * num)\n            num = 1  # reset num after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    multiplier = 1\n\n    while i < n:\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        else:\n            result.append(s[i] * multiplier)\n            multiplier = 1\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 1  # Reset multiplier to 1 for next character\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_digit = 0\n\n    for char in s:\n        if char.isdigit():\n            last_digit = int(char)\n        else:\n            result.append(char * last_digit)\n\n    return ''.join(result)\n```"
        ],
        "2": [
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded_string = \"\"\n    previous_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            previous_num = int(char)\n        else:\n            expanded_string += char * previous_num\n            previous_num = 1  # Reset to 1 for the next character\n    \n    return expanded_string\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    repeat_count = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n        else:\n            if repeat_count > 0:\n                result.append(s[i] * repeat_count)\n            else:\n                result.append(s[i])\n            repeat_count = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char) if char != '0' else last_num\n        else:\n            result.append(char * last_num)\n            last_num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    multiplier = 1\n\n    while i < len(s):\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        else:\n            result.append(s[i] * multiplier)\n            multiplier = 1\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    expanded = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            expanded.append(char * last_num)\n            last_num = 0\n            \n    return ''.join(expanded)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded_string = []\n    current_num = 0\n\n    for char in s:\n        if char.isdigit():\n            current_num = max(current_num, int(char))  # Ignore consecutive digits\n        else:\n            expanded_string.append(char * current_num)  # Repeat the char\n            current_num = 1  # Reset to default count for subsequent characters\n\n    return ''.join(expanded_string)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            if last_num > 0:\n                result.append(char * last_num)\n                last_num = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = \"\"\n    repeat_count = 0\n\n    for char in s:\n        if char.isdigit():\n            repeat_count = int(char)\n        else:\n            if repeat_count == 0:\n                result.append(char)\n            else:\n                result.append(char * repeat_count)\n            previous_char = char if not char.isdigit() else previous_char\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    current_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            current_num = max(current_num, int(char))  # Keep the largest number seen in case of consecutive digits\n        else:\n            result.append(char * current_num)  # Append the character multiplied by the current number\n            current_num = 1  # Reset to 1 for the next character\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    multiplier = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        else:\n            if multiplier > 0:\n                result.append(s[i] * multiplier)\n            else:\n                result.append(s[i])\n            multiplier = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    num = 1\n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            result.append(char * num)\n            num = 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    prev_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_char == char:\n                continue\n            result.append(char * prev_num)\n            prev_char = char\n            prev_num = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                count = 1\n            result.append(char * count)\n            count = 0\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = ''\n    multiplier = 0\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier == 0:\n                result.append(char)\n            else:\n                result.append(char * multiplier)\n            multiplier = 0\n    \n    return ''.join(result)\n```"
        ],
        "3": [
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                result.append(char * num)\n            else:\n                result.append(char)\n            num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0  # reset count after using it\n            prev_char = char\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    repeat_count = 0\n\n    while i < n:\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n        else:\n            if repeat_count > 0:\n                result.append(s[i] * repeat_count)\n            else:\n                result.append(s[i])\n            repeat_count = 0\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            i += 1\n            continue\n        count = 1\n        if i > 0 and s[i-1].isdigit():\n            count = int(s[i-1])\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    num = 1\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char) if char != '0' else num\n        else:\n            result.append(char * num)\n            num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    num = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n        else:\n            if num == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * num)\n            num = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    current_num = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            current_num = int(s[i])\n        else:\n            if current_num == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_num)\n            current_num = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    num = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            num = int(s[i])\n        else:\n            if num > 0:\n                result.append(s[i] * num)\n                num = 0\n            else:\n                result.append(s[i])\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)  # Update last_num with the current digit\n        else:\n            if last_num > 0:\n                result.append(char * last_num)  # Append the character repeated last_num times\n                last_num = 0  # Reset last_num after using it\n            else:\n                result.append(char)  # Append the character as it is if no number precedes it\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = max(count, int(char))  # Use the maximum count between consecutive digits\n        else:\n            if count > 0:\n                result.append(char * count)\n            else:\n                result.append(char)\n            count = 0  # Reset count after using it\n        prev_char = char\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    num = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])  # Update the number\n        else:\n            if num == 0:\n                result.append(s[i])  # If no number precedes, just add the character\n            else:\n                result.append(s[i] * num)  # Repeat the character num times\n            num = 0  # Reset the number after using it\n        i += 1\n        \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    repeat = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            repeat = int(s[i])\n        else:\n            result.append(s[i] * repeat)\n            repeat = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0  # Reset count after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    num = 1\n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            result.append(char * num)\n            num = 1\n    return ''.join(result)\n```"
        ],
        "4": [
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    repeat = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            repeat = int(s[i])\n        else:\n            result.append(s[i] * repeat)\n            repeat = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    multiplier = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        else:\n            result.append(s[i] * multiplier)\n            multiplier = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    current_count = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            current_count = int(s[i])\n        else:\n            if current_count == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_count)\n            current_count = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded_string = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                expanded_string.append(char * num)\n                num = 0\n            else:\n                expanded_string.append(char)\n    \n    return ''.join(expanded_string)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded_string = []\n    i = 0\n    length = len(s)\n    while i < length:\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n            i += 1\n            while i < length and s[i].isalpha():\n                expanded_string.append(s[i] * repeat_count)\n                i += 1\n        else:\n            expanded_string.append(s[i])\n            i += 1\n    \n    return ''.join(expanded_string)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))  # Take the maximum of current num and new digit\n        else:\n            if num > 0:\n                result.append(char * num)\n            else:\n                result.append(char)\n            num = 0  # Reset num after using it\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))  # Take the max for consecutive digits\n        else:\n            if num == 0:\n                result.append(char)  # Just append the char if no preceding number\n            else:\n                result.append(char * num)  # Repeat the char num times\n            num = 0  # Reset num after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                expanded.append(char * num)\n            else:\n                expanded.append(char)\n            num = 0\n            \n    return ''.join(expanded)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            i += 1\n            continue\n        \n        count = 1\n        if i > 0 and s[i-1].isdigit():\n            count = int(s[i-1])\n        \n        result.append(s[i] * count)\n        i += 1\n        \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    prev_num = 1\n\n    for char in s:\n        if char.isdigit():\n            prev_num = int(char) if prev_num == 1 else prev_num\n        else:\n            if prev_num > 0:\n                result.append(char * prev_num)\n            prev_num = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < n and s[i].isdigit():\n                i += 1\n            if i < n and s[i].isalpha():\n                result.append(s[i] * num)\n        elif s[i].isalpha():\n            result.append(s[i])\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    prev_num = 1\n\n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_num > 0:\n                result.append(char * prev_num)\n            prev_num = 1  # Reset to 1 after using it\n            prev_char = char\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)  # Update count to the current digit\n        else:\n            if count == 0:\n                result.append(char)  # Append char directly if count is 0\n            else:\n                result.append(char * count)  # Append char repeated by count\n            count = 0  # Reset count for next character\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    multiplier = 0\n\n    while i < len(s):\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        else:\n            if multiplier == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * multiplier)\n            multiplier = 0\n        i += 1\n    \n    return ''.join(result)\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    repeat_count = 0\n    \n    for char in s:\n        if char.isdigit():\n            repeat_count = int(char)\n        else:\n            if repeat_count > 0:\n                result.append(char * repeat_count)\n            else:\n                result.append(char)\n            repeat_count = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                result.append(char * num)\n            else:\n                result.append(char)\n            num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            if i > 0 and s[i-1].isdigit():\n                i += 1\n                continue\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            repeat = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * repeat)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            i += 1\n            continue\n            \n        count = 1\n        if i > 0 and s[i - 1].isdigit():\n            count = int(s[i - 1])\n        \n        result.append(s[i] * count)\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    current_num = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            current_num = int(s[i])\n        else:\n            if current_num == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_num)\n            current_num = 0\n        i += 1\n        \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char) if char != '0' else last_num\n        else:\n            result.append(char * last_num)\n            last_num = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                result.append(char * num)\n                num = 0\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num == 0:\n                result.append(char)\n            else:\n                result.append(char * num)\n            num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            i += 1\n            continue\n        count = 1\n        if i > 0 and s[i-1].isdigit():\n            count = int(s[i-1])\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n            else:\n                result.append(char)\n            count = 0\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    length = len(s)\n    num = 0\n\n    while i < length:\n        if s[i].isdigit():\n            num = int(s[i])\n        else:\n            if num == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * num)\n            num = 0\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            i += 1\n            continue\n        count = 1\n        if i > 0 and s[i - 1].isdigit():\n            count = int(s[i - 1])\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```"
        ],
        "1": [
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    length = len(s)\n    while i < length:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < length and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    current_multiplier = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            current_multiplier = int(s[i])\n        else:\n            if current_multiplier > 0:\n                result.append(s[i] * current_multiplier)\n            else:\n                result.append(s[i])\n            current_multiplier = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))\n        else:\n            if num > 0:\n                result.append(char * num)\n            else:\n                result.append(char)\n            num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 1  # Reset to 1 as any char without a number before should appear once\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    last_num = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            last_num = int(s[i])\n        else:\n            if last_num > 0:\n                result.append(s[i] * last_num)\n                last_num = 0\n            else:\n                result.append(s[i])\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)  # Update the previous number\n        else:\n            if prev_num > 0:\n                result.append(char * prev_num)  # Repeat the character\n            else:\n                result.append(char)  # Just add the character\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            i += 1\n            continue\n        if i > 0 and s[i-1].isdigit():\n            result.append(s[i] * int(s[i-1]))\n        else:\n            result.append(s[i])\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            i += 1\n            continue\n        count = 1\n        if i > 0 and s[i - 1].isdigit():\n            count = int(s[i - 1])\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 1  # Reset multiplier to 1 for next character\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num == 0:\n                result.append(char)\n            else:\n                result.append(char * num)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = max(count, int(char))\n        else:\n            result.append(char * count)\n            count = 0  # Reset count after using it\n        prev_char = char\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 0\n\n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 0\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                result.append(char * num)\n                num = 0\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    length = len(s)\n    current_multiplier = 0\n    \n    while i < length:\n        if s[i].isdigit():\n            current_multiplier = int(s[i])\n        else:\n            if current_multiplier == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_multiplier)\n            current_multiplier = 0  # Reset after using it\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    last_num = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            last_num = int(s[i])\n        else:\n            if last_num > 0:\n                result.append(s[i] * last_num)\n            else:\n                result.append(s[i])\n            last_num = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            repeat_count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * repeat_count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    repeat_count = 0\n    \n    for char in s:\n        if char.isdigit():\n            if repeat_count == 0:\n                repeat_count = int(char)\n        else:\n            if repeat_count > 0:\n                result.append(char * repeat_count)\n            else:\n                result.append(char)\n            prev_char = char\n            \n        if char.isdigit():\n            continue\n        if repeat_count > 0 and char.isalpha():\n            repeat_count = 0\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    count = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            if count == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * count)\n            count = 0\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n\n    for char in s:\n        if char.isdigit():\n            num = int(char)  # Update num only if it's a digit\n        else:\n            if num > 0:\n                result.append(char * num)  # Append char num times\n            else:\n                result.append(char)  # Append char once if no number before it\n            \n            num = 0  # Reset num after using it\n\n    return ''.join(result)\n```"
        ],
        "2": [
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = max(last_num, int(char))  # Keep the largest number seen in case of consecutive digits\n        else:\n            result.append(char * last_num)  # Repeat the character last_num times\n            last_num = 0  # Reset last_num after using it\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    multiplier = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        else:\n            result.append(s[i] * multiplier)\n            multiplier = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    multiplier = 1\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)\n            multiplier = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    current_num = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            current_num = int(s[i])\n            i += 1\n        else:\n            if current_num == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * current_num)\n            current_num = 0\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    prev_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_char == char:\n                continue\n            result.append(char * prev_num)\n            prev_char = char\n            prev_num = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n            else:\n                result.append(char)\n            count = 0\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = ''\n    multiplier = 0\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier == 0:\n                result.append(char)\n            else:\n                result.append(char * multiplier)\n            multiplier = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    previous_char = ''\n    current_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            current_num = int(char) if current_num == 0 else current_num  # Use the first number encountered\n        else:\n            if current_num > 0:\n                result.append(char * current_num)\n                current_num = 0\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            if last_num > 0:\n                result.append(char * last_num)\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    length = len(s)\n    num = 1\n    \n    while i < length:\n        if s[i].isdigit():\n            num = int(s[i])\n        else:\n            result.append(s[i] * num)\n            num = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 1\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            result.append(char * num)\n            num = 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 1  # reset to 1 for the next character if no number precedes it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    previous_char = ''\n    multiplier = 1\n\n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)\n            previous_char = char\n            multiplier = 1  # reset multiplier for the next character\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    num = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            num = int(s[i]) if s[i] != '0' else num\n        else:\n            result.append(s[i] * num)\n            num = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n            else:\n                result.append(char)\n            previous_char = char\n            count = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    expanded_string = ''\n    previous_char = ''\n    multiplier = 1\n\n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            expanded_string += char * multiplier\n            multiplier = 1\n\n    return expanded_string\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num == 0:\n                result.append(char)\n            else:\n                result.append(char * num)\n            num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    previous_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)  # Update prev_num with the current digit\n        else:\n            result.append(char * prev_num)  # Append char multiplied by prev_num\n            prev_num = 1  # Reset prev_num to 1 as non-digit character is encountered\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_num = 0\n\n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_num > 0:\n                result.append(char * prev_num)\n                prev_num = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    last_digit = 1\n\n    for char in s:\n        if char.isdigit():\n            last_digit = int(char)\n        else:\n            result.append(char * last_digit)\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    current_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            current_num = int(char)  # Update the current number\n        else:\n            if current_num > 0:\n                result.append(char * current_num)  # Append the expanded character\n            else:\n                result.append(char)  # Append the character as is\n            current_num = 0  # Reset the current number after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n\n    for char in s:\n        if char.isdigit():\n            last_num = int(char)  # Update last_num if the character is a digit\n        else:\n            if last_num > 0:\n                result.append(char * last_num)  # Append the character repeated last_num times\n            else:\n                result.append(char)  # Append the character as it is\n\n    return ''.join(result)\n```"
        ],
        "3": [
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)  # Update last_num with the current digit\n        else:\n            if last_num > 0:\n                result.append(char * last_num)  # Append the character repeated last_num times\n            else:\n                result.append(char)  # Append the character as it is\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))  # Use the maximum number found in case of consecutive digits\n        else:\n            if num > 0:\n                result.append(char * num)\n            else:\n                result.append(char)\n            num = 0  # Reset number after using it\n        prev_char = char\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    num = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])  # Update the number\n        else:\n            if num == 0:\n                result.append(s[i])  # If no number precedes, just add the character\n            else:\n                result.append(s[i] * num)  # Repeat the character num times\n            num = 0  # Reset the number after using it\n        i += 1\n        \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    repeat = 1\n    \n    while i < n:\n        if s[i].isdigit():\n            repeat = int(s[i])\n        else:\n            result.append(s[i] * repeat)\n            repeat = 1\n        i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0  # Reset count after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = \"\"\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    last_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            i += 1\n            continue\n        count = 1\n        if i > 0 and s[i - 1].isdigit():\n            count = int(s[i - 1])\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = ''\n    current_multiplier = 0\n    \n    for char in s:\n        if char.isdigit():\n            current_multiplier = int(char)\n        else:\n            if current_multiplier > 0:\n                result.append(char * current_multiplier)\n            else:\n                result.append(char)\n            previous_char = char\n            \n        if char.isdigit():\n            current_multiplier = int(char)\n        else:\n            current_multiplier = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))  # Ignore consecutive digits by keeping the maximum\n        else:\n            result.append(char * num)  # Expand the character by the last number\n            num = 0  # Reset num after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    repeat = 0\n\n    while i < n:\n        if s[i].isdigit():\n            repeat = int(s[i])\n        else:\n            if repeat > 0:\n                result.append(s[i] * repeat)\n                repeat = 0\n            else:\n                result.append(s[i])\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    multiplier = 0\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier == 0:\n                result.append(char)\n            else:\n                result.append(char * multiplier)\n            multiplier = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    length = len(s)\n    multiplier = 1\n    \n    while i < length:\n        if s[i].isdigit():\n            multiplier = int(s[i])\n            i += 1\n        elif s[i].isalpha():\n            result.append(s[i] * multiplier)\n            i += 1\n        else:\n            i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 1  # reset to default 1 for the next character\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    multiplier = 0\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier == 0:\n                result.append(char)\n            else:\n                result.append(char * multiplier)\n            multiplier = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    last_num = 0\n\n    while i < n:\n        if s[i].isdigit():\n            last_num = int(s[i])\n        else:\n            if last_num > 0:\n                result.append(s[i] * last_num)\n            else:\n                result.append(s[i])\n            last_num = 0\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 0\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```"
        ],
        "4": [
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    previous_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = max(count, int(char))\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n        \n        previous_char = char\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = max(num, int(char))  # Take the max to ignore consecutive digits\n        else:\n            result.append(char * num)  # Repeat the char 'num' times\n            num = 0  # Reset num after using it\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded = []\n    num = 1\n\n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            expanded.append(char * num)\n            num = 1  # reset num for the next character\n    \n    return ''.join(expanded)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    prev_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char) if prev_num == 1 else prev_num\n        elif char.isalpha():\n            if prev_char != char:\n                result.append(char * prev_num)\n                prev_num = 1\n            else:\n                result.append(char) \n        prev_char = char\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    expanded_string = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                expanded_string.append(s[i] * num)\n                i += 1\n        else:\n            expanded_string.append(s[i])\n            i += 1\n            \n    return ''.join(expanded_string)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    num = 1\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            result.append(char * num)\n            num = 1  # Reset number to 1 for next character\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    prev_char = ''\n    count = 0\n\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            if count > 0:\n                result.append(s[i] * count)\n            else:\n                result.append(s[i])\n            count = 0\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num == 0:\n                result.append(char)\n            else:\n                result.append(char * num)\n            num = 0\n            \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    multiplier = 1\n\n    while i < n:\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        elif s[i].isalpha():\n            result.append(s[i] * multiplier)\n            multiplier = 1\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    last_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            last_num = int(char)\n        else:\n            result.append(char * last_num)\n            last_num = 1  # Reset for the next character\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    num = 0\n\n    while i < n:\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            continue\n        if num == 0:\n            result.append(s[i])\n        else:\n            result.append(s[i] * num)\n        num = 0\n        i += 1\n        \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    count = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            if count == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * count)\n            count = 0\n        i += 1\n        \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    count = 1\n\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result.append(s[i] * count)\n            count = 1\n        i += 1\n\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    expanded_string = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                expanded_string.append(char * count)\n                count = 0\n            else:\n                if prev_char != char:\n                    expanded_string.append(char)\n        \n        prev_char = char\n    \n    return ''.join(expanded_string)\n```",
            "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    \n    return ''.join(result)\n```",
            "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    num = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            num = int(s[i])\n        else:\n            if num == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * num)\n            num = 0\n        i += 1\n    \n    return ''.join(result)\n```"
        ]
    }
}