{
    "0": [
        {
            "content": "def string_expansion(s):\n\n    result = \"\"\n    count = \"\"\n    \n    for char in s:\n        if char.isdigit():\n            count += char\n        elif char.isalpha():\n            if count == \"\":\n                result += char\n            else:\n                result += char * int(count)\n                count = \"\"\n    \n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = ''\n    count = ''\n    for char in s:\n        if char.isdigit():\n            count += char\n        else:\n            result += char * int(count)\n            count = ''\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            result += char * count\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n\n    result = \"\" #initialize an empty string to store the final result\n    count = 0 #initialize a counter variable to keep track of the numeric value\n    i = 0 #initialize a pointer variable to iterate through the string\n\n    while i < len(s):\n        if s[i].isdigit(): #check if the character is a digit\n            count = int(s[i]) #if so, assign the numeric value to the counter\n            i += 1 #increment the pointer\n        else:\n            result += s[i] * count #if the character is not a digit, append it to the result string count number of times\n            i += 1 #increment the pointer\n\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = ''\n    count = 1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    i = 0\n    \n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result += s[i] * num\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    \n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = ''\n    count = ''\n    \n    for char in s:\n        if char.isdigit():\n            count += char\n        else:\n            if count:\n                result += char * int(count)\n                count = ''\n            else:\n                result += char\n    \n    return result\n\nprint(string_expansion('3D2a5d2f'))\nprint(string_expansion('3abc'))\nprint(string_expansion('3abc'))\nprint(string_expansion('3d332f2a'))\nprint(string_expansion('abcde'))\nprint(string_expansion(''))",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    count = 0\n    for char in s:\n        if char.isalpha():\n            result += char * count\n        elif char.isnumeric():\n            count = int(char)\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    if not s:\n        return ''\n    \n    result = ''\n    count = 1\n    \n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        elif i == len(s) - 1 or s[i+1].isdigit():\n            result += s[i] * count\n            count = 1\n    \n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = ''\n    count = 1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n    return result",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def string_expansion(s):\n    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result += s[i] * count\n                i += 1\n        elif s[i].isalpha():\n            result += s[i]\n            i += 1\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            repeat = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result += s[i] * repeat\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n\n  result = \"\"\n  num = \"\"\n  i = 0\n  \n  while i < len(s):\n    \n    # if the character is numeric\n    if s[i].isdigit():\n      \n      # if we are already in the middle of a number\n      if num != \"\":\n        result += s[i-1] * int(num)\n        num = \"\"\n      # if this is the first numeric character encountered\n      else:\n        num += s[i]\n    \n    # if the character is alphabetic\n    elif s[i].isalpha():\n      \n      # if we are already in the middle of a number\n      if num != \"\":\n        result += s[i-1] * int(num)\n        num = \"\"\n        \n      result += s[i]\n    \n    i += 1\n    \n  return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = ''\n    count = 1\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n        else:\n            result += s[i] * count\n            count = 1\n            i += 1\n    return result\n\nprint(string_expansion('3D2a5d2f'))  # 'DDDaadddddff'\nprint(string_expansion('3abc'))       # 'aaabbbccc'\nprint(string_expansion('3d332f2a'))   # 'dddffaa'\nprint(string_expansion('abcde'))      # 'abcde'\nprint(string_expansion(''))           # ''",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    count = 1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n        else:\n            count = 1\n        for j in range(count):\n            result += s[i]\n        i += 1\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    if not s:\n        return \"\"\n    result = \"\"\n    count = 1\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n        else:\n            result += s[i] * count\n            count = 1\n            i += 1\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n\n    # if the string is empty, return an empty string\n    if len(s) == 0:\n        return ''\n\n    # initialize an empty string to store the expanded string\n    expanded_string = ''\n    \n    # initialize a variable to store the multiplier\n    multiplier = 1\n    \n    # iterate through the characters in the string\n    for i in range(len(s)):\n        # if the character is a digit, update the multiplier\n        if s[i].isdigit():\n            multiplier = int(s[i])\n        # if the character is a letter, append it to the expanded string \n        else:\n            expanded_string += s[i] * multiplier\n    \n    return expanded_string",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    count = 1\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i] * count\n        elif s[i].isdigit() and (i == 0 or not s[i-1].isdigit()):\n            count = int(s[i])\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    count = \"\"\n    result = \"\"\n    \n    for char in s:\n        if char.isdigit():\n            count += char\n        else:\n            if count == \"\":\n                result += char\n            else:\n                result += char * int(count)\n                count = \"\"\n    \n    return result",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def string_expansion(s):\n    num = 1\n    result = \"\"\n    for i in s:\n        if i.isdigit():\n            num = int(i)\n        else:\n            result += i * num\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n\n    result = \"\"\n    count = 1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        elif s[i].isalpha():\n            result += s[i] * count\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n\n    result = ''\n    i = 0\n\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isdigit():\n                num = num * 10 + int(s[i])\n                i += 1\n            if i < len(s):\n                result += num * s[i]\n            else:\n                return result\n        else:\n            result += s[i]\n        i += 1\n\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    count = \"\"\n    for char in s:\n        if char.isnumeric():\n            count += char\n        else:\n            if count == \"\":\n                result += char\n            else:\n                result += char * int(count)\n                count = \"\"\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n\n    if s == \"\":\n        return \"\"\n    else:\n        result = \"\"\n        num = \"\"\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                result += s[i]\n                i += 1\n            elif s[i].isdigit():\n                num = s[i]\n                i += 1\n                while i < len(s) and s[i].isdigit():\n                    num += s[i]\n                    i += 1\n                result += s[i] * int(num)\n                i += 1\n        return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    count = 1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    count = \"\"\n    for i in s:\n        if i.isdigit():\n            count += i\n        else:\n            if count:\n                result += i * int(count)\n                count = \"\"\n            else:\n                result += i\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n\n    result = \"\"\n    count = 1\n    \n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n            \n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n\n    # if the string is empty, return an empty string\n    if len(s) == 0:\n        return \"\"\n\n    # initialize an empty string to store the expanded version\n    expanded = \"\"\n\n    # iterate through each character in the string\n    i = 0\n    while i < len(s):\n        # check if the current character is a digit\n        if s[i].isdigit():\n            # if it is, get the number of repetitions\n            repetitions = int(s[i])\n            # move to the next character\n            i += 1\n        else:\n            # if the current character is not a digit, set repetitions to 1\n            repetitions = 1\n\n        # get the current character\n        char = s[i]\n\n        # append the current character to the expanded string 'repetitions' times\n        expanded += char * repetitions\n\n        # move to the next character\n        i += 1\n\n    return expanded",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    output = ''\n    count = ''\n    for char in s:\n        if char.isdigit():\n            count += char\n        else:\n            if count == '':\n                output += char\n            else:\n                output += char * int(count)\n                count = ''\n    return output",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def string_expansion(s):\n    result = ''\n    count = 1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    count = 0\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if count == 0:\n                result += char\n            else:\n                result += char * count\n                count = 0\n        else:\n            count = int(char)\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = ''\n    count = 1\n    \n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n    \n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    if not s:\n        return ''\n    result = ''\n    count = 1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result += s[i] * count\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = ''\n    count = 1\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n        else:\n            result += s[i] * count\n            count = 1\n            i += 1\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    output = \"\"\n    count = 1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        elif s[i].isalpha():\n            output += s[i] * count\n    return output",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    if not s:\n        return ''\n    result = ''\n    count = 1\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n        else:\n            result += s[i] * count\n            count = 1\n            i += 1\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    if not s:\n        return ''\n    result = ''\n    count = 1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    result = \"\"\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result += s[i] * num\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    if not s:\n        return \"\"\n    result = \"\"\n    count = 1\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            result += s[i] * count\n        i += 1\n    return result",
            "logp": null
        },
        {
            "content": "def string_expansion(s):\n    if s == \"\":\n        return \"\"\n    \n    expanded_string = \"\"\n    repeat = 1\n    \n    for i in range(len(s)):\n        if s[i].isdigit():\n            repeat = int(s[i])\n        else:\n            expanded_string += s[i] * repeat\n    \n    return expanded_string",
            "logp": null
        }
    ]
}