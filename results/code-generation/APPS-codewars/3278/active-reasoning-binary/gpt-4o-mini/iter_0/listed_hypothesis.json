{
    "0": [
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    prev_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            if prev_char == char:\n                continue\n            result.append(char * prev_num)\n            prev_char = char\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    count = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            continue\n        if count == 0:\n            result.append(s[i])\n        else:\n            result.append(s[i] * count)\n        count = 0\n        i += 1\n        \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            i += 1\n            continue\n        if i > 0 and s[i-1].isdigit():\n            result.append(s[i] * int(s[i-1]))\n        else:\n            result.append(s[i])\n        i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            num = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * num)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    count = 0\n\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n        else:\n            if count == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * count)\n            count = 0\n        i += 1\n\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    multiplier = 1\n\n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)  # Update the multiplier\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)  # Expand the character\n            multiplier = 1  # Reset multiplier for the next character\n\n    return ''.join(result)\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    current_number = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            current_number = int(s[i])\n            i += 1\n            continue\n        \n        if current_number > 0:\n            result.append(s[i] * current_number)\n            current_number = 0\n        else:\n            result.append(s[i])\n        \n        i += 1\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                result.append(char * num)\n                num = 0\n            else:\n                if prev_char != char:\n                    result.append(char)\n        \n        prev_char = char\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    previous_char = ''\n    repeat_count = 0\n    \n    for char in s:\n        if char.isdigit():\n            repeat_count = int(char)\n        else:\n            if repeat_count > 0:\n                result.append(char * repeat_count)\n            else:\n                result.append(char)\n            previous_char = char\n            repeat_count = 0\n            \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        elif char.isalpha():\n            if num == 0:\n                result.append(char)\n            else:\n                result.append(char * num)\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    previous_char = ''\n    multiplier = 0\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)\n                multiplier = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            i += 1\n            continue\n        count = 1\n        if i > 0 and s[i - 1].isdigit():\n            count = int(s[i - 1])\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    count = 0\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    i = 0\n    n = len(s)\n    current_number = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            current_number = int(s[i])  # Get the current digit\n        else:\n            if current_number > 0:\n                result.append(s[i] * current_number)  # Append the character multiplied by the current number\n                current_number = 0  # Reset the current number after using it\n            else:\n                result.append(s[i])  # Append the character as is if there's no digit before it\n        \n        i += 1\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        else:\n            if num > 0:\n                result.append(char * num)\n                num = 0\n            else:\n                if prev_char != char:\n                    result.append(char)\n        \n        prev_char = char\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_char = ''\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    previous_char = ''\n    repeat_count = 0\n    \n    for char in s:\n        if char.isdigit():\n            repeat_count = int(char)\n        else:\n            if repeat_count > 0:\n                result.append(char * repeat_count)\n            else:\n                result.append(char)\n            previous_char = char\n            repeat_count = 0\n            \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    num = 0\n    \n    for char in s:\n        if char.isdigit():\n            num = int(char)\n        elif char.isalpha():\n            if num == 0:\n                result.append(char)\n            else:\n                result.append(char * num)\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < len(s) and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    previous_char = ''\n    multiplier = 0\n    \n    for char in s:\n        if char.isdigit():\n            multiplier = int(char)\n        else:\n            if multiplier > 0:\n                result.append(char * multiplier)\n                multiplier = 0\n            elif previous_char:\n                result.append(char)  # If there is no multiplier, just append the character.\n            previous_char = char\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            i += 1\n            continue\n        count = 1\n        if i > 0 and s[i - 1].isdigit():\n            count = int(s[i - 1])\n        result.append(s[i] * count)\n        i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    count = 0\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count > 0:\n                result.append(char * count)\n                count = 0\n            else:\n                result.append(char)\n\n    return ''.join(result)\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    prev_char = ''\n    count = 0\n\n    for char in s:\n        if char.isdigit():\n            count = int(char)\n        else:\n            if count == 0:\n                result.append(char)\n            else:\n                result.append(char * count)\n            count = 0\n\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)\n        else:\n            result.append(char * prev_num)\n            prev_num = 1  # Reset prev_num to 1 after using it for the current character\n            \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    previous_char = ''\n    repeat_count = 0\n    \n    for char in s:\n        if char.isdigit():\n            repeat_count = int(char)\n        else:\n            if repeat_count > 0:\n                result.append(char * repeat_count)\n            else:\n                result.append(char)\n            previous_char = char\n            \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return \"\"\n    \n    result = []\n    prev_num = 0\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = max(prev_num, int(char))\n        else:\n            result.append(char * prev_num)\n            prev_num = 0\n            \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    length = len(s)\n    \n    while i < length:\n        if s[i].isdigit():\n            if i + 1 < length and s[i + 1].isdigit():\n                i += 1\n                continue\n            count = int(s[i])\n            i += 1\n            while i < length and s[i].isalpha():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n            \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    prev_char = ''\n    prev_num = 1\n    \n    for char in s:\n        if char.isdigit():\n            prev_num = int(char)  # Update the multiplier\n        else:\n            if prev_num > 0:\n                result.append(char * prev_num)  # Expand the character\n            prev_num = 1  # Reset multiplier to 1 for next character\n    \n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    n = len(s)\n    i = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i].isdigit():\n            count = int(s[i])\n            i += 1\n            while i < n and not s[i].isdigit():\n                result.append(s[i] * count)\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef string_expansion(s):\n    if not s:\n        return ''\n    \n    result = []\n    i = 0\n    n = len(s)\n    last_num = 0\n    \n    while i < n:\n        if s[i].isdigit():\n            last_num = int(s[i])\n        else:\n            if last_num == 0:\n                result.append(s[i])\n            else:\n                result.append(s[i] * last_num)\n            last_num = 0\n        i += 1\n        \n    return ''.join(result)\n```",
            "logp": null
        }
    ]
}