{
    "0": [
        {
            "content": "def is_alt(s): \n    v = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - 1):\n        if (s[i] in v and s[i+1] in v) or (s[i] not in v and s[i+1] not in v):\n            return False\n    return True",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    v = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - 1):\n        if (s[i] in v and s[i+1] in v) or (s[i] not in v and s[i+1] not in v):\n            return False\n    return True",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    v = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - 1):\n        if (s[i] in v and s[i+1] in v) or (s[i] not in v and s[i+1] not in v):\n            return False\n    return True",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    v = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - 1):\n        if (s[i] in v and s[i+1] in v) or (s[i] not in v and s[i+1] not in v):\n            return False\n    return True",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    v = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - 1):\n        if (s[i] in v and s[i+1] in v) or (s[i] not in v and s[i+1] not in v):\n            return False\n    return True",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    vowels = re.findall(r'[aeiou]', s) \n    consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', s) \n    if len(vowels) != len(consonants): \n        return False \n    alt = True \n    for vowel, consonant in zip(vowels, consonants): \n        if s.count(vowel) != 1 or s.count(consonant) != 1: \n            alt = False \n            break \n    return alt",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    vowels = re.findall(r'[aeiou]', s) \n    consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', s) \n    if len(vowels) != len(consonants): \n        return False \n    alt = True \n    for vowel, consonant in zip(vowels, consonants): \n        if s.count(vowel) != 1 or s.count(consonant) != 1: \n            alt = False \n            break \n    return alt",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    vowels = re.findall(r'[aeiou]', s) \n    consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', s) \n    if len(vowels) != len(consonants): \n        return False \n    alt = True \n    for vowel, consonant in zip(vowels, consonants): \n        if s.count(vowel) != 1 or s.count(consonant) != 1: \n            alt = False \n            break \n    return alt",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    vowels = re.findall(r'[aeiou]', s) \n    consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', s) \n    if len(vowels) != len(consonants): \n        return False \n    alt = True \n    for vowel, consonant in zip(vowels, consonants): \n        if s.count(vowel) != 1 or s.count(consonant) != 1: \n            alt = False \n            break \n    return alt",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    vowels = re.findall(r'[aeiou]', s) \n    consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', s) \n    if len(vowels) != len(consonants): \n        return False \n    alt = True \n    for vowel, consonant in zip(vowels, consonants): \n        if s.count(vowel) != 1 or s.count(consonant) != 1: \n            alt = False \n            break \n    return alt",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def is_alt(s):\n    for char, next_char in zip(s, s[1:]):\n        if re.match('[aeiou]', char) and re.match('[aeiou]', next_char):\n            return False\n        if not re.match('[aeiou]', char) and not re.match('[aeiou]', next_char):\n            return False\n    return True",
            "logp": null
        },
        {
            "content": "def is_alt(s):\n    prev = None\n    for c in s:\n        if prev is None:\n            prev = c in 'aeiou'\n        elif prev == (c in 'aeiou'):\n            return False\n        prev = c in 'aeiou'\n    return True",
            "logp": null
        },
        {
            "content": "def is_alt(s):\n    vowels = \"aeiou\"\n    if len(s) % 2 != 0:\n        return False\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            for j in range(i+1, len(s), 2):\n                if s[j] in vowels:\n                    return False\n        else:\n            for j in range(i+1, len(s), 2):\n                if s[j] not in vowels:\n                    return False\n    return True",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def is_alt(s):\n    vowels = 'aeiou'\n    s = re.sub('[^a-z]', '', s)\n    for i in range(0, len(s)-1):\n        if s[i] in vowels and s[i+1] in vowels or s[i] not in vowels and s[i+1] not in vowels:\n            return False\n    return True",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    vowels = re.findall(r'[aeiou]', s)\n    consonants = re.findall(r'[bcdfghjklmnpqrstvwxyz]', s)\n    return len(vowels) > 0 and len(consonants) > 0 and (vowels[0] != consonants[0] and (len(vowels) == len(consonants) and all(vowels[i] != consonants[i] for i in range(len(vowels)))))",
            "logp": null
        },
        {
            "content": "def is_alt(s):\n    vowels = re.findall('[aeiou]', s)\n    consonants = re.findall('[bcdfghjklmnpqrstwxyz]', s)\n    return bool(len(vowels) == len(consonants))",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def is_alt(s): \n    v = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s) - 1):\n        if (s[i] in v and s[i+1] in v) or (s[i] not in v and s[i+1] not in v):\n            return False\n    return True",
            "logp": null
        },
        {
            "content": "def is_alt(s): \n    vowels = 'aeiou'\n    consec_vowel = False\n    for char in s:\n        if char in vowels:\n            if consec_vowel:\n                return False\n            consec_vowel = True\n        else:\n            if not consec_vowel:\n                return False\n            consec_vowel = False\n    return True",
            "logp": null
        }
    ]
}