{
    "0": {
        "0": [
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    first_note = notes[0]\n    second_note = notes[1]\n    third_note = notes[2]\n    for chord_type, interval in DCT_CHORDS.items():\n        if first_note in NOTES[NOTES.index(second_note) - interval] and second_note in NOTES[NOTES.index(third_note) - 7] and third_note in NOTES[NOTES.index(first_note) + 7]:\n            return chord_type\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == value[0][1:]:\n                return key\n    return 'Not a chord'"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\"",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\"",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\"",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\"",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\"",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\"",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\"",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\"",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\"",
            "def minor_or_major(chord):\n    notes = chord.split()\n    for k, v in DCT_CHORDS.items():\n        if tuple(sorted([notes.index(i) for i in v])) == tuple(sorted([0, 3, 7])):\n            return f\"{k}\"\n    return \"Not a chord\""
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    }
}