{
    "0": {
        "0": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: index for index, note in enumerate(notes)}\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    \n    for note in chord_notes:\n        if note in note_map:\n            intervals.append(note_map[note])\n        else:\n            return 'Not a chord'\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_list = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    if any(note not in note_list for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    first_index = note_list.index(first)\n    second_index = note_list.index(second)\n    third_index = note_list.index(third)\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(3):\n        note1 = flat_notes.index(chord_notes[i])\n        note2 = flat_notes.index(chord_notes[(i + 1) % 3])\n        interval = (note2 - note1) % 12\n        intervals.append(interval)\n\n    if intervals == [3, 4] or intervals == [4, 3]:\n        return 'Minor' if intervals == [3, 4] else 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes)}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        intervals = [note_dict[note] for note in chord_notes]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    # Function to find the index of a note, handling the dual names\n    def find_index(note):\n        for i, n in enumerate(notes):\n            if note in n:\n                return i\n        return -1\n    \n    # Find indices of each note\n    indices = [find_index(note) for note in chord_notes]\n    \n    if -1 in indices:\n        return 'Not a chord'\n    \n    # Calculate intervals\n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = [flat_notes.index(n) for n in chord_notes]\n    if len(set(indices)) != 3:\n        return 'Not a chord'\n    \n    intervals = [(indices[1] - indices[0]) % 12, (indices[2] - indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    # Flatten the notes list for easier indexing\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n\n    # Split the input chord into individual notes\n    chord_notes = chord.split()\n    \n    # Check if we have exactly 3 notes\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n\n    # Find the indices of the notes in the flat_notes list\n    try:\n        indices = [flat_notes.index(note) for note in chord_notes]\n    except ValueError:\n        return 'Not a chord'\n\n    # Calculate intervals\n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: index for index, note in enumerate(notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first = note_dict[chord_notes[0]]\n        second = note_dict[chord_notes[1]]\n        third = note_dict[chord_notes[2]]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n for sublist in notes for n in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first_index = flat_notes.index(chord_notes[0])\n    second_index = flat_notes.index(chord_notes[1])\n    third_index = flat_notes.index(chord_notes[2])\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_to_index = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_to_index for note in chord_notes):\n        return 'Not a chord'\n    \n    intervals = [(note_to_index[chord_notes[i + 1]] - note_to_index[chord_notes[i]]) % 12 for i in range(2)]\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_flat for note in chord_notes):\n        return 'Not a chord'\n    \n    first_index = notes_flat.index(chord_notes[0])\n    second_index = notes_flat.index(chord_notes[1])\n    third_index = notes_flat.index(chord_notes[2])\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n\n    intervals = []\n    for i in range(3):\n        interval = (flat_notes.index(chord_notes[(i + 1) % 3]) - flat_notes.index(chord_notes[i])) % 12\n        intervals.append(interval)\n\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_flat for note in chord_notes):\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(2):\n        first_index = notes_flat.index(chord_notes[i])\n        second_index = notes_flat.index(chord_notes[i + 1])\n        interval = (second_index - first_index) % 12\n        intervals.append(interval)\n    \n    total_interval = (notes_flat.index(chord_notes[2]) - notes_flat.index(chord_notes[0])) % 12\n    \n    if intervals == [3, 4] and total_interval == 7:\n        return 'Minor'\n    elif intervals == [4, 3] and total_interval == 7:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = flat_notes.index(first)\n    second_index = flat_notes.index(second)\n    third_index = flat_notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note for note in notes]\n    \n    note_list = chord.split()\n    if len(note_list) != 3:\n        return 'Not a chord'\n\n    indices = []\n    for note in note_list:\n        found = False\n        for i, n in enumerate(notes_flat):\n            if n == note:\n                indices.append(i)\n                found = True\n                break\n        if not found:\n            return 'Not a chord'\n    \n    intervals = [(indices[i] - indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'Db', 'D', 'D#', 'Eb', 'E', 'F', 'F#', 'Gb', 'G', 'G#', 'Ab', 'A', 'A#', 'Bb', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    if any(note not in notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = [notes_flat.index(note) for note in chord_notes if note in notes_flat]\n    \n    if len(indices) != 3:\n        return 'Not a chord'\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_index = {note: i for i, note in enumerate(notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first, second, third = chord_notes\n        interval1 = (note_index[second] - note_index[first]) % 12\n        interval2 = (note_index[third] - note_index[second]) % 12\n        \n        if interval1 == 3 and interval2 == 4:\n            return 'Minor'\n        elif interval1 == 4 and interval2 == 3:\n            return 'Major'\n        else:\n            return 'Not a chord'\n    except KeyError:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flattened_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flattened_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    index_first = flattened_notes.index(first)\n    index_second = flattened_notes.index(second)\n    index_third = flattened_notes.index(third)\n    \n    interval_1_2 = (index_second - index_first) % 12\n    interval_2_3 = (index_third - index_second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: index for index, note in enumerate(notes) if isinstance(note, str)}\n    for sublist in notes:\n        if isinstance(sublist, list):\n            for note in sublist:\n                note_map[note] = index\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first, second, third = note_map[chord_notes[0]], note_map[chord_notes[1]], note_map[chord_notes[2]]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```"
        ],
        "1": [
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n\n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    if first not in notes or second not in notes or third not in notes:\n        return 'Not a chord'\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [item if isinstance(item, str) else item[0] for item in notes]\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n\n    intervals = []\n    for i in range(2):\n        first_note_index = flat_notes.index(chord_notes[i])\n        second_note_index = flat_notes.index(chord_notes[i + 1])\n        interval = (second_note_index - first_note_index) % 12\n        intervals.append(interval)\n\n    total_interval = (flat_notes.index(chord_notes[2]) - flat_notes.index(chord_notes[0])) % 12\n\n    if intervals == [3, 4] and total_interval == 7:\n        return 'Minor'\n    elif intervals == [4, 3] and total_interval == 7:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: idx for idx, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chords = chord.split()\n    if len(chords) != 3 or any(n not in note_dict for n in chords):\n        return \"Not a chord\"\n    \n    intervals = [note_dict[chords[1]] - note_dict[chords[0]], note_dict[chords[2]] - note_dict[chords[1]]]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [n if isinstance(n, str) else n[0] for n in notes]  # Flatten the notes for easier indexing\n    notes_dict = {note: index for index, note in enumerate(notes_flat)}\n    \n    chords = chord.split()\n    \n    if len(chords) != 3 or any(n not in notes_flat for n in chords):\n        return \"Not a chord\"\n    \n    intervals = [(notes_dict[chords[i + 1]] - notes_dict[chords[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    flat_notes += [note if isinstance(note, str) else note[1] for note in notes]\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    indices = [flat_notes.index(note) for note in chord_notes if note in flat_notes]\n    if len(indices) != 3:\n        return \"Not a chord\"\n\n    intervals = [(indices[1] - indices[0]) % 12, (indices[2] - indices[1]) % 12]\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indices.append(i)\n                break\n\n    if len(indices) != 3:\n        return 'Not a chord'\n    \n    intervals = [indices[1] - indices[0], indices[2] - indices[1], indices[2] - indices[0]]\n    \n    if intervals == [3, 4, 7]:\n        return 'Minor'\n    elif intervals == [4, 3, 7]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        indices = [notes.index(note) for note in chord_notes]\n    except ValueError:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]  # Flatten notes list\n    flat_notes += [note if isinstance(note, str) else note[1] for note in notes if isinstance(note, list)]  # Add the sharps/flats\n    flat_notes = list(dict.fromkeys(flat_notes))  # Remove duplicates while preserving order\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n\n    indices = [flat_notes.index(note) for note in chord_notes if note in flat_notes]\n\n    if len(indices) != 3:\n        return 'Not a chord'\n\n    intervals = [(indices[1] - indices[0]) % 12, (indices[2] - indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    first, second, third = chord_notes\n    \n    if first not in notes or second not in notes or third not in notes:\n        return \"Not a chord\"\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    positions = [flat_notes.index(note) for note in chord_notes if note in flat_notes]\n    \n    if len(positions) != 3:\n        return 'Not a chord'\n\n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    \n    for note in chord_notes:\n        if note not in notes:\n            return \"Not a chord\"\n        intervals.append(notes.index(note))\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3 or any(note not in notes_list for note in notes):\n        return \"Not a chord\"\n    \n    first, second, third = notes\n    first_index = notes_list.index(first)\n    second_index = notes_list.index(second)\n    third_index = notes_list.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    try:\n        first = flat_notes.index(chord_notes[0])\n        second = flat_notes.index(chord_notes[1])\n        third = flat_notes.index(chord_notes[2])\n    except ValueError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    \n    for note in chord_notes:\n        if note not in flat_notes:\n            return \"Not a chord\"\n        intervals.append(flat_notes.index(note))\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    interval3 = (intervals[2] - intervals[0]) % 12\n    \n    if interval1 == 3 and interval2 == 4 and interval3 == 7:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3 and interval3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_to_index = {note: index for index, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        intervals = [\n            (note_to_index[chord_notes[1]] - note_to_index[chord_notes[0]]) % 12,\n            (note_to_index[chord_notes[2]] - note_to_index[chord_notes[1]]) % 12\n        ]\n    except KeyError:\n        return \"Not a chord\"\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: index for index, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or not all(note in note_dict for note in chord_notes):\n        return 'Not a chord'\n    \n    intervals = [\n        (note_dict[chord_notes[1]] - note_dict[chord_notes[0]]) % 12,\n        (note_dict[chord_notes[2]] - note_dict[chord_notes[1]]) % 12\n    ]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes = {note: i for i, note in enumerate(notes_list) for note in (note if isinstance(note, list) else [note])}\n    \n    notes_in_chord = chord.split()\n    \n    if len(notes_in_chord) != 3 or any(note not in notes for note in notes_in_chord):\n        return 'Not a chord'\n    \n    intervals = [notes[notes_in_chord[i + 1]] - notes[notes_in_chord[i]] for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    note_names = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in note_names:\n            note_indices.append(note_names.index(note))\n        else:\n            return \"Not a chord\"\n\n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: index for index, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    indices = [note_indices[note] for note in chord_notes if note in note_indices]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n\n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ],
        "2": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        index = flat_notes.index(note)\n        intervals.append(index)\n\n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = [notes.index(note) for note in chord_notes]\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_positions = {note: index for index, note in enumerate(['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'])}\n    \n    try:\n        first = note_positions[notes[0]]\n        second = note_positions[notes[1]]\n        third = note_positions[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    indices = [scale.index(note) for note in notes]\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    interval3 = (indices[2] - indices[0]) % 12\n    \n    if interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    elif interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    note_positions = {}\n    for i, note in enumerate(notes):\n        if isinstance(note, list):\n            for alias in note:\n                note_positions[alias] = i\n        else:\n            note_positions[note] = i\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first = note_positions[chord_notes[0]]\n        second = note_positions[chord_notes[1]]\n        third = note_positions[chord_notes[2]]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    note_indices = {note: index for index, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [note_indices[n] for n in chord_notes if n in note_indices]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    intervals = [(indices[i] - indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes] + [note[1] for note in notes if isinstance(note, list)]\n    flat_notes = {note: index for index, note in enumerate(flat_notes)}\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return 'Not a chord'\n\n    intervals = [flat_notes[chord_notes[1]] - flat_notes[chord_notes[0]], \n                 flat_notes[chord_notes[2]] - flat_notes[chord_notes[1]]]\n\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in flat_notes:\n            return \"Not a chord\"\n    \n    first, second, third = flat_notes.index(chord_notes[0]), flat_notes.index(chord_notes[1]), flat_notes.index(chord_notes[2])\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: i for i, note in enumerate(notes) if isinstance(note, str)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in note_indices for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [(note_indices[chord_notes[i + 1]] - note_indices[chord_notes[i]]) % 12 for i in range(2)]\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord = chord.split()\n    \n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for index, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return index\n        return -1\n    \n    first, second, third = map(get_note_index, chord)\n    \n    if first == -1 or second == -1 or third == -1:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    elif interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    # Get the indices of the notes in the chord\n    indices = [notes.index(note) for note in chord_notes]\n    \n    # Calculate intervals\n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes) if isinstance(note, str)}\n    for i, note in enumerate(notes):\n        if isinstance(note, list):\n            for alias in note:\n                note_dict[alias] = i\n                \n    elements = chord.split()\n    if len(elements) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first = note_dict[elements[0]]\n        second = note_dict[elements[1]]\n        third = note_dict[elements[2]]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    interval_1_3 = (third - first) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4 and interval_1_3 == 7:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3 and interval_1_3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval_1_2 = (note_indices[1] - note_indices[0]) % 12\n    interval_2_3 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    elif interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_indices for note in chord_notes):\n        return \"Not a chord\"\n\n    first, second, third = chord_notes\n    interval_1_2 = (note_indices[second] - note_indices[first]) % 12\n    interval_2_3 = (note_indices[third] - note_indices[second]) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    if first not in notes or second not in notes or third not in notes:\n        return 'Not a chord'\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n\n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_map for note in chord_notes):\n        return \"Not a chord\"\n    \n    first, second, third = chord_notes\n    interval1 = (note_map[second] - note_map[first]) % 12\n    interval2 = (note_map[third] - note_map[second]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: idx for idx, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_dict for note in chord_notes):\n        return \"Not a chord\"\n\n    intervals = [note_dict[chord_notes[1]] - note_dict[chord_notes[0]],\n                 note_dict[chord_notes[2]] - note_dict[chord_notes[1]]]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return \"Not a chord\"\n    \n    note_indices = [flat_notes.index(note) for note in chord_notes]\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    elif interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    idx1 = notes.index(chord_notes[0])\n    idx2 = notes.index(chord_notes[1])\n    idx3 = notes.index(chord_notes[2])\n    \n    interval1 = (idx2 - idx1) % 12\n    interval2 = (idx3 - idx2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ]
    }
}