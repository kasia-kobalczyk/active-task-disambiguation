{
    "0": {
        "0": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: index for index, note in enumerate(notes)}\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    \n    for note in chord_notes:\n        if note in note_map:\n            intervals.append(note_map[note])\n        else:\n            return 'Not a chord'\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_list = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    if any(note not in note_list for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    first_index = note_list.index(first)\n    second_index = note_list.index(second)\n    third_index = note_list.index(third)\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                intervals.append(i)\n                break\n    \n    if len(intervals) != 3:\n        return 'Not a chord'\n    \n    interval1 = intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1]\n    \n    if interval1 < 0: interval1 += 12\n    if interval2 < 0: interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes)}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first, second, third = [note_dict[note] for note in chord_notes]\n    except KeyError:\n        return 'Not a chord'\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    # Function to find the index of a note in the chromatic scale\n    def find_index(note):\n        for i, n in enumerate(notes):\n            if note in n:\n                return i\n        return -1\n    \n    # Find indices of the notes\n    indices = [find_index(note) for note in chord_notes]\n    \n    if -1 in indices:\n        return 'Not a chord'\n    \n    # Calculate intervals\n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    def find_note_index(note):\n        for index, value in enumerate(notes):\n            if note in (value if isinstance(value, list) else [value]):\n                return index\n        return -1\n    \n    indices = [find_note_index(note) for note in chord_notes]\n    \n    if -1 in indices:\n        return 'Not a chord'\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_indices = {note: index for index, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        indices = [note_indices[note] for note in chord_notes]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    def find_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    indices = [find_index(note) for note in chord_notes]\n    \n    if any(index == -1 for index in indices):\n        return 'Not a chord'\n    \n    interval_1_2 = indices[1] - indices[0]\n    interval_2_3 = indices[2] - indices[1]\n    \n    if interval_1_2 < 0:\n        interval_1_2 += 12\n    if interval_2_3 < 0:\n        interval_2_3 += 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [n for sublist in notes for n in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_flat for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    first_idx = notes_flat.index(first)\n    second_idx = notes_flat.index(second)\n    third_idx = notes_flat.index(third)\n    \n    interval1 = (second_idx - first_idx) % 12\n    interval2 = (third_idx - second_idx) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_to_index = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_to_index for note in chord_notes):\n        return 'Not a chord'\n    \n    intervals = [(note_to_index[chord_notes[i + 1]] - note_to_index[chord_notes[i]]) % 12 for i in range(2)]\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3 or any(note not in notes_flat for note in chord_elements):\n        return 'Not a chord'\n    \n    first_index = notes_flat.index(chord_elements[0])\n    second_index = notes_flat.index(chord_elements[1])\n    third_index = notes_flat.index(chord_elements[2])\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n\n    first, second, third = flat_notes.index(chord_notes[0]), flat_notes.index(chord_notes[1]), flat_notes.index(chord_notes[2])\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [item for sublist in notes for item in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_flat for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    first_index = notes_flat.index(first)\n    second_index = notes_flat.index(second)\n    third_index = notes_flat.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = flat_notes.index(first)\n    second_index = flat_notes.index(second)\n    third_index = flat_notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note for note in notes]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    # Calculate the intervals\n    indices = [notes_flat.index(note) for note in chord_notes]\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n\n    first, second, third = chord_notes\n\n    try:\n        first_index = notes.index(first)\n        second_index = notes.index(second)\n        third_index = notes.index(third)\n    except ValueError:\n        return 'Not a chord'\n\n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    if all(note in notes_flat for note in chord_notes):\n        first, second, third = chord_notes\n        first_index = notes_flat.index(first)\n        second_index = notes_flat.index(second)\n        third_index = notes_flat.index(third)\n        \n        interval1 = (second_index - first_index) % 12\n        interval2 = (third_index - second_index) % 12\n        \n        if interval1 == 3 and interval2 == 4:\n            return 'Minor'\n        elif interval1 == 4 and interval2 == 3:\n            return 'Major'\n        else:\n            return 'Not a chord'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_elements = chord.split()\n\n    if len(chord_elements) != 3:\n        return 'Not a chord'\n\n    intervals = []\n    for note in chord_elements:\n        if note not in notes_flat:\n            return 'Not a chord'\n        intervals.append(notes_flat.index(note))\n\n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    interval_1_3 = (intervals[2] - intervals[0]) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4 and interval_1_3 == 7:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3 and interval_1_3 == 7:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flattened_notes = [note if isinstance(note, str) else note for sublist in notes for note in sublist]\n    note_indices = {note: index for index, note in enumerate(flattened_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_indices for note in chord_notes):\n        return 'Not a chord'\n    \n    intervals = [note_indices[chord_notes[i + 1]] - note_indices[chord_notes[i]] for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: index for index, note in enumerate(notes) if isinstance(note, str)}\n    for sublist in notes:\n        if isinstance(sublist, list):\n            for note in sublist:\n                note_map[note] = index\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first, second, third = note_map[chord_notes[0]], note_map[chord_notes[1]], note_map[chord_notes[2]]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```"
        ],
        "1": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in notes:\n            return 'Not a chord'\n        intervals.append(notes.index(note))\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def find_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    idx1, idx2, idx3 = find_index(chord_notes[0]), find_index(chord_notes[1]), find_index(chord_notes[2])\n    \n    if idx1 == -1 or idx2 == -1 or idx3 == -1:\n        return \"Not a chord\"\n    \n    interval1 = (idx2 - idx1) % 12\n    interval2 = (idx3 - idx2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    for note in chord_notes:\n        found = False\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                note_indices.append(i)\n                found = True\n                break\n        if not found:\n            return 'Not a chord'\n    \n    intervals = [note_indices[1] - note_indices[0], note_indices[2] - note_indices[1]]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n\n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in n:\n                return i\n        return None\n    \n    indices = [get_note_index(note) for note in chord_notes]\n    \n    if None in indices:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: index for index, note in enumerate(notes) if isinstance(note, str)}\n    note_map.update({alt: index for index, note in enumerate(notes) for alt in note if isinstance(note, list)})\n    \n    chords = chord.split()\n    if len(chords) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(2):\n        if chords[i] not in note_map or chords[i + 1] not in note_map:\n            return \"Not a chord\"\n        intervals.append((note_map[chords[i + 1]] - note_map[chords[i]]) % 12)\n\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    indices = [flat_notes.index(note) if note in flat_notes else flat_notes.index(note[0]) for note in chord_notes]\n\n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        try:\n            index = flat_notes.index(note)\n            intervals.append(index)\n        except ValueError:\n            return \"Not a chord\"\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n\n    indexes = [get_note_index(note) for note in chord_notes]\n    \n    if -1 in indexes:\n        return \"Not a chord\"\n    \n    interval1 = indexes[1] - indexes[0]\n    interval2 = indexes[2] - indexes[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(3):\n        intervals.append(note_map[chord_notes[i]] % 12)\n\n    intervals = sorted(intervals)\n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def find_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return None\n    \n    indices = [find_index(note) for note in chord_notes]\n    \n    if None in indices:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0: interval1 += 12\n    if interval2 < 0: interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_positions = {note: index for index, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_positions for note in chord_notes):\n        return 'Not a chord'\n\n    intervals = [\n        (note_positions[chord_notes[1]] - note_positions[chord_notes[0]]) % 12,\n        (note_positions[chord_notes[2]] - note_positions[chord_notes[1]]) % 12\n    ]\n\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for index, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return index\n        return -1\n\n    first, second, third = map(get_note_index, chord_notes)\n    \n    if first == -1 or second == -1 or third == -1:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: idx for idx, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_dict for note in chord_notes):\n        return \"Not a chord\"\n\n    intervals = [note_dict[chord_notes[1]] - note_dict[chord_notes[0]], note_dict[chord_notes[2]] - note_dict[chord_notes[1]]]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3:\n        return 'Not a chord'\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    first = get_note_index(chord_elements[0])\n    second = get_note_index(chord_elements[1])\n    third = get_note_index(chord_elements[2])\n    \n    if first == -1 or second == -1 or third == -1:\n        return 'Not a chord'\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    indices.append(i)\n                    break\n            else:\n                if note == n:\n                    indices.append(i)\n                    break\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                intervals.append(i)\n                break\n    \n    if len(intervals) != 3:\n        return 'Not a chord'\n    \n    interval1 = intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n\n    chords = chord.split()\n    \n    if len(chords) != 3 or not all(note in note_indices for note in chords):\n        return 'Not a chord'\n    \n    intervals = [(note_indices[chords[1]] - note_indices[chords[0]]) % 12,\n                 (note_indices[chords[2]] - note_indices[chords[1]]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]  # Flatten the notes\n    chord_notes = chord.split()\n\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    intervals = []\n    for note in chord_notes:\n        if note not in flat_notes:\n            return \"Not a chord\"\n        intervals.append(flat_notes.index(note))\n\n    interval1 = intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    if first not in notes or second not in notes or third not in notes:\n        return 'Not a chord'\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [n if isinstance(n, str) else n[0] for n in notes]\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or not all(note in notes_flat for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(2):\n        first_note_index = notes_flat.index(chord_notes[i])\n        second_note_index = notes_flat.index(chord_notes[i + 1])\n        interval = (second_note_index - first_note_index) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ],
        "2": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    note_indices = {note: index for index, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_indices for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [(note_indices[chord_notes[i+1]] - note_indices[chord_notes[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_indices = {note: index for index, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first, second, third = note_indices[chord_notes[0]], note_indices[chord_notes[1]], note_indices[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: index for index, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    elements = chord.split()\n    \n    if len(elements) != 3 or any(el not in note_dict for el in elements):\n        return \"Not a chord\"\n    \n    intervals = [note_dict[elements[1]] - note_dict[elements[0]], \n                 note_dict[elements[2]] - note_dict[elements[1]]]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    flat_notes += [note if isinstance(note, str) else note[1] for note in notes]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    indices = []\n    for note in chord_notes:\n        if note in flat_notes:\n            indices.append(flat_notes.index(note))\n        else:\n            return \"Not a chord\"\n\n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    for note in notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(i)\n                break\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n\n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(2):\n        interval = (notes.index(chord_notes[i + 1]) - notes.index(chord_notes[i])) % 12\n        intervals.append(interval)\n    \n    if sum(intervals) == 7 and intervals == [3, 4]:\n        return \"Minor\"\n    elif sum(intervals) == 7 and intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in notes:\n        found = False\n        for i, n in enumerate(NOTES):\n            if note in n:\n                indices.append(i)\n                found = True\n                break\n        if not found:\n            return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(2):\n        interval = (notes.index(chord_notes[i + 1]) - notes.index(chord_notes[i])) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = [(notes.index(chord_notes[i]) - notes.index(chord_notes[i-1])) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    # Flatten the notes list\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    # Create a mapping of notes to their indices\n    note_to_index = {note: i for i, note in enumerate(flat_notes)}\n    \n    try:\n        # Get the indices of the notes in the chord\n        indices = [note_to_index[note] for note in chord_notes]\n    except KeyError:\n        return \"Not a chord\"\n    \n    # Calculate intervals\n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    first, second, third = chord_notes\n    \n    if first not in notes or second not in notes or third not in notes:\n        return \"Not a chord\"\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_positions = {note: idx for idx, sublist in enumerate(NOTES) for note in sublist}\n    \n    try:\n        n1, n2, n3 = note_positions[notes[0]], note_positions[notes[1]], note_positions[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (n2 - n1) % 12\n    interval2 = (n3 - n2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    indices = [note_index(note) for note in chord_notes]\n    \n    if -1 in indices:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0] if indices[1] >= indices[0] else indices[1] + 12 - indices[0]\n    interval2 = indices[2] - indices[1] if indices[2] >= indices[1] else indices[2] + 12 - indices[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval_1_2 = (note_indices[1] - note_indices[0]) % 12\n    interval_2_3 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    for note in notes:\n        for i, possible_notes in enumerate(NOTES):\n            if note in possible_notes:\n                note_indices.append(i)\n                break\n    \n    if len(note_indices) != 3:\n        return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    for note in notes:\n        for i, group in enumerate(NOTES):\n            if note in group:\n                note_indices.append(i)\n                break\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n\n    intervals = [(note_indices[1] - note_indices[0]) % 12, (note_indices[2] - note_indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(2):\n        first_note_index = notes.index(chord_notes[i])\n        second_note_index = notes.index(chord_notes[i + 1])\n        interval = (second_note_index - first_note_index) % 12\n        intervals.append(interval)\n\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    for note in notes:\n        for i, value in enumerate(NOTES):\n            if note in value:\n                note_indices.append(i)\n                break\n\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n\n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    return i\n            elif note == n:\n                return i\n        return -1\n    \n    indices = [get_note_index(n) for n in chord_notes]\n    \n    if -1 in indices:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    note_names = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in note_names:\n            note_indices.append(note_names.index(note))\n        else:\n            return \"Not a chord\"\n    \n    intervals = [(note_indices[i] - note_indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ],
        "3": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in flat_notes:\n            return \"Not a chord\"\n        intervals.append(flat_notes.index(note))\n\n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_to_index = {note: i for i, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first, second, third = [note_to_index[note] for note in chord_notes]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    total_interval = (third - first) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord = chord.split()\n    \n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes.index(n) for n in chord]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    indices = [note_index(n) for n in chord_notes]\n    \n    if -1 in indices:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes.index(note) for note in chord_notes]\n    except ValueError:\n        return \"Not a chord\"\n\n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    indices = [notes.index(note) for note in chord_notes]\n    intervals = [indices[1] - indices[0], indices[2] - indices[1]]\n\n    if intervals[0] < 0:\n        intervals[0] += 12\n    if intervals[1] < 0:\n        intervals[1] += 12\n\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    note_positions = {note: i for i, note in enumerate(['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'])}\n    \n    for i in range(2):\n        interval = (note_positions[notes[i + 1]] - note_positions[notes[i]]) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flattened_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in flattened_notes:\n            return \"Not a chord\"\n\n    first_index = flattened_notes.index(chord_notes[0])\n    second_index = flattened_notes.index(chord_notes[1])\n    third_index = flattened_notes.index(chord_notes[2])\n    \n    interval_1 = (second_index - first_index) % 12\n    interval_2 = (third_index - second_index) % 12\n\n    if interval_1 == 3 and interval_2 == 4:\n        return \"Minor\"\n    elif interval_1 == 4 and interval_2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord = chord.split()\n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(3):\n        note_index = flat_notes.index(chord[i])\n        intervals.append(note_index)\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        intervals = [note_dict[note] for note in chord_notes]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    positions = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_to_index = {note: i for i, note in enumerate(notes) if isinstance(note, str)}\n    note_to_index.update({alias: i for i, aliases in enumerate(notes) for alias in aliases if isinstance(aliases, list)})\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [note_to_index[note] for note in chord_notes]\n    except KeyError:\n        return \"Not a chord\"\n    \n    intervals = [(indices[i] - indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ],
        "4": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        idx1 = notes.index(chord_notes[0])\n        idx2 = notes.index(chord_notes[1])\n        idx3 = notes.index(chord_notes[2])\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (idx2 - idx1) % 12\n    interval2 = (idx3 - idx2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_to_index = {note: index for index, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_to_index for note in chord_notes):\n        return \"Not a chord\"\n\n    indices = [note_to_index[note] for note in chord_notes]\n\n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in notes:\n            return 'Not a chord'\n        intervals.append(notes.index(note))\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = chord.split()\n    if len(notes_list) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    for note in notes_list:\n        if note in notes:\n            note_indices.append(notes.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    flat_notes += [note if isinstance(note, str) else note[1] for note in notes]\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return \"Not a chord\"\n    \n    indices = [flat_notes.index(note) for note in chord_notes]\n    intervals = [(indices[1] - indices[0]) % 12, (indices[2] - indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_index = {note: i for i, note in enumerate(flat_notes)}\n    \n    chords = chord.split()\n    if len(chords) != 3 or any(note not in note_index for note in chords):\n        return \"Not a chord\"\n    \n    intervals = [(note_index[chords[i + 1]] - note_index[chords[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first, second, third = note_map[chord_notes[0]], note_map[chord_notes[1]], note_map[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    interval3 = (indices[2] - indices[0]) % 12\n\n    if interval1 == 3 and interval2 == 4 and interval3 == 7:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3 and interval3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    positions = [notes_list.index(note) for note in notes if note in notes_list]\n    \n    if len(positions) != 3:\n        return \"Not a chord\"\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        intervals = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: idx for idx, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first, second, third = note_indices[chord_notes[0]], note_indices[chord_notes[1]], note_indices[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate([n if isinstance(n, str) else n[0] for n in notes])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in note_dict for note in chord_notes):\n        return \"Not a chord\"\n    \n    first, second, third = [note_dict[n] for n in chord_notes]\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_flat for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = notes_flat.index(first)\n    second_index = notes_flat.index(second)\n    third_index = notes_flat.index(third)\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n\n    intervals = []\n    for i in range(3):\n        interval = (flat_notes.index(chord_notes[(i + 1) % 3]) - flat_notes.index(chord_notes[i])) % 12\n        intervals.append(interval)\n\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [item for sublist in notes for item in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_flat for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    first_index = notes_flat.index(first)\n    second_index = notes_flat.index(second)\n    third_index = notes_flat.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = flat_notes.index(first)\n    second_index = flat_notes.index(second)\n    third_index = flat_notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note for note in notes]\n    \n    note_list = chord.split()\n    if len(note_list) != 3:\n        return 'Not a chord'\n\n    indices = []\n    for note in note_list:\n        found = False\n        for i, n in enumerate(notes_flat):\n            if note in n:\n                indices.append(i)\n                found = True\n                break\n        if not found:\n            return 'Not a chord'\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'Db', 'D', 'D#', 'Eb', 'E', 'F', 'F#', 'Gb', 'G', 'G#', 'Ab', 'A', 'A#', 'Bb', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    if any(note not in notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        indices = [notes_flat.index(note) for note in chord_notes]\n    except ValueError:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_index = {note: i for i, note in enumerate(notes)}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(2):\n        first_note = chord_notes[i]\n        second_note = chord_notes[i + 1]\n        first_index = note_index[first_note]\n        second_index = note_index[second_note]\n        interval = (second_index - first_index) % 12\n        intervals.append(interval)\n\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flattened_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flattened_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = flattened_notes.index(first)\n    second_index = flattened_notes.index(second)\n    third_index = flattened_notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) if isinstance(note, str)}\n    for sublist in notes:\n        if isinstance(sublist, list):\n            for note in sublist:\n                note_map[note] = note_map[sublist[0]]\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first, second, third = note_map[chord_notes[0]], note_map[chord_notes[1]], note_map[chord_notes[2]]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n\n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n\n    first, second, third = chord_notes\n    first_index = flat_notes.index(first)\n    second_index = flat_notes.index(second)\n    third_index = flat_notes.index(third)\n\n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(3):\n        note_index = flat_notes.index(chord_notes[i])\n        next_note_index = flat_notes.index(chord_notes[(i + 1) % 3])\n        interval = (next_note_index - note_index) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4] or intervals == [4, 3]:\n        return 'Minor' if intervals == [3, 4] else 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indices.append(i)\n                break\n        else:\n            return 'Not a chord'\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    if first not in flat_notes or second not in flat_notes or third not in flat_notes:\n        return 'Not a chord'\n    \n    first_idx = flat_notes.index(first)\n    second_idx = flat_notes.index(second)\n    third_idx = flat_notes.index(third)\n    \n    interval1 = (second_idx - first_idx) % 12\n    interval2 = (third_idx - second_idx) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_list = chord.split()\n    \n    if len(chord_list) != 3:\n        return 'Not a chord'\n    \n    positions = []\n    for note in chord_list:\n        for idx, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                positions.append(idx)\n                break\n    else:\n        return 'Not a chord'\n\n    intervals = [positions[1] - positions[0], positions[2] - positions[1]]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {}\n    index = 0\n    for note in notes:\n        if isinstance(note, list):\n            for alt_note in note:\n                note_dict[alt_note] = index\n        else:\n            note_dict[note] = index\n        index += 1\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first, second, third = [note_dict[note] for note in chord_notes]\n    except KeyError:\n        return 'Not a chord'\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    def get_note_index(note):\n        for index, item in enumerate(notes):\n            if isinstance(item, list):\n                if note in item:\n                    return index\n            elif item == note:\n                return index\n        return -1\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    first, second, third = chord_notes\n    first_index = get_note_index(first)\n    second_index = get_note_index(second)\n    third_index = get_note_index(third)\n\n    if first_index == -1 or second_index == -1 or third_index == -1:\n        return \"Not a chord\"\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        intervals = [\n            flat_notes.index(chord_notes[1]) - flat_notes.index(chord_notes[0]),\n            flat_notes.index(chord_notes[2]) - flat_notes.index(chord_notes[1])\n        ]\n    except ValueError:\n        return 'Not a chord'\n\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    \n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    note_indices.append(i)\n                    break\n            elif note == n:\n                note_indices.append(i)\n                break\n    if len(note_indices) != 3:\n        return 'Not a chord'\n    \n    intervals = [(note_indices[1] - note_indices[0]) % 12, (note_indices[2] - note_indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    positions = []\n    for note in chord_notes:\n        for index, element in enumerate(notes):\n            if isinstance(element, list):\n                if note in element:\n                    positions.append(index)\n                    break\n            else:\n                if note == element:\n                    positions.append(index)\n                    break\n    \n    if len(positions) < 3:\n        return 'Not a chord'\n    \n    interval1 = positions[1] - positions[0]\n    interval2 = positions[2] - positions[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```"
        ],
        "1": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    flat_notes += [note if isinstance(note, str) else note[1] for note in notes]\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n\n    intervals = []\n    for note in chord_notes:\n        if note not in flat_notes:\n            return 'Not a chord'\n\n    first_index = flat_notes.index(chord_notes[0])\n    second_index = flat_notes.index(chord_notes[1])\n    third_index = flat_notes.index(chord_notes[2])\n\n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    flat_notes.extend(note[1] for note in notes if isinstance(note, list))\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [flat_notes.index(note) for note in chord_notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n\n    indexes = [get_note_index(note) for note in chord_notes]\n    \n    if -1 in indexes:\n        return \"Not a chord\"\n    \n    interval1 = indexes[1] - indexes[0]\n    interval2 = indexes[2] - indexes[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    intervals = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                intervals.append(i)\n                break\n\n    if len(intervals) != 3:\n        return \"Not a chord\"\n\n    interval_1_2 = intervals[1] - intervals[0] if intervals[1] >= intervals[0] else 12 + intervals[1] - intervals[0]\n    interval_2_3 = intervals[2] - intervals[1] if intervals[2] >= intervals[1] else 12 + intervals[2] - intervals[1]\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_positions = {note: index for index, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_positions for note in chord_notes):\n        return 'Not a chord'\n    \n    intervals = [\n        (note_positions[chord_notes[1]] - note_positions[chord_notes[0]]) % 12,\n        (note_positions[chord_notes[2]] - note_positions[chord_notes[1]]) % 12\n    ]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for index, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return index\n        return -1\n\n    first, second, third = map(get_note_index, chord_notes)\n    \n    if first == -1 or second == -1 or third == -1:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3:\n        return 'Not a chord'\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    first = get_note_index(chord_elements[0])\n    second = get_note_index(chord_elements[1])\n    third = get_note_index(chord_elements[2])\n    \n    if first == -1 or second == -1 or third == -1:\n        return 'Not a chord'\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    indices.append(i)\n                    break\n            else:\n                if note == n:\n                    indices.append(i)\n                    break\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                intervals.append(i)\n                break\n    \n    if len(intervals) != 3:\n        return 'Not a chord'\n    \n    interval1 = intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord = chord.split()\n    \n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(3):\n        note_index = notes.index(chord[i])\n        next_index = notes.index(chord[(i + 1) % 3])\n        interval = (next_index - note_index) % 12\n        intervals.append(interval)\n    \n    if intervals[0] == 3 and intervals[1] == 4:\n        return \"Minor\"\n    elif intervals[0] == 4 and intervals[1] == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n\n    chords = chord.split()\n    \n    if len(chords) != 3 or not all(note in note_indices for note in chords):\n        return 'Not a chord'\n    \n    intervals = [(note_indices[chords[1]] - note_indices[chords[0]]) % 12,\n                 (note_indices[chords[2]] - note_indices[chords[1]]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [n if isinstance(n, str) else n[0] for n in notes]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in chord_notes:\n        if note in notes_flat:\n            indices.append(notes_flat.index(note))\n        else:\n            return \"Not a chord\"\n    \n    intervals = [(indices[i] - indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    if first not in notes or second not in notes or third not in notes:\n        return 'Not a chord'\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval_1_2 = (note_indices[1] - note_indices[0]) % 12\n    interval_2_3 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [n if isinstance(n, str) else n[0] for n in notes]\n    \n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3 or not all(note in notes_flat for note in chord_elements):\n        return 'Not a chord'\n    \n    first, second, third = chord_elements\n    first_index = notes_flat.index(first)\n    second_index = notes_flat.index(second)\n    third_index = notes_flat.index(third)\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    \n    for note in chord_elements:\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    note_index = i\n                    break\n            elif note == n:\n                note_index = i\n                break\n        else:\n            return \"Not a chord\"\n        \n        intervals.append(note_index)\n\n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    elements = chord.split()\n    \n    if len(elements) != 3 or not all(elem in note_dict for elem in elements):\n        return \"Not a chord\"\n    \n    first, second, third = note_dict[elements[0]], note_dict[elements[1]], note_dict[elements[2]]\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: idx for idx, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_dict for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [(note_dict[chord_notes[i + 1]] - note_dict[chord_notes[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = [notes.index(chord_notes[1]) - notes.index(chord_notes[0]),\n                 notes.index(chord_notes[2]) - notes.index(chord_notes[1])]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    positions = []\n    for note in chord_notes:\n        found = False\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                positions.append(i)\n                found = True\n                break\n        if not found:\n            return \"Not a chord\"\n    \n    intervals = [(positions[1] - positions[0]) % 12, (positions[2] - positions[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return 'Not a chord'\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```"
        ],
        "2": [
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    for note in notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(i)\n                break\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n\n    intervals = [(note_indices[1] - note_indices[0]) % 12, (note_indices[2] - note_indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first = notes.index(chord_notes[0])\n        second = notes.index(chord_notes[1])\n        third = notes.index(chord_notes[2])\n    except ValueError:\n        return \"Not a chord\"\n\n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in notes:\n        found = False\n        for i, n in enumerate(NOTES):\n            if note in n:\n                indices.append(i)\n                found = True\n                break\n        if not found:\n            return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes.index(note) for note in chord_notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = [(notes.index(chord_notes[i]) - notes.index(chord_notes[i-1])) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    # Flatten the notes list\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    # Create a mapping of notes to their indices\n    note_to_index = {note: i for i, note in enumerate(flat_notes)}\n    \n    try:\n        # Get the indices of the notes in the chord\n        indices = [note_to_index[note] for note in chord_notes]\n    except KeyError:\n        return \"Not a chord\"\n    \n    # Calculate intervals\n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_positions = {note: idx for idx, sublist in enumerate(NOTES) for note in sublist}\n    \n    try:\n        n1, n2, n3 = note_positions[notes[0]], note_positions[notes[1]], note_positions[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (n2 - n1) % 12\n    interval2 = (n3 - n2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    for note in notes:\n        for i, group in enumerate(NOTES):\n            if note in group:\n                note_indices.append(i)\n                break\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n\n    intervals = [(note_indices[1] - note_indices[0]) % 12, (note_indices[2] - note_indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or not all(note in note_map for note in chord_notes):\n        return \"Not a chord\"\n\n    intervals = [note_map[chord_notes[i + 1]] - note_map[chord_notes[i]] for i in range(2)]\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord = chord.split()\n    \n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    def find_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    indexes = [find_index(note) for note in chord]\n    \n    if -1 in indexes:\n        return \"Not a chord\"\n    \n    interval1 = indexes[1] - indexes[0]\n    interval2 = indexes[2] - indexes[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    return i\n            elif note == n:\n                return i\n        return -1\n    \n    indices = [get_note_index(n) for n in chord_notes]\n    \n    if -1 in indices:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    note_names = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in note_names:\n            note_indices.append(note_names.index(note))\n        else:\n            return \"Not a chord\"\n    \n    intervals = [(note_indices[i] - note_indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    for note in chord_notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(i)\n                break\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n    \n    intervals = [(note_indices[1] - note_indices[0]) % 12, (note_indices[2] - note_indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in notes:\n            return \"Not a chord\"\n        intervals.append(notes.index(note))\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    total_interval = (intervals[2] - intervals[0]) % 12\n    \n    if interval1 == 3 and interval2 == 4 and total_interval == 7:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3 and total_interval == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    indices = [scale.index(note) for note in notes if note in scale]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    intervals = [(indices[1] - indices[0]) % 12, (indices[2] - indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_positions = {note: idx for idx, group in enumerate(NOTES) for note in group}\n    \n    try:\n        first, second, third = note_positions[notes[0]], note_positions[notes[1]], note_positions[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    note_mapping = {note: index for index, note_list in enumerate(NOTES) for note in note_list}\n    \n    try:\n        note_indices = [note_mapping[note] for note in notes]\n    except KeyError:\n        return \"Not a chord\"\n\n    intervals = [(note_indices[i] - note_indices[i-1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {}\n    for i, note in enumerate(notes):\n        if isinstance(note, list):\n            for variant in note:\n                note_dict[variant] = i\n        else:\n            note_dict[note] = i\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        intervals = [note_dict[chord_notes[i]] - note_dict[chord_notes[i - 1]] for i in range(1, 3)]\n    except KeyError:\n        return \"Not a chord\"\n\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in chord_notes:\n        found = False\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indices.append(i)\n                found = True\n                break\n        if not found:\n            return \"Not a chord\"\n\n    intervals = [(indices[1] - indices[0]) % 12, (indices[2] - indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in chord_notes:\n        try:\n            indices.append(flat_notes.index(note))\n        except ValueError:\n            return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ],
        "3": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [notes.index(note) for note in chord_notes if note in notes]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    intervals = [(indices[i] - indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord = chord.split()\n    \n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes.index(n) for n in chord]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_indices = {note: idx for idx, note in enumerate(flat_notes)}\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_indices for note in chord_notes):\n        return \"Not a chord\"\n\n    intervals = [(note_indices[chord_notes[1]] - note_indices[chord_notes[0]]) % 12,\n                 (note_indices[chord_notes[2]] - note_indices[chord_notes[1]]) % 12]\n\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes.index(note) for note in chord_notes]\n    except ValueError:\n        return \"Not a chord\"\n\n    intervals = [(indices[i] - indices[i-1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    indices = [notes.index(note) for note in chord]\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    positions = [notes.index(note) for note in chord]\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n    interval3 = (positions[2] - positions[0]) % 12\n    \n    if interval1 == 3 and interval2 == 4 and interval3 == 7:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3 and interval3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first, second, third = [note_map[note] for note in chord_notes]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flattened_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in flattened_notes:\n            return \"Not a chord\"\n\n    first_index = flattened_notes.index(chord_notes[0])\n    second_index = flattened_notes.index(chord_notes[1])\n    third_index = flattened_notes.index(chord_notes[2])\n    \n    interval_1 = (second_index - first_index) % 12\n    interval_2 = (third_index - second_index) % 12\n\n    if interval_1 == 3 and interval_2 == 4:\n        return \"Minor\"\n    elif interval_1 == 4 and interval_2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord = chord.split()\n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(3):\n        note_index = flat_notes.index(chord[i])\n        intervals.append(note_index)\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    positions = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3 or any(note not in notes_list for note in notes):\n        return \"Not a chord\"\n    \n    first, second, third = notes\n    first_index = notes_list.index(first)\n    second_index = notes_list.index(second)\n    third_index = notes_list.index(third)\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note_group in enumerate(notes) for note in (note_group if isinstance(note_group, list) else [note_group])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first = note_dict[chord_notes[0]]\n        second = note_dict[chord_notes[1]]\n        third = note_dict[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    interval_1_3 = (third - first) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4 and interval_1_3 == 7:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3 and interval_1_3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_to_index = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chords = chord.split()\n    if len(chords) != 3 or any(note not in note_to_index for note in chords):\n        return \"Not a chord\"\n    \n    intervals = [(note_to_index[chords[i + 1]] - note_to_index[chords[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_to_index = {note: i for i, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_to_index for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [\n        (note_to_index[chord_notes[1]] - note_to_index[chord_notes[0]]) % 12,\n        (note_to_index[chord_notes[2]] - note_to_index[chord_notes[1]]) % 12\n    ]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_positions = []\n    for note in notes:\n        for i, group in enumerate(NOTES):\n            if note in group:\n                note_positions.append(i)\n                break\n    \n    if len(note_positions) != 3:\n        return \"Not a chord\"\n    \n    intervals = [(note_positions[1] - note_positions[0]) % 12,\n                 (note_positions[2] - note_positions[1]) % 12,\n                 (note_positions[2] - note_positions[0]) % 12]\n    \n    if intervals == [3, 4, 7]:\n        return \"Minor\"\n    elif intervals == [4, 3, 7]:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```"
        ],
        "4": [
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first = notes_list.index(notes[0])\n        second = notes_list.index(notes[1])\n        third = notes_list.index(notes[2])\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_to_index = {note: index for index, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_to_index for note in chord_notes):\n        return \"Not a chord\"\n    \n    indices = [note_to_index[note] for note in chord_notes]\n    intervals = [(indices[i] - indices[i-1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord_elements = chord.split()\n    if len(chord_elements) != 3:\n        return \"Not a chord\"\n\n    intervals = []\n    for element in chord_elements:\n        if element not in notes_flat:\n            return \"Not a chord\"\n    \n    indices = [notes_flat.index(elem) for elem in chord_elements]\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    flat_notes += [note if isinstance(note, str) else note[1] for note in notes]\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return \"Not a chord\"\n    \n    indices = [flat_notes.index(note) for note in chord_notes]\n    intervals = [(indices[1] - indices[0]) % 12, (indices[2] - indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_index = {note: i for i, note in enumerate(flat_notes)}\n    \n    chords = chord.split()\n    if len(chords) != 3 or any(note not in note_index for note in chords):\n        return \"Not a chord\"\n    \n    intervals = [(note_index[chords[i + 1]] - note_index[chords[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first, second, third = note_map[chord_notes[0]], note_map[chord_notes[1]], note_map[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    interval3 = (indices[2] - indices[0]) % 12\n\n    if interval1 == 3 and interval2 == 4 and interval3 == 7:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3 and interval3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    positions = [notes_list.index(note) for note in notes if note in notes_list]\n    \n    if len(positions) != 3:\n        return \"Not a chord\"\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        intervals = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: idx for idx, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_indices for note in chord_notes):\n        return \"Not a chord\"\n    \n    first, second, third = chord_notes\n    interval_1_2 = (note_indices[second] - note_indices[first]) % 12\n    interval_2_3 = (note_indices[third] - note_indices[second]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_indices = {note: index for index, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in note_indices for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [\n        (note_indices[chord_notes[1]] - note_indices[chord_notes[0]]) % 12,\n        (note_indices[chord_notes[2]] - note_indices[chord_notes[1]]) % 12\n    ]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_list = chord.split()\n    \n    if len(chord_list) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_list:\n        if note not in flat_notes:\n            return \"Not a chord\"\n        intervals.append(flat_notes.index(note))\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n\n    indexes = [get_note_index(note) for note in chord_notes]\n    \n    if -1 in indexes:\n        return \"Not a chord\"\n    \n    interval1 = indexes[1] - indexes[0]\n    interval2 = indexes[2] - indexes[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n\n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = flat_notes.index(chord_notes[0]), flat_notes.index(chord_notes[1]), flat_notes.index(chord_notes[2])\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(3):\n        note_index = flat_notes.index(chord_notes[i])\n        next_note_index = flat_notes.index(chord_notes[(i + 1) % 3])\n        interval = (next_note_index - note_index) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4]:  # Minor\n        return 'Minor'\n    elif intervals == [4, 3]:  # Major\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indices.append(i)\n                break\n        else:\n            return 'Not a chord'\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indexes = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indexes.append(i)\n                break\n        else:\n            return 'Not a chord'\n    \n    intervals = [(indexes[1] - indexes[0]) % 12, (indexes[2] - indexes[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_list = chord.split()\n    \n    if len(chord_list) != 3:\n        return 'Not a chord'\n    \n    positions = []\n    for note in chord_list:\n        for idx, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                positions.append(idx)\n                break\n    else:\n        return 'Not a chord'\n\n    intervals = [positions[1] - positions[0], positions[2] - positions[1]]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {}\n    index = 0\n    for note in notes:\n        if isinstance(note, list):\n            for alt_note in note:\n                note_dict[alt_note] = index\n        else:\n            note_dict[note] = index\n        index += 1\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first, second, third = [note_dict[note] for note in chord_notes]\n    except KeyError:\n        return 'Not a chord'\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    def get_note_index(note):\n        for index, item in enumerate(notes):\n            if isinstance(item, list):\n                if note in item:\n                    return index\n            elif item == note:\n                return index\n        return -1\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    first, second, third = chord_notes\n    first_index = get_note_index(first)\n    second_index = get_note_index(second)\n    third_index = get_note_index(third)\n\n    if first_index == -1 or second_index == -1 or third_index == -1:\n        return \"Not a chord\"\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_list = chord.split()\n    if len(chord_list) != 3:\n        return 'Not a chord'\n    \n    try:\n        intervals = [flat_notes.index(chord_list[1]) - flat_notes.index(chord_list[0]),\n                     flat_notes.index(chord_list[2]) - flat_notes.index(chord_list[1])]\n    except ValueError:\n        return 'Not a chord'\n    \n    if intervals[0] == 3 and intervals[1] == 4:\n        return 'Minor'\n    elif intervals[0] == 4 and intervals[1] == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    \n    for note in chord_notes:\n        found = False\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    note_indices.append(i)\n                    found = True\n                    break\n            else:\n                if note == n:\n                    note_indices.append(i)\n                    found = True\n                    break\n        if not found:\n            return 'Not a chord'\n    \n    intervals = [(note_indices[i] - note_indices[i-1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    positions = []\n    for note in chord_notes:\n        for index, element in enumerate(notes):\n            if isinstance(element, list):\n                if note in element:\n                    positions.append(index)\n                    break\n            else:\n                if note == element:\n                    positions.append(index)\n                    break\n    \n    if len(positions) < 3:\n        return 'Not a chord'\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]  # flatten the notes\n    chord_list = chord.split()\n    \n    if len(chord_list) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_list:\n        if note not in flat_notes:\n            return 'Not a chord'\n        intervals.append(flat_notes.index(note))\n    \n    intervals = sorted(intervals)\n    interval1 = intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [item for sublist in notes for item in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_list = chord.split()\n    \n    if len(chord_list) != 3:\n        return 'Not a chord'\n    \n    if all(note in notes_flat for note in chord_list):\n        indices = [notes_flat.index(note) for note in chord_list]\n        interval1 = (indices[1] - indices[0]) % 12\n        interval2 = (indices[2] - indices[1]) % 12\n        \n        if interval1 == 3 and interval2 == 4:\n            return 'Minor'\n        elif interval1 == 4 and interval2 == 3:\n            return 'Major'\n    \n    return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_notes:\n        for i in range(len(notes)):\n            if note in (notes[i] if isinstance(notes[i], list) else [notes[i]]):\n                intervals.append(i)\n                break\n\n    if len(intervals) != 3:\n        return 'Not a chord'\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    \n    def note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    indices = [note_index(note) for note in chord]\n    if -1 in indices:\n        return 'Not a chord'\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_flat for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = notes_flat.index(first)\n    second_index = notes_flat.index(second)\n    third_index = notes_flat.index(third)\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_positions = {note: index for index, note in enumerate(notes) if isinstance(note, str)}\n    \n    # Flatten the notes list to include all variations for easy indexing\n    flattened_notes = []\n    for note in notes:\n        if isinstance(note, list):\n            flattened_notes.extend(note)\n        else:\n            flattened_notes.append(note)\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        indices = [note_positions[note] for note in chord_notes]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    interval3 = (indices[2] - indices[0]) % 12\n    \n    if interval1 == 3 and interval2 == 4 and interval3 == 7:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3 and interval3 == 7:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    \n    chord = chord.split()\n    \n    if len(chord) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord:\n        if note not in flat_notes:\n            return 'Not a chord'\n        intervals.append(flat_notes.index(note))\n    \n    interval1 = intervals[1] - intervals[0] + 12 if intervals[1] < intervals[0] else intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1] + 12 if intervals[2] < intervals[1] else intervals[2] - intervals[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]  # Flatten notes\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = [flat_notes.index(note) for note in chord_notes if note in flat_notes]\n    \n    if len(indices) != 3:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first = notes.index(chord_notes[0])\n        second = notes.index(chord_notes[1])\n        third = notes.index(chord_notes[2])\n    except ValueError:\n        return 'Not a chord'\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return 'Not a chord'\n\n    first, second, third = chord_notes\n    first_index = flat_notes.index(first)\n    second_index = flat_notes.index(second)\n    third_index = flat_notes.index(third)\n\n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```"
        ],
        "1": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def note_to_index(note):\n        return notes.index(note) if note in notes else -1\n    \n    indices = [note_to_index(note) for note in chord_notes]\n    \n    if -1 in indices:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    indices.append(i)\n                    break\n            else:\n                if note == n:\n                    indices.append(i)\n                    break\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                intervals.append(i)\n                break\n    \n    if len(intervals) != 3:\n        return 'Not a chord'\n    \n    interval1 = intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n\n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord = chord.split()\n    \n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord:\n        if note not in notes:\n            return \"Not a chord\"\n        intervals.append(notes.index(note))\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    interval_1_3 = (intervals[2] - intervals[0]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4 and interval_1_3 == 7:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3 and interval_1_3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n\n    chords = chord.split()\n    \n    if len(chords) != 3 or any(n not in note_indices for n in chords):\n        return 'Not a chord'\n    \n    intervals = [(note_indices[chords[1]] - note_indices[chords[0]]) % 12,\n                 (note_indices[chords[2]] - note_indices[chords[1]]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]  # Flatten the notes\n    chord_notes = chord.split()\n\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def find_note_index(note):\n        for i, n in enumerate(flat_notes):\n            if note == n:\n                return i\n        return -1\n\n    first, second, third = map(find_note_index, chord_notes)\n\n    if first == -1 or second == -1 or third == -1:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_map for note in chord_notes):\n        return 'Not a chord'\n    \n    intervals = [note_map[chord_notes[i + 1]] - note_map[chord_notes[i]] for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    if first not in notes or second not in notes or third not in notes:\n        return 'Not a chord'\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval_1_2 = (note_indices[1] - note_indices[0]) % 12\n    interval_2_3 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [n if isinstance(n, str) else n[0] for n in notes]\n    \n    chord_elements = chord.split()\n    if len(chord_elements) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_elements:\n        if note not in notes_flat:\n            return 'Not a chord'\n        intervals.append(notes_flat.index(note))\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    \n    for note in chord_elements:\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    note_index = i\n                    break\n            elif note == n:\n                note_index = i\n                break\n        else:\n            return \"Not a chord\"\n\n        intervals.append(note_index)\n\n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    elements = chord.split()\n    \n    if len(elements) != 3 or not all(elem in note_dict for elem in elements):\n        return \"Not a chord\"\n    \n    first, second, third = note_dict[elements[0]], note_dict[elements[1]], note_dict[elements[2]]\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: idx for idx, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_dict for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [note_dict[chord_notes[1]] - note_dict[chord_notes[0]],\n                 note_dict[chord_notes[2]] - note_dict[chord_notes[1]]]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = [notes.index(chord_notes[1]) - notes.index(chord_notes[0]),\n                 notes.index(chord_notes[2]) - notes.index(chord_notes[1])]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    positions = []\n    for note in chord_notes:\n        found = False\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                positions.append(i)\n                found = True\n                break\n        if not found:\n            return \"Not a chord\"\n    \n    intervals = [(positions[1] - positions[0]) % 12, (positions[2] - positions[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    first, second, third = map(note_index, chord_notes)\n    \n    if first == -1 or second == -1 or third == -1:\n        return \"Not a chord\"\n    \n    interval_1_2 = second - first\n    interval_2_3 = third - second\n    \n    if interval_1_2 < 0:\n        interval_1_2 += 12\n    if interval_2_3 < 0:\n        interval_2_3 += 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return 'Not a chord'\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    def find_note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n\n    indices = [find_note_index(note) for note in chord_notes]\n    \n    if -1 in indices:\n        return 'Not a chord'\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first = note_indices[chord_notes[0]]\n        second = note_indices[chord_notes[1]]\n        third = note_indices[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ],
        "2": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    first, second, third = chord_notes\n    \n    if first not in notes or second not in notes or third not in notes:\n        return \"Not a chord\"\n    \n    first_index = notes.index(first)\n    second_index = notes.index(second)\n    third_index = notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_positions = {note: idx for idx, sublist in enumerate(NOTES) for note in sublist}\n    \n    try:\n        n1, n2, n3 = note_positions[notes[0]], note_positions[notes[1]], note_positions[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (n2 - n1) % 12\n    interval2 = (n3 - n2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    indices = [note_index(note) for note in chord_notes]\n    \n    if -1 in indices:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0] if indices[1] >= indices[0] else indices[1] + 12 - indices[0]\n    interval2 = indices[2] - indices[1] if indices[2] >= indices[1] else indices[2] + 12 - indices[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    for note in notes:\n        for i, group in enumerate(NOTES):\n            if note in group:\n                note_indices.append(i)\n                break\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n\n    intervals = [(note_indices[1] - note_indices[0]) % 12, (note_indices[2] - note_indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(3):\n        intervals.append(notes.index(chord_notes[i]))\n\n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    for note in notes:\n        for i, value in enumerate(NOTES):\n            if note in value:\n                note_indices.append(i)\n                break\n\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n\n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    return i\n            elif note == n:\n                return i\n        return -1\n    \n    indices = [get_note_index(n) for n in chord_notes]\n    \n    if -1 in indices:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    note_names = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in note_names:\n            note_indices.append(note_names.index(note))\n        else:\n            return \"Not a chord\"\n    \n    intervals = [(note_indices[i] - note_indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    indices = [scale.index(note) for note in notes if note in scale]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    intervals = [(indices[1] - indices[0]) % 12, (indices[2] - indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_positions = {note: idx for idx, group in enumerate(NOTES) for note in group}\n    \n    try:\n        first, second, third = note_positions[notes[0]], note_positions[notes[1]], note_positions[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    note_dict = {note[0]: i for i, note in enumerate(NOTES)}\n    \n    for note in notes:\n        if note in note_dict:\n            note_indices.append(note_dict[note])\n        else:\n            return \"Not a chord\"\n\n    intervals = [(note_indices[1] - note_indices[0]) % 12, (note_indices[2] - note_indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {}\n    for i, note in enumerate(notes):\n        if isinstance(note, list):\n            for variant in note:\n                note_dict[variant] = i\n        else:\n            note_dict[note] = i\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    try:\n        first = note_dict[chord_notes[0]]\n        second = note_dict[chord_notes[1]]\n        third = note_dict[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in chord_notes:\n        found = False\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indices.append(i)\n                found = True\n                break\n        if not found:\n            return \"Not a chord\"\n\n    intervals = [indices[1] - indices[0], indices[2] - indices[1]]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [flat_notes.index(chord_notes[1]) - flat_notes.index(chord_notes[0]),\n                 flat_notes.index(chord_notes[2]) - flat_notes.index(chord_notes[1])]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in flat_notes:\n            return \"Not a chord\"\n        index = flat_notes.index(note)\n        intervals.append(index)\n    \n    interval1 = intervals[1] - intervals[0] + 12 if intervals[1] < intervals[0] else intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1] + 12 if intervals[2] < intervals[1] else intervals[2] - intervals[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n\n    chords = chord.split()\n    \n    if len(chords) != 3:\n        return \"Not a chord\"\n    \n    indices = [get_note_index(note) for note in chords]\n    \n    if -1 in indices:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return \"Not a chord\"\n\n    first, second, third = chord_notes\n    first_index = flat_notes.index(first)\n    second_index = flat_notes.index(second)\n    third_index = flat_notes.index(third)\n\n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note_group in enumerate(notes) for note in (note_group if isinstance(note_group, list) else [note_group])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_map for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [note_map[chord_notes[i + 1]] - note_map[chord_notes[i]] for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    for note in notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(i)\n                break\n    if len(note_indices) < 3:\n        return \"Not a chord\"\n\n    interval_1_2 = (note_indices[1] - note_indices[0]) % 12\n    interval_2_3 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes] + [n[1] for n in notes if isinstance(n, list)]\n    notes_dict = {note: index for index, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_dict for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [\n        (notes_dict[chord_notes[1]] - notes_dict[chord_notes[0]]) % 12,\n        (notes_dict[chord_notes[2]] - notes_dict[chord_notes[1]]) % 12\n    ]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    # Create a mapping of notes to their positions in the chromatic scale\n    note_positions = {\n        'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3,\n        'E': 4, 'F': 5, 'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8,\n        'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11\n    }\n    \n    # Get the positions of the notes\n    try:\n        pos1 = note_positions[notes[0]]\n        pos2 = note_positions[notes[1]]\n        pos3 = note_positions[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    # Calculate intervals\n    interval1 = (pos2 - pos1) % 12\n    interval2 = (pos3 - pos2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ],
        "3": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    def note_index(note):\n        for i, n in enumerate(notes):\n            if note in n:\n                return i\n        return -1\n    \n    indices = [note_index(n) for n in chord_notes]\n    \n    if -1 in indices:\n        return 'Not a chord'\n    \n    interval1 = indices[1] - indices[0] if indices[1] >= indices[0] else indices[1] - indices[0] + 12\n    interval2 = indices[2] - indices[1] if indices[2] >= indices[1] else indices[2] - indices[1] + 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    note_positions = {note: i for i, note in enumerate(['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'])}\n    \n    for i in range(2):\n        interval = (note_positions[notes[i + 1]] - note_positions[notes[i]]) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first, second, third = [note_map[note] for note in chord_notes]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord = chord.split()\n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(3):\n        note_index = flat_notes.index(chord[i])\n        intervals.append(note_index)\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        intervals = [note_dict[note] for note in chord_notes]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    positions = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3 or any(note not in notes_list for note in notes):\n        return \"Not a chord\"\n    \n    intervals = [\n        (notes_list.index(notes[1]) - notes_list.index(notes[0])) % 12,\n        (notes_list.index(notes[2]) - notes_list.index(notes[1])) % 12\n    ]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note_group in enumerate(notes) for note in (note_group if isinstance(note_group, list) else [note_group])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first = note_dict[chord_notes[0]]\n        second = note_dict[chord_notes[1]]\n        third = note_dict[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    interval_1_3 = (third - first) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4 and interval_1_3 == 7:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3 and interval_1_3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_to_index = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chords = chord.split()\n    if len(chords) != 3 or any(note not in note_to_index for note in chords):\n        return \"Not a chord\"\n    \n    intervals = [(note_to_index[chords[i + 1]] - note_to_index[chords[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_to_index = {note: i for i, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_to_index for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [(note_to_index[chord_notes[i + 1]] - note_to_index[chord_notes[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    for note in notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(i)\n                break\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_to_index = {}\n    \n    for i, note in enumerate(notes):\n        if isinstance(note, list):\n            for n in note:\n                note_to_index[n] = i\n        else:\n            note_to_index[note] = i\n\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first = note_to_index[chord_notes[0]]\n        second = note_to_index[chord_notes[1]]\n        third = note_to_index[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ],
        "4": [
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_indices for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [\n        (note_indices[chord_notes[1]] - note_indices[chord_notes[0]]) % 12,\n        (note_indices[chord_notes[2]] - note_indices[chord_notes[1]]) % 12\n    ]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in notes:\n            return \"Not a chord\"\n        intervals.append(notes.index(note))\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n\n    intervals = []\n    for i in range(2):\n        first_index = notes.index(chord_notes[i])\n        second_index = notes.index(chord_notes[i + 1])\n        interval = (second_index - first_index) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_notes:\n        if note not in flat_notes:\n            return \"Not a chord\"\n        intervals.append(flat_notes.index(note))\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord_elements = chord.split()\n    if len(chord_elements) != 3:\n        return \"Not a chord\"\n\n    intervals = []\n    for element in chord_elements:\n        if element not in notes_flat:\n            return \"Not a chord\"\n    \n    indices = [notes_flat.index(elem) for elem in chord_elements]\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_index = {note: i for i, note in enumerate(flat_notes)}\n    \n    chords = chord.split()\n    if len(chords) != 3 or any(note not in note_index for note in chords):\n        return \"Not a chord\"\n    \n    intervals = [(note_index[chords[i + 1]] - note_index[chords[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: i for i, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first, second, third = note_map[chord_notes[0]], note_map[chord_notes[1]], note_map[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    interval3 = (indices[2] - indices[0]) % 12\n\n    if interval1 == 3 and interval2 == 4 and interval3 == 7:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3 and interval3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    \n    for note in chord_notes:\n        if note not in notes_list:\n            return \"Not a chord\"\n    \n    first_index = notes_list.index(chord_notes[0])\n    second_index = notes_list.index(chord_notes[1])\n    third_index = notes_list.index(chord_notes[2])\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        intervals = [notes_list.index(note) for note in notes]\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: idx for idx, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_indices for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [\n        (note_indices[chord_notes[1]] - note_indices[chord_notes[0]]) % 12,\n        (note_indices[chord_notes[2]] - note_indices[chord_notes[1]]) % 12,\n    ]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_list = chord.split()\n    \n    if len(chord_list) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in chord_list:\n        if note not in flat_notes:\n            return \"Not a chord\"\n        intervals.append(flat_notes.index(note))\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    indices = [get_note_index(note) for note in chord_notes]\n    \n    if any(index == -1 for index in indices):\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0] if indices[1] >= indices[0] else indices[1] - indices[0] + 12\n    interval2 = indices[2] - indices[1] if indices[2] >= indices[1] else indices[2] - indices[1] + 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in n:\n                return i\n        return -1\n    \n    indices = [get_note_index(note) for note in chord_notes]\n    \n    if -1 in indices:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        idx1 = notes.index(chord_notes[0])\n        idx2 = notes.index(chord_notes[1])\n        idx3 = notes.index(chord_notes[2])\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (idx2 - idx1) % 12\n    interval2 = (idx3 - idx2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    flat_notes.extend([note if isinstance(note, str) else note[1] for note in notes])\n\n    chord_list = chord.split()\n    if len(chord_list) != 3:\n        return \"Not a chord\"\n\n    intervals = []\n    for i in range(3):\n        if chord_list[i] not in flat_notes:\n            return \"Not a chord\"\n        note_index = flat_notes.index(chord_list[i])\n        intervals.append(note_index)\n\n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [notes.index(note) for note in chord_notes if note in notes]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    first, second, third = indices\n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    note_indices = {note: idx for idx, note in enumerate(flat_notes)}\n\n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3:\n        return \"Not a chord\"\n    \n    try:\n        indices = [note_indices[note] for note in chord_elements]\n    except KeyError:\n        return \"Not a chord\"\n    \n    intervals = [(indices[i] - indices[i-1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```"
        ]
    }
}