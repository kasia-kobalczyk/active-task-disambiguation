{
    "0": [
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == chord[1]:\n                return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == chord[1]:\n                return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == chord[1]:\n                return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == chord[1]:\n                return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if value[1] == chord[1]:\n                return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            if key == 'Minor':\n                if (DCT_CHORDS[key][1].index(chord[1]) - DCT_CHORDS[key][0].index(chord[0]) == 3) and (DCT_CHORDS[key][2].index(chord[2]) - DCT_CHORDS[key][1].index(chord[1]) == 4):\n                    return 'Minor'\n            elif key == 'Major':\n                if (DCT_CHORDS[key][1].index(chord[1]) - DCT_CHORDS[key][0].index(chord[0]) == 4) and (DCT_CHORDS[key][2].index(chord[2]) - DCT_CHORDS[key][1].index(chord[1]) == 3):\n                    return 'Major'\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return \"Not a chord\"\n    for key, value in DCT_CHORDS.items():\n        if tuple(sorted(chord)) == tuple(sorted(key)):\n            return value\n    return \"Not a chord\"",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return \"Not a chord\"\n    for key, value in DCT_CHORDS.items():\n        if tuple(sorted(chord)) == tuple(sorted(key)):\n            return value\n    return \"Not a chord\"",
            "logp": null
        }
    ],
    "3": []
}