{
    "0": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3 or any(note not in notes_flat for note in chord_elements):\n        return 'Not a chord'\n    \n    first_index = notes_flat.index(chord_elements[0])\n    second_index = notes_flat.index(chord_elements[1])\n    third_index = notes_flat.index(chord_elements[2])\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n\n    first, second, third = flat_notes.index(chord_notes[0]), flat_notes.index(chord_notes[1]), flat_notes.index(chord_notes[2])\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    # Flatten the notes list to make lookups easier\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    # Find the indices of the notes in the chord\n    try:\n        idx1 = flat_notes.index(chord_notes[0])\n        idx2 = flat_notes.index(chord_notes[1])\n        idx3 = flat_notes.index(chord_notes[2])\n    except ValueError:\n        return 'Not a chord'\n    \n    # Calculate intervals\n    interval1 = (idx2 - idx1) % 12\n    interval2 = (idx3 - idx2) % 12\n    interval3 = (idx3 - idx1) % 12\n    \n    if interval1 == 3 and interval2 == 4 and interval3 == 7:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3 and interval3 == 7:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = flat_notes.index(first)\n    second_index = flat_notes.index(second)\n    third_index = flat_notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note for note in notes]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    # Find the indices of the notes in the chromatic scale\n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes_flat):\n            if note == n:\n                indices.append(i)\n                break\n    \n    if len(indices) != 3:\n        return 'Not a chord'\n\n    # Calculate intervals\n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n\n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n\n    first, second, third = chord_notes\n    first_index = flat_notes.index(first)\n    second_index = flat_notes.index(second)\n    third_index = flat_notes.index(third)\n\n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(3):\n        note_index = flat_notes.index(chord_notes[i])\n        next_note_index = flat_notes.index(chord_notes[(i + 1) % 3])\n        interval = (next_note_index - note_index) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4]:  # Minor\n        return 'Minor'\n    elif intervals == [4, 3]:  # Major\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indices.append(i)\n                break\n        else:\n            return 'Not a chord'\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    if first not in flat_notes or second not in flat_notes or third not in flat_notes:\n        return 'Not a chord'\n    \n    first_idx = flat_notes.index(first)\n    second_idx = flat_notes.index(second)\n    third_idx = flat_notes.index(third)\n    \n    interval1 = (second_idx - first_idx) % 12\n    interval2 = (third_idx - second_idx) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n\n    indexes = [flat_notes.index(note) for note in chord_notes if note in flat_notes]\n    \n    if len(indexes) != 3:\n        return 'Not a chord'\n\n    intervals = [(indexes[1] - indexes[0]) % 12, (indexes[2] - indexes[1]) % 12]\n\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]  # Flatten the notes for easier indexing\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [flat_notes.index(n) for n in chord_notes]\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    note_map = {}\n    for i, note in enumerate(notes):\n        if isinstance(note, list):\n            for n in note:\n                note_map[n] = i\n        else:\n            note_map[note] = i\n            \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    \n    for i in range(2):\n        first = note_map[chord_notes[i]]\n        second = note_map[chord_notes[i + 1]]\n        interval = (second - first) % 12\n        intervals.append(interval)\n    \n    if sum(intervals) == 7:\n        if intervals[0] == 3 and intervals[1] == 4:\n            return 'Minor'\n        elif intervals[0] == 4 and intervals[1] == 3:\n            return 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first = notes.index(chord_notes[0])\n        second = notes.index(chord_notes[1])\n        third = notes.index(chord_notes[2])\n    except ValueError:\n        return 'Not a chord'\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]  # Flatten the list\n    flat_notes += [note if isinstance(note, str) else note[1] for note in notes]\n    \n    notes_indices = {note: i for i, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_indices for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [\n        (notes_indices[chord_notes[1]] - notes_indices[chord_notes[0]]) % 12,\n        (notes_indices[chord_notes[2]] - notes_indices[chord_notes[1]]) % 12,\n    ]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    \n    for note in chord_notes:\n        if note not in notes:\n            return \"Not a chord\"\n        intervals.append(notes.index(note))\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_list = chord.split()\n\n    if len(chord_list) != 3:\n        return \"Not a chord\"\n\n    indices = [notes.index(note) for note in chord_list if note in notes]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n\n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3 or any(note not in notes_list for note in notes):\n        return \"Not a chord\"\n    \n    first, second, third = notes\n    first_index = notes_list.index(first)\n    second_index = notes_list.index(second)\n    third_index = notes_list.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        idx1 = notes.index(chord_notes[0])\n        idx2 = notes.index(chord_notes[1])\n        idx3 = notes.index(chord_notes[2])\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (idx2 - idx1) % 12\n    interval2 = (idx3 - idx2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    positions = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    note_indices = {note: idx for idx, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_indices for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [\n        (note_indices[chord_notes[1]] - note_indices[chord_notes[0]]) % 12,\n        (note_indices[chord_notes[2]] - note_indices[chord_notes[1]]) % 12\n    ]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        idx1 = notes.index(chord_notes[0])\n        idx2 = notes.index(chord_notes[1])\n        idx3 = notes.index(chord_notes[2])\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval1 = (idx2 - idx1) % 12\n    interval2 = (idx3 - idx2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first = notes.index(chord_notes[0])\n        second = notes.index(chord_notes[1])\n        third = notes.index(chord_notes[2])\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n\n    intervals = []\n    for note in chord_notes:\n        if note not in flat_notes:\n            return 'Not a chord'\n        index = flat_notes.index(note)\n        intervals.append(index)\n\n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    note_to_index = {note: i for i, group in enumerate(NOTES) for note in (group if isinstance(group, list) else [group])}\n    \n    for i in range(2):\n        if notes[i] not in note_to_index or notes[i + 1] not in note_to_index:\n            return \"Not a chord\"\n        interval = (note_to_index[notes[i + 1]] - note_to_index[notes[i]]) % 12\n        intervals.append(interval)\n    \n    if sum(intervals) == 7 and intervals[0] == 3:\n        return \"Minor\"\n    elif sum(intervals) == 7 and intervals[0] == 4:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    note_positions = {\n        'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3,\n        'E': 4, 'F': 5, 'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8,\n        'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11\n    }\n    \n    if any(note not in note_positions for note in notes):\n        return 'Not a chord'\n    \n    intervals = [\n        note_positions[notes[1]] - note_positions[notes[0]],\n        note_positions[notes[2]] - note_positions[notes[1]]\n    ]\n    \n    if intervals[0] < 0:\n        intervals[0] += 12\n    if intervals[1] < 0:\n        intervals[1] += 12\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    for note in notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(i)\n                break\n    \n    if len(note_indices) != 3:\n        return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return \"Not a chord\"\n    \n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    intervals = [(notes.index(chord[i]) - notes.index(chord[i-1]) + 12) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    for note in notes:\n        for index, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(index)\n                break\n    if len(note_indices) != 3:\n        return \"Not a chord\"\n\n    intervals = [(note_indices[i] - note_indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3:\n        return \"Not a chord\"\n\n    def note_to_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return None\n\n    indices = [note_to_index(note) for note in chord_elements]\n    \n    if None in indices:\n        return \"Not a chord\"\n\n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    for note in notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(i)\n                break\n    \n    if len(note_indices) != 3:\n        return \"Not a chord\"\n    \n    intervals = [(note_indices[1] - note_indices[0]) % 12, (note_indices[2] - note_indices[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    notes_index = {note: index for index, note in enumerate(['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'])}\n    \n    try:\n        first = notes_index[chord_notes[0]]\n        second = notes_index[chord_notes[1]]\n        third = notes_index[chord_notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes_dict = {note: idx for idx, note in enumerate(notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in notes_dict for note in chord_notes):\n        return \"Not a chord\"\n    \n    first, second, third = chord_notes\n    interval_1_2 = notes_dict[second] - notes_dict[first]\n    interval_2_3 = notes_dict[third] - notes_dict[second]\n    \n    if interval_1_2 < 0:\n        interval_1_2 += 12\n    if interval_2_3 < 0:\n        interval_2_3 += 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [notes_list.index(note) for note in notes if note in notes_list]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_positions = {note: index for index, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in note_positions for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [(note_positions[chord_notes[i + 1]] - note_positions[chord_notes[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord_list = chord.split()\n    if len(chord_list) != 3:\n        return \"Not a chord\"\n    \n    indices = [flat_notes.index(note) for note in chord_list if note in flat_notes]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    note_positions = []\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in chord_notes:\n        if note in notes:\n            note_positions.append(notes.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_positions[1] - note_positions[0]) % 12\n    interval2 = (note_positions[2] - note_positions[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    for note in notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(i)\n                break\n    \n    if len(note_indices) != 3:\n        return \"Not a chord\"\n    \n    intervals = [\n        (note_indices[1] - note_indices[0]) % 12,\n        (note_indices[2] - note_indices[1]) % 12,\n    ]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        }
    ]
}