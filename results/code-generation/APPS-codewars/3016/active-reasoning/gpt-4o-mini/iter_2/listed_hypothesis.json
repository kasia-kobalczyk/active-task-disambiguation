{
    "0": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n\n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = flat_notes.index(chord_notes[0]), flat_notes.index(chord_notes[1]), flat_notes.index(chord_notes[2])\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(3):\n        note_index = flat_notes.index(chord_notes[i])\n        next_note_index = flat_notes.index(chord_notes[(i + 1) % 3])\n        interval = (next_note_index - note_index) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4]:  # Minor\n        return 'Minor'\n    elif intervals == [4, 3]:  # Major\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indices.append(i)\n                break\n        else:\n            return 'Not a chord'\n    \n    interval_1_2 = (indices[1] - indices[0]) % 12\n    interval_2_3 = (indices[2] - indices[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_index = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indexes = [note_index[note] for note in chord_notes if note in note_index]\n    \n    if len(indexes) != 3:\n        return 'Not a chord'\n    \n    intervals = [(indexes[1] - indexes[0]) % 12, (indexes[2] - indexes[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_list = chord.split()\n    \n    if len(chord_list) != 3:\n        return 'Not a chord'\n    \n    positions = []\n    for note in chord_list:\n        for idx, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                positions.append(idx)\n                break\n    else:\n        return 'Not a chord'\n\n    intervals = [positions[1] - positions[0], positions[2] - positions[1]]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]  # flatten the notes\n    chord_list = chord.split()\n    \n    if len(chord_list) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_list:\n        if note not in flat_notes:\n            return 'Not a chord'\n        intervals.append(flat_notes.index(note))\n    \n    interval1 = intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1]\n    \n    if interval1 < 0: interval1 += 12\n    if interval2 < 0: interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    if all(note in notes_flat for note in chord_notes):\n        note_indices = [notes_flat.index(note) for note in chord_notes]\n        interval1 = (note_indices[1] - note_indices[0]) % 12\n        interval2 = (note_indices[2] - note_indices[1]) % 12\n        \n        if interval1 == 3 and interval2 == 4:\n            return 'Minor'\n        elif interval1 == 4 and interval2 == 3:\n            return 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]  # Flatten the list for easier comparison\n    flat_notes += [n if isinstance(n, str) else n[1] for n in notes]  # Include the alternative names as well\n    \n    chord_list = chord.split()\n    \n    if len(chord_list) != 3:\n        return 'Not a chord'\n    \n    if not all(note in flat_notes for note in chord_list):\n        return 'Not a chord'\n    \n    idx = [flat_notes.index(note) for note in chord_list]\n    intervals = [(idx[1] - idx[0]) % 12, (idx[2] - idx[1]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    \n    def note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    indices = [note_index(note) for note in chord]\n    if -1 in indices:\n        return 'Not a chord'\n    \n    interval1 = indices[1] - indices[0]\n    interval2 = indices[2] - indices[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: index for index, note in enumerate(notes)}\n    notes_list = chord.split()\n    \n    if len(notes_list) != 3:\n        return 'Not a chord'\n    \n    indices = [note_dict[note] for note in notes_list if note in note_dict]\n    \n    if len(indices) != 3:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    interval3 = (indices[2] - indices[0]) % 12\n    \n    if interval1 == 3 and interval2 == 4 and interval3 == 7:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3 and interval3 == 7:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_indices = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = [(note_indices[chord_notes[i + 1]] - note_indices[chord_notes[i]]) % 12 for i in range(2)]\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    for note in chord_notes:\n        if note in flat_notes:\n            note_indices.append(flat_notes.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    if first not in notes or second not in notes or third not in notes:\n        return 'Not a chord'\n    \n    interval1 = (notes.index(second) - notes.index(first)) % 12\n    interval2 = (notes.index(third) - notes.index(second)) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    def get_note_index(note):\n        for index, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return index\n        return None\n    \n    first = get_note_index(chord_notes[0])\n    second = get_note_index(chord_notes[1])\n    third = get_note_index(chord_notes[2])\n    \n    if first is None or second is None or third is None:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    elements = chord.split()\n    \n    if len(elements) != 3 or not all(elem in note_dict for elem in elements):\n        return \"Not a chord\"\n    \n    first, second, third = note_dict[elements[0]], note_dict[elements[1]], note_dict[elements[2]]\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [item if isinstance(item, str) else item[0] for item in notes]  # Flatten the list\n    flat_notes += [item if isinstance(item, str) else item[1] for item in notes]  # Add flats\n    \n    chord_elements = chord.split()\n    if len(chord_elements) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for i in range(3):\n        intervals.append(flat_notes.index(chord_elements[i]))\n    \n    interval_1_to_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_to_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_to_2 == 3 and interval_2_to_3 == 4:\n        return \"Minor\"\n    elif interval_1_to_2 == 4 and interval_2_to_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: index for index, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_dict for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [note_dict[chord_notes[1]] - note_dict[chord_notes[0]],\n                 note_dict[chord_notes[2]] - note_dict[chord_notes[1]]]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return \"Not a chord\"\n    \n    intervals = [flat_notes.index(chord_notes[1]) - flat_notes.index(chord_notes[0]),\n                 flat_notes.index(chord_notes[2]) - flat_notes.index(chord_notes[1])]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_positions = {note: i for i, note in enumerate(['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'])}\n    \n    try:\n        first, second, third = note_positions[notes[0]], note_positions[notes[1]], note_positions[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    note_dict = {note[0]: i for i, note in enumerate(NOTES)}\n    for note in notes:\n        if note in note_dict:\n            note_indices.append(note_dict[note])\n        else:\n            return \"Not a chord\"\n    \n    intervals = [note_indices[1] - note_indices[0], note_indices[2] - note_indices[1]]\n    if intervals[0] < 0: intervals[0] += 12\n    if intervals[1] < 0: intervals[1] += 12\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    for note in notes:\n        for i, value in enumerate(NOTES):\n            if note in value:\n                note_indices.append(i)\n                break\n\n    if len(note_indices) != 3:\n        return 'Not a chord'\n    \n    interval1 = note_indices[1] - note_indices[0] if note_indices[1] >= note_indices[0] else note_indices[1] + 12 - note_indices[0]\n    interval2 = note_indices[2] - note_indices[1] if note_indices[2] >= note_indices[1] else note_indices[2] + 12 - note_indices[1]\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: idx for idx, note in enumerate(notes) if isinstance(note, str) or isinstance(note, list) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in note_dict for note in chord_notes):\n        return \"Not a chord\"\n\n    intervals = [(note_dict[chord_notes[i + 1]] - note_dict[chord_notes[i]]) % 12 for i in range(2)]\n    \n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n\n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n\n    interval_1_2 = (note_indices[1] - note_indices[0]) % 12\n    interval_2_3 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    note_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    for note in notes:\n        if note in note_list:\n            note_indices.append(note_list.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    interval3 = (note_indices[2] - note_indices[0]) % 12\n    \n    if interval1 == 3 and interval2 == 4 and interval3 == 7:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3 and interval3 == 7:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_elements:\n        if note not in notes_flat:\n            return 'Not a chord'\n        intervals.append(notes_flat.index(note))\n    \n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3:\n        return \"Not a chord\"\n\n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    return i\n            elif n == note:\n                return i\n        return -1\n\n    intervals = [get_note_index(note) for note in chord_elements]\n    \n    if -1 in intervals:\n        return \"Not a chord\"\n\n    interval_1_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_positions = {note: index for index, note in enumerate(['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'])}\n    \n    try:\n        first, second, third = note_positions[notes[0]], note_positions[notes[1]], note_positions[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    first, second, third = chord_notes\n    try:\n        first_idx = notes.index(first)\n        second_idx = notes.index(second)\n        third_idx = notes.index(third)\n    except ValueError:\n        return \"Not a chord\"\n    \n    interval_1_2 = (second_idx - first_idx) % 12\n    interval_2_3 = (third_idx - second_idx) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    for note in notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                intervals.append(i)\n                break\n    \n    if len(intervals) != 3:\n        return \"Not a chord\"\n\n    interval1 = intervals[1] - intervals[0]\n    interval2 = intervals[2] - intervals[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n\n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    flat_notes.extend([note[1] for note in notes if isinstance(note, list)])\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return \"Not a chord\"\n\n    indices = [flat_notes.index(note) for note in chord_notes]\n    intervals = [(indices[1] - indices[0]) % 12, (indices[2] - indices[1]) % 12]\n\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    indices = [notes.index(note) for note in chord_notes if note in notes]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    intervals = [(indices[i] - indices[i-1]) % 12 for i in range(1, 3)]\n    if intervals == [3, 4]:\n        return \"Minor\"\n    elif intervals == [4, 3]:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes) for note in (note if isinstance(note, list) else [note])}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    try:\n        first, second, third = [note_dict[note] for note in chord_notes]\n    except KeyError:\n        return \"Not a chord\"\n    \n    interval_1_2 = second - first if second >= first else second - first + 12\n    interval_2_3 = third - second if third >= second else third - second + 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    index_map = {note: i for i, note_group in enumerate(NOTES) for note in note_group}\n    \n    if any(note not in index_map for note in chord_notes):\n        return \"Not a chord\"\n    \n    first, second, third = index_map[chord_notes[0]], index_map[chord_notes[1]], index_map[chord_notes[2]]\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    intervals = []\n    note_indices = {note: index for index, note in enumerate(['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'])}\n    \n    try:\n        first = note_indices[notes[0]]\n        second = note_indices[notes[1]]\n        third = note_indices[notes[2]]\n    except KeyError:\n        return \"Not a chord\"\n\n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return \"Minor\"\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return \"Not a chord\"\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = []\n    for note in chord_notes:\n        found = False\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indices.append(i)\n                found = True\n                break\n        if not found:\n            return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = []\n    for note in notes:\n        for i, n in enumerate(NOTES):\n            if note in n:\n                note_indices.append(i)\n                break\n    \n    if len(note_indices) != 3:\n        return \"Not a chord\"\n    \n    interval1 = note_indices[1] - note_indices[0]\n    interval2 = note_indices[2] - note_indices[1]\n    \n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    else:\n        return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    indices = [notes.index(note) for note in chord_notes if note in notes]\n    \n    if len(indices) != 3:\n        return \"Not a chord\"\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return \"Minor\"\n    elif interval1 == 4 and interval2 == 3:\n        return \"Major\"\n    \n    return \"Not a chord\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return \"Not a chord\"\n    \n    note_indices = {note: i for i, sublist in enumerate(NOTES) for note in sublist}\n    \n    if all(note in note_indices for note in chord_notes):\n        intervals = [(note_indices[chord_notes[i+1]] - note_indices[chord_notes[i]]) % 12 for i in range(2)]\n        if intervals == [3, 4]:\n            return \"Minor\"\n        elif intervals == [4, 3]:\n            return \"Major\"\n    return \"Not a chord\"\n```",
            "logp": null
        }
    ]
}