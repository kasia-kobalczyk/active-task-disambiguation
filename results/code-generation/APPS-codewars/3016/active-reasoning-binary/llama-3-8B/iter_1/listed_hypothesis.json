{
    "0": [
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    for key, value in DCT_CHORDS.items():\n        if (chord[0] in value[0] and chord[1] in value[1] and chord[2] in value[2]):\n            return key\n    return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        },
        {
            "content": "def minor_or_major(chord):\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    first, second, third = chord\n    if (NOTES.index(first) - NOTES.index(second)) % 12 == config[1][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[1][1]:\n        return 'Minor'\n    elif (NOTES.index(first) - NOTES.index(second)) % 12 == config[0][1] and (NOTES.index(second) - NOTES.index(third)) % 12 == config[0][1]:\n        return 'Major'\n    else:\n        return 'Not a chord'",
            "logp": null
        }
    ],
    "1": [],
    "2": [],
    "3": []
}