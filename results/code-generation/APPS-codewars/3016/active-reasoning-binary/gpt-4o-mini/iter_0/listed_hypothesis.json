{
    "0": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_map = {note: index for index, note in enumerate(notes)}\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    \n    for note in chord_notes:\n        if note in note_map:\n            intervals.append(note_map[note])\n        else:\n            return 'Not a chord'\n    \n    interval_1_to_2 = (intervals[1] - intervals[0]) % 12\n    interval_2_to_3 = (intervals[2] - intervals[1]) % 12\n    \n    if interval_1_to_2 == 3 and interval_2_to_3 == 4:\n        return 'Minor'\n    elif interval_1_to_2 == 4 and interval_2_to_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    \n    chord_elements = chord.split()\n    if len(chord_elements) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_elements:\n        if note not in flat_notes:\n            return 'Not a chord'\n        intervals.append(flat_notes.index(note))\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(3):\n        note1 = flat_notes.index(chord_notes[i])\n        note2 = flat_notes.index(chord_notes[(i + 1) % 3])\n        interval = (note2 - note1) % 12\n        intervals.append(interval)\n\n    if intervals == [3, 4] or intervals == [4, 3]:\n        return 'Minor' if intervals == [3, 4] else 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {note: i for i, note in enumerate(notes)}\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first, second, third = [note_dict[note] for note in chord_notes]\n    except KeyError:\n        return 'Not a chord'\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    # Flatten the notes list for easier comparison\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    indexes = [flat_notes.index(note) for note in chord_notes if note in flat_notes]\n\n    if len(indexes) != 3:\n        return 'Not a chord'\n\n    intervals = [indexes[1] - indexes[0], indexes[2] - indexes[1]]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_elements = chord.split()\n    \n    if len(chord_elements) != 3 or any(note not in notes_flat for note in chord_elements):\n        return 'Not a chord'\n    \n    first_index = notes_flat.index(chord_elements[0])\n    second_index = notes_flat.index(chord_elements[1])\n    third_index = notes_flat.index(chord_elements[2])\n    \n    interval1 = (second_index - first_index) % 12\n    interval2 = (third_index - second_index) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n\n    intervals = []\n    for i in range(3):\n        interval = (flat_notes.index(chord_notes[(i + 1) % 3]) - flat_notes.index(chord_notes[i])) % 12\n        intervals.append(interval)\n\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    # Get the positions of the notes in the scale\n    positions = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                positions.append(i)\n                break\n    \n    if len(positions) < 3:\n        return 'Not a chord'\n    \n    # Calculate intervals\n    interval_1_2 = (positions[1] - positions[0]) % 12\n    interval_2_3 = (positions[2] - positions[1]) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note for sublist in notes for note in (sublist if isinstance(sublist, list) else [sublist])]\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or not all(note in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    first, second, third = chord_notes\n    \n    first_index = flat_notes.index(first)\n    second_index = flat_notes.index(second)\n    third_index = flat_notes.index(third)\n    \n    interval_1_2 = (second_index - first_index) % 12\n    interval_2_3 = (third_index - second_index) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    notes_flat = [note if isinstance(note, str) else note for note in notes]\n    \n    note_list = chord.split()\n    if len(note_list) != 3:\n        return 'Not a chord'\n\n    indices = []\n    for note in note_list:\n        found = False\n        for i, n in enumerate(notes_flat):\n            if n == note:\n                indices.append(i)\n                found = True\n                break\n        if not found:\n            return 'Not a chord'\n    \n    intervals = [(indices[i] - indices[i - 1]) % 12 for i in range(1, 3)]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes_list = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    notes = chord.split()\n    \n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    positions = [notes_list.index(note) for note in notes]\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    note_positions = {note: i for i, group in enumerate(NOTES) for note in (group if isinstance(group, list) else [group])}\n    \n    if all(note in note_positions for note in notes):\n        first, second, third = note_positions[notes[0]], note_positions[notes[1]], note_positions[notes[2]]\n        interval_1_2 = (second - first) % 12\n        interval_2_3 = (third - second) % 12\n        \n        if interval_1_2 == 3 and interval_2_3 == 4:\n            return 'Minor'\n        elif interval_1_2 == 4 and interval_2_3 == 3:\n            return 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes]\n    chord_list = chord.split()\n\n    if len(chord_list) != 3:\n        return 'Not a chord'\n\n    indices = []\n    for note in chord_list:\n        if note in flat_notes:\n            indices.append(flat_notes.index(note))\n        else:\n            return 'Not a chord'\n\n    intervals = [\n        (indices[1] - indices[0]) % 12,\n        (indices[2] - indices[1]) % 12,\n    ]\n\n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return 'Not a chord'\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for note in chord_notes:\n        index = next((i for i, n in enumerate(notes) if note in (n if isinstance(n, list) else [n])), None)\n        if index is None:\n            return 'Not a chord'\n        intervals.append(index)\n    \n    interval1 = (intervals[1] - intervals[0]) % 12\n    interval2 = (intervals[2] - intervals[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return 'Not a chord'\n\n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return None\n\n    first, second, third = map(get_note_index, chord_notes)\n    \n    if None in (first, second, third):\n        return 'Not a chord'\n    \n    interval1 = second - first\n    interval2 = third - second\n\n    if interval1 < 0:\n        interval1 += 12\n    if interval2 < 0:\n        interval2 += 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return 'Not a chord'\n\n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = chord.split()\n    if len(notes) != 3:\n        return 'Not a chord'\n    \n    note_indices = []\n    chromatic_scale = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    \n    for note in notes:\n        if note in chromatic_scale:\n            note_indices.append(chromatic_scale.index(note))\n        else:\n            return 'Not a chord'\n    \n    interval1 = (note_indices[1] - note_indices[0]) % 12\n    interval2 = (note_indices[2] - note_indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    def find_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    idx1, idx2, idx3 = find_index(chord_notes[0]), find_index(chord_notes[1]), find_index(chord_notes[2])\n    \n    if idx1 == -1 or idx2 == -1 or idx3 == -1:\n        return 'Not a chord'\n    \n    interval1 = (idx2 - idx1) % 12\n    interval2 = (idx3 - idx2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3 or any(note not in flat_notes for note in chord_notes):\n        return 'Not a chord'\n    \n    index1 = flat_notes.index(chord_notes[0])\n    index2 = flat_notes.index(chord_notes[1])\n    index3 = flat_notes.index(chord_notes[2])\n    \n    interval1 = (index2 - index1) % 12\n    interval2 = (index3 - index2) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    note_indices = {note: index for index, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first = note_indices[chord_notes[0]]\n        second = note_indices[chord_notes[1]]\n        third = note_indices[chord_notes[2]]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    intervals = []\n    for i in range(2):\n        first_index = notes.index(chord_notes[i])\n        second_index = notes.index(chord_notes[i + 1])\n        interval = (second_index - first_index) % 12\n        intervals.append(interval)\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes_list = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes_list]\n    notes = {note: i for i, note in enumerate(flat_notes)}\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or not all(note in notes for note in chord_notes):\n        return 'Not a chord'\n\n    intervals = [(notes[chord_notes[1]] - notes[chord_notes[0]]) % 12, \n                 (notes[chord_notes[2]] - notes[chord_notes[1]]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    return i\n            elif note == n:\n                return i\n        return -1\n    \n    indices = [get_note_index(n) for n in chord_notes]\n    \n    if -1 in indices:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {}\n    for i, note in enumerate(notes):\n        if isinstance(note, list):\n            for variant in note:\n                note_dict[variant] = i\n        else:\n            note_dict[note] = i\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first = note_dict[chord_notes[0]]\n        second = note_dict[chord_notes[1]]\n        third = note_dict[chord_notes[2]]\n    except KeyError:\n        return 'Not a chord'\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = []\n    for note in chord_notes:\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                indices.append(i)\n                break\n    \n    if len(indices) < 3:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    indices = [notes.index(note) for note in chord_notes]\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        intervals = [flat_notes.index(note) for note in chord_notes]\n    except ValueError:\n        return 'Not a chord'\n    \n    interval_1_2 = intervals[1] - intervals[0]\n    interval_2_3 = intervals[2] - intervals[1]\n    \n    if interval_1_2 < 0:\n        interval_1_2 += 12\n    if interval_2_3 < 0:\n        interval_2_3 += 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    \n    return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [n if isinstance(n, str) else n[0] for n in notes]\n    note_indices = {note: index for index, note in enumerate(flat_notes)}\n    \n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first = note_indices[chord_notes[0]]\n        second = note_indices[chord_notes[1]]\n        third = note_indices[chord_notes[2]]\n    except KeyError:\n        return 'Not a chord'\n    \n    interval_1_2 = (second - first) % 12\n    interval_2_3 = (third - second) % 12\n    \n    if interval_1_2 == 3 and interval_2_3 == 4:\n        return 'Minor'\n    elif interval_1_2 == 4 and interval_2_3 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    def note_index(note):\n        for i, n in enumerate(notes):\n            if note in (n if isinstance(n, list) else [n]):\n                return i\n        return -1\n    \n    indices = [note_index(note) for note in chord_notes]\n    \n    if -1 in indices:\n        return 'Not a chord'\n    \n    interval1 = indices[1] - indices[0] if indices[1] >= indices[0] else indices[1] + 12 - indices[0]\n    interval2 = indices[2] - indices[1] if indices[2] >= indices[1] else indices[2] + 12 - indices[1]\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes_list = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    flat_notes = [note if isinstance(note, str) else note[0] for note in notes_list]\n    notes = {note: i for i, note in enumerate(flat_notes)}\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3 or not all(note in notes for note in chord_notes):\n        return 'Not a chord'\n\n    intervals = [(notes[chord_notes[1]] - notes[chord_notes[0]]) % 12, \n                 (notes[chord_notes[2]] - notes[chord_notes[1]]) % 12]\n    \n    if intervals == [3, 4]:\n        return 'Minor'\n    elif intervals == [4, 3]:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord_notes = chord.split()\n    \n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    def get_note_index(note):\n        for i, n in enumerate(notes):\n            if isinstance(n, list):\n                if note in n:\n                    return i\n            elif note == n:\n                return i\n        return -1\n    \n    indices = [get_note_index(n) for n in chord_notes]\n    \n    if -1 in indices:\n        return 'Not a chord'\n    \n    interval1 = (indices[1] - indices[0]) % 12\n    interval2 = (indices[2] - indices[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    note_dict = {}\n    for i, note in enumerate(notes):\n        if isinstance(note, list):\n            for variant in note:\n                note_dict[variant] = i\n        else:\n            note_dict[note] = i\n\n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    try:\n        first = note_dict[chord_notes[0]]\n        second = note_dict[chord_notes[1]]\n        third = note_dict[chord_notes[2]]\n    except KeyError:\n        return 'Not a chord'\n\n    interval1 = (second - first) % 12\n    interval2 = (third - second) % 12\n\n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef minor_or_major(chord):\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    \n    chord_notes = chord.split()\n    if len(chord_notes) != 3:\n        return 'Not a chord'\n    \n    note_positions = {}\n    for i, note in enumerate(notes):\n        if isinstance(note, list):\n            for alt_note in note:\n                note_positions[alt_note] = i\n        else:\n            note_positions[note] = i\n            \n    positions = [note_positions[note] for note in chord_notes]\n    \n    interval1 = (positions[1] - positions[0]) % 12\n    interval2 = (positions[2] - positions[1]) % 12\n    \n    if interval1 == 3 and interval2 == 4:\n        return 'Minor'\n    elif interval1 == 4 and interval2 == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n```",
            "logp": null
        }
    ]
}