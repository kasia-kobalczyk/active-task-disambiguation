{
    "0": {
        "0": [
            "def get_score(n):\n    return 50 * n * (n + 1)",
            "def get_score(n):\n    score = n * 50 + (n-1) * (n-1) * 50\n    return score",
            "def get_score(n):\n    score = n * 50 + (n * (n-1) * 25)\n    return score",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n - 1) * (n - 1) * 100",
            "def get_score(n):\n    return n * 50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * 50 + (n - 1) * (n - 2) // 2 * 50\n\n# Test cases\nprint(get_score(1))  # 50\nprint(get_score(2))  # 150\nprint(get_score(3))  # 300\nprint(get_score(4))  # 500\nprint(get_score(5))  # 750",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 * (n + 1)"
        ],
        "1": [
            "def get_score(n):\n    if n <= 0:\n        return 0\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + n * (n - 1) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return n * 50 + (n - 1) * 50",
            "def get_score(n):\n    if n < 1:\n        return \"Invalid input\"\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * 50 + (n - 1) * (n - 1) * 50",
            "def get_score(n):\n    return (n**2 + n) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * n + 1) * 25",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n * (n - 1) // 2) * 100",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return get_score(n-1) + n*50",
            "def get_score(n):\n    return n*50\nget_score(1)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * (n+1)) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n*(n+1)*25"
        ],
        "2": [
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    elif n == 2:\n        return 150\n    else:\n        return (n * 100)",
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n*(n+1)) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return n * 50 + get_score(n-1)",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return (n**2 + n) * 25\n\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 50 / 2",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    if n <= 0:\n        return None\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)"
        ],
        "3": [
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * 50) + (n * (n-1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 50 // 2\n\nprint(get_score(1))\nprint(get_score(2))\nprint(get_score(3))\nprint(get_score(4))\nprint(get_score(5))",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ],
        "4": [
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n-1) * n * 50 // 2\n\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(6)) # 1050",
            "def get_score(n):\n    if n < 1:\n        return None\n    return n * 50 + (n - 1) * n // 2 * 50",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * 50) + (n * (n-1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n**2 + n) * 25",
            "def get_score(n):\n    return (n * 50) + (n-1) * (n * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    if n < 1:\n        return None\n    return (n * (n + 1) // 2) * 50\n\n# Testing the function with example inputs\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return (n * (n + 1)) * 25\n\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(6)) # 1050",
            "def get_score(n):\n    score = n * (n+1) * 25\n    return score\n\nprint(get_score(1))\nprint(get_score(2))\nprint(get_score(3))\nprint(get_score(4))\nprint(get_score(5))",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ]
    },
    "1": {
        "0": [
            "def get_score(n):\n    return n * 50 + (n - 1) * (n - 1) * 100",
            "def get_score(n):\n    return n * 50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * 50 + (n - 1) * (n - 2) // 2 * 50\n\n# Test cases\nprint(get_score(1))  # 50\nprint(get_score(2))  # 150\nprint(get_score(3))  # 300\nprint(get_score(4))  # 500\nprint(get_score(5))  # 750",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 * (n + 1)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n * 100) + (n-1) * (n-2) * 25",
            "def get_score(n):\n    return (n*(n+1)*50)",
            "def get_score(n):\n    return n * (n * 100 + 50)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 50)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ],
        "1": [
            "def get_score(n):\n    return (n**2 + n) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * n + 1) * 25",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n * (n - 1) // 2) * 100",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*50\nget_score(1)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * (n+1)) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n*50\n\nget_score(1)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1)) * 25"
        ],
        "2": [
            "def get_score(n):\n    return (n*(n+1)) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return n * 50 + get_score(n-1)",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return (n**2 + n) * 25\n\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 50 / 2",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    if n <= 0:\n        return None\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 50) // 2\n\n# Test Cases\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * 50 + n * (n - 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25"
        ],
        "3": [
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 50 // 2\n\nprint(get_score(1))\nprint(get_score(2))\nprint(get_score(3))\nprint(get_score(4))\nprint(get_score(5))",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*50 + n*(n-1)*25",
            "def get_score(n):\n    return n * 50 + (n * (n - 1) // 2) * 50\n\n# Alternative solution using the sum function\ndef get_score(n):\n    return n * 50 + sum(range(n)) * 50",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ],
        "4": [
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * 50) + (n * (n-1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n**2 + n) * 25",
            "def get_score(n):\n    return (n * 50) + (n-1) * (n * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    if n < 1:\n        return None\n    return (n * (n + 1) // 2) * 50\n\n# Testing the function with example inputs\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return (n * (n + 1)) * 25\n\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(6)) # 1050",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score\n\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n*(n+1)*25\n\n# Test cases\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(6)) # 1050",
            "def get_score(n):\n    if n < 1:\n        return 0\n    else:\n        return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n+1)) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ]
    },
    "2": {
        "0": [
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n * 100) + (n-1) * (n-2) * 25",
            "def get_score(n):\n    return (n*(n+1)*50)",
            "def get_score(n):\n    return n * (n * 100 + 50)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return 50 * n * (n + 1)",
            "def get_score(n):\n    return 50 * n * (n + 1)",
            "def get_score(n):\n    return n * 50 if n > 0 else None",
            "def get_score(n):\n    return 50 * n * (n + 1)",
            "def get_score(n):\n    return n * 50 * (n + 1)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    score = 50\n    for i in range(2, n+1):\n        score += i*50\n    return score",
            "def get_score(n):\n    return n * 50 * (n + 1)"
        ],
        "1": [
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return get_score(n-1) + n*50",
            "def get_score(n):\n    return n*50\nget_score(1)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * (n+1)) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n*50\n\nget_score(1)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n * 50))",
            "def get_score(n):\n    if n < 1:\n        return \"Invalid input\"\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * 50",
            "def get_score(n):\n    if n < 1:\n        return \"Invalid input\"\n    return (n * n) * 50",
            "def get_score(n):\n    return n * (n+1) * 25\n\nprint(get_score(1))\nprint(get_score(2))\nprint(get_score(3))\nprint(get_score(4))\nprint(get_score(5))"
        ],
        "2": [
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 50 / 2",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    if n <= 0:\n        return None\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 50) // 2\n\n# Test Cases\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * 50 + n * (n - 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25"
        ],
        "3": [
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*50 + n*(n-1)*25",
            "def get_score(n):\n    return n * 50 + (n * (n - 1) // 2) * 50\n\n# Alternative solution using the sum function\ndef get_score(n):\n    return n * 50 + sum(range(n)) * 50",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    if n == 1:\n        return 50\n    elif n == 2:\n        return 150\n    elif n == 3:\n        return 300\n    elif n == 4:\n        return 500\n    elif n == 5:\n        return 750\n    else:\n        return None",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    if n < 1:\n        return \"Invalid input\"\n    return n * (n + 1) * 25"
        ],
        "4": [
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n**2 + n) * 25",
            "def get_score(n):\n    return (n * 50) + (n-1) * (n * 25)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    if n < 1:\n        return None\n    return (n * (n + 1) // 2) * 50\n\n# Testing the function with example inputs\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return (n * (n + 1)) * 25\n\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(6)) # 1050",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score\n\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return n*(n+1)*25\n\n# Test cases\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(6)) # 1050",
            "def get_score(n):\n    if n < 1:\n        return 0\n    else:\n        return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n+1)) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n-1) * n * 25",
            "def get_score(n):\n    return (n ** 2 + n) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        return (n * (n+1)) * 25"
        ]
    }
}