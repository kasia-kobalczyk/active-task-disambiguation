{
    "0": {
        "0": [
            "def get_score(n):\n    return 50 * n * (n + 1)",
            "def get_score(n):\n    return 50 * n * (n + 1)",
            "def get_score(n):\n    score = n * 50 + (n * (n-1) * 25)\n    return score",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n - 1) * (n - 1) * 100",
            "def get_score(n):\n    return n * 50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * 50 + (n - 1) * (n - 2) // 2 * 50\n\n# Test cases\nprint(get_score(1))  # 50\nprint(get_score(2))  # 150\nprint(get_score(3))  # 300\nprint(get_score(4))  # 500\nprint(get_score(5))  # 750",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 * (n + 1)"
        ],
        "1": [
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 50 // 2\n\nprint(get_score(1))\nprint(get_score(2))\nprint(get_score(3))\nprint(get_score(4))\nprint(get_score(5))",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n * 100) + 50",
            "def get_score(n):\n    return n * 50 + ((n * (n - 1)) // 2) * 100",
            "def get_score(n):\n    return (n**2 + n) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * 50 + (n-1) * (n-1) * 50",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return (n**2 + n) * 25",
            "def get_score(n):\n    return n * 50 + (n * (n-1) // 2 * 50)",
            "def get_score(n):\n    return n*50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return 50 * n**2",
            "def get_score(n):\n    return (n * n + n) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return n * 100 + (n-1) * 50",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n * 50) + get_score(n-1)"
        ],
        "2": [
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return 50 * n + get_score(n-1)",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 50) // 2\n\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n**2 + n) * 25\n\n# Test cases\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    if n <= 0:\n        return \"n should be positive\"\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + n * (n - 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    if n <= 0:\n        return 0\n    return n * 50 + (n * (n - 1) * 50) // 2\n\nprint(get_score(1))  # 50\nprint(get_score(2))  # 150\nprint(get_score(3))  # 300\nprint(get_score(4))  # 500\nprint(get_score(5))  # 750",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n ** 2 + n) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 50 // 2\n\nassert get_score(1) == 50\nassert get_score(2) == 150"
        ],
        "3": [
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * 50) + (n - 1) * n * 25",
            "def get_score(n):\n    return n * 50 + (n * (n - 1)) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n*(n+1)*25)",
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 50) // 2",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50\n\nprint(get_score(1)) # should print 50\nprint(get_score(2)) # should print 150\nprint(get_score(3)) # should print 300\nprint(get_score(4)) # should print 500\nprint(get_score(5)) # should print 750\nprint(get_score(6)) # should print 1050\nprint(get_score(7)) # should print 1400",
            "def get_score(n):\n    return (n * 50) + ((n-1) * n * 25)",
            "def get_score(n):\n    if n < 1:\n        return 0\n    else:\n        return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return n * 50 + (n-1) * n * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)"
        ],
        "4": [
            "def get_score(n):\n    return (n*(n+1)//2)*50\nprint(get_score(1)) # Expected: 50\nprint(get_score(2)) # Expected: 150\nprint(get_score(6)) # Expected: 1050\nprint(get_score(15)) # Expected: 6000",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    score = (n * (n + 1) // 2) * 50\n    return score\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return (n * (n+1)) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n**2 + n) * 25",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score\n\n# Test cases\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000\n\n# Additional test cases\nassert get_score(3) == 300\nassert get_score(4) == 500\nassert get_score(5) == 750\n\nprint(\"All test cases pass\")",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    score = (n * (n + 1)) * 25\n    return score",
            "def get_score(n):\n    return (n*(n+1)*25)",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ]
    },
    "1": {
        "0": [
            "def get_score(n):\n    return n * 50 + (n - 1) * (n - 1) * 100",
            "def get_score(n):\n    return n * 50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * 50 + (n - 1) * (n - 2) // 2 * 50\n\n# Test cases\nprint(get_score(1))  # 50\nprint(get_score(2))  # 150\nprint(get_score(3))  # 300\nprint(get_score(4))  # 500\nprint(get_score(5))  # 750",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 * (n + 1)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n * 100) + (n-1) * (n-2) * 25",
            "def get_score(n):\n    return (n*(n+1)*50)",
            "def get_score(n):\n    return n * (n * 100 + 50)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 50)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ],
        "1": [
            "def get_score(n):\n    return n * 50 + (n-1) * (n-1) * 50",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return (n**2 + n) * 25",
            "def get_score(n):\n    return n * 50 + (n * (n-1) // 2 * 50)",
            "def get_score(n):\n    return n*50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return 50 * n**2",
            "def get_score(n):\n    return (n * n + n) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return n * 100 + (n-1) * 50",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n * 50) + get_score(n-1)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * 50 + (n-1) * (n-1) * 50",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return n * 100",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ],
        "2": [
            "def get_score(n):\n    return (n**2 + n) * 25\n\n# Test cases\nprint(get_score(1)) # 50\nprint(get_score(2)) # 150\nprint(get_score(3)) # 300\nprint(get_score(4)) # 500\nprint(get_score(5)) # 750",
            "def get_score(n):\n    if n <= 0:\n        return \"n should be positive\"\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + n * (n - 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    if n <= 0:\n        return 0\n    return n * 50 + (n * (n - 1) * 50) // 2\n\nprint(get_score(1))  # 50\nprint(get_score(2))  # 150\nprint(get_score(3))  # 300\nprint(get_score(4))  # 500\nprint(get_score(5))  # 750",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 50 // 2\n\nassert get_score(1) == 50\nassert get_score(2) == 150",
            "def get_score(n):\n    if n == 1:\n        return 50\n    elif n == 2:\n        return 150\n    elif n == 3:\n        return 300\n    elif n == 4:\n        return 500\n    elif n == 5:\n        return 750\n    else:\n        return None",
            "def get_score(n):\n    if n <= 0:\n        return None\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n * (n - 1) // 2) * 50\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(3) == 300\nassert get_score(4) == 500\nassert get_score(5) == 750",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * 50) + (n * (n-1) * 25)"
        ],
        "3": [
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n*(n+1)*25)",
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 50) // 2",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50\n\nprint(get_score(1)) # should print 50\nprint(get_score(2)) # should print 150\nprint(get_score(3)) # should print 300\nprint(get_score(4)) # should print 500\nprint(get_score(5)) # should print 750\nprint(get_score(6)) # should print 1050\nprint(get_score(7)) # should print 1400",
            "def get_score(n):\n    return (n * 50) + ((n-1) * n * 25)",
            "def get_score(n):\n    if n < 1:\n        return 0\n    else:\n        return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return n * 50 + (n-1) * n * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*50 + (n-1)*n*25",
            "def get_score(n):\n    return n * 50 + (n - 1) * (n * 25)",
            "def get_score(n):\n    return (n * (n+1) * 25)"
        ],
        "4": [
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    score = (n * (n + 1) // 2) * 50\n    return score\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return (n * (n+1)) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n**2 + n) * 25",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score\n\n# Test cases\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000\n\n# Additional test cases\nassert get_score(3) == 300\nassert get_score(4) == 500\nassert get_score(5) == 750\n\nprint(\"All test cases pass\")",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    score = (n * (n + 1)) * 25\n    return score",
            "def get_score(n):\n    return (n*(n+1)*25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ]
    },
    "2": {
        "0": [
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n * 100) + (n-1) * (n-2) * 25",
            "def get_score(n):\n    return (n*(n+1)*50)",
            "def get_score(n):\n    return n * (n * 100 + 50)",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 50)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return 50 * n * (n + 1)",
            "def get_score(n):\n    return 50 * n * (n + 1)",
            "def get_score(n):\n    return n * 50 if n > 0 else None",
            "def get_score(n):\n    return 50 * n * (n + 1)",
            "def get_score(n):\n    return n * 50 * (n + 1)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    score = 50\n    for i in range(2, n+1):\n        score += i*50\n    return score",
            "def get_score(n):\n    return n * 50 * (n + 1)"
        ],
        "1": [
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return (n**2 + n) * 25",
            "def get_score(n):\n    return n * 50 + (n * (n-1) // 2 * 50)",
            "def get_score(n):\n    return n*50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return 50 * n**2",
            "def get_score(n):\n    return (n * n + n) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return n * 100 + (n-1) * 50",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n * 50) + get_score(n-1)",
            "def get_score(n):\n    return n * (n * 50)",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * 50 + (n-1) * (n-1) * 50",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return n * 100",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return 50 * n ** 2",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return (n * (n * 50))",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return n * 50 + get_score(n-1)",
            "def get_score(n):\n    return (n * 50) + ((n - 1) * (n * 25))",
            "def get_score(n):\n    return n * (n + 1) * 25"
        ],
        "2": [
            "def get_score(n):\n    return n * 50 + (n-1) * (n-1) * 50",
            "def get_score(n):\n    return n * 50 + n * (n - 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    if n <= 0:\n        return 0\n    return n * 50 + (n * (n - 1) * 50) // 2\n\nprint(get_score(1))  # 50\nprint(get_score(2))  # 150\nprint(get_score(3))  # 300\nprint(get_score(4))  # 500\nprint(get_score(5))  # 750",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 50 // 2\n\nassert get_score(1) == 50\nassert get_score(2) == 150",
            "def get_score(n):\n    if n == 1:\n        return 50\n    elif n == 2:\n        return 150\n    elif n == 3:\n        return 300\n    elif n == 4:\n        return 500\n    elif n == 5:\n        return 750\n    else:\n        return None",
            "def get_score(n):\n    if n <= 0:\n        return None\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * 50 + (n * (n - 1) // 2) * 50\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(3) == 300\nassert get_score(4) == 500\nassert get_score(5) == 750",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n*(n+1)*25",
            "def get_score(n):\n    return (n * 50) + (n * (n-1) * 25)"
        ],
        "3": [
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 50) // 2",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50\n\nprint(get_score(1)) # should print 50\nprint(get_score(2)) # should print 150\nprint(get_score(3)) # should print 300\nprint(get_score(4)) # should print 500\nprint(get_score(5)) # should print 750\nprint(get_score(6)) # should print 1050\nprint(get_score(7)) # should print 1400",
            "def get_score(n):\n    return (n * 50) + ((n-1) * n * 25)",
            "def get_score(n):\n    if n < 1:\n        return 0\n    else:\n        return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return n * 50 + (n-1) * n * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n*50 + (n-1)*n*25",
            "def get_score(n):\n    return n * 50 + (n - 1) * (n * 25)",
            "def get_score(n):\n    return (n * (n+1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    if n == 1:\n        return 50\n    return (n * 50) + (n * (n - 1) * 50) // 2\n    # alternatively, return (n * 50) * (n + 1) // 2",
            "def get_score(n):\n    return n * 50 + (n - 1) * n * 25\n\n#The score is calculated by n * 50 + (n - 1) * n * 25."
        ],
        "4": [
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    return (n * (n + 1) // 2) * 50",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    score = n * (n + 1) * 25\n    return score\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    score = (n * (n + 1) // 2) * 50\n    return score\n\nassert get_score(1) == 50\nassert get_score(2) == 150\nassert get_score(6) == 1050\nassert get_score(15) == 6000",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return (n * (n+1)) * 25",
            "def get_score(n):\n    if n == 1:\n        return 50\n    else:\n        return (n**2 + n) * 25",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)",
            "def get_score(n):\n    return (n * (n + 1)) * 25",
            "def get_score(n):\n    score = (n * (n + 1)) * 25\n    return score",
            "def get_score(n):\n    return (n*(n+1)*25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n + 1) * 25",
            "def get_score(n):\n    return n * (n+1) * 25",
            "def get_score(n):\n    return (n * (n + 1) * 25)",
            "def get_score(n):\n    return (n * 50) + (n * (n - 1) * 25)"
        ]
    }
}