{
    "0": {
        "0": [
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{area}-{location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return area + '-' + location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    \n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    \n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return f'{area}-{location}'",
            "def plane_seat(a):\n    if not isinstance(a, str):\n        return 'No Seat!!'\n    num, letter = a[:-1], a[-1].upper()\n    if not num.isdigit() or not 1 <= int(num) <= 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if int(num) <= 20 else 'Middle' if int(num) <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_num < 1 or seat_num > 60 or seat_letter in ['I', 'J'] or (seat_letter < 'A' or seat_letter > 'K'):\n        return 'No Seat!!'\n    if seat_num <= 20:\n        location = 'Front'\n    elif seat_num <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if seat_letter in ['A', 'B', 'C']:\n        location += '-Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    section, letter = a[:-1], a[-1]\n    if not section.isdigit() or not 1 <= int(section) <= 60 or letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        location = 'Front'\n    elif int(section) <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABCD':\n        location += '-Left'\n    elif letter in 'EFG':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if not num.isdigit() or not 1 <= int(num) <= 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if int(num) <= 20 else 'Middle' if int(num) <= 40 else 'Back'\n    position = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{area}-{position}'",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if not section.isdigit() or int(section) < 1 or int(section) > 60 or seat not in 'ABCDEFGHKabcdefghk':\n        return 'No Seat!!'\n    section = 'Front' if int(section) <= 20 else 'Middle' if int(section) <= 40 else 'Back'\n    seat = 'Left' if seat in 'ABCabc' else 'Middle' if seat in 'DFdf' else 'Right'\n    return '{}-{}'.format(section, seat)",
            "def plane_seat(a):\n    section = a[:-1]\n    seat = a[-1]\n    \n    if int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    elif seat not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    else:\n        if int(section) <= 20:\n            area = 'Front'\n        elif int(section) <= 40:\n            area = 'Middle'\n        else:\n            area = 'Back'\n        \n        if seat in 'ABC':\n            location = 'Left'\n        elif seat in 'DEF':\n            location = 'Middle'\n        else:\n            location = 'Right'\n        \n        return area + '-' + location",
            "def plane_seat(a):\n    section = a[:-1]\n    seat = a[-1]\n    if int(section) < 1 or int(section) > 60 or (seat not in ' ABCDEFGHK'):\n        return 'No Seat!!'\n    if int(section) <= 20:\n        zone = 'Front'\n    elif int(section) <= 40:\n        zone = 'Middle'\n    else:\n        zone = 'Back'\n    if seat in ' ABC':\n        location = 'Left'\n    elif seat in ' DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{zone}-{location}'",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if not section.isdigit() or not 'A' <= seat <= 'K' or seat in 'IJ':\n        return 'No Seat!!'\n    section = int(section)\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    seat_location = 'Left' if 'A' <= seat <= 'C' else 'Middle' if 'D' <= seat <= 'F' else 'Right'\n    return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front'\n    elif section <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABC':\n        location += '-Left'\n    elif letter in 'DEF':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if int(num) < 1 or int(num) > 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    if int(num) <= 20:\n        section = 'Front'\n    elif int(num) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location += '-' + ('Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right')\n    return location",
            "def plane_seat(a):\n    if not isinstance(a, str) or len(a) != 2:\n        return 'No Seat!!'\n    seat_number = a[0]\n    seat_letter = a[1]\n    if not seat_number.isdigit() or int(seat_number) < 1 or int(seat_number) > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        location = 'Front'\n    elif int(seat_number) <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if seat_letter in 'ABC':\n        location += '-Left'\n    elif seat_letter in 'DEF':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHIK'):\n        return 'No Seat!!'\n    \n    if section <= 20:\n        location = 'Front-'\n    elif section <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    \n    if letter in 'ABC':\n        location += 'Left'\n    elif letter in 'DEF':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    \n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return section + '-' + location",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if not seat_number.isdigit() or int(seat_number) < 1 or int(seat_number) > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        section = 'Front'\n    elif int(seat_number) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if int(seat_number) > 60 or seat_letter in ['I', 'J'] or not seat_letter.isalpha():\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        section = 'Front'\n    elif int(seat_number) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in ['A', 'B', 'C']:\n        location = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{section}-{location}'",
            "def plane_seat(a):\n    num = int(''.join(filter(str.isdigit, a)))\n    let = ''.join(filter(str.isalpha, a))\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if let in 'ABC':\n        location = 'Left'\n    elif let in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return section + '-' + location"
        ],
        "1": [
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if not (1 <= num <= 60) or letter in 'IJ':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if 'A' <= letter <= 'C' else 'Middle' if 'D' <= letter <= 'F' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_num < 1 or seat_num > 60 or seat_letter in ['I', 'J'] or (seat_letter < 'A' or seat_letter > 'K'):\n        return 'No Seat!!'\n    if seat_num <= 20:\n        location = 'Front'\n    elif seat_num <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if seat_letter in ['A', 'B', 'C']:\n        location += '-Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABCD':\n        loc = 'Left'\n    elif letter in 'EFG':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    else:\n        if section <= 20:\n            area = 'Front'\n        elif section <= 40:\n            area = 'Middle'\n        else:\n            area = 'Back'\n        if letter in 'ABC':\n            location = 'Left'\n        elif letter in 'DEF':\n            location = 'Middle'\n        else:\n            location = 'Right'\n        return area + '-' + location",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(area, location)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            section = 'Front'\n        elif num <= 40:\n            section = 'Middle'\n        else:\n            section = 'Back'\n        if 'A' <= letter <= 'C':\n            location = 'Left'\n        elif 'D' <= letter <= 'F':\n            location = 'Middle'\n        else:\n            location = 'Right'\n        return f'{section}-{location}'",
            "def plane_seat(a):\n    number = int(a[:-1])\n    letter = a[-1]\n    if not 1 <= number <= 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if number <= 20:\n        location = 'Front'\n    elif number <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABC':\n        seat = 'Left'\n    elif letter in 'DEF':\n        seat = 'Middle'\n    else:\n        seat = 'Right'\n    return location + '-' + seat",
            "def plane_seat(a):\n    number = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if number < 1 or number > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    \n    if number <= 20:\n        position = 'Front'\n    elif number <= 40:\n        position = 'Middle'\n    else:\n        position = 'Back'\n    \n    if letter in 'ABCD':\n        seat = 'Left'\n    elif letter in 'EFG':\n        seat = 'Middle'\n    else:\n        seat = 'Right'\n    \n    return '{}-{}'.format(position, seat)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if not section.isdigit() or not 'A' <= seat <= 'K' or seat in 'IJ':\n        return 'No Seat!!'\n    section = int(section)\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    seat_location = 'Left' if 'A' <= seat <= 'C' else 'Middle' if 'D' <= seat <= 'F' else 'Right'\n    return '{}-{}'.format(location, seat_location)",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if not seat_number.isdigit() or int(seat_number) < 1 or int(seat_number) > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        section = 'Front'\n    elif int(seat_number) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABCDEFG':\n        cluster = 'Left' if seat_letter in 'ABC' else ('Middle' if seat_letter in 'DEF' else 'Right')\n    else:\n        cluster = 'Right'\n        \n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if not (1 <= num <= 60) or lett not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    loc_num = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc_lett = 'Left' if lett in 'ABC' else 'Middle' if lett in 'DEF' else 'Right'\n    return '{}-{}'.format(loc_num, loc_lett)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if num < 21:\n        section = 'Front'\n    elif num < 41:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABCDEFG':\n        area = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        area = 'Right'\n    return f'{section}-{area}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if not (1 <= num <= 60 and let in ' ABCDEFGHK'):\n        return 'No Seat!!'\n    sections = [(1, 20, 'Front'), (21, 40, 'Middle'), (41, 60, 'Back')]\n    for low, high, section in sections:\n        if low <= num <= high:\n            section_name = section\n            break\n    clusters = {'A': 'Left', 'B': 'Left', 'C': 'Left', 'D': 'Middle', 'E': 'Middle', 'F': 'Middle', 'G': 'Right', 'H': 'Right', 'K': 'Right'}\n    cluster_name = clusters[let]\n    return '{}-{}'.format(section_name, cluster_name)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if lett not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    if num < 21:\n        location = 'Front'\n    elif num < 41:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if lett in 'ABCD':\n        area = 'Left'\n    elif lett in 'EFG':\n        area = 'Middle'\n    else:\n        area = 'Right'\n    return f'{location}-{area}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if 'A' <= seat_letter <= 'C':\n        location = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        location_number = 'Front'\n    elif seat_number <= 40:\n        location_number = 'Middle'\n    else:\n        location_number = 'Back'\n        \n    if seat_letter in 'ABC':\n        location_letter = 'Left'\n    elif seat_letter in 'DEF':\n        location_letter = 'Middle'\n    else:\n        location_letter = 'Right'\n        \n    return '{}-{}'.format(location_number, location_letter)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter < 'A' or letter > 'K') or letter in ['I', 'J']:\n        return 'No Seat!!'\n    else:\n        if section <= 20:\n            location = 'Front'\n        elif section <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if 'A' <= letter <= 'C':\n            seat_location = 'Left'\n        elif 'D' <= letter <= 'F':\n            seat_location = 'Middle'\n        else:\n            seat_location = 'Right'\n        return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    elif section <= 20:\n        seat_area = 'Front'\n    elif section <= 40:\n        seat_area = 'Middle'\n    else:\n        seat_area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        seat_position = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        seat_position = 'Middle'\n    else:\n        seat_position = 'Right'\n    return f'{seat_area}-{seat_position}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J'] or letter < 'A' or letter > 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(area, cluster)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - ord('A')]\n    else:\n        letter_str = 'Right'\n        \n    return section_str + '-' + letter_str"
        ],
        "2": [
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_num < 1 or seat_num > 60 or seat_letter in ['I', 'J'] or (seat_letter < 'A' or seat_letter > 'K'):\n        return 'No Seat!!'\n    if seat_num <= 20:\n        location = 'Front'\n    elif seat_num <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if seat_letter in ['A', 'B', 'C']:\n        location += '-Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(area, location)",
            "def plane_seat(a):\n    number = int(a[:-1])\n    letter = a[-1]\n    if number < 1 or number > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    location = 'Front' if number <= 20 else 'Middle' if number <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{location}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front'\n    elif section <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABCD':\n        seat_location = 'Left'\n    elif letter in 'DEF':\n        seat_location = 'Middle'\n    else:\n        seat_location = 'Right'\n    return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABCHandle':\n        seat_area = 'Left'\n    elif letter in 'DE':\n        seat_area = 'Middle'\n    else:\n        seat_area = 'Right'\n    return '{}-{}'.format(area, seat_area)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABCD':\n        pos = 'Left'\n    elif letter in 'EFG':\n        pos = 'Middle'\n    else:\n        pos = 'Right'\n    return '{}-{}'.format(area, pos)",
            "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if not num.isdigit() or not 1 <= int(num) <= 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if int(num) <= 20 else 'Middle' if int(num) <= 40 else 'Back'\n    position = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{area}-{position}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            section = 'Front'\n        elif num <= 40:\n            section = 'Middle'\n        else:\n            section = 'Back'\n        if 'A' <= letter <= 'C':\n            location = 'Left'\n        elif 'D' <= letter <= 'F':\n            location = 'Middle'\n        else:\n            location = 'Right'\n        return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    number = int(a[:-1])\n    letter = a[-1]\n    \n    if number < 1 or number > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    \n    if number <= 20:\n        section = 'Front'\n    elif number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return section + '-' + cluster",
            "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if not num.isdigit() or not 1 <= int(num) <= 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if int(num) <= 20 else 'Middle' if int(num) <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABCDEFG':\n        cluster = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    else:\n        cluster = 'Right'\n        \n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if not section.isdigit() or not 'A' <= seat <= 'K' or seat in 'IJ':\n        return 'No Seat!!'\n    section = int(section)\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    seat_location = 'Left' if 'A' <= seat <= 'C' else 'Middle' if 'D' <= seat <= 'F' else 'Right'\n    return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABCD':\n        cluster = 'Left'\n    elif seat_letter in 'EFG':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return section + '-' + cluster",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if not (1 <= num <= 60) or lett not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if lett in 'ABC' else 'Middle' if lett in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if int(num) < 1 or int(num) > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    if int(num) <= 20:\n        section = 'Front'\n    elif int(num) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if 'A' <= letter <= 'C':\n        cluster = 'Left'\n    elif 'D' <= letter <= 'F':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if not seat_number.isdigit() or int(seat_number) < 1 or int(seat_number) > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        section = 'Front'\n    elif int(seat_number) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if num < 1 or num > 60 or let in 'IJ' or (let < 'A' or let > 'K'):\n        return 'No Seat!!'\n    if num <= 20:\n        area = 'Front'\n    elif num <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if let in 'ABC':\n        loc = 'Left'\n    elif let in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return area + '-' + loc",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if num < 21:\n        section = 'Front'\n    elif num < 41:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABCDEFG':\n        area = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        area = 'Right'\n    return '{}-{}'.format(section, area)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if lett not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    if num < 21:\n        location = 'Front'\n    elif num < 41:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if lett in 'ABCD':\n        area = 'Left'\n    elif lett in 'EFG':\n        area = 'Middle'\n    else:\n        area = 'Right'\n    return f'{location}-{area}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if 'A' <= letter <= 'C' else 'Middle' if 'D' <= letter <= 'F' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{section}-{location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if 'A' <= seat_letter <= 'C':\n        cluster = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    \n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        location_number = 'Front'\n    elif seat_number <= 40:\n        location_number = 'Middle'\n    else:\n        location_number = 'Back'\n        \n    if seat_letter in 'ABC':\n        location_letter = 'Left'\n    elif seat_letter in 'DEF':\n        location_letter = 'Middle'\n    else:\n        location_letter = 'Right'\n        \n    return location_number + '-' + location_letter",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front-'\n    elif section <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    if letter in 'ABCD':\n        location += 'Left'\n    elif letter in 'DEF':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    return location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J', 'Z'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        cluster = 'Left'\n    elif 'D' <= letter <= 'F':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return f'{area}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - ord('A')]\n    else:\n        letter_str = 'Right'\n    \n    return f'{section_str}-{letter_str}'"
        ],
        "3": [
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_num < 1 or seat_num > 60 or seat_letter in ['I', 'J'] or (seat_letter < 'A' or seat_letter > 'K'):\n        return 'No Seat!!'\n    if seat_num <= 20:\n        location = 'Front'\n    elif seat_num <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if seat_letter in ['A', 'B', 'C']:\n        location += '-Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    seat = a[-1].upper()\n    if section < 1 or section > 60 or seat not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    seat_location = 'Left' if seat in 'ABC' else 'Middle' if seat in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat_location)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front'\n    elif section <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABCD':\n        seat_location = 'Left'\n    elif letter in 'EFG':\n        seat_location = 'Middle'\n    else:\n        seat_location = 'Right'\n    return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABCD':\n        seat_area = 'Left'\n    elif letter in 'EFG':\n        seat_area = 'Middle'\n    else:\n        seat_area = 'Right'\n    return '{}-{}'.format(area, seat_area)",
            "def plane_seat(a):\n    number = int(a[:-1])\n    letter = a[-1]\n    if number < 1 or number > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    location = 'Front' if number <= 20 else 'Middle' if number <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{location}-{cluster}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    letter_location = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{location}-{letter_location}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            section = 'Front'\n        elif num <= 40:\n            section = 'Middle'\n        else:\n            section = 'Back'\n        if 'A' <= letter <= 'C':\n            location = 'Left'\n        elif 'D' <= letter <= 'F':\n            location = 'Middle'\n        else:\n            location = 'Right'\n        return f'{section}-{location}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJZ':\n        return 'No Seat!!'\n    area = 'Front' if num < 21 else 'Middle' if num < 41 else 'Back'\n    location = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(area, location)",
            "def plane_seat(a):\n    number = int(a[:-1])\n    letter = a[-1]\n    if number < 1 or number > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if number <= 20:\n        area = 'Front'\n    elif number <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABCHandle':\n        location = 'Left'\n    elif letter in 'DE':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{area}-{location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFHGK':\n        return 'No Seat!!'\n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n    if seat_letter in 'ABCGHK':\n        seat_str = 'Left'\n    elif seat_letter in 'DE':\n        seat_str = 'Middle'\n    else:\n        seat_str = 'Right'\n    return f'{section_str}-{seat_str}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if not section.isdigit() or not 'A' <= seat <= 'K' or seat in 'IJ':\n        return 'No Seat!!'\n    section = int(section)\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    seat_location = 'Left' if 'A' <= seat <= 'C' else 'Middle' if 'D' <= seat <= 'F' else 'Right'\n    return '{}-{}'.format(location, seat_location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if num < 1 or num > 60 or let in 'IJ' or (let < 'A' or let > 'K'):\n        return 'No Seat!!'\n    if num <= 20:\n        area = 'Front'\n    elif num <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if let in 'ABC':\n        loc = 'Left'\n    elif let in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if not (1 <= num <= 60) or lett in ['I', 'J'] or not 'A' <= lett <= 'K':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if 'A' <= lett <= 'C' else 'Middle' if 'D' <= lett <= 'F' else 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if lett not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if lett in 'ABC' else 'Middle' if lett in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if int(num) > 60 or letter in 'IJZ' or (not num.isdigit() or not letter.isalpha()):\n        return 'No Seat!!'\n    section = 'Front' if int(num) <= 20 else 'Middle' if int(num) <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n    cluster = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return area + '-' + loc",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front-'\n    elif section <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    if letter in 'ABCD':\n        location += 'Left'\n    elif letter in 'EFG':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if 'A' <= seat_letter <= 'C':\n        location = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        location = 'Middle'\n    else:\n        location = 'Right'\n        \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J'] or letter < 'A' or letter > 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return area + '-' + cluster",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    \n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    section = ''\n    cluster = ''\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    \n    return section + '-' + cluster",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - ord('A')]\n    else:\n        letter_str = 'Right'\n        \n    return f'{section_str}-{letter_str}'"
        ],
        "4": [
            "def plane_seat(a):\n    section = int(a[:-1])\n    seat = a[-1].upper()\n    if section < 1 or section > 60 or seat not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    seat_location = 'Left' if seat in 'ABC' else 'Middle' if seat in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat_location)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(area, location)",
            "def plane_seat(a):\n    seat_number, seat_letter = int(a[:-1]), a[-1].upper()\n    if seat_number < 1 or seat_number > 60 or seat_letter in 'IJ':\n        return 'No Seat!!'\n    location = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n    seat_location = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if int(num) < 1 or int(num) > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    if int(num) <= 20:\n        zone = 'Front'\n    elif int(num) <= 40:\n        zone = 'Middle'\n    else:\n        zone = 'Back'\n    if letter in 'ABC':\n        loc = 'Left'\n    elif letter in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return f'{zone}-{loc}'",
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_num < 1 or seat_num > 60 or seat_letter in ['I', 'J'] or seat_letter < 'A' or seat_letter > 'K':\n        return 'No Seat!!'\n    elif seat_num <= 20:\n        section = 'Front'\n    elif seat_num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in ['A', 'B', 'C']:\n        loc = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return section + '-' + loc",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABCDEFG':\n        cluster = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    else:\n        cluster = 'Right'\n        \n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABCDEFG':\n        cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if int(seat_number) > 60 or (seat_letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        area = 'Front'\n    elif int(seat_number) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return area + '-' + location",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if not (1 <= num <= 60 and let in ' ABCDEFGHK'):\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if let in ' ABC' else 'Middle' if let in ' DEF' else 'Right'\n    return area + '-' + loc",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if int(seat_number) > 60 or seat_letter in ['I', 'J'] or ord(seat_letter) < 65 or ord(seat_letter) > 75:\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        area = 'Front'\n    elif int(seat_number) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if seat_letter in ['A', 'B', 'C']:\n        position = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        position = 'Middle'\n    else:\n        position = 'Right'\n    return '{}-{}'.format(area, position)",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if int(section) > 60 or seat.upper() in ['I', 'J'] or seat.upper() not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    elif int(section) <= 20:\n        section = 'Front'\n    elif int(section) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat.upper() in 'ABC':\n        seat = 'Left'\n    elif seat.upper() in 'DEF':\n        seat = 'Middle'\n    else:\n        seat = 'Right'\n    return '{}-{}'.format(section, seat)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not seat_letter.isalpha():\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J', 'Z'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return area + '-' + loc",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter < 'A' or letter > 'K') or letter in ['I', 'J']:\n        return 'No Seat!!'\n    else:\n        if section <= 20:\n            location = 'Front'\n        elif section <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if 'A' <= letter <= 'C':\n            seat_location = 'Left'\n        elif 'D' <= letter <= 'F':\n            seat_location = 'Middle'\n        else:\n            seat_location = 'Right'\n        return location + '-' + seat_location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    elif seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    else:\n        if seat_number <= 20:\n            location = 'Front'\n        elif seat_number <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        \n        if seat_letter in 'ABC':\n            side = 'Left'\n        elif seat_letter in 'DEF':\n            side = 'Middle'\n        else:\n            side = 'Right'\n        \n        return f'{location}-{side}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - 65]\n    else:\n        letter_str = 'Right'\n    \n    return f'{section_str}-{letter_str}'"
        ]
    },
    "1": {
        "0": [
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if not section.isdigit() or not 'A' <= seat <= 'K' or seat in 'IJ':\n        return 'No Seat!!'\n    section = int(section)\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    seat_location = 'Left' if 'A' <= seat <= 'C' else 'Middle' if 'D' <= seat <= 'F' else 'Right'\n    return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front'\n    elif section <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABC':\n        location += '-Left'\n    elif letter in 'DEF':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n        \n    return section + '-' + location",
            "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if int(num) < 1 or int(num) > 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    if int(num) <= 20:\n        section = 'Front'\n    elif int(num) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    if len(a) != 2 or not a[0].isdigit() or int(a[0]) < 1 or int(a[0]) > 60:\n        return 'No Seat!!'\n    section = int(a[0])\n    letter = a[1].upper()\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front'\n    elif section <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABC':\n        location += '-Left'\n    elif letter in 'DEF':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location += '-' + ('Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right')\n    return location",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if int(seat_number) > 60 or seat_letter in ['I', 'J'] or not seat_letter.isalpha():\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        section = 'Front'\n    elif int(seat_number) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in ['A', 'B', 'C']:\n        location = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{section}-{location}'",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if not seat_number.isdigit() or int(seat_number) < 1 or int(seat_number) > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        section = 'Front'\n    elif int(seat_number) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num = int(''.join(filter(str.isdigit, a)))\n    let = ''.join(filter(str.isalpha, a))\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if let in 'ABC':\n        location = 'Left'\n    elif let in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return section + '-' + location",
            "def plane_seat(a):\n    num, lett = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or lett not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    loc = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    side = 'Left' if lett in 'AC' else 'Middle' if lett in 'DF' else 'Right'\n    return '{}-{}'.format(loc, side)",
            "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1]\n    if int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        location = 'Front-'\n    elif int(section) <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    if letter in 'ABC':\n        location += 'Left'\n    elif letter in 'DEF':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n    cluster = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    \n    if 'A' <= letter <= 'C':\n        location = 'Left'\n    elif 'D' <= letter <= 'F':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return f'{area}-{location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n\n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n\n    return f'{location}-{cluster}'",
            "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1]\n    if not section.isdigit() or int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDFGK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        location = 'Front-'\n    elif int(section) <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    if letter in 'ABC':\n        location += 'Left'\n    elif letter in 'DF':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    elif seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    else:\n        if seat_number <= 20:\n            location = 'Front-'\n        elif seat_number <= 40:\n            location = 'Middle-'\n        else:\n            location = 'Back-'\n        \n        if seat_letter in 'ABC':\n            location += 'Left'\n        elif seat_letter in 'DF':\n            location += 'Middle'\n        else:\n            location += 'Right'\n        \n        return location",
            "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1].upper()\n    if not section.isdigit() or not 1 <= int(section) <= 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    elif int(section) <= 20:\n        location = 'Front'\n    elif int(section) <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if 'A' <= letter <= 'C':\n        location += '-Left'\n    elif 'D' <= letter <= 'F':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    \n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    section = ''\n    cluster = ''\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    \n    return section + '-' + cluster",
            "def plane_seat(a):\n    section = int(''.join(filter(str.isdigit, a)))\n    letter = ''.join(filter(str.isalpha, a)).upper()\n\n    if section < 1 or section > 60 or letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    elif section <= 20:\n        seat_location = 'Front-'\n    elif section <= 40:\n        seat_location = 'Middle-'\n    else:\n        seat_location = 'Back-'\n\n    if letter in 'ABC':\n        seat_location += 'Left'\n    elif letter in 'DEF':\n        seat_location += 'Middle'\n    else:\n        seat_location += 'Right'\n\n    return seat_location"
        ],
        "1": [
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in 'IJ':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if not section.isdigit() or not 'A' <= seat <= 'K' or seat in 'IJ':\n        return 'No Seat!!'\n    section = int(section)\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    seat_location = 'Left' if 'A' <= seat <= 'C' else 'Middle' if 'D' <= seat <= 'F' else 'Right'\n    return '{}-{}'.format(location, seat_location)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    \n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABCD':\n        location = 'Left'\n    elif seat_letter in 'EFG':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABCDEFG':\n        cluster = 'Left' if seat_letter in 'ABC' else ('Middle' if seat_letter in 'DEF' else 'Right')\n    else:\n        cluster = 'Right'\n        \n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if not (1 <= num <= 60) or lett not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    loc_num = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc_lett = 'Left' if lett in 'ABC' else 'Middle' if lett in 'DEF' else 'Right'\n    return '{}-{}'.format(loc_num, loc_lett)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if num < 21:\n        section = 'Front'\n    elif num < 41:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABCDEFG':\n        area = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        area = 'Right'\n    return f'{section}-{area}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if not (1 <= num <= 60 and let in ' ABCDEFGHK'):\n        return 'No Seat!!'\n    sections = [(1, 20, 'Front'), (21, 40, 'Middle'), (41, 60, 'Back')]\n    for low, high, section in sections:\n        if low <= num <= high:\n            section_name = section\n            break\n    clusters = {'A': 'Left', 'B': 'Left', 'C': 'Left', 'D': 'Middle', 'E': 'Middle', 'F': 'Middle', 'G': 'Right', 'H': 'Right', 'K': 'Right'}\n    cluster_name = clusters[let]\n    return '{}-{}'.format(section_name, cluster_name)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if lett not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    if num < 21:\n        location = 'Front'\n    elif num < 41:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if lett in 'ABCD':\n        area = 'Left'\n    elif lett in 'EFG':\n        area = 'Middle'\n    else:\n        area = 'Right'\n    return f'{location}-{area}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J']:\n        return 'No Seat!!'\n    \n    location_number = ''\n    if seat_number <= 20:\n        location_number = 'Front'\n    elif seat_number <= 40:\n        location_number = 'Middle'\n    else:\n        location_number = 'Back'\n        \n    location_letter = ''\n    if seat_letter in ['A', 'B', 'C']:\n        location_letter = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location_letter = 'Middle'\n    else:\n        location_letter = 'Right'\n        \n    return location_number + '-' + location_letter",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter < 'A' or letter > 'K') or letter in ['I', 'J']:\n        return 'No Seat!!'\n    else:\n        if section <= 20:\n            location = 'Front'\n        elif section <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if 'A' <= letter <= 'C':\n            seat_location = 'Left'\n        elif 'D' <= letter <= 'F':\n            seat_location = 'Middle'\n        else:\n            seat_location = 'Right'\n        return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J'] or letter < 'A' or letter > 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(area, cluster)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    elif section <= 20:\n        seat_area = 'Front'\n    elif section <= 40:\n        seat_area = 'Middle'\n    else:\n        seat_area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        seat_position = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        seat_position = 'Middle'\n    else:\n        seat_position = 'Right'\n    return f'{seat_area}-{seat_position}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - 65]\n    else:\n        letter_str = 'Right'\n        \n    return section_str + '-' + letter_str",
            "def plane_seat(a):\n    num, let = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or let in 'IJ':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{area}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    elif num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if lett in 'ABCD':\n        loc = 'Left'\n    elif lett in 'EFG':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return section + '-' + loc",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    \n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    \n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return '{}-{}'.format(area, location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if num < 1 or num > 60 or let in ['I', 'J'] or let < 'A' or let > 'K':\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            loc = 'Front'\n        elif num <= 40:\n            loc = 'Middle'\n        else:\n            loc = 'Back'\n        if let in ['A', 'B', 'C']:\n            loc += '-Left'\n        elif let in ['D', 'E', 'F']:\n            loc += '-Middle'\n        else:\n            loc += '-Right'\n        return loc",
            "def plane_seat(a):\n    sections = {'1-20': 'Front', '21-40': 'Middle', '41-60': 'Back'}\n    clusters = {'A-C': 'Left', 'D-F': 'Middle', 'G-K': 'Right'}\n    num, letter = a[:-1], a[-1]\n    if int(num) > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    for section, name in sections.items():\n        if '-' in section:\n            start, end = map(int, section.split('-'))\n            if start <= int(num) <= end:\n                section_name = name\n                break\n        else:\n            if int(num) == int(section):\n                section_name = name\n                break\n    for cluster, cluster_name in clusters.items():\n        if '-' in cluster:\n            start, end = cluster.split('-')\n            if start <= letter <= end:\n                cluster_name = cluster_name\n                break\n        else:\n            if letter == cluster:\n                cluster_name = cluster_name\n                break\n    return '{}-{}'.format(section_name, cluster_name)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett in 'IJ':\n        return 'No Seat!!'\n    if num <= 20:\n        sect = 'Front'\n    elif num <= 40:\n        sect = 'Middle'\n    else:\n        sect = 'Back'\n    if lett in 'ABC':\n        loc = 'Left'\n    elif lett in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(sect, loc)"
        ],
        "2": [
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n        \n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if not num.isdigit() or not 1 <= int(num) <= 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if int(num) <= 20 else 'Middle' if int(num) <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABCDEFG':\n        cluster = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    else:\n        cluster = 'Right'\n        \n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if not section.isdigit() or not 'A' <= seat <= 'K' or seat in 'IJ':\n        return 'No Seat!!'\n    section = int(section)\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    seat_location = 'Left' if 'A' <= seat <= 'C' else 'Middle' if 'D' <= seat <= 'F' else 'Right'\n    return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if not (1 <= num <= 60) or lett not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if lett in 'ABC' else 'Middle' if lett in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if not seat_number.isdigit() or int(seat_number) < 1 or int(seat_number) > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        section = 'Front'\n    elif int(seat_number) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return section + '-' + cluster",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n\n    if not (1 <= num <= 60) or letter in 'IJ':\n        return 'No Seat!!'\n\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n\n    return f'{area}-{location}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if num < 21:\n        section = 'Front'\n    elif num < 41:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABCDEFG':\n        area = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        area = 'Right'\n    return '{}-{}'.format(section, area)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if lett not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    if num < 21:\n        location = 'Front'\n    elif num < 41:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if lett in 'ABCD':\n        area = 'Left'\n    elif lett in 'EFG':\n        area = 'Middle'\n    else:\n        area = 'Right'\n    return f'{location}-{area}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{section}-{location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if 'A' <= seat_letter <= 'C':\n        location = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return f'{area}-{loc}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        location_number = 'Front'\n    elif seat_number <= 40:\n        location_number = 'Middle'\n    else:\n        location_number = 'Back'\n        \n    if seat_letter in 'ABC':\n        location_letter = 'Left'\n    elif seat_letter in 'DEF':\n        location_letter = 'Middle'\n    else:\n        location_letter = 'Right'\n        \n    return location_number + '-' + location_letter",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front-'\n    elif section <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    if letter in 'ABCD':\n        location += 'Left'\n    elif letter in 'DEF':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    return location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - ord('A')]\n    else:\n        letter_str = ['Right', 'Right', 'Right', 'Right'][ord(letter) - ord('H')]\n        \n    return '{}-{}'.format(section_str, letter_str)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in 'IJ' or letter < 'A' or letter > 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        zone = 'Front'\n    elif section <= 40:\n        zone = 'Middle'\n    else:\n        zone = 'Back'\n    if letter in 'ABC':\n        seat_zone = 'Left'\n    elif letter in 'DEF':\n        seat_zone = 'Middle'\n    else:\n        seat_zone = 'Right'\n    return f'{zone}-{seat_zone}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{location}-{seat}'",
            "def plane_seat(a):\n    num, let = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{area}-{loc}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            location = 'Front'\n        elif num <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if letter in ['A', 'B', 'C']:\n            loc_letter = 'Left'\n        elif letter in ['D', 'E', 'F']:\n            loc_letter = 'Middle'\n        else:\n            loc_letter = 'Right'\n        return '{}-{}'.format(location, loc_letter)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1]\n    if section < 1 or section > 60 or letter in 'IJ' or letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front'\n    elif section <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABC':\n        position = 'Left'\n    elif letter in 'DEF':\n        position = 'Middle'\n    else:\n        position = 'Right'\n    return location + '-' + position",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett in 'IJ':\n        return 'No Seat!!'\n    if num <= 20:\n        sect = 'Front'\n    elif num <= 40:\n        sect = 'Middle'\n    else:\n        sect = 'Back'\n    if lett in 'ABC':\n        loc = 'Left'\n    elif lett in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return sect + '-' + loc",
            "def plane_seat(a):\n    section = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if section < 1 or section > 60 or seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    elif section <= 20:\n        section_name = 'Front'\n    elif section <= 40:\n        section_name = 'Middle'\n    else:\n        section_name = 'Back'\n    if seat_letter in 'ABCD':\n        seat_name = 'Left'\n    elif seat_letter in 'DEFG':\n        seat_name = 'Middle'\n    else:\n        seat_name = 'Right'\n    return section_name + '-' + seat_name"
        ],
        "3": [
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return section + '-' + cluster",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or (seat_letter < 'A' or seat_letter > 'K'):\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if 'A' <= seat_letter <= 'C':\n        cluster = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if lett not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if lett in 'ABC' else 'Middle' if lett in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if int(section) > 60 or seat.upper() in 'IJZ':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        area = 'Front'\n    elif int(section) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if seat.upper() in 'ABC':\n        location = 'Left'\n    elif seat.upper() in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{area}-{location}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if not (1 <= num <= 60 and let in ' ABCDEFGHK'):\n        return 'No Seat!!'\n    sections = ['Front', 'Middle', 'Back']\n    clusters = ['Left', 'Middle', 'Right']\n    section = sections[(num - 1) // 20]\n    cluster = clusters[(ord(let) - ord('A')) // 3]\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if not (1 <= num <= 60) or lett in ['I', 'J']:\n        return 'No Seat!!'\n    if num <= 20:\n        location = 'Front'\n    elif num <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if lett in ['A', 'B', 'C']:\n        location += '-Left'\n    elif lett in ['D', 'E', 'F']:\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n    cluster = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if 'A' <= seat_letter <= 'C':\n        location = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        location = 'Middle'\n    else:\n        location = 'Right'\n        \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return area + '-' + loc",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J'] or letter < 'A' or letter > 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return area + '-' + cluster",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front'\n    elif section <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABC':\n        direction = 'Left'\n    elif letter in 'DEF':\n        direction = 'Middle'\n    else:\n        direction = 'Right'\n    return f'{location}-{direction}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1]\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if section <= 20:\n        plane_section = 'Front'\n    elif section <= 40:\n        plane_section = 'Middle'\n    else:\n        plane_section = 'Back'\n    if letter in 'ABCDEFG':\n        seat_position = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        seat_position = 'Right'\n    return f'{plane_section}-{seat_position}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    \n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    section = ''\n    cluster = ''\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    \n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            location = 'Front'\n        elif num <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if letter in ['A', 'B', 'C']:\n            seat = 'Left'\n        elif letter in ['D', 'E', 'F']:\n            seat = 'Middle'\n        else:\n            seat = 'Right'\n        return f'{location}-{seat}'",
            "def plane_seat(a):\n    num, let = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{area}-{loc}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1]\n    if section < 1 or section > 60 or letter in 'IJ' or letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front'\n    elif section <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABC':\n        position = 'Left'\n    elif letter in 'DEF':\n        position = 'Middle'\n    else:\n        position = 'Right'\n    return '{}-{}'.format(location, position)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    elif num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if lett in 'ABC':\n        location = 'Left'\n    elif lett in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return section + '-' + location",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett in 'IJ':\n        return 'No Seat!!'\n    if num <= 20:\n        sect = 'Front'\n    elif num <= 40:\n        sect = 'Middle'\n    else:\n        sect = 'Back'\n    if lett in 'ABC':\n        loc = 'Left'\n    elif lett in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return sect + '-' + loc",
            "def plane_seat(a):\n    section = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if section < 1 or section > 60 or seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    elif section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if seat_letter in ' ABC':\n        location = 'Left'\n    elif seat_letter in ' DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{area}-{location}'"
        ],
        "4": [
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABCDEFG':\n        cluster = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    else:\n        cluster = 'Right'\n        \n    return section + '-' + cluster",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if not seat_number.isdigit() or int(seat_number) < 1 or int(seat_number) > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        section = 'Front'\n    elif int(seat_number) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1]\n    if int(seat_number) > 60 or seat_letter in ['I', 'J'] or seat_letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if int(seat_number) <= 20:\n        location = 'Front'\n    elif int(seat_number) <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(location, cluster)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if not (1 <= num <= 60 and let in ' ABCDEFGHK'):\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if let in ' ABC' else 'Middle' if let in ' DEF' else 'Right'\n    return area + '-' + loc",
            "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if int(section) > 60 or seat.upper() in ['I', 'J'] or seat.upper() not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    elif int(section) <= 20:\n        section = 'Front'\n    elif int(section) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat.upper() in 'ABC':\n        seat = 'Left'\n    elif seat.upper() in 'DEF':\n        seat = 'Middle'\n    else:\n        seat = 'Right'\n    return '{}-{}'.format(section, seat)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_location = 'Front'\n    elif section <= 40:\n        section_location = 'Middle'\n    else:\n        section_location = 'Back'\n    \n    if letter in 'ABCH':\n        letter_location = 'Left'\n    elif letter in 'DEFG':\n        letter_location = 'Middle'\n    else:\n        letter_location = 'Right'\n    \n    return section_location + '-' + letter_location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not seat_letter.isalpha():\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return section + '-' + cluster",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J'] or letter < 'A' or letter > 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(area, cluster)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter < 'A' or letter > 'K') or letter in ['I', 'J']:\n        return 'No Seat!!'\n    else:\n        if section <= 20:\n            location = 'Front'\n        elif section <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if 'A' <= letter <= 'C':\n            seat_location = 'Left'\n        elif 'D' <= letter <= 'F':\n            seat_location = 'Middle'\n        else:\n            seat_location = 'Right'\n        return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    elif seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    else:\n        if seat_number <= 20:\n            location = 'Front'\n        elif seat_number <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        \n        if seat_letter in 'ABC':\n            side = 'Left'\n        elif seat_letter in 'DEF':\n            side = 'Middle'\n        else:\n            side = 'Right'\n        \n        return f'{location}-{side}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - 65]\n    else:\n        letter_str = 'Right'\n        \n    return section_str + '-' + letter_str",
            "def plane_seat(a):\n    sections = {'1-20': 'Front', '21-40': 'Middle', '41-60': 'Back'}\n    clusters = {'A': 'Left', 'B': 'Left', 'C': 'Left', 'D': 'Middle', 'E': 'Middle', 'F': 'Middle', 'G': 'Right', 'H': 'Right', 'K': 'Right'}\n    num = a[:-1]\n    letter = a[-1]\n    if int(num) > 60 or letter not in clusters:\n        return 'No Seat!!'\n    for section in sections:\n        if int(num) in range(int(section.split('-')[0]), int(section.split('-')[1]) + 1):\n            return sections[section] + '-' + clusters[letter]",
            "def plane_seat(a):\n    num, let = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{area}-{loc}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    valid_letters = 'ABCDEFGHK'\n    if seat_number < 1 or seat_number > 60 or seat_letter not in valid_letters:\n        return 'No Seat!!'\n    if seat_number <= 20:\n        location = 'Front'\n    elif seat_number <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if seat_letter in 'ABC':\n        location += '-Left'\n    elif seat_letter in 'DEF':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n\n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n\n    location_number = ''\n    if seat_number <= 20:\n        location_number = 'Front'\n    elif seat_number <= 40:\n        location_number = 'Middle'\n    else:\n        location_number = 'Back'\n\n    location_letter = ''\n    if 'A' <= seat_letter <= 'C':\n        location_letter = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        location_letter = 'Middle'\n    else:\n        location_letter = 'Right'\n\n    return location_number + '-' + location_letter",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    \n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return '{}-{}'.format(area, location)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n\n    if seat_number > 60 or seat_letter in ['I', 'J'] or (seat_letter < 'A' or seat_letter > 'K'):\n        return 'No Seat!!'\n\n    if seat_number <= 20:\n        area = 'Front'\n    elif seat_number <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n\n    if seat_letter in ['A', 'B', 'C']:\n        location = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location = 'Middle'\n    else:\n        location = 'Right'\n\n    return f'{area}-{location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABCDEFG':\n        cluster = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right', 'Right'][ord(seat_letter) - 65]\n    else:\n        cluster = 'Right'\n    return section + '-' + cluster",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n\n    if section < 1 or section > 60 or letter in 'IJ' or letter < 'A' or letter > 'K':\n        return 'No Seat!!'\n\n    area = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n\n    return '{}-{}'.format(area, cluster)"
        ]
    },
    "2": {
        "0": [
            "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1]\n    if int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        location = 'Front-'\n    elif int(section) <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    if letter in 'ABC':\n        location += 'Left'\n    elif letter in 'DEF':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n    cluster = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    \n    if section <= 20:\n        location = 'Front'\n    elif section <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    \n    if letter in ['A', 'B', 'C']:\n        location += '-Left'\n    elif letter in ['D', 'E', 'F']:\n        location += '-Middle'\n    else:\n        location += '-Right'\n    \n    return location",
            "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1]\n    if not section.isdigit() or int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        area = 'Front'\n    elif int(section) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABC':\n        position = 'Left'\n    elif letter in 'DEF':\n        position = 'Middle'\n    else:\n        position = 'Right'\n    return f'{area}-{position}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n\n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n\n    return f'{location}-{cluster}'",
            "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1].upper()\n    if not section.isdigit() or not 1 <= int(section) <= 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        location = 'Front'\n    elif int(section) <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if 'A' <= letter <= 'C':\n        location += '-Left'\n    elif 'D' <= letter <= 'F':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    elif seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    else:\n        if seat_number <= 20:\n            location = 'Front-'\n        elif seat_number <= 40:\n            location = 'Middle-'\n        else:\n            location = 'Back-'\n        \n        if seat_letter in 'ABC':\n            location += 'Left'\n        elif seat_letter in 'DF':\n            location += 'Middle'\n        else:\n            location += 'Right'\n        \n        return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    \n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    section = ''\n    cluster = ''\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return section + '-' + cluster",
            "def plane_seat(a):\n    section = int(''.join(filter(str.isdigit, a)))\n    letter = ''.join(filter(str.isalpha, a)).upper()\n\n    if section < 1 or section > 60 or letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    elif section <= 20:\n        seat_location = 'Front-'\n    elif section <= 40:\n        seat_location = 'Middle-'\n    else:\n        seat_location = 'Back-'\n\n    if letter in 'ABC':\n        seat_location += 'Left'\n    elif letter in 'DEF':\n        seat_location += 'Middle'\n    else:\n        seat_location += 'Right'\n\n    return seat_location",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ':\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{location}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter < 'A' or letter > 'K') or letter in ['I', 'J']:\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            location = 'Front'\n        elif num <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if letter in ['A', 'B', 'C']:\n            location += '-Left'\n        elif letter in ['D', 'E', 'F']:\n            location += '-Middle'\n        else:\n            location += '-Right'\n        return location",
            "def plane_seat(a):\n    num = int(''.join(filter(str.isdigit, a)))\n    letter = ''.join(filter(str.isalpha, a)).upper()\n    if num < 1 or num > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            location = 'Front'\n        elif num <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if letter in 'ABC':\n            location += '-Left'\n        elif letter in 'DEF':\n            location += '-Middle'\n        else:\n            location += '-Right'\n        return location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n\n    if section < 1 or section > 60 or letter in 'IJ':\n        return 'No Seat!!'\n\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n\n    return f'{location}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    elif num <= 20:\n        location = 'Front-'\n    elif num <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    if lett in 'ABC':\n        location += 'Left'\n    elif lett in 'DEF':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    return location",
            "def plane_seat(a):\n    num, let = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or let in 'IJ':\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    side = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{location}-{side}'",
            "def plane_seat(a):\n    num = int(''.join(filter(str.isdigit, a)))\n    letter = ''.join(filter(str.isalpha, a)).upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHIK'):\n        return 'No Seat!!'\n    elif num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{section}-{location}'",
            "def plane_seat(a):\n    if not isinstance(a, str) or len(a) != 2:\n        return 'No Seat!!'\n    num, let = a\n    if not num.isdigit() or not 'A' <= let <= 'K' or let in ['I', 'J']:\n        return 'No Seat!!'\n    num = int(num)\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if 'A' <= let <= 'C' else 'Middle' if 'D' <= let <= 'F' else 'Right'\n    return f'{location}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    \n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    \n    if letter in 'ABC':\n        loc = 'Left'\n    elif letter in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    \n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1]\n    if section < 1 or section > 60 or letter in 'IJij' or not letter.isalpha():\n        return 'No Seat!!'\n    if section <= 20:\n        loc = 'Front-'\n    elif section <= 40:\n        loc = 'Middle-'\n    else:\n        loc = 'Back-'\n    if letter in 'ABCabc':\n        loc += 'Left'\n    elif letter in 'DEFdef':\n        loc += 'Middle'\n    else:\n        loc += 'Right'\n    return loc"
        ],
        "1": [
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter < 'A' or letter > 'K') or letter in ['I', 'J']:\n        return 'No Seat!!'\n    else:\n        if section <= 20:\n            location = 'Front'\n        elif section <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if 'A' <= letter <= 'C':\n            seat_location = 'Left'\n        elif 'D' <= letter <= 'F':\n            seat_location = 'Middle'\n        else:\n            seat_location = 'Right'\n        return f'{location}-{seat_location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not seat_letter.isalpha():\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return section + '-' + cluster",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    elif section <= 20:\n        seat_area = 'Front'\n    elif section <= 40:\n        seat_area = 'Middle'\n    else:\n        seat_area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        seat_position = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        seat_position = 'Middle'\n    else:\n        seat_position = 'Right'\n    return f'{seat_area}-{seat_position}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J'] or letter < 'A' or letter > 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(area, cluster)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - ord('A')]\n    else:\n        letter_str = 'Right'\n        \n    return section_str + '-' + letter_str",
            "def plane_seat(a):\n    num, let = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60 or let in 'IJ':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{area}-{loc}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    elif num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if lett in 'ABCD':\n        loc = 'Left'\n    elif lett in 'EFG':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return section + '-' + loc",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    \n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    \n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return '{}-{}'.format(area, location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett in 'IJ':\n        return 'No Seat!!'\n    if num <= 20:\n        sect = 'Front'\n    elif num <= 40:\n        sect = 'Middle'\n    else:\n        sect = 'Back'\n    if lett in 'ABC':\n        loc = 'Left'\n    elif lett in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return sect + '-' + loc",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABCH':\n        loc = 'Left'\n    elif letter in 'DE':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return f'{section}-{loc}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if num < 1 or num > 60 or let in ['I', 'J'] or let < 'A' or let > 'K':\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            loc = 'Front'\n        elif num <= 40:\n            loc = 'Middle'\n        else:\n            loc = 'Back'\n        if let in ['A', 'B', 'C']:\n            side = 'Left'\n        elif let in ['D', 'E', 'F']:\n            side = 'Middle'\n        else:\n            side = 'Right'\n        return loc + '-' + side",
            "def plane_seat(a):\n    sections = {'1-20': 'Front', '21-40': 'Middle', '41-60': 'Back'}\n    clusters = {'A-C': 'Left', 'D-F': 'Middle', 'G-K': 'Right'}\n    num, letter = a[:-1], a[-1]\n    if int(num) > 60 or not 'A' <= letter <= 'K' or letter in ['I', 'J']:\n        return 'No Seat!!'\n    for k, v in sections.items():\n        if '-' in k:\n            start, end = k.split('-')\n            if start <= num <= end:\n                section = v\n                break\n    for k, v in clusters.items():\n        if '-' in k:\n            start, end = k.split('-')\n            if ord(start) <= ord(letter) <= ord(end):\n                cluster = v\n                break\n    return section + '-' + cluster",
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_num < 1 or seat_num > 60 or seat_letter in ['I', 'J']:\n        return 'No Seat!!'\n    \n    if seat_num <= 20:\n        section = 'Front'\n    elif seat_num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in ['A', 'B', 'C']:\n        location = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location = 'Middle'\n    else:\n        location = 'Right'\n        \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(section, loc)",
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_num < 1 or seat_num > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n        \n    if seat_num <= 20:\n        section = 'Front'\n    elif seat_num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n        \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        location = 'Front'\n    elif seat_number <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n        \n    if seat_letter in 'ABCD':\n        seat_location = 'Left'\n    elif seat_letter in 'DEF':\n        seat_location = 'Middle'\n    else:\n        seat_location = 'Right'\n        \n    return '{}-{}'.format(location, seat_location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            section = 'Front'\n        elif num <= 40:\n            section = 'Middle'\n        else:\n            section = 'Back'\n        if letter in 'ABC':\n            loc = 'Left'\n        elif letter in 'DEF':\n            loc = 'Middle'\n        else:\n            loc = 'Right'\n        return section + '-' + loc",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if num <= 20:\n        area = 'Front'\n    elif num <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n        \n    if letter in 'ABCDEFG':\n        loc = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        loc = 'Right'\n        \n    return area + '-' + loc",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if num < 1 or num > 60 or let not in 'ABCDEFHGK':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    try:\n        num, let = int(a[:-1]), a[-1].upper()\n        if num < 1 or num > 60 or let in 'IJ':\n            return 'No Seat!!'\n        sections = ['Front', 'Middle', 'Back']\n        clusters = ['Left', 'Middle', 'Right']\n        return f\"{sections[(num - 1) // 20]}-{clusters[(ord(let) - ord('A')) // 3]}\"\n    except ValueError:\n        return 'No Seat!!'"
        ],
        "2": [
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{section}-{location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if 'A' <= seat_letter <= 'C':\n        location = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        location_number = 'Front'\n    elif seat_number <= 40:\n        location_number = 'Middle'\n    else:\n        location_number = 'Back'\n        \n    if seat_letter in 'ABC':\n        location_letter = 'Left'\n    elif seat_letter in 'DEF':\n        location_letter = 'Middle'\n    else:\n        location_letter = 'Right'\n        \n    return location_number + '-' + location_letter",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front-'\n    elif section <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    if letter in 'ABCD':\n        location += 'Left'\n    elif letter in 'DEF':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    return location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J', 'Z'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        cluster = 'Left'\n    elif 'D' <= letter <= 'F':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return f'{area}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - ord('A')]\n    else:\n        letter_str = 'Right'\n    \n    return f'{section_str}-{letter_str}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABCDEFG':\n        cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        cluster = 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{location}-{seat}'",
            "def plane_seat(a):\n    num, let = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{area}-{loc}'",
            "def plane_seat(a):\n    section, letter = a[:-1], a[-1].upper()\n    if not section.isdigit() or not 1 <= int(section) <= 60 or letter in 'IJ':\n        return 'No Seat!!'\n    if 1 <= int(section) <= 20:\n        area = 'Front'\n    elif 21 <= int(section) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            location = 'Front'\n        elif num <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if letter in ['A', 'B', 'C']:\n            loc_letter = 'Left'\n        elif letter in ['D', 'E', 'F']:\n            loc_letter = 'Middle'\n        else:\n            loc_letter = 'Right'\n        return '{}-{}'.format(location, loc_letter)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or letter in 'IJ' or letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if num <= 20:\n        location = 'Front'\n    elif num <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABC':\n        position = 'Left'\n    elif letter in 'DEF':\n        position = 'Middle'\n    else:\n        position = 'Right'\n    return '{}-{}'.format(location, position)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett in 'IJ':\n        return 'No Seat!!'\n    if num <= 20:\n        sect = 'Front'\n    elif num <= 40:\n        sect = 'Middle'\n    else:\n        sect = 'Back'\n    if lett in 'ABC':\n        loc = 'Left'\n    elif lett in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return f'{sect}-{loc}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n\n    if not (1 <= num <= 60):\n        return 'No Seat!!'\n\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n\n    location_num = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n\n    location_letter = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n\n    return '{}-{}'.format(location_num, location_letter)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        location = 'Front'\n    elif seat_number <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n        \n    if seat_letter in 'ABCD':\n        location += '-Left'\n    elif seat_letter in 'EFG':\n        location += '-Middle'\n    else:\n        location += '-Right'\n        \n    return location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    \n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n\n    location_number = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n    location_letter = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n\n    return f'{location_number}-{location_letter}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    elif num <= 20:\n        area = 'Front'\n    elif num <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in ['A', 'B', 'C']:\n        loc = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            section = 'Front'\n        elif num <= 40:\n            section = 'Middle'\n        else:\n            section = 'Back'\n        if letter in 'ABC':\n            loc = 'Left'\n        elif letter in 'DEF':\n            loc = 'Middle'\n        else:\n            loc = 'Right'\n        return f'{section}-{loc}'",
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_num < 1 or seat_num > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_num <= 20:\n        section = 'Front'\n    elif seat_num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return section + '-' + location",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    \n    return '{}-{}'.format(location, cluster)",
            "def plane_seat(a):\n    try:\n        num, letter = int(a[:-1]), a[-1].upper()\n        if num < 1 or num > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n            return 'No Seat!!'\n        area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n        cluster = 'Left' if 'A' <= letter <= 'C' else 'Middle' if 'D' <= letter <= 'F' else 'Right'\n        return '{}-{}'.format(area, cluster)\n    except ValueError:\n        return 'No Seat!!'"
        ],
        "3": [
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n    cluster = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if 'A' <= seat_letter <= 'C':\n        location = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return f'{section}-{location}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    seat = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return '{}-{}'.format(location, seat)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return area + '-' + loc",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    if section <= 20:\n        location = 'Front-'\n    elif section <= 40:\n        location = 'Middle-'\n    else:\n        location = 'Back-'\n    if letter in 'ABCD':\n        location += 'Left'\n    elif letter in 'EFG':\n        location += 'Middle'\n    else:\n        location += 'Right'\n    return location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J', 'Z'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        cluster = 'Left'\n    elif 'D' <= letter <= 'F':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return f'{area}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - ord('A')]\n    else:\n        letter_str = 'Right'\n        \n    return f'{section_str}-{letter_str}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            location = 'Front'\n        elif num <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if letter in ['A', 'B', 'C']:\n            seat = 'Left'\n        elif letter in ['D', 'E', 'F']:\n            seat = 'Middle'\n        else:\n            seat = 'Right'\n        return location + '-' + seat",
            "def plane_seat(a):\n    num, let = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{area}-{loc}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    \n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    \n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return area + '-' + location",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or letter in 'IJ' or letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if num <= 20:\n        location = 'Front'\n    elif num <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABC':\n        seat = 'Left'\n    elif letter in 'DEF':\n        seat = 'Middle'\n    else:\n        seat = 'Right'\n    return location + '-' + seat",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ' or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if num <= 20:\n        area = 'Front'\n    elif num <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        pos = 'Left'\n    elif 'D' <= letter <= 'F':\n        pos = 'Middle'\n    else:\n        pos = 'Right'\n    return '{}-{}'.format(area, pos)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    lett = a[-1].upper()\n    if num < 1 or num > 60 or lett in 'IJ':\n        return 'No Seat!!'\n    if num <= 20:\n        sect = 'Front'\n    elif num <= 40:\n        sect = 'Middle'\n    else:\n        sect = 'Back'\n    if lett in 'ABC':\n        loc = 'Left'\n    elif lett in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return sect + '-' + loc",
            "def plane_seat(a):\n    section = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if section < 1 or section > 60 or seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    elif section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if seat_letter in 'ABCD':\n        seat_area = 'Left'\n    elif seat_letter in 'DEF':\n        seat_area = 'Middle'\n    else:\n        seat_area = 'Right'\n    return '{}-{}'.format(area, seat_area)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    let = a[-1].upper()\n    if num < 1 or num > 60 or let in ['I', 'J'] or not 'A' <= let <= 'K':\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if 'A' <= let <= 'C' else 'Middle' if 'D' <= let <= 'F' else 'Right'\n    return '{}-{}'.format(section, cluster)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num < 1 or num > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return section + '-' + location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J']:\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in ['A', 'B', 'C']:\n        location = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location = 'Middle'\n    else:\n        location = 'Right'\n        \n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    location = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    \n    return '{}-{}'.format(location, cluster)",
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_num < 1 or seat_num > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_num <= 20:\n        section = 'Front'\n    elif seat_num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            section = 'Front'\n        elif num <= 40:\n            section = 'Middle'\n        else:\n            section = 'Back'\n        if letter <= 'C':\n            cluster = 'Left'\n        elif letter <= 'F':\n            cluster = 'Middle'\n        else:\n            cluster = 'Right'\n        return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        location = 'Front'\n    elif seat_number <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n        \n    if seat_letter in 'ABCD':\n        seat_location = 'Left'\n    elif seat_letter in 'DEF':\n        seat_location = 'Middle'\n    else:\n        seat_location = 'Right'\n        \n    return '{}-{}'.format(location, seat_location)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return section + '-' + loc",
            "def plane_seat(a):\n    try:\n        num, let = int(a[:-1]), a[-1].upper()\n        if num < 1 or num > 60 or let in 'IJ' or let < 'A' or let > 'K':\n            return 'No Seat!!'\n        if num <= 20:\n            area = 'Front'\n        elif num <= 40:\n            area = 'Middle'\n        else:\n            area = 'Back'\n        if let in 'ABC':\n            loc = 'Left'\n        elif let in 'DEF':\n            loc = 'Middle'\n        else:\n            loc = 'Right'\n        return area + '-' + loc\n    except ValueError:\n        return 'No Seat!!'"
        ],
        "4": [
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return '{}-{}'.format(area, loc)",
            "def plane_seat(a):\n    num, letter = int(a[:-1]), a[-1].upper()\n    if not 1 <= num <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or not seat_letter.isalpha():\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return f'{section}-{cluster}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section > 60 or letter in ['I', 'J', 'Z'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n    return area + '-' + loc",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1]\n    if seat_number < 1 or seat_number > 60 or seat_letter in 'IJ' or seat_letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    else:\n        if seat_number <= 20:\n            location = 'Front'\n        elif seat_number <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if seat_letter in 'ABC':\n            direction = 'Left'\n        elif seat_letter in 'DEF':\n            direction = 'Middle'\n        else:\n            direction = 'Right'\n        return f'{location}-{direction}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or (letter < 'A' or letter > 'K') or letter in ['I', 'J']:\n        return 'No Seat!!'\n    else:\n        if section <= 20:\n            location = 'Front'\n        elif section <= 40:\n            location = 'Middle'\n        else:\n            location = 'Back'\n        if 'A' <= letter <= 'C':\n            seat_location = 'Left'\n        elif 'D' <= letter <= 'F':\n            seat_location = 'Middle'\n        else:\n            seat_location = 'Right'\n        return location + '-' + seat_location",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        section_str = 'Front'\n    elif section <= 40:\n        section_str = 'Middle'\n    else:\n        section_str = 'Back'\n        \n    if letter in 'ABCDEFG':\n        letter_str = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(letter) - ord('A')]\n    else:\n        letter_str = 'Right'\n        \n    return section_str + '-' + letter_str",
            "def plane_seat(a):\n    num, let = int(a[:-1]), a[-1].upper()\n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    loc = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{area}-{loc}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n        \n    if letter in 'ABCDEFG':\n        location = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        location = 'Right'\n        \n    return '{}-{}'.format(area, location)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    valid_letters = 'ABCDEFGHK'\n    if seat_number < 1 or seat_number > 60 or seat_letter not in valid_letters:\n        return 'No Seat!!'\n    if seat_number <= 20:\n        location = 'Front'\n    elif seat_number <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if seat_letter in 'ABC':\n        location += '-Left'\n    elif seat_letter in 'DEF':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "def plane_seat(a):\n    sections = {'1-20': 'Front', '21-40': 'Middle', '41-60': 'Back'}\n    clusters = {'A': 'Left', 'B': 'Left', 'C': 'Left', 'D': 'Middle', 'E': 'Middle', 'F': 'Middle', 'G': 'Right', 'H': 'Right', 'K': 'Right'}\n    num = a[:-1]\n    letter = a[-1]\n    if int(num) > 60 or letter not in clusters:\n        return 'No Seat!!'\n    for section in sections:\n        if int(num) in range(int(section.split('-')[0]), int(section.split('-')[1]) + 1):\n            return '{}-{}'.format(sections[section], clusters[letter])",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if seat_letter in 'ABCDEFG':\n        cluster = ['Left', 'Left', 'Left', 'Middle', 'Middle', 'Middle', 'Right'][ord(seat_letter) - ord('A')]\n    else:\n        cluster = 'Right'\n    return section + '-' + cluster",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n\n    if seat_number > 60 or seat_letter in ['I', 'J'] or (seat_letter < 'A' or seat_letter > 'K'):\n        return 'No Seat!!'\n\n    if seat_number <= 20:\n        area = 'Front'\n    elif seat_number <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n\n    if seat_letter in ['A', 'B', 'C']:\n        location = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location = 'Middle'\n    else:\n        location = 'Right'\n\n    return f'{area}-{location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n\n    if section < 1 or section > 60 or letter in 'IJ' or letter < 'A' or letter > 'K':\n        return 'No Seat!!'\n\n    area = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n\n    cluster = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n\n    return '{}-{}'.format(area, cluster)",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n\n    if seat_number < 1 or seat_number > 60 or seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n\n    seat_region = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n\n    seat_location = 'Left' if seat_letter in ' ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n\n    return f'{seat_region}-{seat_location}'",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n\n    location_number = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n    location_letter = 'Left' if seat_letter in 'ABC' else 'Middle' if seat_letter in 'DEF' else 'Right'\n\n    return f'{location_number}-{location_letter}'",
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_num < 1 or seat_num > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    \n    if seat_num <= 20:\n        section = 'Front'\n    elif seat_num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return section + '-' + location",
            "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60 or seat_letter in 'IJ' or seat_letter < 'A' or seat_letter > 'K':\n        return 'No Seat!!'\n    elif seat_number <= 20:\n        area = 'Front'\n    elif seat_number <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{area}-{location}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in 'IJ' or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            section = 'Front'\n        elif num <= 40:\n            section = 'Middle'\n        else:\n            section = 'Back'\n        if letter <= 'C':\n            cluster = 'Left'\n        elif letter <= 'F':\n            cluster = 'Middle'\n        else:\n            cluster = 'Right'\n        return f'{section}-{cluster}'",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if num < 1 or num > 60:\n        return 'No Seat!!'\n    if letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n        \n    section = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    \n    return '{}-{}'.format(section, location)",
            "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1]\n    if num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in ' ABC':\n        location = 'Left'\n    elif letter in ' DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return f'{section}-{location}'",
            "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    \n    if section <= 20:\n        seat_section = 'Front'\n    elif section <= 40:\n        seat_section = 'Middle'\n    else:\n        seat_section = 'Back'\n    \n    if 'A' <= letter <= 'C':\n        seat_cluster = 'Left'\n    elif 'D' <= letter <= 'F':\n        seat_cluster = 'Middle'\n    else:\n        seat_cluster = 'Right'\n    \n    return f'{seat_section}-{seat_cluster}'",
            "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_let = a[-1]\n    if seat_num > 60 or seat_let in 'IJZ' or seat_let not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    elif seat_num <= 20:\n        if seat_let in 'ABC':\n            return 'Front-Left'\n        elif seat_let in 'DEF':\n            return 'Front-Middle'\n        else:\n            return 'Front-Right'\n    elif seat_num <= 40:\n        if seat_let in 'ABC':\n            return 'Middle-Left'\n        elif seat_let in 'DEF':\n            return 'Middle-Middle'\n        else:\n            return 'Middle-Right'\n    else:\n        if seat_let in 'ABC':\n            return 'Back-Left'\n        elif seat_let in 'DEF':\n            return 'Back-Middle'\n        else:\n            return 'Back-Right'",
            "def plane_seat(a):\n    try:\n        num, let = int(a[:-1]), a[-1].upper()\n        if num < 1 or num > 60 or let in 'IJ' or let < 'A' or let > 'K':\n            return 'No Seat!!'\n        if num <= 20:\n            area = 'Front'\n        elif num <= 40:\n            area = 'Middle'\n        else:\n            area = 'Back'\n        if let in 'ABC':\n            loc = 'Left'\n        elif let in 'DEF':\n            loc = 'Middle'\n        else:\n            loc = 'Right'\n        return '{}-{}'.format(area, loc)\n    except ValueError:\n        return 'No Seat!!'",
            "def plane_seat(a):\n    seat_number = a[:-1]\n    seat_letter = a[-1].upper()\n    if int(seat_number) < 1 or int(seat_number) > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHIK':\n        return 'No Seat!!'\n    if 1 <= int(seat_number) <= 20:\n        location = 'Front'\n    elif 21 <= int(seat_number) <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if seat_letter in 'ABC':\n        position = 'Left'\n    elif seat_letter in 'DEF':\n        position = 'Middle'\n    else:\n        position = 'Right'\n    return f'{location}-{position}'"
        ]
    }
}