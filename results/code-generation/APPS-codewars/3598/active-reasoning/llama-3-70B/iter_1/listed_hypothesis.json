{
    "0": [
        {
            "content": "def plane_seat(a):\n    num, letter = a[:-1], a[-1].upper()\n    if not num.isdigit() or not 1 <= int(num) <= 60 or letter in ['I', 'J']:\n        return 'No Seat!!'\n    location = 'Front' if int(num) <= 20 else 'Middle' if int(num) <= 40 else 'Back'\n    cluster = 'Left' if letter in ['A', 'B', 'C'] else 'Middle' if letter in ['D', 'E', 'F'] else 'Right'\n    return f'{location}-{cluster}'",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num, let = a[:-1], a[-1]\n    if not num.isdigit() or int(num) < 1 or int(num) > 60 or let not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    section = 'Front' if int(num) <= 20 else 'Middle' if int(num) <= 40 else 'Back'\n    cluster = 'Left' if let in 'ABC' else 'Middle' if let in 'DEF' else 'Right'\n    return f'{section}-{cluster}'",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if int(section) < 1 or int(section) > 60 or seat.upper() not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        area = 'Front'\n    elif int(section) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if seat.upper() in 'ABC':\n        location = 'Left'\n    elif seat.upper() in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return '{}-{}'.format(area, location)",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    elif section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        side = 'Left'\n    elif 'D' <= letter <= 'F':\n        side = 'Middle'\n    else:\n        side = 'Right'\n    return area + '-' + side",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter < 'A' or letter > 'K') or letter in 'IJ':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location = 'Left' if 'A' <= letter <= 'C' else 'Middle' if 'D' <= letter <= 'F' else 'Right'\n    return f'{area}-{location}'",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1]\n    if not section.isdigit() or int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        area = 'Front'\n    elif int(section) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return area + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section, seat = a[0:-1], a[-1]\n    section = int(section)\n    if section < 1 or section > 60:\n        return 'No Seat!!'\n    if seat not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    location = 'Front' if section <= 20 else 'Middle' if section <= 40 else 'Back'\n    location += '-' + ('Left' if seat in 'ABC' else 'Middle' if seat in 'DEF' else 'Right')\n    return location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if not 1 <= num <= 60 or letter in 'IJ' or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    else:\n        if num <= 20:\n            section = 'Front'\n        elif num <= 40:\n            section = 'Middle'\n        else:\n            section = 'Back'\n        if 'A' <= letter <= 'C':\n            cluster = 'Left'\n        elif 'D' <= letter <= 'F':\n            cluster = 'Middle'\n        else:\n            cluster = 'Right'\n        return f'{section}-{cluster}'",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if int(num) > 60 or letter in ['I', 'J'] or (not letter.isalpha()):\n        return 'No Seat!!'\n    if int(num) <= 20:\n        location = 'Front'\n    elif int(num) <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in ['A', 'B', 'C']:\n        location += '-Left'\n    elif letter in ['D', 'E', 'F']:\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_number, seat_letter = a[0:-1], a[-1]\n    if int(seat_number) > 60 or seat_letter in 'IJ' or not seat_letter.isalpha():\n        return 'No Seat!!'\n    else:\n        if int(seat_number) <= 20:\n            location = 'Front-'\n        elif int(seat_number) <= 40:\n            location = 'Middle-'\n        else:\n            location = 'Back-'\n        if seat_letter in 'ABC':\n            location += 'Left'\n        elif seat_letter in 'DEF':\n            location += 'Middle'\n        else:\n            location += 'Right'\n        return location",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        side = 'Left'\n    elif 'D' <= letter <= 'F':\n        side = 'Middle'\n    else:\n        side = 'Right'\n    return area + '-' + side",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    \n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    \n    if seat_letter not in 'ABCDEFHK':\n        return 'No Seat!!'\n    \n    if seat_number <= 20:\n        section = 'Front'\n    elif seat_number <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if seat_letter in 'ABC':\n        cluster = 'Left'\n    elif seat_letter in 'DEF':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n        \n    return f'{section}-{cluster}'",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter < 'A' or letter > 'K') or letter in 'IJ':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location = 'Left' if 'A' <= letter <= 'C' else 'Middle' if 'D' <= letter <= 'F' else 'Right'\n    return f'{area}-{location}'",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1]\n    if not section.isdigit() or int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        area = 'Front'\n    elif int(section) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return area + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section, seat = a[:-1], a[-1]\n    if not section.isdigit() or int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    if seat not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        area = 'Front'\n    elif int(section) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if seat in 'ABC':\n        location = 'Left'\n    elif seat in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return area + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if not 1 <= num <= 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    \n    if num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n        \n    if 'A' <= letter <= 'C':\n        loc = 'Left'\n    elif 'D' <= letter <= 'F':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n        \n    return section + '-' + loc",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter not in 'ABCDEFGHK'):\n        return 'No Seat!!'\n    if num <= 20:\n        location = 'Front'\n    elif num <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if letter in 'ABCDEFG':\n        pos = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    else:\n        pos = 'Right'\n    return f'{location}-{pos}'",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_number, seat_letter = a[:-1], a[-1].upper()\n    \n    if int(seat_number) > 60 or seat_letter in ['I', 'J', 'X', 'Y', 'Z']:\n        return 'No Seat!!'\n    \n    if int(seat_number) <= 20:\n        position = 'Front'\n    elif int(seat_number) <= 40:\n        position = 'Middle'\n    else:\n        position = 'Back'\n    \n    if seat_letter in ['A', 'B', 'C']:\n        location = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        location = 'Middle'\n    else:\n        location = 'Right'\n    \n    return '{}-{}'.format(position, location)",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_num = a[:-1]\n    seat_letter = a[-1].upper()\n    if int(seat_num) < 1 or int(seat_num) > 60:\n        return 'No Seat!!'\n    if seat_letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(seat_num) <= 20:\n        area = 'Front'\n    elif int(seat_num) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if seat_letter in 'ABC':\n        location = 'Left'\n    elif seat_letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return area + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n\n    if seat_number < 1 or seat_number > 60 or seat_letter in ['I', 'J'] or (seat_letter < 'A' or seat_letter > 'K'):\n        return 'No Seat!!'\n\n    seat_location = 'Front' if seat_number <= 20 else 'Middle' if seat_number <= 40 else 'Back'\n    seat_cluster = 'Left' if 'A' <= seat_letter <= 'C' else 'Middle' if 'D' <= seat_letter <= 'F' else 'Right'\n\n    return '{}-{}'.format(seat_location, seat_cluster)",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return 'No Seat!!'\n    if seat_letter not in ' ABCDEFGHK':\n        return 'No Seat!!'\n    if seat_number <= 20:\n        position = 'Front'\n    elif seat_number <= 40:\n        position = 'Middle'\n    else:\n        position = 'Back'\n    if seat_letter in ' ABC':\n        location = 'Left'\n    elif seat_letter in ' DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return position + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1]\n    if int(section) < 1 or int(section) > 60 or letter in ['I', 'J', 'X', 'Y', 'Z']:\n        return 'No Seat!!'\n    elif 1 <= int(section) <= 20:\n        if 'A' <= letter <= 'C':\n            return 'Front-Left'\n        elif 'D' <= letter <= 'F':\n            return 'Front-Middle'\n        else:\n            return 'Front-Right'\n    elif 21 <= int(section) <= 40:\n        if 'A' <= letter <= 'C':\n            return 'Middle-Left'\n        elif 'D' <= letter <= 'F':\n            return 'Middle-Middle'\n        else:\n            return 'Middle-Right'\n    else:\n        if 'A' <= letter <= 'C':\n            return 'Back-Left'\n        elif 'D' <= letter <= 'F':\n            return 'Back-Middle'\n        else:\n            return 'Back-Right'",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    elif section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        side = 'Left'\n    elif 'D' <= letter <= 'F':\n        side = 'Middle'\n    else:\n        side = 'Right'\n    return area + '-' + side",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter < 'A' or letter > 'K') or letter in 'IJ':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location = 'Left' if 'A' <= letter <= 'C' else 'Middle' if 'D' <= letter <= 'F' else 'Right'\n    return f'{area}-{location}'",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num, let = a[:-1], a[-1]\n    if not num.isdigit() or int(num) < 1 or int(num) > 60 or let.upper() not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    else:\n        if int(num) <= 20:\n            zone = 'Front'\n        elif int(num) <= 40:\n            zone = 'Middle'\n        else:\n            zone = 'Back'\n        if let.upper() in 'ABC':\n            loc = 'Left'\n        elif let.upper() in 'DEF':\n            loc = 'Middle'\n        else:\n            loc = 'Right'\n        return '{}-{}'.format(zone, loc)",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1]\n    if not section.isdigit() or int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        area = 'Front'\n    elif int(section) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return area + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    elif num <= 20:\n        section = 'Front-'\n    elif num <= 40:\n        section = 'Middle-'\n    else:\n        section = 'Back-'\n    if letter in ['A', 'B', 'C']:\n        location = section + 'Left'\n    elif letter in ['D', 'E', 'F']:\n        location = section + 'Middle'\n    else:\n        location = section + 'Right'\n    return location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_number, seat_letter = a[:-1], a[-1].upper()\n    \n    if int(seat_number) > 60 or seat_letter in ['I', 'J', 'X', 'Y', 'Z']:\n        return 'No Seat!!'\n    \n    if int(seat_number) <= 20:\n        section = 'Front'\n    elif int(seat_number) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    \n    if seat_letter in ['A', 'B', 'C']:\n        cluster = 'Left'\n    elif seat_letter in ['D', 'E', 'F']:\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    \n    return section + '-' + cluster",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if int(num) > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return \"No Seat!!\"\n    area = \"Front\" if int(num) <= 20 else \"Middle\" if int(num) <= 40 else \"Back\"\n    location = \"Left\" if letter in 'ABC' else \"Middle\" if letter in 'DEF' else \"Right\"\n    return f\"{area}-{location}\"",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return \"No Seat!!\"\n    if seat_letter not in \"ABCDEFGHK\":\n        return \"No Seat!!\"\n    if seat_number <= 20:\n        section = \"Front\"\n    elif seat_number <= 40:\n        section = \"Middle\"\n    else:\n        section = \"Back\"\n    if seat_letter in \"ABC\":\n        cluster = \"Left\"\n    elif seat_letter in \"DEF\":\n        cluster = \"Middle\"\n    else:\n        cluster = \"Right\"\n    return f\"{section}-{cluster}\"",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n\n    if section > 60 or (letter not in 'ABCDEFGHK') or (section < 1):\n        return 'No Seat!!'\n\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n\n    if letter in 'ABC':\n        loc = 'Left'\n    elif letter in 'DEF':\n        loc = 'Middle'\n    else:\n        loc = 'Right'\n\n    return '{}-{}'.format(area, loc)",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_num = a[:-1]\n    seat_letter = a[-1].upper()\n    if int(seat_num) > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    elif 1 <= int(seat_num) <= 20:\n        location = 'Front'\n    elif 21 <= int(seat_num) <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if 'A' <= seat_letter <= 'C':\n        position = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        position = 'Middle'\n    else:\n        position = 'Right'\n    return '{}-{}'.format(location, position)",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or (letter < 'A' or letter > 'K') or letter in 'IJ':\n        return 'No Seat!!'\n    area = 'Front' if num <= 20 else 'Middle' if num <= 40 else 'Back'\n    location = 'Left' if letter in 'ABC' else 'Middle' if letter in 'DEF' else 'Right'\n    return area + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    if section < 1 or section > 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    elif section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if 'A' <= letter <= 'C':\n        side = 'Left'\n    elif 'D' <= letter <= 'F':\n        side = 'Middle'\n    else:\n        side = 'Right'\n    return area + '-' + side",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_num = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_num > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    elif seat_num <= 20:\n        location = 'Front'\n    elif seat_num <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if 'A' <= seat_letter <= 'C':\n        location += '-Left'\n    elif 'D' <= seat_letter <= 'F':\n        location += '-Middle'\n    else:\n        location += '-Right'\n    return location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num, letter = a[:-1], a[-1].upper()\n    if int(num) > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    elif int(num) <= 20:\n        section = 'Front'\n    elif int(num) <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if 'A' <= letter <= 'C':\n        cluster = 'Left'\n    elif 'D' <= letter <= 'F':\n        cluster = 'Middle'\n    else:\n        cluster = 'Right'\n    return f\"{section}-{cluster}\"",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num, let = a[:-1], a[-1]\n    if not num.isdigit() or int(num) < 1 or int(num) > 60 or let.upper() not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    else:\n        if int(num) <= 20:\n            zone = 'Front'\n        elif int(num) <= 40:\n            zone = 'Middle'\n        else:\n            zone = 'Back'\n        if let.upper() in 'ABC':\n            loc = 'Left'\n        elif let.upper() in 'DEF':\n            loc = 'Middle'\n        else:\n            loc = 'Right'\n        return zone + '-' + loc",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num = int(a[:-1])\n    letter = a[-1].upper()\n    if num < 1 or num > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return 'No Seat!!'\n    elif num <= 20:\n        section = 'Front'\n    elif num <= 40:\n        section = 'Middle'\n    else:\n        section = 'Back'\n    if letter in ['A', 'B', 'C']:\n        location = 'Left'\n    elif letter in ['D', 'E', 'F']:\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return section + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = a[:-1]\n    letter = a[-1]\n    if not section.isdigit() or int(section) < 1 or int(section) > 60:\n        return 'No Seat!!'\n    if letter not in 'ABCDEFGHK':\n        return 'No Seat!!'\n    if int(section) <= 20:\n        area = 'Front'\n    elif int(section) <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n    if letter in 'ABC':\n        location = 'Left'\n    elif letter in 'DEF':\n        location = 'Middle'\n    else:\n        location = 'Right'\n    return area + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    num, letter = a[:-1], a[-1]\n    if int(num) > 60 or letter in ['I', 'J'] or (letter < 'A' or letter > 'K'):\n        return \"No Seat!!\"\n    area = \"Front\" if int(num) <= 20 else \"Middle\" if int(num) <= 40 else \"Back\"\n    location = \"Left\" if letter in 'ABC' else \"Middle\" if letter in 'DEF' else \"Right\"\n    return f\"{area}-{location}\"",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_number, seat_letter = a[:-1], a[-1].upper()\n    if int(seat_number) > 60 or seat_letter in 'IJ' or (seat_letter < 'A' or seat_letter > 'K'):\n        return 'No Seat!!'\n    else:\n        if 1 <= int(seat_number) <= 20:\n            area = 'Front'\n        elif 21 <= int(seat_number) <= 40:\n            area = 'Middle'\n        else:\n            area = 'Back'\n        if 'A' <= seat_letter <= 'C':\n            cluster = 'Left'\n        elif 'D' <= seat_letter <= 'F':\n            cluster = 'Middle'\n        else:\n            cluster = 'Right'\n        return area + '-' + cluster",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n    \n    if section < 1 or section > 60 or letter in ['I', 'J'] or not 'A' <= letter <= 'K':\n        return 'No Seat!!'\n    \n    if section <= 20:\n        zone = 'Front'\n    elif section <= 40:\n        zone = 'Middle'\n    else:\n        zone = 'Back'\n        \n    if 'A' <= letter <= 'C':\n        location = 'Left'\n    elif 'D' <= letter <= 'F':\n        location = 'Middle'\n    else:\n        location = 'Right'\n        \n    return zone + '-' + location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_number = int(a[:-1])\n    seat_letter = a[-1].upper()\n    if seat_number < 1 or seat_number > 60:\n        return \"No Seat!!\"\n    if seat_letter not in \"ABCDEFGHK\":\n        return \"No Seat!!\"\n    if seat_number <= 20:\n        seat_location = \"Front-\"\n    elif seat_number <= 40:\n        seat_location = \"Middle-\"\n    else:\n        seat_location = \"Back-\"\n    if seat_letter in \"ABC\":\n        seat_location += \"Left\"\n    elif seat_letter in \"DEF\":\n        seat_location += \"Middle\"\n    else:\n        seat_location += \"Right\"\n    return seat_location",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    section = int(a[:-1])\n    letter = a[-1].upper()\n\n    if section > 60 or (letter not in 'ABCDEFGHK') or (section < 1):\n        return 'No Seat!!'\n\n    if section <= 20:\n        area = 'Front'\n    elif section <= 40:\n        area = 'Middle'\n    else:\n        area = 'Back'\n\n    if letter in 'ABC':\n        position = 'Left'\n    elif letter in 'DEF':\n        position = 'Middle'\n    else:\n        position = 'Right'\n\n    return '{}-{}'.format(area, position)",
            "logp": null
        },
        {
            "content": "def plane_seat(a):\n    seat_num = a[:-1]\n    seat_letter = a[-1].upper()\n    if int(seat_num) > 60 or seat_letter in ['I', 'J'] or not 'A' <= seat_letter <= 'K':\n        return 'No Seat!!'\n    elif 1 <= int(seat_num) <= 20:\n        location = 'Front'\n    elif 21 <= int(seat_num) <= 40:\n        location = 'Middle'\n    else:\n        location = 'Back'\n    if 'A' <= seat_letter <= 'C':\n        position = 'Left'\n    elif 'D' <= seat_letter <= 'F':\n        position = 'Middle'\n    else:\n        position = 'Right'\n    return '{}-{}'.format(location, position)",
            "logp": null
        }
    ]
}