{
    "0": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result + 1):\n        if result % i == 0:\n            return i\n    return 1"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)"
        ],
        "1": [],
        "2": [],
        "3": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1"
        ],
        "4": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1"
        ]
    },
    "2": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans //= i\n    return ans"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1"
        ],
        "2": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1"
        ],
        "3": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1"
        ],
        "4": [
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcds = [i for i in lst]\n    res = reduce(_gcd, gcds)\n    \n    if res == 1:\n        res = 1\n    else:\n        res = next(i for i in range(2, res+1) if _gcd(res, i) != 1)\n    \n    return res",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1"
        ]
    }
}