{
    "0": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result // gcd(result, lst[0])",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 2\n    while True:\n        for num in lst:\n            if num % scf != 0:\n                scf += 1\n                break\n        else:\n            return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result + 1):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 2\n    while True:\n        if all(i % scf == 0 for i in lst):\n            return scf\n        scf = lcm(scf, scf + 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    \n    for i in range(2, result):\n        if all(result % j == 0 for j in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    res = lst[0]\n    for i in range(1, len(lst)):\n        res = lcm(res, lst[i])\n\n    for i in range(2, res + 1):\n        common_factor = True\n        for num in lst:\n            if num % i != 0:\n                common_factor = False\n                break\n        if common_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result // gcd(result, max(lst))",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    factors = set()\n    for i in range(2, result + 1):\n        if result % i == 0:\n            factors.add(i)\n    \n    for num in lst[1:]:\n        temp_factors = set()\n        for i in range(2, num + 1):\n            if num % i == 0:\n                temp_factors.add(i)\n        factors &= temp_factors\n    \n    return min(factors) if factors else 1"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result // gcd(result, lst[0])",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 2\n    while True:\n        for num in lst:\n            if num % scf != 0:\n                scf += 1\n                break\n        else:\n            return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result + 1):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 2\n    while True:\n        if all(i % scf == 0 for i in lst):\n            return scf\n        scf = lcm(scf, scf + 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    \n    for i in range(2, result):\n        if all(result % j == 0 for j in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    res = lst[0]\n    for i in range(1, len(lst)):\n        res = lcm(res, lst[i])\n\n    for i in range(2, res + 1):\n        common_factor = True\n        for num in lst:\n            if num % i != 0:\n                common_factor = False\n                break\n        if common_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    factors = set()\n    for i in range(2, result + 1):\n        if result % i == 0:\n            factors.add(i)\n    \n    for num in lst[1:]:\n        temp_factors = set()\n        for i in range(2, num + 1):\n            if num % i == 0:\n                temp_factors.add(i)\n        factors &= temp_factors\n    \n    return min(factors) if factors else 1"
        ],
        "2": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(num % 2 == 0 for num in lst) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for num in lst:\n        if num % result != 0:\n            return 1\n    \n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    \n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(any(num % i == 0 for i in range(2, num)) for num in lst) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = []\n    for i in range(2, result):\n        if all(i % num == 0 for num in lst):\n            factors.append(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        is_common_factor = all(num % i == 0 for num in lst)\n        if is_common_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n        if scf > min(lst):\n            return 1\n    return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = []\n    for i in range(2, result):\n        if result % i == 0:\n            is_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_factor = False\n                    break\n            if is_factor:\n                factors.append(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for num in lst:\n        if num % result != 0:\n            return 1\n    \n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return gcd(result, result // 2) if result > 2 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    factors = set()\n    for i in range(2, result + 1):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            factors.add(i)\n    if not factors:\n        return 1\n    return min(factors)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    scf_result = 2\n    while scf_result <= result:\n        if all(num % scf_result == 0 for num in lst):\n            return scf_result\n        scf_result += 1\n    return 1"
        ],
        "3": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    \n    for i in range(2, result):\n        common = True\n        for num in lst:\n            if num % i != 0:\n                common = False\n                break\n        if common:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(all(num % i == 0 for num in lst) for i in range(2, result + 1)) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        is_common_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n        if scf > min(lst):\n            return 1\n    return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = []\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(all(num % i == 0 for num in lst) for i in range(2, result + 1)) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = set()\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            factors.add(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    scf_result = result\n    for i in range(2, scf_result):\n        if all(j % i == 0 for j in lst):\n            return i\n    return 1"
        ],
        "4": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        is_common_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        is_common_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = []\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(any(num % i == 0 for num in lst) for i in range(2, min(lst))) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = 1\n    for num in lst:\n        result = lcm(result, num)\n    for i in range(2, result):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    factors = []\n    for i in range(2, result + 1):\n        if result % i == 0:\n            factors.append(i)\n    common_factors = set(factors)\n    for i in lst[1:]:\n        temp_factors = []\n        for j in range(2, i + 1):\n            if i % j == 0:\n                temp_factors.append(j)\n        common_factors &= set(temp_factors)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        is_common_factor = all(num % i == 0 for num in lst)\n        if is_common_factor:\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    factors = []\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    \n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    scf_result = 1\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            scf_result = i\n            break\n\n    return scf_result"
        ]
    },
    "1": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result // gcd(result, max(lst))",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    factors = set()\n    for i in range(2, result + 1):\n        if result % i == 0:\n            factors.add(i)\n    \n    for num in lst[1:]:\n        temp_factors = set()\n        for i in range(2, num + 1):\n            if num % i == 0:\n                temp_factors.add(i)\n        factors &= temp_factors\n    \n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    return 1"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result // gcd(result, lst[0])",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result + 1):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for num in range(2, result):\n        if all(num % i == 0 for i in lst):\n            return num\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if result % i == 0)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    result //= gcd(result, max(lst))\n\n    for i in range(2, result):\n        if all(i % j == 0 for j in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result // gcd(result, max(lst))",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    scf = 2\n    while True:\n        if all(i % scf == 0 for i in lst):\n            return scf\n        scf += 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    scf_result = 2\n    while scf_result < result:\n        if all(result % i == 0 for i in lst):\n            return scf_result\n        scf_result += 1\n    return 1"
        ],
        "2": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(all(num % i == 0 for num in lst) for i in range(2, result + 1)) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(all(num % i == 0 for num in lst) for i in range(2, result + 1)) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = []\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for num in lst:\n        if num % result != 0:\n            return 1\n    \n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return gcd(result, result // 2) if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    return min(i for i in range(2, result + 1) if all(x % i == 0 for x in lst)) if any(x % i == 0 for i in range(2, min(lst)) for x in lst) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    factors = []\n    for i in range(2, result):\n        if all(i % j == 0 for j in lst):\n            factors.append(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    scf_result = 2\n    while scf_result <= result:\n        if all(i % scf_result == 0 for i in lst):\n            return scf_result\n        scf_result += 1\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    scf_result = 2\n    while scf_result <= result:\n        if all(num % scf_result == 0 for num in lst):\n            return scf_result\n        scf_result += 1\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    return min(i for i in range(2, result + 1) if all(x % i == 0 for x in lst)) if any(x % 2 == 0 for x in lst) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    factors = []\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    \n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    result //= gcd(result, lst[0])\n\n    if result == 1:\n        return 1\n    else:\n        for num in lst:\n            if num % result != 0:\n                return 1\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = set()\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.add(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    factors = []\n    for i in range(2, result):\n        if all(i % x == 0 for x in lst):\n            factors.append(i)\n\n    return min(factors) if factors else 1"
        ],
        "3": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(all(num % i == 0 for num in lst) for i in range(2, result + 1)) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        is_common_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n        if scf > min(lst):\n            return 1\n    return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = []\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(all(num % i == 0 for num in lst) for i in range(2, result + 1)) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = set()\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            factors.add(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    if not lst:\n        return 1\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    factors = set()\n    for i in range(2, result):\n        if result % i == 0:\n            factors.add(i)\n    \n    scf = 1\n    for i in range(2, min(lst) + 1):\n        if all(num % i == 0 for num in lst):\n            scf = i\n            break\n    \n    return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n\n    for i in range(2, result):\n        is_common_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    result //= gcd(result, lst[0])\n\n    for i in range(2, result):\n        if all(i % x == 0 for x in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    scf_result = 2\n    while scf_result < result:\n        if all(x % scf_result == 0 for x in lst):\n            return scf_result\n        scf_result += 1\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(2, result):\n        if all(j % i == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    scf_result = 2\n    while scf_result <= result:\n        if all(num % scf_result == 0 for num in lst):\n            return scf_result\n        scf_result += 1\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n        \n    factors = []\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n            \n    return min(factors) if factors else 1"
        ],
        "4": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        is_common_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = []\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(all(num % i == 0 for num in lst) for i in range(2, result + 1)) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    \n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    if result == 1:\n        return 1\n    else:\n        for i in range(2, result):\n            if all(num % i == 0 for num in lst):\n                return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    factors = []\n    for i in range(2, result + 1):\n        if result % i == 0:\n            factors.append(i)\n    common_factors = set(factors)\n    for i in lst[1:]:\n        temp_factors = []\n        for j in range(2, i + 1):\n            if i % j == 0:\n                temp_factors.append(j)\n        common_factors &= set(temp_factors)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = 1\n    for num in lst:\n        result = lcm(result, num)\n    \n    factors = [i for i in range(2, result + 1) if result % i == 0]\n    factors.sort()\n\n    for factor in factors:\n        is_common_factor = True\n        for num in lst:\n            if num % factor != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            return factor\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    factors = []\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    \n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        is_common_factor = all(num % i == 0 for num in lst)\n        if is_common_factor:\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    scf_result = 1\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            scf_result = i\n            break\n\n    return scf_result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    factors = []\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    scf_result = 1\n    for i in range(2, result + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            scf_result = i\n            break\n\n    return scf_result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    scf = 1\n    for i in range(2, result + 1):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            scf = i\n            break\n\n    return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = 1\n    for num in lst:\n        result = lcm(result, num)\n\n    i = 2\n    while i < result:\n        if all(num % i == 0 for num in lst):\n            return i\n        i += 1\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        is_factor = all(num % i == 0 for num in lst)\n        if is_factor:\n            return i\n    \n    return 1"
        ]
    },
    "2": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result // gcd(result, lst[0])",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for num in range(2, result):\n        if all(num % i == 0 for i in lst):\n            return num\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result // gcd(result, lst[0])",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    scf_result = 2\n    while True:\n        is_factor = True\n        for num in lst:\n            if num % scf_result != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return scf_result\n        scf_result += 1\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = result * num // gcd(result, num)\n\n    for i in range(2, result + 1):\n        if all(i % num == 0 for num in lst):\n            return i\n\n    return 1"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 2\n    while True:\n        for num in lst:\n            if num % scf:\n                scf += 1\n                break\n        else:\n            return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if result % i == 0)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n\n    for i in range(2, result):\n        if all(result % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for num in range(2, result):\n        if all(num % i == 0 for i in lst):\n            return num\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result // gcd(result, max(lst))",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    scf_result = 2\n    while True:\n        is_factor = True\n        for num in lst:\n            if num % scf_result != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return scf_result\n        scf_result += 1\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = result * num // gcd(result, num)\n\n    for i in range(2, result + 1):\n        if all(i % num == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n    return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    \n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    scf_result = 2\n    while True:\n        is_factor = True\n        for num in lst:\n            if num % scf_result != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return scf_result\n        scf_result += 1\n\n    return 1"
        ],
        "2": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    \n    for num in lst:\n        if num % result != 0:\n            return 1\n    \n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(any(num % i == 0 for num in lst) for i in range(2, min(lst))) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return gcd(result, result // 2) if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    result //= gcd(result, lst[0])\n    if result == 1:\n        return 1\n    for num in lst:\n        if num % result != 0:\n            result //= 2\n            while True:\n                if all(num % result == 0 for num in lst):\n                    break\n                result -= 1\n    return result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    scf_result = 2\n    while scf_result <= result:\n        if all(num % scf_result == 0 for num in lst):\n            return scf_result\n        scf_result += 1\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    scf_result = 2\n    while scf_result < result:\n        if all(i % scf_result == 0 for i in lst):\n            return scf_result\n        scf_result += 1\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1"
        ],
        "3": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(all(num % i == 0 for num in lst) for i in range(2, result + 1)) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    \n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n\n    for i in range(2, result):\n        is_common_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    result //= gcd(result, lst[0])\n\n    for i in range(2, result):\n        if all(i % x == 0 for x in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    scf_result = 2\n    while scf_result < result:\n        if all(x % scf_result == 0 for x in lst):\n            return scf_result\n        scf_result += 1\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(2, result):\n        if all(j % i == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    scf_result = 2\n    while scf_result <= result:\n        if all(num % scf_result == 0 for num in lst):\n            return scf_result\n        scf_result += 1\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n        \n    factors = []\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n            \n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return min(i for i in range(2, result + 1) if all(num % i == 0 for num in lst)) if any(num % i == 0 for i in range(2, min(lst)) for num in lst) else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(2, result):\n        if all(j % i == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    factors = []\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common = True\n            for num in lst:\n                if num % i != 0:\n                    is_common = False\n                    break\n            if is_common:\n                factors.append(i)\n\n    if factors:\n        return min(factors)\n    else:\n        return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(2, result):\n        if all(j % i == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n    for i in range(2, result):\n        if all(x % i == 0 for x in lst):\n            return i\n    return 1"
        ],
        "4": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    for i in range(2, result):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = 1\n    for num in lst:\n        result = lcm(result, num)\n    for i in range(2, result):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    factors = []\n    for i in range(2, result + 1):\n        if result % i == 0:\n            factors.append(i)\n    common_factors = set(factors)\n    for i in lst[1:]:\n        temp_factors = []\n        for j in range(2, i + 1):\n            if i % j == 0:\n                temp_factors.append(j)\n        common_factors &= set(temp_factors)\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        is_common_factor = all(num % i == 0 for num in lst)\n        if is_common_factor:\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    factors = []\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            factors.append(i)\n    \n    return min(factors) if factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n\n    scf_result = 1\n    for i in range(2, result + 1):\n        if all(num % i == 0 for num in lst):\n            scf_result = i\n            break\n\n    return scf_result",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = num // gcd(result, num) * gcd(result, num)\n\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    scf = 1\n    for i in range(2, result + 1):\n        is_factor = True\n        for num in lst:\n            if num % i != 0:\n                is_factor = False\n                break\n        if is_factor:\n            scf = i\n            break\n\n    return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = 1\n    for num in lst:\n        result = lcm(result, num)\n\n    i = 2\n    while i < result:\n        if all(num % i == 0 for num in lst):\n            return i\n        i += 1\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n\n    scf = 1\n    for i in range(2, result + 1):\n        if all(x % i == 0 for x in lst):\n            scf = i\n            break\n\n    return scf",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    \n    for i in range(2, result):\n        is_factor = all(num % i == 0 for num in lst)\n        if is_factor:\n            return i\n    \n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    for i in range(2, result):\n        if all(num % i == 0 for num in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(2, result):\n        if all(j % i == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    result = 1\n    for num in lst:\n        result = lcm(result, num)\n    scf = 2\n    while scf < result:\n        if all(num % scf == 0 for num in lst):\n            return scf\n        scf += 1\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common = lst[0]\n    for num in lst[1:]:\n        common = num // gcd(common, num) * gcd(common, num)\n    common_factors = [i for i in range(2, common + 1) if all(num % i == 0 for num in lst)]\n    return min(common_factors) if common_factors else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    scf = 1\n    for num in lst:\n        scf = lcm(scf, num)\n    scf_factors = []\n    for i in range(2, scf):\n        if all(num % i == 0 for num in lst):\n            scf_factors.append(i)\n    return min(scf_factors) if scf_factors else 1"
        ]
    }
}