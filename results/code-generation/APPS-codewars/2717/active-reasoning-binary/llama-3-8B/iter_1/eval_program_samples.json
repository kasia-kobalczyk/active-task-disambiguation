{
    "0": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def find_scf(lst):\n        res = lst[0]\n        for i in lst[1:]:\n            res = gcd(res, i)\n        return res\n    return find_scf(lst) if lst else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return max(1, common_factors)",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcd_all = reduce(_gcd, lst)\n    \n    i = 2\n    while True:\n        if gcd_all % i == 0:\n            gcd_all = i\n        else:\n            i += 1\n        if i == gcd_all:\n            return gcd_all\n    return 1"
        ],
        "2": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return max(1, common_factors)",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcd_all = reduce(_gcd, lst)\n    \n    return 1 if gcd_all == 1 else gcd_all"
        ],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return max(1, common_factors)",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcd_all = reduce(_gcd, lst)\n    \n    i = 2\n    while True:\n        if gcd_all % i == 0:\n            gcd_all = i\n        else:\n            i += 1\n        if i == gcd_all:\n            return gcd_all\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n\n    return common_factor if common_factor > 1 else 1"
        ],
        "2": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return max(1, common_factors)",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcd_all = reduce(_gcd, lst)\n    \n    return 1 if gcd_all == 1 else gcd_all",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n\n    return 1 if common_factor == 1 else common_factor"
        ],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return max(1, common_factors)",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcd_all = reduce(_gcd, lst)\n    \n    i = 2\n    while True:\n        if gcd_all % i == 0:\n            gcd_all = i\n        else:\n            i += 1\n        if i == gcd_all:\n            return gcd_all\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n\n    return common_factor if common_factor > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    return result"
        ],
        "2": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return max(1, common_factors)",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcd_all = reduce(_gcd, lst)\n    \n    return 1 if gcd_all == 1 else gcd_all",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n\n    return 1 if common_factor == 1 else common_factor"
        ],
        "3": [],
        "4": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n\n    for i in range(2, result + 1):\n        if result % i == 0:\n            is_common_factor = True\n            for num in lst:\n                if num % i != 0:\n                    is_common_factor = False\n                    break\n            if is_common_factor:\n                return i\n    return 1"
        ]
    }
}