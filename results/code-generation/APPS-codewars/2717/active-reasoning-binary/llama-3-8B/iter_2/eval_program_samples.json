{
    "0": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    for i in range(result-1, 0, -1):\n        if all(i % j == 0 for j in lst):\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return 1 if common_factors == 1 else common_factors",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans = ans // i\n    return ans if ans >= 2 else 1",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    gcd_all = reduce(_gcd, lst)\n    if gcd_all <= 1:\n        return 1\n    for i in range(2, gcd_all + 1):\n        if gcd_all % i == 0:\n            return i\n    return 1"
        ],
        "2": [
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans = ans // i\n    return ans if ans >= 2 else 1",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    gcd_all = reduce(_gcd, lst)\n    if gcd_all <= 1:\n        return 1\n    for i in range(2, gcd_all + 1):\n        if gcd_all % i == 0:\n            return i\n    return 1"
        ],
        "3": [
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    gcd_all = reduce(_gcd, lst)\n    if gcd_all <= 1:\n        return 1\n    for i in range(2, gcd_all + 1):\n        if gcd_all % i == 0:\n            return i\n    return 1"
        ],
        "4": []
    },
    "1": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return 1 if common_factors == 1 else common_factors",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans = ans // i\n    return ans if ans >= 2 else 1",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    gcd_all = reduce(_gcd, lst)\n    if gcd_all <= 1:\n        return 1\n    for i in range(2, gcd_all + 1):\n        if gcd_all % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_two(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_two(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        if all(i % j == 0 for j in lst):\n            common_factors.append(i)\n    if not common_factors:\n        return 1\n    return min(common_factors)"
        ],
        "2": [
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans = ans // i\n    return ans if ans >= 2 else 1",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    gcd_all = reduce(_gcd, lst)\n    if gcd_all <= 1:\n        return 1\n    for i in range(2, gcd_all + 1):\n        if gcd_all % i == 0:\n            return i\n    return 1"
        ],
        "3": [
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    gcd_all = reduce(_gcd, lst)\n    if gcd_all <= 1:\n        return 1\n    for i in range(2, gcd_all + 1):\n        if gcd_all % i == 0:\n            return i\n    return 1"
        ],
        "4": []
    },
    "2": {
        "0": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    def find_lcm(lst):\n        result = lst[0]\n        for num in lst[1:]:\n            result = lcm(result, num)\n        return result\n    return math.gcd(find_lcm(lst), find_lcm(lst)) if lst else 1"
        ],
        "1": [
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return 1 if common_factors == 1 else common_factors",
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans = ans // i\n    return ans if ans >= 2 else 1",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    gcd_all = reduce(_gcd, lst)\n    if gcd_all <= 1:\n        return 1\n    for i in range(2, gcd_all + 1):\n        if gcd_all % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_two(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_two(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        if all(i % j == 0 for j in lst):\n            common_factors.append(i)\n    if not common_factors:\n        return 1\n    return min(common_factors)",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = 1\n    for num in lst:\n        result = gcd(result, num)\n        if result == 1:\n            return 1\n    return result"
        ],
        "2": [
            "def scf(lst):\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    ans = lst[0]\n    for i in lst[1:]:\n        ans = lcm(ans, i)\n    ans = 1\n    for i in range(2, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            while ans % i == 0:\n                ans = ans // i\n    return ans if ans >= 2 else 1",
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    gcd_all = reduce(_gcd, lst)\n    if gcd_all <= 1:\n        return 1\n    for i in range(2, gcd_all + 1):\n        if gcd_all % i == 0:\n            return i\n    return 1",
            "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = 1\n    for num in lst:\n        result = gcd(result, num)\n        if result == 1:\n            return 1\n    return result"
        ],
        "3": [
            "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    gcd_all = reduce(_gcd, lst)\n    if gcd_all <= 1:\n        return 1\n    for i in range(2, gcd_all + 1):\n        if gcd_all % i == 0:\n            return i\n    return 1"
        ],
        "4": []
    }
}