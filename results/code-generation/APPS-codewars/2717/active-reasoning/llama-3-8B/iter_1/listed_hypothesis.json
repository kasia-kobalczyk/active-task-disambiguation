{
    "0": [
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(common_factor, 1)",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factors = lst[0]\n    for num in lst[1:]:\n        common_factors = gcd(common_factors, num)\n    return max(1, common_factors)",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcd_all = reduce(_gcd, lst)\n    \n    i = 2\n    while True:\n        if gcd_all % i == 0:\n            gcd_all = i\n        else:\n            i += 1\n        if i == gcd_all:\n            break\n            \n    return 1 if gcd_all == 1 else gcd_all",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(1, common_factor)",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcd_of_list = reduce(_gcd, lst)\n    return 1 if gcd_of_list == 1 else gcd_of_list",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n\n    def gcd_array(lst):\n        result = lst[0]\n        for i in lst[1:]:\n            result = gcd(result, i)\n        return result\n\n    return gcd_array(lst) if result > 1 else 1",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    result = lst[0]\n    for num in lst[1:]:\n        result = gcd(result, num)\n    return result if result > 1 else 1",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_factor = lst[0]\n    for num in lst[1:]:\n        common_factor = gcd(common_factor, num)\n    return max(1, common_factor)",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    from math import gcd\n    from functools import reduce\n    import operator\n    \n    def _gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    gcd_of_list = reduce(_gcd, lst)\n    return 1 if gcd_of_list == 1 else gcd_of_list",
            "logp": null
        },
        {
            "content": "def scf(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_gcf(arr):\n        def gcd_val(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        gcf = arr[0]\n        for i in arr[1:]:\n            gcf = gcd_val(gcf, i)\n        return gcf\n\n    common_factors = []\n    for i in range(2, find_gcf(lst) + 1):\n        is_common_factor = True\n        for num in lst:\n            if num % i:\n                is_common_factor = False\n                break\n        if is_common_factor:\n            common_factors.append(i)\n    return min(common_factors) if common_factors else 1",
            "logp": null
        }
    ]
}