{
    "0": [
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "logp": null
        },
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "logp": null
        },
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "logp": null
        },
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "logp": null
        },
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "logp": null
        },
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "logp": null
        },
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "logp": null
        },
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "logp": null
        },
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "logp": null
        },
        {
            "content": "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "logp": null
        }
    ],
    "1": [],
    "2": [
        {
            "content": "def is_isogram(word): \n    if not isinstance(word, str) or not word: \n        return False \n    word = re.sub('[\\W_]+', '', word.lower()) \n    word_chars = Counter(word) \n    return len(set(word_chars.values())) == 1",
            "logp": null
        },
        {
            "content": "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "logp": null
        }
    ]
}