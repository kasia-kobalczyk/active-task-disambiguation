{
    "0": {
        "0": [
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if word == \"\":\n        return False\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub(\"[^a-z]\", \"\", word)\n    \n    # Count the number of occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n\nprint(is_isogram(\"hello\")) # False\nprint(is_isogram(\"world\")) # True",
            "def is_isogram(word):\n    if isinstance(word, str) and word != '':\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^A-Za-z]', '', word)\n    word = word.lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(r'[^a-zA-Z]', '', word).lower()\n        count = Counter(word)\n        return all(count[char] == count[word[0]] for char in word)\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert all letters to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # Count the frequency of each letter\n    frequency = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(frequency.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    counts = Counter(word)\n    \n    # Check if all letters have the same frequency\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string and not empty\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert the word to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all the letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        # Count the occurrences of each letter\n        letter_counts = Counter(word)\n        # Check if each letter appears the same number of times\n        return all(count == letter_counts[word[0]] for count in letter_counts.values())\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # check if input is empty\n    if len(word) == 0:\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n\n    # count the frequency of each letter\n    count = Counter(word)\n\n    # check if all letters have the same frequency\n    return all(count[letter] == count[word[0]] for letter in count)",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    # Check if the input is a string and not empty\n    if not isinstance(word, str) or not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter\n    counts = Counter(word)\n    \n    # Check if any letter appears more than once\n    if any(count > 1 for count in counts.values()):\n        return False\n    \n    return True",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    counts = set(letter_counts.values())\n    if len(counts) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    counter = Counter(word)\n    return len(counter.values()) == 1\n\nprint(is_isogram(\"isogram\"))\nprint(is_isogram(\"python\"))\nprint(is_isogram(\"Hello\"))\nprint(is_isogram(\"aabba\"))\nprint(is_isogram(\"\"))",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    \n    return all(count == counter[word[0]] for count in counter.values())",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    \n    count = Counter(word)\n    return len(set(count.values())) == 1"
        ],
        "1": [
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter frequencies are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and len(word) > 0:\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != '':\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        return len(set(word)) == len(word)\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str): # check if input is a string\n        return False\n    if len(word) == 0: # check if string is empty\n        return False\n    \n    word = re.sub(\"[^a-zA-Z]+\", \"\", word) # remove non-letter characters\n    word = word.lower() # convert string to lowercase\n    \n    letter_counts = Counter(word) # count the occurrences of each letter\n    \n    return len(set(letter_counts.values())) <= 1 # check if all letter counts are the same",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        word_count = Counter(word)\n        return len(word_count.values()) == 1\n    return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # Count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n        word = word.lower()\n        letter_count = Counter(word)\n        return len(set(letter_count.values())) == 1\n    return False",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase and remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Check if each letter appears the same number of times\n    letter_count = Counter(word)\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        count = Counter(word)\n        return all(value == count[word[0]] for value in count.values())\n    return False",
            "def is_isogram(word):\n\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n\n    letter_count = Counter(word)\n\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    count = Counter(word)\n    return len(count.values()) == 1",
            "def is_isogram(word):\n    # Check if input is a string and is not empty\n    if not isinstance(word, str) or not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_count = Counter(cleaned_word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    counts = Counter(word)\n    values = list(counts.values())\n    \n    return all(x == values[0] for x in values)",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n    word = word.lower()\n    word_count = Counter(word)\n    if len(set(word_count.values())) == 1:\n        return True\n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    letters = re.findall(r'[a-z]', word.lower())\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1"
        ],
        "2": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the word is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the word is not empty\n    if len(word) == 0:\n        return False\n\n    # Ignore non-letter characters\n    word = re.sub(\"[^a-zA-Z]\", \"\", word)\n\n    # Convert the word to lowercase\n    word = word.lower()\n\n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1\n\nprint(is_isogram(\"hello\")) # False\nprint(is_isogram(\"Python\")) # True",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return all(count == counts[word[0]] for count in counts.values())",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters using regex\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the occurrence of each letter\n    letter_count = Counter(word)\n    \n    # Check if all letters have the same count\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    count = Counter(word)\n    if len(set(count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all counts are equal\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if word is a string and not empty\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert word to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    elif len(word) == 0:\n        return False\n    else:\n        # Remove non-letter characters and convert to lower case\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        # Count the frequency of each letter\n        letter_count = Counter(word)\n        # Check if all letters have the same count\n        return all(count == letter_count[word[0]] for count in letter_count.values())",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all the counts are equal\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n\n    counts = Counter(word)\n    values = list(counts.values())\n    return all(value == values[0] for value in values)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    count = Counter(word)\n    return len(count) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if string is empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lower case\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    counter = Counter(word)\n    return all(count == counter[word[0]] for count in counter.values())",
            "def is_isogram(word):\n\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Use Counter to count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n\n    # Ignore non-letter characters and convert the word to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n\n    # Check if all the letter counts are the same\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub('[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    \n    return all(counts[char] == counts[word[0]] for char in word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    count = Counter(word)\n    \n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert the word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if word == \"\":\n        return False\n\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n\n    letter_counts = Counter(word)\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n\n    # Convert word to lowercase\n    word = word.lower()\n\n    # Remove non-letter characters using regular expression\n    word = re.sub('[^a-zA-Z]', '', word)\n\n    # Use Counter to count the occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # count the frequency of each letter\n    counter = Counter(word)\n    \n    # check if all the frequencies are the same\n    return len(set(counter.values())) == 1"
        ],
        "3": [
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]\", \"\", word).lower()\n        word_count = Counter(word)\n        return len(set(word_count.values())) == 1\n    return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(r'[^A-Za-z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    counts = Counter(word)\n    \n    # Check if all frequencies are the same\n    return all(counts[char] == counts[word[0]] for char in counts)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^A-Za-z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub(r'[^A-Za-z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert the string to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if each letter appears the same number of times\n    counts = Counter(word)\n    if len(set(counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) <= 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    counts = Counter(word)\n    \n    return all(count == counts[word[0]] for count in counts.values())",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrences of each letter\n    letter_count = Counter(cleaned_word)\n\n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^A-Za-z]', '', word)\n        word = word.lower()\n        counter = Counter(word)\n        return all(val == counter[word[0]] for val in counter.values())\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input string is not empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert the word to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Use Counter to count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(r\"[^a-zA-Z]\", \"\", word.lower())\n        \n        # Count the frequency of each letter in the word\n        letter_count = Counter(word)\n        \n        # Check if each letter appears the same number of times\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    if len(set(counts.values())) == 1:\n        return True\n    else:\n        return False\n```\nIn the above solution, we first check if the input is a string and not empty. If it is not a string or if it is an empty string, we return False. \n\nThen we remove any non-letter characters from the input and convert it to lowercase. We use the `re.sub` function from the `re` module to replace all non-letter characters with an empty string.\n\nNext, we use the `Counter` class from the `collections` module to count the occurrences of each letter in the modified input string.\n\nFinally, we check if all the counts are the same. We convert the values of the `Counter` object to a set and check if the length of the set is 1. If it is, then all the counts are the same, and we return True. Otherwise, we return False.",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if input is not empty\n    if not word:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    if len(set(letter_counts.values())) > 1:\n        return False\n\n    return True",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return all(count == counts[word[0]] for count in counts.values())",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all letter counts are the same\n    first_count = next(iter(letter_counts.values()))\n    for count in letter_counts.values():\n        if count != first_count:\n            return False\n    \n    return True",
            "def is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the occurrences of each letter\n    count = Counter(word)\n    \n    # check if each letter appears the same number of times\n    if len(set(count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    freq = Counter(word)\n    \n    return len(set(freq.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # check if the string is empty\n    if word == \"\":\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    clean_word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    letter_count = Counter(clean_word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Count the occurrence of each letter in the word\n    counts = Counter(word)\n    \n    # Check if all the counts are the same\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1"
        ],
        "4": [
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or not word:\n        return False\n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or word == '':\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    counts = Counter(word)\n    \n    if len(counts) == 0:\n        return False\n    \n    if len(set(counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if not word:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters and make the word case insensitive\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # count the frequency of each letter in the word\n    letter_count = Counter(word)\n    \n    # check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert the string to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert the string to lowercase\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub(r'[^a-z]', '', word)\n    \n    # count the number of occurrences of each letter\n    letter_count = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return all(count == letter_count[word[0]] for count in letter_count.values())",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^A-Za-z]+', '', word)\n        count = Counter(word.lower())\n        return all(count[c] == count[word[0].lower()] for c in word.lower())\n    else:\n        return False",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase for case insensitivity\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-z]', '', word)\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "```python\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1\n```",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the occurrence of each letter in the cleaned word\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all the letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    letter_count = Counter(word)\n    \n    for count in letter_count.values():\n        if count != letter_count[word[0]]:\n            return False\n        \n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n        word = word.lower()\n        letter_count = Counter(word)\n        if len(letter_count) == 0:\n            return True\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    letter_count = Counter(word)\n    max_count = max(letter_count.values())\n    min_count = min(letter_count.values())\n    \n    return max_count == min_count",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    count = Counter(word)\n    for val in count.values():\n        if val != count[word[0]]:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1"
        ]
    },
    "1": {
        "0": [
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        # Count the occurrences of each letter\n        letter_counts = Counter(word)\n        # Check if each letter appears the same number of times\n        return all(count == letter_counts[word[0]] for count in letter_counts.values())\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # check if input is empty\n    if len(word) == 0:\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n\n    # count the frequency of each letter\n    count = Counter(word)\n\n    # check if all letters have the same frequency\n    return all(count[letter] == count[word[0]] for letter in count)",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    # Check if the input is a string and not empty\n    if not isinstance(word, str) or not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter\n    counts = Counter(word)\n    \n    # Check if any letter appears more than once\n    if any(count > 1 for count in counts.values()):\n        return False\n    \n    return True",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    counts = set(letter_counts.values())\n    if len(counts) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    counter = Counter(word)\n    return len(counter.values()) == 1\n\nprint(is_isogram(\"isogram\"))\nprint(is_isogram(\"python\"))\nprint(is_isogram(\"Hello\"))\nprint(is_isogram(\"aabba\"))\nprint(is_isogram(\"\"))",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    \n    return all(count == counter[word[0]] for count in counter.values())",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    \n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    letter_counts = Counter(word)\n\n    return len(letter_counts) == 1\n\nprint(is_isogram(\"isogram\")) # True\nprint(is_isogram(\"word\")) # False\nprint(is_isogram(\"word-word\")) # True\nprint(is_isogram(\"123456\")) # False\nprint(is_isogram(\"\")) # False\nprint(is_isogram(None)) # False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        # Count the occurrences of each letter\n        letter_count = Counter(word)\n        # Check if all letter counts are the same\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    \n    letter_counts = Counter(word)\n    \n    return len(letter_counts.values()) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = word.lower()\n        word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n        char_count = Counter(word)\n        return len(char_count.values()) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word)\n        word = word.lower()\n        count = Counter(word)\n        if all(val == count[word[0]] for val in count.values()):\n            return True\n    return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1"
        ],
        "1": [
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase and remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Check if each letter appears the same number of times\n    letter_count = Counter(word)\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        count = Counter(word)\n        return all(value == count[word[0]] for value in count.values())\n    return False",
            "def is_isogram(word):\n\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n\n    letter_count = Counter(word)\n\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    count = Counter(word)\n    return len(count.values()) == 1",
            "def is_isogram(word):\n    # Check if input is a string and is not empty\n    if not isinstance(word, str) or not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_count = Counter(cleaned_word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    counts = Counter(word)\n    values = list(counts.values())\n    \n    return all(x == values[0] for x in values)",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n    word = word.lower()\n    word_count = Counter(word)\n    if len(set(word_count.values())) == 1:\n        return True\n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    letters = re.findall(r'[a-z]', word.lower())\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^A-Za-z]+', '', word)\n    word = word.lower()\n    char_count = Counter(word)\n    return all(count == char_count[word[0]] for count in char_count.values())",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    \n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        count = Counter(word)\n        return len(set(count.values())) == 1\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase and remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if all counts are the same\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    \n    return all(count == counts[word[0]] for count in counts.values())",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the occurrence of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == '':\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1"
        ],
        "2": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n\n    counts = Counter(word)\n    values = list(counts.values())\n    return all(value == values[0] for value in values)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    count = Counter(word)\n    return len(count) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if string is empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lower case\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    counter = Counter(word)\n    return all(count == counter[word[0]] for count in counter.values())",
            "def is_isogram(word):\n\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Use Counter to count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n\n    # Ignore non-letter characters and convert the word to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n\n    # Check if all the letter counts are the same\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub('[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    \n    return all(counts[char] == counts[word[0]] for char in word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    count = Counter(word)\n    \n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert the word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if word == \"\":\n        return False\n\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n\n    letter_counts = Counter(word)\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if input is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # count the frequency of each letter\n    counter = Counter(word)\n    \n    # check if all the frequencies are the same\n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(r'\\W+', '', word.lower())\n        letter_count = Counter(word)\n        return all(count == letter_count[word[0]] for count in letter_count.values())\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)  # remove non-letter characters\n    word = word.lower()  # convert all letters to lowercase\n    \n    counter = Counter(word)  # count the occurrence of each letter\n    \n    # check if each letter appears the same number of times\n    return all(count == list(counter.values())[0] for count in counter.values())",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word.lower())\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n\n    # check if word is not empty\n    if len(word) == 0:\n        return False\n\n    # convert word to lowercase\n    word = word.lower()\n\n    # remove non-letter characters\n    word = re.sub(\"[^a-z]\", \"\", word)\n\n    # count the frequency of each letter in the word\n    letter_count = Counter(word)\n\n    # check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word_count = Counter(word)\n    return len(set(word_count.values())) == 1",
            "def is_isogram(word):\n    if type(word) is not str or word == '':\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    word_counts = Counter(word)\n    \n    return len(set(word_counts.values())) == 1"
        ],
        "3": [
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^A-Za-z]', '', word)\n        word = word.lower()\n        counter = Counter(word)\n        return all(val == counter[word[0]] for val in counter.values())\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input string is not empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert the word to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Use Counter to count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(r\"[^a-zA-Z]\", \"\", word.lower())\n        \n        # Count the frequency of each letter in the word\n        letter_count = Counter(word)\n        \n        # Check if each letter appears the same number of times\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    if len(set(counts.values())) == 1:\n        return True\n    else:\n        return False\n```\nIn the above solution, we first check if the input is a string and not empty. If it is not a string or if it is an empty string, we return False. \n\nThen we remove any non-letter characters from the input and convert it to lowercase. We use the `re.sub` function from the `re` module to replace all non-letter characters with an empty string.\n\nNext, we use the `Counter` class from the `collections` module to count the occurrences of each letter in the modified input string.\n\nFinally, we check if all the counts are the same. We convert the values of the `Counter` object to a set and check if the length of the set is 1. If it is, then all the counts are the same, and we return True. Otherwise, we return False.",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if input is not empty\n    if not word:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    if len(set(letter_counts.values())) > 1:\n        return False\n\n    return True",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return all(count == counts[word[0]] for count in counts.values())",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all letter counts are the same\n    first_count = next(iter(letter_counts.values()))\n    for count in letter_counts.values():\n        if count != first_count:\n            return False\n    \n    return True",
            "def is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the occurrences of each letter\n    count = Counter(word)\n    \n    # check if each letter appears the same number of times\n    if len(set(count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    freq = Counter(word)\n    \n    return len(set(freq.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # check if the string is empty\n    if word == \"\":\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    clean_word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    letter_count = Counter(clean_word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Count the occurrence of each letter in the word\n    counts = Counter(word)\n    \n    # Check if all the counts are the same\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string and not empty\n    if isinstance(word, str) and word:\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        # Count the number of occurrences of each letter\n        letter_counts = Counter(word)\n        # Check if all the letter counts are the same\n        return all(count == letter_counts[word[0]] for count in letter_counts.values())\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string and not empty\n    if isinstance(word, str) and word:\n        # Ignore non-letter characters and convert to lowercase\n        cleaned_word = re.sub('[^a-zA-Z]', '', word).lower()\n        # Count the occurrences of each letter\n        letter_counts = Counter(cleaned_word)\n        # Check if all the letter counts are the same\n        return len(set(letter_counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == '':\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all the letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Remove non-letter characters and convert to lower case\n    clean_word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrence of each letter\n    letter_count = Counter(clean_word)\n\n    # Check if all letters have the same count\n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if the number of occurrences of each letter is the same\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if string is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert string to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if string is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False"
        ],
        "4": [
            "def is_isogram(word):\n    # Check if input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert the string to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert the string to lowercase\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub(r'[^a-z]', '', word)\n    \n    # count the number of occurrences of each letter\n    letter_count = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return all(count == letter_count[word[0]] for count in letter_count.values())",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^A-Za-z]+', '', word)\n        count = Counter(word.lower())\n        return all(count[c] == count[word[0].lower()] for c in word.lower())\n    else:\n        return False",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase for case insensitivity\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-z]', '', word)\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "```python\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1\n```",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the occurrence of each letter in the cleaned word\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all the letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    letter_count = Counter(word)\n    \n    for count in letter_count.values():\n        if count != letter_count[word[0]]:\n            return False\n        \n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n        word = word.lower()\n        letter_count = Counter(word)\n        if len(letter_count) == 0:\n            return True\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    count = Counter(word)\n    for val in count.values():\n        if val != count[word[0]]:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = re.sub(\"[^a-zA-Z]\", \"\", word)\n    word = word.lower()\n    count = Counter(word)\n    return all(count[ch] == count[word[0]] for ch in count)",
            "from collections import Counter\n\ndef is_isogram(word):\n    if type(word) is not str or word == '':\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^A-Za-z]', '', word)\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) <= 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = word.lower() # convert to lowercase\n    \n    word = re.sub('[^a-z]', '', word) # remove non-letter characters\n    \n    counts = Counter(word) # count the occurrences of each letter\n    \n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    count = Counter(word)\n    \n    return all(val == count[word[0]] for val in count.values())",
            "def is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # convert word to lowercase for case insensitive comparison\n    word = word.lower()\n    \n    # count the occurrence of each letter\n    letter_count = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n\n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())"
        ]
    },
    "2": {
        "0": [
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    letter_counts = Counter(word)\n\n    return len(letter_counts) == 1\n\nprint(is_isogram(\"isogram\")) # True\nprint(is_isogram(\"word\")) # False\nprint(is_isogram(\"word-word\")) # True\nprint(is_isogram(\"123456\")) # False\nprint(is_isogram(\"\")) # False\nprint(is_isogram(None)) # False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        # Count the occurrences of each letter\n        letter_count = Counter(word)\n        # Check if all letter counts are the same\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    \n    letter_counts = Counter(word)\n    \n    return len(letter_counts.values()) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = word.lower()\n        word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n        char_count = Counter(word)\n        return len(char_count.values()) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word)\n        word = word.lower()\n        count = Counter(word)\n        if all(val == count[word[0]] for val in count.values()):\n            return True\n    return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        if len(set(counts.values())) == 1:\n            return True\n    return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]\", \"\", word)\n        word = word.lower()\n        counts = Counter(word)\n        if len(set(counts.values())) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False",
            "def is_isogram(word):\n\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lower case\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # convert all letters to lowercase and remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # check if all letters have the same frequency\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counts = Counter(word)\n    return len(set(counts.values())) <= 1\n```"
        ],
        "1": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^A-Za-z]+', '', word)\n    word = word.lower()\n    char_count = Counter(word)\n    return all(count == char_count[word[0]] for count in char_count.values())",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    \n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        count = Counter(word)\n        return len(set(count.values())) == 1\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase and remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if all counts are the same\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    \n    return all(count == counts[word[0]] for count in counts.values())",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the occurrence of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == '':\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Check if the word is an isogram\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # check if all letters have the same count\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # check if each letter appears the same number of times\n    counter = Counter(word)\n    if len(set(counter.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower()) # Remove non-letter characters and convert to lowercase\n    \n    letter_counts = Counter(word)\n    \n    return len(letter_counts.values()) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n    \n    return len(letter_count) == 0 or len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != '':\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        return len(set(word)) == len(word)\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n        word = word.lower()\n        count = Counter(word)\n        return len(count.values()) == 1\n    return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # convert the word to lowercase and remove non-letter characters\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        # count the occurrence of each letter in the word\n        counts = Counter(word)\n        # check if all counts are equal\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the number of occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if word == \"\":\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n\nprint(is_isogram(\"hello\"))\nprint(is_isogram(\"Helloworld\"))\nprint(is_isogram(\"AbcdEfghIjklmNopqrstuVwxyz\"))\nprint(is_isogram(\"abbbccdde\"))\nprint(is_isogram(\"AbC-dEf-GhI\"))",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    letters = re.findall('[a-zA-Z]', word.lower())\n    letter_counts = Counter(letters)\n    return len(set(letter_counts.values())) == 1\n\nprint(is_isogram(\"hello\"))",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str or word == '':\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n\n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    count = Counter(word)\n    \n    return all(count[ch] == count[word[0]] for ch in count)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    count = Counter(word)\n    \n    return len(count.values()) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    counter = Counter(word)\n    return all(count == counter[word[0]] for count in counter.values())",
            "```python\ndef is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    word_count = Counter(word)\n    return len(word_count) == 1\n```"
        ],
        "2": [
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n\n    # Ignore non-letter characters and convert the word to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n\n    # Check if all the letter counts are the same\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub('[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    \n    return all(counts[char] == counts[word[0]] for char in word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    count = Counter(word)\n    \n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert the word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if word == \"\":\n        return False\n\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n\n    letter_counts = Counter(word)\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if input is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # count the frequency of each letter\n    counter = Counter(word)\n    \n    # check if all the frequencies are the same\n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(r'\\W+', '', word.lower())\n        letter_count = Counter(word)\n        return all(count == letter_count[word[0]] for count in letter_count.values())\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)  # remove non-letter characters\n    word = word.lower()  # convert all letters to lowercase\n    \n    counter = Counter(word)  # count the occurrence of each letter\n    \n    # check if each letter appears the same number of times\n    return all(count == list(counter.values())[0] for count in counter.values())",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word.lower())\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n\n    # check if word is not empty\n    if len(word) == 0:\n        return False\n\n    # convert word to lowercase\n    word = word.lower()\n\n    # remove non-letter characters\n    word = re.sub(\"[^a-z]\", \"\", word)\n\n    # count the frequency of each letter in the word\n    letter_count = Counter(word)\n\n    # check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word_count = Counter(word)\n    return len(set(word_count.values())) == 1",
            "def is_isogram(word):\n    if type(word) is not str or word == '':\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    word_counts = Counter(word)\n    \n    return len(set(word_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if word == \"\":\n        return False\n    \n    word = re.sub(\"[^a-zA-Z]\", \"\", word)\n    word = word.lower()\n    \n    count = Counter(word)\n    \n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    clean_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(clean_word)\n    \n    # Check if any letter appears more than once\n    for count in letter_count.values():\n        if count > 1:\n            return False\n    \n    return True",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase and remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # check if each letter appears the same number of times\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if each letter appears the same number of times\n    letter_count = Counter(word)\n    if len(set(letter_count.values())) > 1:\n        return False\n    \n    return True",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1"
        ],
        "3": [
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if input is not empty\n    if not word:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    if len(set(letter_counts.values())) > 1:\n        return False\n\n    return True",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return all(count == counts[word[0]] for count in counts.values())",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all letter counts are the same\n    first_count = next(iter(letter_counts.values()))\n    for count in letter_counts.values():\n        if count != first_count:\n            return False\n    \n    return True",
            "def is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the occurrences of each letter\n    count = Counter(word)\n    \n    # check if each letter appears the same number of times\n    if len(set(count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    freq = Counter(word)\n    \n    return len(set(freq.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # check if the string is empty\n    if word == \"\":\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    clean_word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    letter_count = Counter(clean_word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Count the occurrence of each letter in the word\n    counts = Counter(word)\n    \n    # Check if all the counts are the same\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string and not empty\n    if isinstance(word, str) and word:\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        # Count the number of occurrences of each letter\n        letter_counts = Counter(word)\n        # Check if all the letter counts are the same\n        return all(count == letter_counts[word[0]] for count in letter_counts.values())\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string and not empty\n    if isinstance(word, str) and word:\n        # Ignore non-letter characters and convert to lowercase\n        cleaned_word = re.sub('[^a-zA-Z]', '', word).lower()\n        # Count the occurrences of each letter\n        letter_counts = Counter(cleaned_word)\n        # Check if all the letter counts are the same\n        return len(set(letter_counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == '':\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all the letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "```python\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    count = Counter(word.lower())\n    \n    return len(set(count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if the number of occurrences of each letter is the same\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if string is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert string to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if string is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n\n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n\n    # Convert word to lowercase\n    word = word.lower()\n\n    # Count the occurrences of each letter\n    count = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return len(set(count.values())) == 1"
        ],
        "4": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    letter_count = Counter(word)\n    \n    for count in letter_count.values():\n        if count != letter_count[word[0]]:\n            return False\n        \n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n        word = word.lower()\n        letter_count = Counter(word)\n        if len(letter_count) == 0:\n            return True\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    count = Counter(word)\n    for val in count.values():\n        if val != count[word[0]]:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = re.sub(\"[^a-zA-Z]\", \"\", word)\n    word = word.lower()\n    count = Counter(word)\n    return all(count[ch] == count[word[0]] for ch in count)",
            "from collections import Counter\n\ndef is_isogram(word):\n    if type(word) is not str or word == '':\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^A-Za-z]', '', word)\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) <= 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    count = Counter(word)\n    \n    for val in count.values():\n        if val != count[word[0]]:\n            return False\n    \n    return True",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    count = Counter(word)\n    \n    return all(val == count[word[0]] for val in count.values())",
            "def is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is not empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    letter_count = Counter(cleaned_word)\n    \n    # check if all letter counts are equal\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n\n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Use Counter to count the occurrences of each letter\n    letter_count = Counter(cleaned_word)\n    \n    # Check if all letter counts are the same\n    return all(count == letter_count[cleaned_word[0]] for count in letter_count.values())",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n\n    word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n    word = word.lower()\n    counter = Counter(word)\n    counts = list(counter.values())\n    return all(count == counts[0] for count in counts)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    # Remove non-letter characters and convert to lower case\n    cleaned_word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # Use Counter to count the number of occurrences of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all letters have the same count\n    return all(count == letter_counts[cleaned_word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    # Check if input is a string\n    if type(word) != str:\n        return False\n\n    # Check if string is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    # Use Counter to count the occurrences of each letter\n    letter_count = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str):\n        if len(word) > 0:\n            word = re.sub(r'[^a-zA-Z]', '', word)\n            word = word.lower()\n            count = Counter(word)\n            return len(set(count.values())) == 1\n        else:\n            return False\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if the frequency of each letter is the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str): # check if word is a string\n        return False\n    if len(word) == 0: # check if word is empty\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower()) # remove non-letter characters and convert to lowercase\n    letter_counts = Counter(word) # count the occurrence of each letter\n    return len(set(letter_counts.values())) == 1 # check if all letter counts are the same",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) is not str:\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase for case-insensitive comparison\n    word = word.lower()\n    \n    # Remove non-letter characters using regular expression\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False"
        ]
    }
}