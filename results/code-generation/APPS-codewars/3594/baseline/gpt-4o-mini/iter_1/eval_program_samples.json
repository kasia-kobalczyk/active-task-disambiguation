{
    "0": {
        "0": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```"
        ],
        "1": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    return len(set(filtered_word)) == len(filtered_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(char.lower() for char in word if char.isalpha())\n    if not word:\n        return False\n\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```"
        ],
        "2": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    if not cleaned_word:\n        return False\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    return len(set(filtered_word)) == len(filtered_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(cleaned_word)) == len(cleaned_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(c.lower() for c in word if c.isalpha())\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    count = Counter(word)\n    \n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    return len(set(filtered_word)) == len(filtered_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```"
        ],
        "3": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(c.lower() for c in word if c.isalpha())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(cleaned_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    if len(filtered_word) == 0:\n        return False\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```"
        ],
        "4": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    count = Counter(word)\n    \n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    char_count = Counter(cleaned_word)\n    \n    return len(set(char_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(c.lower() for c in word if c.isalpha())\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    if len(filtered_word) == 0:\n        return False\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    \n    if len(cleaned_word) == 0:\n        return False\n    \n    letter_count = Counter(cleaned_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(c.lower() for c in word if c.isalpha())\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    \n    counts = list(letter_count.values())\n    return all(count == counts[0] for count in counts)\n```"
        ],
        "1": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    if not word:\n        return False\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(char.lower() for char in word if char.isalpha())\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(cleaned_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```"
        ],
        "2": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(c.lower() for c in word if c.isalpha())\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    count = Counter(word)\n    \n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = [char.lower() for char in word if char.isalpha()]\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(char.lower() for char in word if char.isalpha())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```"
        ],
        "3": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    count = Counter(cleaned_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    cleaned_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(cleaned_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = [char.lower() for char in word if char.isalpha()]\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```"
        ],
        "4": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    char_count = Counter(cleaned_word)\n    \n    return len(set(char_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    if len(filtered_word) == 0:\n        return False\n    \n    letter_counts = Counter(filtered_word)\n    counts = list(letter_counts.values())\n    return all(count == counts[0] for count in counts)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    count = Counter(cleaned_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    count = Counter(filtered_word)\n    \n    return len(set(count.values())) == 1\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    return len(set(cleaned_word)) == len(cleaned_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(c.lower() for c in word if c.isalpha())\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(cleaned_word)) == len(cleaned_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    \n    counts = list(letter_count.values())\n    return all(count == counts[0] for count in counts)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(filtered_word)) == len(filtered_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(filtered_word)\n    counts = list(letter_counts.values())\n    return all(count == counts[0] for count in counts)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```"
        ],
        "1": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(cleaned_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    if not filtered_word:\n        return False\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(cleaned_word)) == len(cleaned_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```"
        ],
        "2": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    return len(set(filtered_word)) == len(filtered_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(char.lower() for char in word if char.isalpha())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(filtered_word)) == len(filtered_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    return len(set(filtered_word)) == len(filtered_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    return len(set(filtered_word)) == len(filtered_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    return len(set(filtered_word)) == len(filtered_word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    count = Counter(filtered_word)\n    \n    return len(set(count.values())) == 1\n```"
        ],
        "3": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(cleaned_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    char_count = Counter(filtered_word)\n    return len(set(char_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    cleaned_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(cleaned_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```"
        ],
        "4": [
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(filtered_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    if len(word) == 0:\n        return False\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    count = Counter(cleaned_word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    if len(word) == 0:\n        return False\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(filtered_word)\n    \n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(cleaned_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    counts = Counter(cleaned_word)\n    return len(set(counts.values())) == 1\n```"
        ]
    }
}