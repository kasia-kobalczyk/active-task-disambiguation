{
    "0": {
        "0": [
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)"
        ],
        "1": [
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\" or word == None:\n        return False\n    word = word.lower()\n    word = re.sub('[\\W_]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)"
        ],
        "2": [
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)"
        ],
        "3": [
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False"
        ],
        "4": [
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word):    \n    if not isinstance(word, str) or not word: return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)"
        ]
    },
    "1": {
        "0": [
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(Counter(word)) == 1 or len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False \n    word = re.sub(r'\\W+', '', word).lower() \n    return len(set(word)) == len(word)"
        ],
        "1": [
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    return len(set(word)) == len(word)",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    return False"
        ],
        "2": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True"
        ],
        "3": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True"
        ],
        "4": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True"
        ]
    },
    "2": {
        "0": [
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)"
        ],
        "1": [
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    word = word.lower()\n    word = re.sub(r'\\W+', '', word)\n    if len(word) == 0:\n        return False\n    if len(set(word)) == len(word):\n        return True\n    else:\n        return False",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)",
            "def is_isogram(word): \n    if not isinstance(word, str) or len(word.strip()) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    return len(set(word)) == len(word)"
        ],
        "2": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    if len(set(word)) != len(word):\n        return False\n    else:\n        return True",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1"
        ],
        "3": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    if len(set(word)) == len(word):\n        return True\n    return False",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1"
        ],
        "4": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word): \n    if not isinstance(word, str) or word == \"\" or word == \" \":\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    word_counts = Counter(word)\n    for count in word_counts.values():\n        if count > 1:\n            return False\n    return True",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word): \n    if not isinstance(word, str) or not word.isalpha(): \n        return False \n    word = word.lower() \n    letter_count = Counter(re.sub('[^a-z]', '', word)) \n    return len(set(letter_count.values())) == 1"
        ]
    }
}