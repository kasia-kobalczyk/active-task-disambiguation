{
    "0": {
        "0": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1"
        ],
        "1": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1"
        ],
        "2": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    freq = counter.most_common(1)[0][1]\n    for count in counter.values():\n        if count != freq:\n            return False\n    return True",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1"
        ],
        "3": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1"
        ],
        "4": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    letters = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1"
        ]
    },
    "1": {
        "0": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1"
        ],
        "1": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1"
        ],
        "2": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1"
        ],
        "3": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1"
        ],
        "4": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-z]', '', word.casefold())\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    letters = re.sub(r'[^a-z]', '', word.lower())\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    letters = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1"
        ]
    },
    "2": {
        "0": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    letters = re.sub('[^a-z]', '', word.casefold())\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1"
        ],
        "1": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    letters = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(letters)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    letters = re.sub('[^a-z]', '', word.casefold())\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1"
        ],
        "2": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub('[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    letters = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(letters)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    freq = counter.most_common(1)[0][1]\n    return all(val == freq for val in counter.values())",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    letters = re.sub('[^a-zA-Z]', '', word).lower()\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1"
        ],
        "3": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    letters = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(letters)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    freq = counter.most_common(1)[0][1]\n    return all(count == freq for count in counter.values())",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    letters = re.sub('[^a-z]', '', word.casefold())\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1"
        ],
        "4": [
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    letters = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[\\W_]+', '', word).lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counter = Counter(cleaned_word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'\\W+', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    letters = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(letters)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    letters = re.sub('[^a-z]', '', word.casefold())\n    counter = Counter(letters)\n    return len(set(counter.values())) == 1"
        ]
    }
}