{
    "0": {
        "0": [
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if word == \"\":\n        return False\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub(\"[^a-z]\", \"\", word)\n    \n    # Count the number of occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]+', '', word)\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != '':\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^A-Za-z]', '', word)\n    word = word.lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(r'[^a-zA-Z]', '', word).lower()\n        count = Counter(word)\n        return all(count[char] == count[word[0]] for char in word)\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert all letters to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letters appear the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # Count the frequency of each letter\n    frequency = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(frequency.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    counts = Counter(word)\n    \n    # Check if all letters have the same frequency\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string and is not empty\n    if not isinstance(word, str) or word == '':\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        # Count the occurrences of each letter\n        letter_counts = Counter(word)\n        # Check if each letter appears the same number of times\n        return all(count == letter_counts[word[0]] for count in letter_counts.values())\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # check if input is empty\n    if len(word) == 0:\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n\n    # count the frequency of each letter\n    count = Counter(word)\n\n    # check if all letters have the same frequency\n    return all(count[letter] == count[word[0]] for letter in count)",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    # Check if the input is a string and not empty\n    if not isinstance(word, str) or not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter\n    counts = Counter(word)\n    \n    # Check if any letter appears more than once\n    if any(count > 1 for count in counts.values()):\n        return False\n    \n    return True",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    counts = set(letter_counts.values())\n    if len(counts) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    counter = Counter(word)\n    return len(counter.values()) == 1\n\nprint(is_isogram(\"isogram\"))\nprint(is_isogram(\"python\"))\nprint(is_isogram(\"Hello\"))\nprint(is_isogram(\"aabba\"))\nprint(is_isogram(\"\"))",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    \n    return all(count == counter[word[0]] for count in counter.values())",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    \n    count = Counter(word)\n    return len(set(count.values())) == 1"
        ],
        "1": [
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    letters = re.findall('[a-zA-Z]', word)\n    counter = Counter(letters)\n    return len(counter.values()) == 1",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    count = Counter(word)\n    return len(count.values()) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1\n\nprint(is_isogram('1234567890'))",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(cleaned_word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    count = Counter(word)\n\n    return len(count.values()) == 1\n\nassert is_isogram('1234567890') == False",
            "from collections import Counter\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if each letter appears the same number of times\n    counts = Counter(word)\n    if len(set(counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n\n    if not word:\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n\n    counts = Counter(word).values()\n\n    return len(set(counts)) == 1",
            "```python\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```\nThis solution first checks if the input is a string. If not, it returns False. Then, it checks if the length of the word is 0. If it is, it returns False. The `re.sub` function removes all non-letter characters from the word and converts it to lowercase. Then, the `Counter` function is used to count the occurrences of each letter in the word. Finally, the solution returns True if all the letter counts are the same, and False otherwise.",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    letter_count = Counter(word)\n    return len(letter_count) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        letter_count = Counter(word)\n        if len(letter_count) == 0:\n            return False\n        else:\n            return all(count == letter_count[word[0]] for count in letter_count.values())\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the number of occurrences of each letter\n    letter_count = Counter(word)\n    \n    # check if all letters appear the same number of times\n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Check if the count of each letter in the word is the same\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are equal\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Create a counter object for the characters in the word\n    counter = Counter(word)\n    \n    # Check if each character appears the same number of times\n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lower case\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        \n        # Count the occurrence of each letter\n        letter_counts = Counter(word)\n        \n        # Check if all letter counts are the same\n        return len(set(letter_counts.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Check if all letters appear the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n\n    cleaned_word = re.sub('[^A-Za-z]+', '', word).lower()\n    letter_counts = Counter(cleaned_word).values()\n\n    return len(set(letter_counts)) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False"
        ],
        "2": [
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(cleaned_word)\n    \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if not word:\n        return False\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if string is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert string to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-z]', '', word)\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are equal\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str or len(word) == 0:\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word.lower())\n    letter_count = Counter(word)\n    \n    return len(letter_count.values()) == 1",
            "def is_isogram(word):\n    if type(word) != str or word == '':\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n\n    counts = Counter(word)\n    values = list(counts.values())\n    return len(set(values)) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Use Counter to count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Case-insensitive\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]+', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    values = set(counter.values())\n    if len(values) == 1:\n        return True\n    return False",
            "def is_isogram(word):\n    if isinstance(word, str):\n        # remove non-letter characters and convert to lowercase\n        clean_word = re.sub('[^a-zA-Z]', '', word).lower()\n        \n        # check if each letter appears the same number of times\n        letter_counts = Counter(clean_word)\n        if len(set(letter_counts.values())) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^A-Za-z]+', '', word)\n    counter = Counter(word.lower())\n    if len(set(counter.values())) == 1:\n        return True\n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    \n    return len(counts.values()) == 1",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters\n    word = re.sub(\"[^a-zA-Z]\", \"\", word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counter = Counter(word)\n    \n    if len(set(counter.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the word is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters appear the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    # Removing non-letter characters and converting to lowercase\n    clean_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Counting the frequency of each letter\n    counts = Counter(clean_word)\n    \n    # Checking if any letter appears a different number of times than the others\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input string is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Count the frequency of each letter\n    count = Counter(word)\n    \n    # Check if all letters appear the same number of times\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):  # check if input is a string\n        return False\n    if len(word) == 0:  # check if the string is empty\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word)  # remove non-letter characters\n    word = word.lower()  # convert string to lowercase\n\n    letter_counts = Counter(word)  # count the occurrences of each letter\n\n    return len(set(letter_counts.values())) == 1  # check if all letter counts are the same",
            "def is_isogram(word):\n    if not isinstance(word, str):  # Check if word is a string\n        return False\n    if word == \"\":  # Check if word is empty\n        return False\n    \n    # Remove non-letter characters and convert word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter in the word\n    counts = Counter(word)\n    \n    # Check if all letter frequencies are equal\n    return len(set(counts.values())) == 1"
        ],
        "3": [
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    \n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase and remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n\nprint(is_isogram('1234567890'))\nprint(is_isogram('HelloWorld'))\nprint(is_isogram('abcABC'))",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    \n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert the string to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    count = Counter(word)\n    \n    return len(set(count.values())) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all the letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "```python\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1\n```",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    counter = Counter(word.lower())\n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub('[^A-Za-z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if type(word) is not str or word == '':\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    counter = Counter(word)\n    counts = list(counter.values())\n    return len(set(counts)) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is not empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    letter_count = Counter(cleaned_word)\n    \n    # check if all letter counts are equal\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    word = word.lower()\n    \n    counter = Counter(word)\n    \n    counts = list(counter.values())\n    \n    if len(set(counts)) == 1:\n        return True\n    \n    return False"
        ],
        "4": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    \n    letter_counts = Counter(word)\n    \n    if len(letter_counts) == 0:\n        return False\n    \n    first_count = list(letter_counts.values())[0]\n    \n    for count in letter_counts.values():\n        if count != first_count:\n            return False\n    \n    return True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters and convert all letters to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub(r'[^A-Za-z]', '', word)\n    \n    # Convert all letters to lower case\n    word = word.lower()\n    \n    # Count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    counter = Counter(word)\n    \n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    count = Counter(word)\n    \n    return len(set(count.values())) == 1\n\nprint(is_isogram('1234567890')) # False\nprint(is_isogram('HelloWorld')) # False\nprint(is_isogram('abcABC')) # True\n\nprint(is_isogram('abcabc')) # True",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    if len(set(counts.values())) == 1:\n        return True\n    \n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # count the occurrences of each letter\n    counts = Counter(word)\n    \n    # check if all counts are the same\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub(r\"[^a-zA-Z]+\", \"\", word)\n    word = word.lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the word is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert all characters to lowercase for case insensitivity\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if all letters have the same count\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert the string to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter in the string\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if input is not empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # check if all frequencies are equal\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lower case\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if the number of occurrences of each letter is the same\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all letter frequencies are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())  # remove non-letter characters and convert to lowercase\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    counter = Counter(word.lower())\n    \n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # check if the string is empty\n    if len(word) == 0:\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # count the number of occurrences of each letter\n    letter_count = Counter(word)\n\n    # check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the number of occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]+', '', word)\n    word = word.lower()\n    \n    counter = Counter(word)\n    letter_counts = list(counter.values())\n    \n    if len(set(letter_counts)) == 1:\n        return True\n    \n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter in the cleaned word\n    letter_count = Counter(cleaned_word)\n    \n    # Check if all letters have the same frequency\n    return len(set(letter_count.values())) == 1"
        ]
    },
    "1": {
        "0": [
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        # Count the occurrences of each letter\n        letter_counts = Counter(word)\n        # Check if each letter appears the same number of times\n        return all(count == letter_counts[word[0]] for count in letter_counts.values())\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n\n    # check if input is empty\n    if len(word) == 0:\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n\n    # count the frequency of each letter\n    count = Counter(word)\n\n    # check if all letters have the same frequency\n    return all(count[letter] == count[word[0]] for letter in count)",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return all(count == letter_counts[word[0]] for count in letter_counts.values())",
            "def is_isogram(word):\n    # Check if the input is a string and not empty\n    if not isinstance(word, str) or not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter\n    counts = Counter(word)\n    \n    # Check if any letter appears more than once\n    if any(count > 1 for count in counts.values()):\n        return False\n    \n    return True",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    counts = set(letter_counts.values())\n    if len(counts) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    counter = Counter(word)\n    return len(counter.values()) == 1\n\nprint(is_isogram(\"isogram\"))\nprint(is_isogram(\"python\"))\nprint(is_isogram(\"Hello\"))\nprint(is_isogram(\"aabba\"))\nprint(is_isogram(\"\"))",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    \n    return all(count == counter[word[0]] for count in counter.values())",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    \n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    letter_counts = Counter(word)\n\n    return len(letter_counts) == 1\n\nprint(is_isogram(\"isogram\")) # True\nprint(is_isogram(\"word\")) # False\nprint(is_isogram(\"wordd\")) # False\nprint(is_isogram(\"WorD\")) # True\nprint(is_isogram(\"wordd-\")) # False\nprint(is_isogram(\"\")) # False\nprint(is_isogram(123)) # False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        # Count the occurrences of each letter\n        letter_count = Counter(word)\n        # Check if all letter counts are the same\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    \n    letter_counts = Counter(word)\n    \n    return len(letter_counts.values()) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = word.lower()\n        word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n        char_count = Counter(word)\n        return len(char_count.values()) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word)\n        word = word.lower()\n        count = Counter(word)\n        if all(val == count[word[0]] for val in count.values()):\n            return True\n    return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1"
        ],
        "1": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    return len(set(counter.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n\n    if not word:\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n\n    counts = Counter(word).values()\n\n    return len(set(counts)) == 1",
            "```python\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```\nThis solution first checks if the input is a string. If not, it returns False. Then, it checks if the length of the word is 0. If it is, it returns False. The `re.sub` function removes all non-letter characters from the word and converts it to lowercase. Then, the `Counter` function is used to count the occurrences of each letter in the word. Finally, the solution returns True if all the letter counts are the same, and False otherwise.",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    letter_count = Counter(word)\n    return len(letter_count) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        letter_count = Counter(word)\n        if len(letter_count) == 0:\n            return False\n        else:\n            return all(count == letter_count[word[0]] for count in letter_count.values())\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the number of occurrences of each letter\n    letter_count = Counter(word)\n    \n    # check if all letters appear the same number of times\n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Check if the count of each letter in the word is the same\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are equal\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is not empty\n    if not word:\n        return False\n\n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n\n    # Convert the word to lowercase\n    word = word.lower()\n\n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Create a counter object for the characters in the word\n    counter = Counter(word)\n    \n    # Check if each character appears the same number of times\n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lower case\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        \n        # Count the occurrence of each letter\n        letter_counts = Counter(word)\n        \n        # Check if all letter counts are the same\n        return len(set(letter_counts.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Check if all letters appear the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n\n    cleaned_word = re.sub('[^A-Za-z]+', '', word).lower()\n    letter_counts = Counter(cleaned_word).values()\n\n    return len(set(letter_counts)) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n\n    # Check if the count of each letter is the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    if len(counts) == 0:\n        return False\n    return all(count == list(counts.values())[0] for count in counts.values())",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        # remove non-letter characters and convert to lowercase\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        # create a counter of the letters in the word\n        letter_count = Counter(word)\n        # check if each letter appears the same number of times\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        count = Counter(word)\n        return len(count.values()) == 1\n    return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]+', '', word)\n        counts = Counter(word.lower())\n        return len(counts.values()) == 1\n    return False"
        ],
        "2": [
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n\n    counts = Counter(word)\n    values = list(counts.values())\n    return len(set(values)) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Use Counter to count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Case-insensitive\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]+', '', word)\n    word = word.lower()\n    counter = Counter(word)\n    values = set(counter.values())\n    if len(values) == 1:\n        return True\n    return False",
            "def is_isogram(word):\n    if isinstance(word, str):\n        # remove non-letter characters and convert to lowercase\n        clean_word = re.sub('[^a-zA-Z]', '', word).lower()\n        \n        # check if each letter appears the same number of times\n        letter_counts = Counter(clean_word)\n        if len(set(letter_counts.values())) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^A-Za-z]+', '', word)\n    counter = Counter(word.lower())\n    if len(set(counter.values())) == 1:\n        return True\n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    \n    return len(counts.values()) == 1",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters\n    word = re.sub(\"[^a-zA-Z]\", \"\", word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counter = Counter(word)\n    \n    if len(set(counter.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the word is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters appear the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    # Removing non-letter characters and converting to lowercase\n    clean_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Counting the frequency of each letter\n    counts = Counter(clean_word)\n    \n    # Checking if any letter appears a different number of times than the others\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input string is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Count the frequency of each letter\n    count = Counter(word)\n    \n    # Check if all letters appear the same number of times\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):  # check if input is a string\n        return False\n    if len(word) == 0:  # check if the string is empty\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word)  # remove non-letter characters\n    word = word.lower()  # convert string to lowercase\n\n    letter_counts = Counter(word)  # count the occurrences of each letter\n\n    return len(set(letter_counts.values())) == 1  # check if all letter counts are the same",
            "def is_isogram(word):\n    if not isinstance(word, str):  # Check if word is a string\n        return False\n    if word == \"\":  # Check if word is empty\n        return False\n    \n    # Remove non-letter characters and convert word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter in the word\n    counts = Counter(word)\n    \n    # Check if all letter frequencies are equal\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]+', '', word)\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    counts = list(letter_counts.values())\n    \n    return len(set(counts)) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    # check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lower case\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str or word == '':\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub('[^A-Za-z]', '', word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert the word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if the letter counts are all equal\n    return len(set(letter_counts.values())) == 1"
        ],
        "3": [
            "def is_isogram(word):\n    # Check if input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert the string to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    count = Counter(word)\n    \n    return len(set(count.values())) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the word is empty or contains only non-letter characters\n    if not word or not re.search('[a-zA-Z]', word):\n        return False\n    \n    # Convert the word to lowercase and count the frequency of each letter\n    word = word.lower()\n    letter_count = Counter(word)\n    \n    # Check if the count of any letter is different from the count of the first letter\n    first_count = letter_count[word[0]]\n    for count in letter_count.values():\n        if count != first_count:\n            return False\n    \n    return True",
            "```python\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1\n```",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    counter = Counter(word.lower())\n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub('[^A-Za-z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if type(word) is not str or word == '':\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    counter = Counter(word)\n    counts = list(counter.values())\n    return len(set(counts)) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is not empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    letter_count = Counter(cleaned_word)\n    \n    # check if all letter counts are equal\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    word = word.lower()\n    \n    counter = Counter(word)\n    \n    counts = list(counter.values())\n    \n    if len(set(counts)) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n\n    word = re.sub('[^A-Za-z]', '', word.lower())\n    counts = Counter(word)\n\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    # Remove non-letter characters and convert to lower case\n    cleaned_word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # Use Counter to count the number of occurrences of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all letters have the same count\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower()) # Remove non-letter characters and convert to lowercase\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str):\n        if len(word) > 0:\n            word = re.sub(r'[^a-zA-Z]', '', word)\n            word = word.lower()\n            count = Counter(word)\n            return len(set(count.values())) == 1\n        else:\n            return False\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if the frequency of each letter is the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) is not str:\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase and remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1"
        ],
        "4": [
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub(r\"[^a-zA-Z]+\", \"\", word)\n    word = word.lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the word is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert all characters to lowercase for case insensitivity\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if all letters have the same count\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert the string to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter in the string\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # convert word to lowercase for case-insensitive comparison\n    word = word.lower()\n    \n    # remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # count the frequency of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if input is not empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # check if all frequencies are equal\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lower case\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if the number of occurrences of each letter is the same\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all letter frequencies are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())  # remove non-letter characters and convert to lowercase\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    counter = Counter(word.lower())\n    \n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # check if the string is empty\n    if len(word) == 0:\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # count the number of occurrences of each letter\n    letter_count = Counter(word)\n\n    # check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the number of occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]+', '', word)\n    word = word.lower()\n    \n    counter = Counter(word)\n    letter_counts = list(counter.values())\n    \n    if len(set(letter_counts)) == 1:\n        return True\n    \n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter in the cleaned word\n    letter_count = Counter(cleaned_word)\n    \n    # Check if all letters have the same frequency\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):  # check if word is a string\n        return False\n    if len(word) == 0:  # check if word is empty\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)  # remove non-letter characters\n    \n    word = word.lower()  # convert word to lowercase\n    \n    counts = Counter(word)  # count the occurrences of each letter\n    \n    if len(set(counts.values())) == 1:  # check if all counts are the same\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        # Count the frequency of each letter\n        letter_counts = Counter(word)\n        # Check if all the counts are the same\n        return len(set(letter_counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Check if each letter appears the same number of times\n    counts = Counter(word)\n    return len(set(counts.values())) == 1"
        ]
    },
    "2": {
        "0": [
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    letter_counts = Counter(word)\n\n    return len(letter_counts) == 1\n\nprint(is_isogram(\"isogram\")) # True\nprint(is_isogram(\"word\")) # False\nprint(is_isogram(\"wordd\")) # False\nprint(is_isogram(\"WorD\")) # True\nprint(is_isogram(\"wordd-\")) # False\nprint(is_isogram(\"\")) # False\nprint(is_isogram(123)) # False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        # Count the occurrences of each letter\n        letter_count = Counter(word)\n        # Check if all letter counts are the same\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    count = Counter(word)\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    \n    letter_counts = Counter(word)\n    \n    return len(letter_counts.values()) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = word.lower()\n        word = re.sub(\"[^a-zA-Z]+\", \"\", word)\n        char_count = Counter(word)\n        return len(char_count.values()) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word)\n        word = word.lower()\n        count = Counter(word)\n        if all(val == count[word[0]] for val in count.values()):\n            return True\n    return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        if len(set(counts.values())) == 1:\n            return True\n    return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters have the same count\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(\"[^a-zA-Z]\", \"\", word)\n        word = word.lower()\n        counts = Counter(word)\n        if len(set(counts.values())) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False",
            "def is_isogram(word):\n\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lower case\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # convert all letters to lowercase and remove non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # check if all letters have the same frequency\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]+', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "```python\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    counts = Counter(word)\n    return len(set(counts.values())) <= 1\n```"
        ],
        "1": [
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input string is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the number of occurrences of each letter\n    letter_count = Counter(word)\n    \n    # check if all letters appear the same number of times\n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Check if the count of each letter in the word is the same\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are equal\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is not empty\n    if not word:\n        return False\n\n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n\n    # Convert the word to lowercase\n    word = word.lower()\n\n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Create a counter object for the characters in the word\n    counter = Counter(word)\n    \n    # Check if each character appears the same number of times\n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        # Remove non-letter characters and convert to lower case\n        word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n        \n        # Count the occurrence of each letter\n        letter_counts = Counter(word)\n        \n        # Check if all letter counts are the same\n        return len(set(letter_counts.values())) == 1\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Check if all letters appear the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n\n    cleaned_word = re.sub('[^A-Za-z]+', '', word).lower()\n    letter_counts = Counter(cleaned_word).values()\n\n    return len(set(letter_counts)) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n\n    # Check if each letter appears the same number of times\n    if len(set(letter_counts.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n\n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n\n    # Count the frequency of each letter\n    letter_counts = Counter(word)\n\n    # Check if the count of each letter is the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    if len(counts) == 0:\n        return False\n    return all(count == list(counts.values())[0] for count in counts.values())",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        # remove non-letter characters and convert to lowercase\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        # create a counter of the letters in the word\n        letter_count = Counter(word)\n        # check if each letter appears the same number of times\n        return len(set(letter_count.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word != \"\":\n        word = re.sub(r'[^a-zA-Z]', '', word.lower())\n        count = Counter(word)\n        return len(count.values()) == 1\n    return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]+', '', word)\n        counts = Counter(word.lower())\n        return len(counts.values()) == 1\n    return False"
        ],
        "2": [
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    word = re.sub('[^A-Za-z]+', '', word)\n    counter = Counter(word.lower())\n    if len(set(counter.values())) == 1:\n        return True\n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    \n    return len(counts.values()) == 1",
            "def is_isogram(word):\n    if type(word) != str or word == \"\":\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters\n    word = re.sub(\"[^a-zA-Z]\", \"\", word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    \n    counter = Counter(word)\n    \n    if len(set(counter.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the word is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-z]', '', word)\n    \n    # Count the number of occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letters appear the same number of times\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    # Removing non-letter characters and converting to lowercase\n    clean_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Counting the frequency of each letter\n    counts = Counter(clean_word)\n    \n    # Checking if any letter appears a different number of times than the others\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input string is empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    # Convert the word to lowercase\n    word = word.lower()\n    \n    # Count the frequency of each letter\n    count = Counter(word)\n    \n    # Check if all letters appear the same number of times\n    return len(set(count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):  # check if input is a string\n        return False\n    if len(word) == 0:  # check if the string is empty\n        return False\n\n    word = re.sub('[^a-zA-Z]', '', word)  # remove non-letter characters\n    word = word.lower()  # convert string to lowercase\n\n    letter_counts = Counter(word)  # count the occurrences of each letter\n\n    return len(set(letter_counts.values())) == 1  # check if all letter counts are the same",
            "def is_isogram(word):\n    if not isinstance(word, str):  # Check if word is a string\n        return False\n    if word == \"\":  # Check if word is empty\n        return False\n    \n    # Remove non-letter characters and convert word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter in the word\n    counts = Counter(word)\n    \n    # Check if all letter frequencies are equal\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # check if each letter appears the same number of times\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word)\n    word = word.lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]+', '', word)\n    word = word.lower()\n    \n    letter_counts = Counter(word)\n    counts = list(letter_counts.values())\n    \n    return len(set(counts)) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n    # check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # remove non-letter characters and convert to lower case\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) != str or word == '':\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # ignore non-letter characters\n    word = re.sub('[^A-Za-z]', '', word)\n    \n    # convert word to lowercase\n    word = word.lower()\n    \n    # count the occurrences of each letter\n    letter_count = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert the word to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if the letter counts are all equal\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    count = Counter(word)\n    \n    return len(count.values()) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub('[^a-z]', '', word)\n    \n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) != str:\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    if len(set(counts.values())) == 1:\n        return True\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if each letter appears the same number of times\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1"
        ],
        "3": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    word = re.sub(r'[^A-Za-z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)\n    \n    counter = Counter(word.lower())\n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub(r'[^a-zA-Z]', '', word)\n        word = word.lower()\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters\n    word = re.sub('[^A-Za-z]', '', word)\n    \n    # Convert word to lowercase\n    word = word.lower()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        counts = Counter(word)\n        return len(set(counts.values())) == 1\n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    word = word.lower()\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\n\ndef is_isogram(word):\n    if type(word) is not str or word == '':\n        return False\n    word = word.lower()\n    word = re.sub(r'[^a-zA-Z]', '', word)\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Check if each letter appears the same number of times\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if len(word) == 0:\n        return False\n    word = word.lower()\n    word = re.sub('[^a-zA-Z]', '', word)\n    counter = Counter(word)\n    counts = list(counter.values())\n    return len(set(counts)) == 1",
            "def is_isogram(word):\n    # check if word is a string\n    if type(word) != str:\n        return False\n    \n    # check if word is not empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    letter_count = Counter(cleaned_word)\n    \n    # check if all letter counts are equal\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    word = word.lower()\n    \n    counter = Counter(word)\n    \n    counts = list(counter.values())\n    \n    if len(set(counts)) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n\n    word = re.sub('[^A-Za-z]', '', word.lower())\n    counts = Counter(word)\n\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    # Remove non-letter characters and convert to lower case\n    cleaned_word = re.sub(\"[^a-zA-Z]\", \"\", word.lower())\n    \n    # Use Counter to count the number of occurrences of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all letters have the same count\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower()) # Remove non-letter characters and convert to lowercase\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if type(word) != str:\n        return False\n    if len(word) == 0:\n        return False\n    \n    word = word.lower()\n    word = re.sub(r'[^a-z]', '', word)\n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter in the word\n    letter_counts = Counter(word)\n    \n    # Check if the frequency of each letter is the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    \n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if type(word) is not str:\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the word to lowercase and remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1"
        ],
        "4": [
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # check if input is not empty\n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # count the frequency of each letter\n    letter_count = Counter(word)\n    \n    # check if all frequencies are equal\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lower case\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if the number of occurrences of each letter is the same\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the frequency of each letter\n    letter_counts = Counter(cleaned_word)\n    \n    # Check if all letter frequencies are the same\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())  # remove non-letter characters and convert to lowercase\n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    counter = Counter(word.lower())\n    \n    return len(set(counter.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # check if the input is a string\n    if not isinstance(word, str):\n        return False\n\n    # check if the string is empty\n    if len(word) == 0:\n        return False\n\n    # remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n\n    # count the number of occurrences of each letter\n    letter_count = Counter(word)\n\n    # check if each letter appears the same number of times\n    if len(set(letter_count.values())) == 1:\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if word is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if word is empty\n    if len(word) == 0:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    \n    # Count the number of occurrences of each letter\n    counts = Counter(word)\n    \n    # Check if each letter appears the same number of times\n    if len(set(counts.values())) == 1:\n        return True\n    else:\n        return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word).lower()\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]+', '', word)\n    word = word.lower()\n    \n    counter = Counter(word)\n    letter_counts = list(counter.values())\n    \n    if len(set(letter_counts)) == 1:\n        return True\n    \n    return False",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if not word:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # Count the frequency of each letter in the cleaned word\n    letter_count = Counter(cleaned_word)\n    \n    # Check if all letters have the same frequency\n    return len(set(letter_count.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):  # check if word is a string\n        return False\n    if len(word) == 0:  # check if word is empty\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word)  # remove non-letter characters\n    \n    word = word.lower()  # convert word to lowercase\n    \n    counts = Counter(word)  # count the occurrences of each letter\n    \n    if len(set(counts.values())) == 1:  # check if all counts are the same\n        return True\n    else:\n        return False",
            "def is_isogram(word):\n    if not isinstance(word, str) or word == \"\":\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1",
            "from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if isinstance(word, str) and word:\n        # Remove non-letter characters and convert to lowercase\n        word = re.sub('[^a-zA-Z]', '', word.lower())\n        # Count the frequency of each letter\n        letter_counts = Counter(word)\n        # Check if all the counts are the same\n        return len(set(letter_counts.values())) == 1\n    else:\n        return False",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the string is empty\n    if len(word) == 0:\n        return False\n    \n    # Convert the string to lowercase\n    word = word.lower()\n    \n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n    \n    # Check if each letter appears the same number of times\n    counts = Counter(word)\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n\n    # Remove non-letter characters\n    word = re.sub('[^a-zA-Z]', '', word)\n\n    # Convert to lowercase\n    word = word.lower()\n\n    # Count the occurrences of each letter\n    counts = Counter(word)\n\n    # Check if all counts are the same\n    return len(set(counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if len(word) == 0:\n        return False\n    \n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    counts = Counter(word)\n    count_values = counts.values()\n    \n    return len(set(count_values)) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    if not word:\n        return False\n    \n    word = re.sub('[^A-Za-z]', '', word)\n    word = word.lower()\n    \n    char_count = Counter(word)\n    \n    return len(set(char_count.values())) == 1",
            "def is_isogram(word):\n    # Check if the input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if the input is not empty\n    if len(word) == 0:\n        return False\n    \n    # Ignore non-letter characters and convert all letters to lowercase\n    cleaned_word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Check if each letter appears the same number of times\n    letter_counts = Counter(cleaned_word)\n    if len(set(letter_counts.values())) == 1:\n        return True\n    \n    return False",
            "def is_isogram(word):\n    # Check if input is a string\n    if not isinstance(word, str):\n        return False\n    \n    # Check if input is empty or None\n    if len(word) == 0 or word is None:\n        return False\n    \n    # Remove non-letter characters and convert to lowercase\n    word = re.sub('[^a-zA-Z]', '', word.lower())\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # Check if all letter counts are the same\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word.lower())\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1",
            "def is_isogram(word):\n    if not isinstance(word, str):\n        return False\n    \n    if not word:\n        return False\n    \n    # remove non-letter characters and convert to lower case\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    \n    # count the occurrences of each letter\n    letter_counts = Counter(word)\n    \n    # check if each letter appears the same number of times\n    return len(set(letter_counts.values())) == 1"
        ]
    }
}