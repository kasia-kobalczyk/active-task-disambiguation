{
    "0": [
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    if len(word) == 0:\n        return False\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    return len(set(word)) == len(word)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    return len(set(word)) == len(word)\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(cleaned_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    return len(set(word)) == len(word)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    counts = Counter(filtered_word)\n    return len(set(counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    letter_count = Counter(word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(char.lower() for char in word if char.isalpha())\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    \n    if not word:\n        return False\n    \n    letter_count = Counter(word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_counts = Counter(filtered_word)\n    \n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_count = Counter(cleaned_word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word.lower()))\n    letter_counts = Counter(word)\n    \n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    count = Counter(word)\n    return len(set(count.values())) == 1\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = ''.join(filter(str.isalpha, word)).lower()\n    \n    if not word:\n        return False\n    \n    letter_counts = Counter(word)\n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    word = re.sub(r'[^a-zA-Z]', '', word).lower()\n    counts = Counter(word)\n    \n    return len(set(counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    word = ''.join(filter(str.isalpha, word)).lower()\n    counts = Counter(word)\n    return len(set(counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    \n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_counts = Counter(filtered_word)\n    \n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(filter(str.isalpha, word)).lower()\n    if not filtered_word:\n        return False\n    letter_counts = Counter(filtered_word)\n    return len(set(letter_counts.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    cleaned_word = ''.join(char.lower() for char in word if char.isalpha())\n    return len(cleaned_word) == len(set(cleaned_word)) and len(cleaned_word) > 0\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(c.lower() for c in word if c.isalpha())\n    letter_count = Counter(filtered_word)\n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or len(word) == 0:\n        return False\n    \n    filtered_word = ''.join(filter(str.isalpha, word.lower()))\n    letter_count = Counter(filtered_word)\n    \n    return len(set(letter_count.values())) == 1\n```",
            "logp": null
        },
        {
            "content": "```python\ndef is_isogram(word):\n    if not isinstance(word, str) or not word:\n        return False\n    filtered_word = ''.join(char.lower() for char in word if char.isalpha())\n    return len(filtered_word) == len(set(filtered_word)) and len(filtered_word) > 0\n```",
            "logp": null
        }
    ]
}