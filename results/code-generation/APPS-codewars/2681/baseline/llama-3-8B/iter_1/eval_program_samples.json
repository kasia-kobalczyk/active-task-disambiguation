{
    "0": {
        "0": [
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = initialHeight * (1 - bouncingProportion) ** bounces\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1"
        ],
        "1": [],
        "2": [
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result"
        ],
        "3": [],
        "4": [
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1"
        ]
    },
    "1": {
        "0": [
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height = height * bouncingProportion\n    return bounces - 1",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces"
        ],
        "1": [],
        "2": [
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result"
        ],
        "3": [],
        "4": [
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1"
        ]
    },
    "2": {
        "0": [
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initialHeight, bouncingProportion):\n    if initialHeight < 2 or bouncingProportion >= 1:\n        return -1\n    bounces = 0\n    height = initialHeight\n    while height > 1:\n        bounces += 1\n        height *= bouncingProportion\n    return bounces",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    height = initial\n    while height > 1:\n        height *= proportion\n        result += 1\n    return result"
        ],
        "1": [
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result"
        ],
        "2": [
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result",
            "def bouncing_ball(initial, proportion):\n    result = 1\n    while initial > 1:\n        initial = int(initial * proportion)\n        result += 1\n    return result"
        ],
        "3": [],
        "4": [
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1",
            "def bouncing_ball(initial, proportion):\n    if initial > 0 and 0 < proportion < 1:\n        height = initial\n        bounces = 0\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces\n    else:\n        return -1"
        ]
    }
}