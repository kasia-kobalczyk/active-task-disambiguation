{
    "0": [
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    while initial > 1:\n        initial *= proportion\n        if initial > 1:\n            bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    count = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        count += 1\n    return count",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    count = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        count += 1\n    return count",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    if initial <= 0 or proportion >= 1 or proportion <= 0:\n        return -1\n    else:\n        bounces = 0\n        height = initial\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    count = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        count += 1\n    return count",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    if proportion >= 1 or proportion <= 0:\n        return -1\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    if proportion >= 1 or proportion <= 0:\n        return -1\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    while initial > 1:\n        initial *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    count = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        count += 1\n    return count",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    if proportion >= 1 or proportion <= 0:\n        return -1\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    count = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        count += 1\n    return count",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    if initial <= 0 or proportion >= 1 or proportion <= 0:\n        return -1\n    else:\n        bounces = 0\n        height = initial\n        while height > 1:\n            height *= proportion\n            bounces += 1\n        return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        },
        {
            "content": "def bouncing_ball(initial, proportion):\n    bounces = 0\n    height = initial\n    while height > 1:\n        height *= proportion\n        bounces += 1\n    return bounces",
            "logp": null
        }
    ]
}