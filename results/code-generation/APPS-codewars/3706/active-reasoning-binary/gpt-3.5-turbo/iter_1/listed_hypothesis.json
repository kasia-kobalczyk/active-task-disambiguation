{
    "0": [
        {
            "content": "def layers(n):\n    return ceil(sqrt(n))",
            "logp": null
        },
        {
            "content": "def layers(n):\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    \n    # The number of layers required is equal to the smallest integer greater than or equal to the square root of n\n    return ceil(sqrt(n))",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    if n == 1:\n        return 1\n    else:\n        return int(ceil(sqrt(n)))",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil(sqrt(n))",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil(sqrt(n) / 2)",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return ceil(sqrt(n)) // 2 + 1",
            "logp": null
        },
        {
            "content": "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return int(ceil(sqrt(n)))",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return ceil((sqrt(n)-1)/2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return int(ceil(sqrt(n)))",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return int(ceil((sqrt(n) - 1) / 2)) + 1\n\nprint(layers(1)) # 1\nprint(layers(5)) # 2\nprint(layers(25)) # 3\nprint(layers(30)) # 4\nprint(layers(50)) # 5",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    # calculate the square root of n\n    root = ceil(sqrt(n))\n    \n    # return the ceil of half of the root value\n    return ceil(root / 2)",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return ceil((sqrt(n)-1)/2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil(sqrt(n))//2 + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return int(ceil((sqrt(n) + 1) / 2))",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil(sqrt(n))//2+1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) + 1) / 2)",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) + 1) / 2)",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "def layers(n):\n    if n == 1:\n        return 1\n    \n    layer = 1\n    while n > (2 * layer - 1)**2:\n        layer += 1\n    \n    return layer",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n)-1)/2)+1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "def layers(n):\n    if n == 1:\n        return 1\n    \n    layer = ceil(sqrt(n))\n    if layer % 2 == 0:\n        layer += 1\n    \n    return (layer + 1) // 2",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        },
        {
            "content": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "logp": null
        }
    ]
}