{
    "0": [
        {
            "content": "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "logp": null
        },
        {
            "content": "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "logp": null
        },
        {
            "content": "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "logp": null
        },
        {
            "content": "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "logp": null
        },
        {
            "content": "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "logp": null
        },
        {
            "content": "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "logp": null
        },
        {
            "content": "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        a += k * k\n        b += 2 * k * (k + 1)\n        k += 1\n        if a + k * k >= n:\n            return k",
            "logp": null
        }
    ],
    "2": [],
    "3": []
}