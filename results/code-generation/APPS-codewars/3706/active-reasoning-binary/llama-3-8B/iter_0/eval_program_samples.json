{
    "0": {
        "0": [
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    return ceil(sqrt(1 + 8 * n))",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count"
        ],
        "1": [
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        a += k * k\n        b += 2 * k * (k + 1)\n        k += 1\n        if a + k * k >= n:\n            return k"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    count = 1\n    layer_size = 1\n    layer_sum = 1\n    while layer_sum <= n:\n        layer_size += 1\n        layer_sum += layer_size ** 2\n        count += 1\n    return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    side = 1\n    count = 0\n    while True:\n        count += 1\n        side_squared = side ** 2\n        if side_squared >= n:\n            return count",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1",
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        if n <= a * (k * k + 1) // 2 + k * k // 2:\n            return k\n        a += b\n        b += 1\n        k += 1"
        ],
        "1": [
            "def layers(n):\n    a = 0\n    b = 1\n    k = 1\n    while True:\n        a += k * k\n        b += 2 * k * (k + 1)\n        k += 1\n        if a + k * k >= n:\n            return k"
        ],
        "2": [],
        "3": [],
        "4": []
    }
}