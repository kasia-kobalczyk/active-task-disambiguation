{
    "0": {
        "0": [
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n): \n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n): \n    if n == 1: \n        return 1 \n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n): \n    if n == 1: \n        return 1 \n    else: \n        return ceil((sqrt(n - 1) - 1) / 2) + 1"
        ],
        "1": [
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n): \n    if n == 1: \n        return 1 \n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n): \n    if n == 1: \n        return 1 \n    else: \n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2) if n > 1 else 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n - 1) - 1) / 2) + 1"
        ],
        "2": [
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        if n <= (2 * layer_size - 1) ** 2:\n            return layer_size\n        layer_size += 1"
        ],
        "3": [
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n): \n    return ceil((sqrt(n)-1)/2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        if n <= (2 * layer_size - 1) ** 2:\n            return layer_size\n        layer_size += 1"
        ],
        "4": [
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        layer_size += 2\n        if layer_size * layer_size >= n:\n            return layer_size // 2 + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        if n <= (2 * layer_size - 1) ** 2:\n            return layer_size\n        layer_size += 1"
        ]
    },
    "1": {
        "0": [
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n): \n    if n == 1: \n        return 1 \n    else: \n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)"
        ],
        "1": [
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n): \n    if n == 1: \n        return 1 \n    else: \n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n): \n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2) if n > 1 else 1",
            "def layers(n): \n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil(((sqrt(n) - 1) / 2) + 1)"
        ],
        "2": [
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1"
        ],
        "3": [
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        layer_size += 2\n        if layer_size * layer_size >= n:\n            return layer_size // 2 + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        if n <= (2 * layer_size - 1) ** 2:\n            return layer_size\n        layer_size += 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n): \n    return ceil((sqrt(n) - 1) / 2) + 1"
        ],
        "4": [
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        layer_size += 2\n        if layer_size * layer_size >= n:\n            return layer_size // 2 + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        if n <= (2 * layer_size - 1) ** 2:\n            return layer_size\n        layer_size += 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1"
        ]
    },
    "2": {
        "0": [
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    if n == 1:\n        return 1\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n): \n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n): \n    return ceil((sqrt(n)-1)/2) + 1"
        ],
        "1": [
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2) if n > 1 else 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2) if n > 1 else 1",
            "def layers(n): \n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil(((sqrt(n) - 1) / 2) + 1)",
            "def layers(n):\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2)",
            "def layers(n):\n    if n == 1:\n        return 1\n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n): \n    return ceil((sqrt(n - 1) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n - 1) + 1) / 2) if n > 1 else 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil(((sqrt(n - 1) - 1) / 2) + 1)"
        ],
        "2": [
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    else:\n        return ceil(((sqrt(n) - 1) / 2) + 1)"
        ],
        "3": [
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        layer_size += 2\n        if layer_size * layer_size >= n:\n            return layer_size // 2 + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n): \n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1"
        ],
        "4": [
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        layer_size += 2\n        if layer_size * layer_size >= n:\n            return layer_size // 2 + 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1",
            "def layers(n):\n    if n == 1:\n        return 1\n    layer_size = 1\n    while True:\n        if n <= (2 * layer_size - 1) ** 2:\n            return layer_size\n        layer_size += 1",
            "def layers(n):\n    return ceil((sqrt(n) - 1) / 2) + 1"
        ]
    }
}