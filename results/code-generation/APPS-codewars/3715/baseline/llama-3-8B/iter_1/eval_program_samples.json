{
    "0": {
        "0": [
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    if n % 2 == 1:\n        return 5 * (5 ** (n - 1))\n    else:\n        return 5 ** n + 5 ** (n // 2)",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = [5]\n    while True:\n        next_power = 5 ** (exponent + 1)\n        for i in range(exponent + 1):\n            result += powers_of_five[i]\n        if result >= n:\n            return result - sum(powers_of_five[:-1])\n        powers_of_five.append(next_power)\n        exponent += 1"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    result = 0\n    exponent = 0\n    powers_of_five = 5\n    count = 0\n    while True:\n        if count >= n:\n            return result\n        result += powers_of_five\n        count += 1\n        exponent += 1\n        powers_of_five *= 5",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while True:\n        if sum([value ** (i + j) for j in range(i + 1)]) <= n:\n            i += 1\n            value *= 5\n            power += 1\n        else:\n            chandos_numbers.append(sum([value ** (k - 1) for k in range(1, i + 1)]))\n            if len(chandos_numbers) == n:\n                return chandos_numbers[-1]",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1",
            "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = 0\n        for j in range(i + 1):\n            new_number += 5 ** j\n        if new_number > chandos_numbers[-1]:\n            chandos_numbers.append(new_number)\n            if len(chandos_numbers) == n:\n                return new_number\n        i += 1"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    }
}