{
    "0": [
        {
            "content": "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while len(chandos_numbers) < n:\n        while True:\n            power += 1\n            value /= 5\n            if value == int(value):\n                chandos_numbers.append(int(value))\n                break\n        value = 5\n        power = 1\n    return chandos_numbers[-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while len(chandos_numbers) < n:\n        while True:\n            power += 1\n            value /= 5\n            if value == int(value):\n                chandos_numbers.append(int(value))\n                break\n        value = 5\n        power = 1\n    return chandos_numbers[-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while len(chandos_numbers) < n:\n        while True:\n            power += 1\n            value /= 5\n            if value == int(value):\n                chandos_numbers.append(int(value))\n                break\n        value = 5\n        power = 1\n    return chandos_numbers[-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while len(chandos_numbers) < n:\n        while True:\n            power += 1\n            value /= 5\n            if value == int(value):\n                chandos_numbers.append(int(value))\n                break\n        value = 5\n        power = 1\n    return chandos_numbers[-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    i = 0\n    chandos_numbers = []\n    power = 0\n    value = 5\n    while len(chandos_numbers) < n:\n        while True:\n            power += 1\n            value /= 5\n            if value == int(value):\n                chandos_numbers.append(int(value))\n                break\n        value = 5\n        power = 1\n    return chandos_numbers[-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = chandos_numbers[-1] + (5 ** (i + 1))\n        chandos_numbers.append(new_number)\n        if len(chandos_numbers) == n:\n            return chandos_numbers[-1]\n        i += 1",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = chandos_numbers[-1] + (5 ** (i + 1))\n        chandos_numbers.append(new_number)\n        if len(chandos_numbers) == n:\n            return chandos_numbers[-1]\n        i += 1",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = chandos_numbers[-1] + (5 ** (i + 1))\n        chandos_numbers.append(new_number)\n        if len(chandos_numbers) == n:\n            return chandos_numbers[-1]\n        i += 1",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = chandos_numbers[-1] + (5 ** (i + 1))\n        chandos_numbers.append(new_number)\n        if len(chandos_numbers) == n:\n            return chandos_numbers[-1]\n        i += 1",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    i = 1\n    chandos_numbers = [5]\n    while True:\n        new_number = chandos_numbers[-1] + (5 ** (i + 1))\n        chandos_numbers.append(new_number)\n        if len(chandos_numbers) == n:\n            return chandos_numbers[-1]\n        i += 1",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def nth_chandos_number(n):\n    if n == 1:\n        return 5\n    chando_nums = [5]\n    pow_5 = 5\n    while True:\n        if sum([pow_5 ** i for i in range(len(chando_nums) + 1)]) <= n:\n            chando_nums.append(sum([pow_5 ** i for i in range(len(chando_nums) + 1)]))\n        else:\n            return chando_nums[-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    result = 0\n    count = 0\n    i = 1\n    while True:\n        result += 5 ** i\n        if result >= n:\n            return result\n        count += 1\n        i += 1",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    chandos_numbers = set()\n    chandos_number = 0\n    powers_of_five = {}\n    powers = 1\n    i = 1\n    while True:\n        powers_of_five[i] = 5 ** i\n        chandos_number += powers_of_five[i]\n        chandos_numbers.add(chandos_number)\n        if len(chandos_numbers) >= n:\n            return min(chandos_numbers, key=lambda x:abs(x-n))",
            "logp": null
        }
    ],
    "2": [],
    "3": []
}