{
    "0": {
        "0": [
            "def nth_chandos_number(n):\n    chandos_nums = [0]\n    i = 1\n    while len(chandos_nums) < n:\n        for j in range(len(chandos_nums)):\n            chandos_nums.append(chandos_nums[j] + i)\n        i *= 5\n    return chandos_nums[n-1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(20)]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for power in powers:\n        for i in range(n, power - 1, -1):\n            dp[i] += dp[i - power]\n    res = []\n    for i in range(1, n + 1):\n        if dp[i] > 0:\n            res.append(i)\n    return res[n - 1]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i, num = 0, 1\n    while len(chandos) < n + 1:\n        num *= 5\n        for j in range(i, -1, -1):\n            chandos.append(chandos[j] + num)\n        i += 1\n    return chandos[n]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos = set()\n    queue = [0]\n    while queue:\n        num = queue.pop(0)\n        if len(chandos) == n:\n            return num\n        for p in powers:\n            new_num = num + p\n            if new_num not in chandos:\n                chandos.add(new_num)\n                queue.append(new_num)\n    return -1",
            "def nth_chandos_number(n):\n    chandos = []\n    i = 1\n    while len(chandos) < n * 2:\n        for j in range(i):\n            if i != 5**j:\n                chandos.append(i)\n        i += 1\n    chandos.sort()\n    return chandos[n-1]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i, j, k = 0, 0, 0\n    while len(chandos) < n + 1:\n        if i == 0 or 5 ** (i + 1) > chandos[-1] + 5 ** j:\n            chandos.append(chandos[-1] + 5 ** (i + 1))\n            i += 1\n        elif j == 0 or 5 ** (j + 1) > chandos[-1] + 5 ** k:\n            chandos.append(chandos[-1] + 5 ** (k + 1))\n            k += 1\n        else:\n            chandos.append(chandos[-1] + 5 ** j)\n            j += 1\n    return chandos[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n:\n        for j in range(i, -1, -1):\n            new_num = chandos[i] + 5 ** j\n            if new_num not in chandos:\n                chandos.append(new_num)\n        i += 1\n        chandos.sort()\n    return chandos[n - 1]",
            "def nth_chandos_number(n):\n    chandos_nums = []\n    i = 1\n    while len(chandos_nums) < n:\n        num = 5 ** i\n        chandos_nums.append(num)\n        j = i - 1\n        while j > 0:\n            chandos_nums.append(num + 5 ** j)\n            j -= 1\n        i += 1\n        chandos_nums = sorted(list(set(chandos_nums)))\n    return chandos_nums[n - 1]",
            "def nth_chandos_number(n):\n    def powers_of_five():\n        i = 1\n        while True:\n            yield 5 ** i\n            i += 1\n\n    def chandos_numbers():\n        powers = powers_of_five()\n        powers_list = [next(powers)]\n        while True:\n            yield from powers_list\n            new_power = next(powers)\n            powers_list = [x + new_power for x in powers_list] + [new_power]\n\n    chandos = chandos_numbers()\n    for _ in range(n):\n        result = next(chandos)\n    return result",
            "def nth_chandos_number(n):\n    chandos = set()\n    powers = [1]\n    while len(chandos) < n:\n        new_powers = []\n        for p in powers:\n            new_powers.append(p * 5)\n        powers += new_powers\n        powers.sort()\n        for p in powers:\n            for i in range(len(powers) - 1, -1, -1):\n                if p - powers[i] in chandos or p - powers[i] == 0:\n                    chandos.add(p)\n                    break\n    return sorted(list(chandos))[n - 1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos = set()\n    queue = [0]\n    \n    while queue:\n        num = queue.pop(0)\n        for p in powers:\n            new_num = num + p\n            if new_num not in chandos:\n                chandos.add(new_num)\n                queue.append(new_num)\n                if len(chandos) == n:\n                    return sorted(list(chandos))[n-1]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 1\n    while len(chandos) < n:\n        num = 5 ** i\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + num)\n        i += 1\n    return chandos[n-1]",
            "def nth_chandos_number(n):\n    chandos = []\n    i = 1\n    while True:\n        for j in range(i, -1, -1):\n            num = sum(5**k for k in range(j, i))\n            if num not in chandos:\n                chandos.append(num)\n        if len(chandos) >= n:\n            break\n        i += 1\n    return chandos[n-1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos_numbers = [0]\n    i = 0\n    while len(chandos_numbers) < n + 1:\n        for p in powers:\n            if chandos_numbers[i] + p not in chandos_numbers:\n                chandos_numbers.append(chandos_numbers[i] + p)\n                chandos_numbers.sort()\n        i += 1\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos = set()\n    queue = [0]\n    while True:\n        x = queue.pop(0)\n        if len(chandos) == n:\n            return x\n        for p in powers:\n            if x + p not in chandos:\n                chandos.add(x + p)\n                queue.append(x + p)",
            "def nth_chandos_number(n):\n    dp = [0] * (n + 1)\n    i, j, k = 1, 1, 1\n    dp[1] = 5\n    for x in range(2, n + 1):\n        if i * 5 == dp[x - 1]:\n            i += 1\n        if j * 25 == dp[x - 1]:\n            j += 1\n        if k * 125 == dp[x - 1]:\n            k += 1\n        dp[x] = min(i * 5, j * 25, k * 125)\n    return dp[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n:\n        power *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power)\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    dp = [0] * (n + 1)\n    p5 = 1\n    i = 0\n    while i <= n:\n        dp[i] = p5\n        i += 1\n        while i <= n and dp[i - 1] + p5 <= dp[i - 1]:\n            dp[i] = dp[i - 1] + p5\n            i += 1\n        p5 *= 5\n    return dp[n]",
            "def nth_chandos_number(n):\n    pows = [5**i for i in range(14)]\n    chandos = set()\n    def dfs(val, idx):\n        if val > 0:\n            chandos.add(val)\n        for i in range(idx, 14):\n            if val - pows[i] >= 0:\n                dfs(val - pows[i], i)\n    dfs(0, 0)\n    return sorted(list(chandos))[n-1]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    powers = [1]\n    i = 0\n    while len(chandos) < n:\n        new_power = powers[-1] * 5\n        powers.append(new_power)\n        for j in range(i, len(chandos)):\n            chandos.append(chandos[j] + new_power)\n        chandos.sort()\n        i += 1\n    return chandos[n-1]"
        ],
        "1": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n:\n        power *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power)\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    chandos.sort()\n    return chandos[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]"
        ],
        "2": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        base = 5 ** power\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + base)\n        power += 1\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n        chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        num = 5 ** power\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + num)\n        chandos_numbers = sorted(list(set(chandos_numbers)))\n        power += 1\n    return chandos_numbers[n]"
        ],
        "3": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        num = 5 ** power\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + num)\n        chandos_numbers.sort()\n        power += 1\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]"
        ],
        "4": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n:\n        power *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power)\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    pows = [5**i for i in range(1, 20)]\n    nums = [0]\n    for p in pows:\n        nums += [n + p for n in nums]\n    nums.sort()\n    return nums[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    p5 = 1\n    while len(chandos) < n + 1:\n        p5 *= 5\n        for i in range(len(chandos)):\n            chandos.append(chandos[i] + p5)\n        chandos = sorted(list(set(chandos)))\n    return chandos[n]"
        ]
    },
    "1": {
        "0": [
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 1\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + i)\n        i *= 5\n    return chandos[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 1\n    while len(chandos) < n:\n        num = 5 ** i\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + num)\n        chandos.sort()\n        i += 1\n    return chandos[n - 1]",
            "def nth_chandos_number(n):\n    chandos = []\n    i = 1\n    while True:\n        for j in range(i, -1, -1):\n            num = sum(5**k for k in range(j, i))\n            if num not in chandos:\n                chandos.append(num)\n        if len(chandos) >= n:\n            break\n        i += 1\n    return chandos[n-1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos = set()\n    queue = [0]\n    \n    for _ in range(n):\n        num = queue.pop(0)\n        if len(chandos) == n - 1:\n            break\n        for p in powers:\n            new_num = num + p\n            if new_num not in chandos:\n                chandos.add(new_num)\n                queue.append(new_num)\n    \n    return sorted(list(chandos))[n-1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos_numbers = [0]\n    i = 0\n    while len(chandos_numbers) < n + 1:\n        for p in powers:\n            if chandos_numbers[i] + p not in chandos_numbers:\n                chandos_numbers.append(chandos_numbers[i] + p)\n                chandos_numbers.sort()\n        i += 1\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    dp = [0] * (n + 1)\n    i, j, k = 1, 1, 1\n    dp[1] = 5\n    for x in range(2, n + 1):\n        if i * 5 == dp[x - 1]:\n            i += 1\n        if j * 25 == dp[x - 1]:\n            j += 1\n        if k * 125 == dp[x - 1]:\n            k += 1\n        dp[x] = min(i * 5, j * 25, k * 125)\n    return dp[n]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos = set()\n    queue = [0]\n    while True:\n        x = queue.pop(0)\n        if len(chandos) == n:\n            return x\n        for p in powers:\n            if x + p not in chandos:\n                chandos.add(x + p)\n                queue.append(x + p)",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n:\n        power *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power)\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    dp = [0] * (n + 1)\n    p5 = 1\n    i = 0\n    while i <= n:\n        dp[i] = p5\n        i += 1\n        while i <= n and dp[i - 1] + p5 <= dp[i - 1] * 2:\n            dp[i] = dp[i - 1] + p5\n            i += 1\n        p5 *= 5\n    return dp[n]",
            "def nth_chandos_number(n):\n    pows = [5**i for i in range(14)]\n    chandos = set()\n    def dfs(val, idx):\n        if val > 0:\n            chandos.add(val)\n        for i in range(idx, 14):\n            if val - pows[i] >= 0:\n                dfs(val - pows[i], i)\n    dfs(0, 0)\n    return sorted(list(chandos))[n-1]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n - 1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(20)]\n    chandos = set()\n    queue = [0]\n    for _ in range(n):\n        x = queue.pop(0)\n        if x not in chandos:\n            chandos.add(x)\n            for p in powers:\n                queue.append(x + p)\n    return x",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(1, 14)]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for p in powers:\n        for i in range(p, n + 1):\n            dp[i] += dp[i - p]\n    result = []\n    for i in range(1, n + 1):\n        if dp[i] > 0:\n            result.append(i)\n    return result[n - 1]",
            "def nth_chandos_number(n):\n    pows = [5**i for i in range(15)]\n    chandos = set()\n    for i in range(1 << len(pows)):\n        s = sum([pows[j] for j in range(len(pows)) if (i & (1 << j))])\n        chandos.add(s)\n    chandos = sorted(list(chandos))\n    return chandos[n-1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(20)]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for p in powers:\n        for i in range(p, n + 1):\n            dp[i] += dp[i - p]\n    ans = []\n    for i in range(1, n + 1):\n        if dp[i] >= 1:\n            ans.append(i)\n    return ans[n - 1]",
            "def nth_chandos_number(n):\n    chandos_powers = [5**i for i in range(1, 15)]\n    chandos_nums = set()\n    queue = [0]\n    while queue:\n        num = queue.pop(0)\n        if len(chandos_nums) == n:\n            return num\n        for power in chandos_powers:\n            new_num = num + power\n            if new_num not in chandos_nums:\n                chandos_nums.add(new_num)\n                queue.append(new_num)\n    return -1",
            "def nth_chandos_number(n):\n    Chando_powers = [5**i for i in range(15)]\n    Chando_nums = set()\n    Chando_nums.add(0)\n    for power in Chando_powers:\n        new_Chando_nums = set()\n        for num in Chando_nums:\n            new_Chando_nums.add(num + power)\n        Chando_nums.update(new_Chando_nums)\n    Chando_nums = sorted(list(Chando_nums))\n    return Chando_nums[n]",
            "def nth_chandos_number(n):\n    def is_chandos(x):\n        i, total = 1, 0\n        while total < x:\n            total += 5 ** i\n            i += 1\n        if total == x:\n            return True\n        return False\n\n    chandos, i = [], 1\n    while len(chandos) < n:\n        if is_chandos(i):\n            chandos.append(i)\n        i += 1\n    return chandos[-1]",
            "def nth_chandos_number(n):\n    powers_of_five = [5**i for i in range(20)]\n    chandos_numbers = set()\n    queue = [0]\n    \n    while queue:\n        num = queue.pop(0)\n        if len(chandos_numbers) == n:\n            return num\n        for power in powers_of_five:\n            if num + power not in chandos_numbers:\n                queue.append(num + power)\n                chandos_numbers.add(num + power)",
            "def nth_chandos_number(n):\n    chandos_powers = [5**i for i in range(1, 15)]\n    chandos_nums = set()\n    def get_chandos_num(i, curr_num, curr_powers):\n        nonlocal chandos_nums\n        if i > len(chandos_powers):\n            return\n        for j in range(i, len(chandos_powers)):\n            new_num = curr_num + chandos_powers[j]\n            if new_num not in chandos_nums:\n                chandos_nums.add(new_num)\n            get_chandos_num(j + 1, new_num, curr_powers + [chandos_powers[j]])\n    get_chandos_num(0, 0, [])\n    chandos_nums = sorted(list(chandos_nums))\n    return chandos_nums[n - 1]"
        ],
        "1": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n:\n        power *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power)\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    chandos.sort()\n    return chandos[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]"
        ],
        "2": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        base = 5 ** power\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + base)\n        power += 1\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        num = 5 ** power\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + num)\n        chandos_numbers = sorted(list(set(chandos_numbers)))\n        power += 1\n    return chandos_numbers[n]"
        ],
        "3": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]"
        ],
        "4": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n:\n        power *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power)\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    pows = [5**i for i in range(1, 15)]\n    nums = [0]\n    for p in pows:\n        nums += [x + p for x in nums]\n    nums.sort()\n    return nums[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    p5 = 1\n    while len(chandos) < n + 1:\n        p5 *= 5\n        for i in range(len(chandos)):\n            chandos.append(chandos[i] + p5)\n        chandos = sorted(list(set(chandos)))\n    return chandos[n]"
        ]
    },
    "2": {
        "0": [
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n - 1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(20)]\n    chandos = set()\n    queue = [0]\n    for _ in range(n):\n        x = queue.pop(0)\n        if x not in chandos:\n            chandos.add(x)\n            for p in powers:\n                queue.append(x + p)\n    return x",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(1, 14)]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for p in powers:\n        for i in range(p, n + 1):\n            dp[i] += dp[i - p]\n    result = []\n    for i in range(1, n + 1):\n        if dp[i] > 0:\n            result.append(i)\n    return result[n - 1]",
            "def nth_chandos_number(n):\n    pows = [5**i for i in range(15)]\n    chandos = set()\n    for i in range(1 << len(pows)):\n        s = sum([pows[j] for j in range(len(pows)) if (i & (1 << j))])\n        chandos.add(s)\n    chandos = sorted(list(chandos))\n    return chandos[n-1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(20)]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for p in powers:\n        for i in range(p, n + 1):\n            dp[i] += dp[i - p]\n    ans = []\n    for i in range(1, n + 1):\n        if dp[i] >= 1:\n            ans.append(i)\n    return ans[n - 1]",
            "def nth_chandos_number(n):\n    chandos_powers = [5**i for i in range(1, 15)]\n    chandos_nums = set()\n    queue = [0]\n    while queue:\n        num = queue.pop(0)\n        if len(chandos_nums) == n:\n            return num\n        for power in chandos_powers:\n            new_num = num + power\n            if new_num not in chandos_nums:\n                chandos_nums.add(new_num)\n                queue.append(new_num)\n    return -1",
            "def nth_chandos_number(n):\n    Chando_powers = [5**i for i in range(20)]\n    Chando_nums = set()\n    Chando_nums.add(0)\n    for power in Chando_powers:\n        new_Chando_nums = set()\n        for num in Chando_nums:\n            new_Chando_nums.add(num + power)\n        Chando_nums.update(new_Chando_nums)\n    Chando_nums = sorted(list(Chando_nums))\n    return Chando_nums[n]",
            "def nth_chandos_number(n):\n    def is_chandos(x):\n        i, total = 1, 0\n        while total < x:\n            total += 5 ** i\n            i += 1\n        if total == x:\n            return True\n        return False\n\n    chandos, i = [], 1\n    while len(chandos) < n:\n        if is_chandos(i):\n            chandos.append(i)\n        i += 1\n    return chandos[-1]",
            "def nth_chandos_number(n):\n    powers_of_five = [5**i for i in range(20)]\n    chandos_numbers = set()\n    queue = [0]\n    \n    while queue:\n        num = queue.pop(0)\n        if len(chandos_numbers) == n:\n            return num\n        for power in powers_of_five:\n            if num + power not in chandos_numbers:\n                queue.append(num + power)\n                chandos_numbers.add(num + power)",
            "def nth_chandos_number(n):\n    chandos_powers = [5**i for i in range(1, 15)]\n    chandos_nums = set()\n    def get_chandos_num(i, curr_num, curr_powers):\n        nonlocal chandos_nums\n        if i > len(chandos_powers):\n            return\n        for j in range(i, len(chandos_powers)):\n            new_num = curr_num + chandos_powers[j]\n            if new_num not in chandos_nums:\n                chandos_nums.add(new_num)\n            get_chandos_num(j + 1, new_num, curr_powers + [chandos_powers[j]])\n    get_chandos_num(0, 0, [])\n    chandos_nums = sorted(list(chandos_nums))\n    return chandos_nums[n - 1]",
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power)\n        power *= 5\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos = set()\n    for i in range(1, 15):\n        for j in range(i):\n            chandos.add(sum(powers[k] for k in range(j, i)))\n    chandos = sorted(list(chandos))\n    return chandos[n-1]",
            "def nth_chandos_number(n):\n    powers = []\n    i = 0\n    while len(powers) < n:\n        powers.extend([5 ** i + p for p in powers])\n        powers.append(5 ** i)\n        i += 1\n    return sorted(powers)[n - 1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos = set()\n    for i in range(1, len(powers)):\n        for j in range(i):\n            chandos.add(powers[i] + powers[j])\n    chandos = sorted(list(chandos)) + powers\n    chandos.sort()\n    return chandos[n-1]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    power = 1\n    while len(chandos) < n + 1:\n        for i in range(power, len(chandos)):\n            chandos.append(chandos[i] + 5 ** power)\n        power += 1\n    return chandos[n]",
            "def nth_chandos_number(n):\n    chandos_sequence = [0]\n    i = 0\n    while len(chandos_sequence) < n + 1:\n        for j in range(len(chandos_sequence)):\n            new_num = 5 ** i + chandos_sequence[j]\n            if new_num not in chandos_sequence:\n                chandos_sequence.append(new_num)\n                chandos_sequence.sort()\n        i += 1\n    return chandos_sequence[n]",
            "def nth_chandos_number(n):\n    chandos = []\n    i = 1\n    while len(chandos) < n:\n        val = 5 ** i\n        chandos.append(val)\n        j = i - 1\n        while j >= 1:\n            chandos.append(val + 5 ** j)\n            j -= 1\n        i += 1\n    chandos.sort()\n    return chandos[n - 1]",
            "def nth_chandos_number(n):\n    chandos_numbers = []\n    i = 0\n    while len(chandos_numbers) < n:\n        temp = []\n        for j in range(i, -1, -1):\n            temp.append(5 ** j)\n        for k in range(2 ** i):\n            num = 0\n            for l in range(i):\n                if (k >> l) & 1:\n                    num += temp[l]\n            if num not in chandos_numbers:\n                chandos_numbers.append(num)\n        i += 1\n    chandos_numbers.sort()\n    return chandos_numbers[n - 1]",
            "def nth_chandos_number(n):\n    powers = []\n    i = 1\n    while len(powers) < n:\n        powers.extend([i * (5 ** j) for j in range(1, 15)])\n        powers = sorted(list(set(powers)))\n        i += 1\n    return powers[n - 1]",
            "def nth_chandos_number(n):\n    powers = [5**i for i in range(18)]  # calculate powers of 5 up to 5^17\n    chandos = []  # list to store Chando's numbers\n\n    def generate_chandos(powers, current=0, path=()):\n        nonlocal chandos\n        if current > powers[-1]:  # if current sum is greater than the largest power of 5, stop\n            return\n        if path:  # if path is not empty, add the current sum to the list of Chando's numbers\n            chandos.append(sum(path))\n        for i, power in enumerate(powers):\n            if current + power not in chandos:  # avoid duplicates\n                generate_chandos(powers[i+1:], current + power, path + (power,))\n\n    generate_chandos(powers)  # generate all Chando's numbers\n    chandos.sort()  # sort the list of Chando's numbers\n    return chandos[n-1]  # return the nth Chando's number"
        ],
        "1": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    chandos.sort()\n    return chandos[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]"
        ],
        "2": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n        chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]"
        ],
        "3": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]"
        ],
        "4": [
            "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power_of_five = 1\n    while len(chandos_numbers) < n + 1:\n        power_of_five *= 5\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + power_of_five)\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "def nth_chandos_number(n):\n    pows = [5**i for i in range(1, 20)]\n    nums = [0]\n    for p in pows:\n        nums += [n + p for n in nums]\n    nums.sort()\n    return nums[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    i = 0\n    while len(chandos) < n + 1:\n        for j in range(len(chandos)):\n            chandos.append(chandos[j] + 5 ** (i + 1))\n        i += 1\n    return chandos[n]",
            "def nth_chandos_number(n):\n    chandos = [0]\n    p5 = 1\n    while len(chandos) < n + 1:\n        p5 *= 5\n        for i in range(len(chandos)):\n            chandos.append(chandos[i] + p5)\n        chandos = sorted(list(set(chandos)))\n    return chandos[n]"
        ]
    }
}