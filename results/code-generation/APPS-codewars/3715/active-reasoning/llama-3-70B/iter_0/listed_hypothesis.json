{
    "0": [
        {
            "content": "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos = set()\n    queue = [0]\n    \n    while len(chandos) < n:\n        num = queue.pop(0)\n        for p in powers:\n            new_num = num + p\n            if new_num not in chandos:\n                queue.append(new_num)\n                chandos.add(new_num)\n    \n    return sorted(list(chandos))[n-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    powers = [5**i for i in range(14)]\n    chandos = set()\n    for i in range(1, 14):\n        for j in range(i):\n            chandos.add(powers[i] + powers[j])\n    chandos = sorted(list(chandos))\n    return chandos[n-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    dp = [0]*(n+1)\n    dp[0] = 1\n    \n    for power in powers:\n        for i in range(n, power-1, -1):\n            dp[i] += dp[i-power]\n            \n    nums = []\n    i = 0\n    while len(nums) < n:\n        if dp[i] > 0:\n            nums.append(i)\n        i += 1\n        \n    return nums[-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    powers = [5**i for i in range(15)]\n    chandos = set()\n    def dfs(idx, path, s):\n        if s not in chandos:\n            chandos.add(s)\n        if idx == len(powers):\n            return\n        dfs(idx + 1, path, s)\n        dfs(idx + 1, path + [powers[idx]], s + powers[idx])\n    dfs(0, [], 0)\n    chandos = sorted(list(chandos))\n    return chandos[n - 1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    powers = [5**i for i in range(18)]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for p in powers:\n        for i in range(n, p - 1, -1):\n            dp[i] += dp[i - p]\n    \n    ans = 0\n    i = 1\n    while n > 0:\n        while dp[n] == dp[n - 1]:\n            n -= 1\n        ans += powers[i - 1]\n        n -= 1\n        i += 1\n    \n    return ans",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        next_power = 5 ** power\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + next_power)\n        chandos_numbers.sort()\n        power += 1\n    return chandos_numbers[n]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    i = 0\n    while len(chandos_numbers) < n:\n        i += 1\n        for j in range(i):\n            new_num = chandos_numbers[j] + pow(5, i)\n            if new_num not in chandos_numbers:\n                chandos_numbers.append(new_num)\n        chandos_numbers.sort()\n    return chandos_numbers[n-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    powers_of_five = [5**i for i in range(1, 15)]\n    chandos_numbers = [0]\n    i = 0\n    while len(chandos_numbers) < n + 1:\n        for power in powers_of_five:\n            if chandos_numbers[i] + power not in chandos_numbers:\n                chandos_numbers.append(chandos_numbers[i] + power)\n        i += 1\n        chandos_numbers.sort()\n    return chandos_numbers[n]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    pows = [5**i for i in range(15)]\n    chandos = set()\n    def dfs(val, idx):\n        if val not in chandos:\n            chandos.add(val)\n            for i in range(idx, len(pows)):\n                dfs(val + pows[i], i)\n    dfs(0, 0)\n    return sorted(list(chandos))[n-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    powers_of_five = [5**i for i in range(16)]\n    chandos_numbers = []\n    def generate_chandos_numbers(index):\n        if index == len(powers_of_five):\n            chandos_numbers.append(0)\n            return\n        for i in range(2):\n            chandos_numbers.append(sum(powers_of_five[index:index+16]))\n            generate_chandos_numbers(index+1)\n    generate_chandos_numbers(0)\n    chandos_numbers.sort()\n    return chandos_numbers[n-1]",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        next_power = 5 ** power\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(next_power + chandos_numbers[i])\n        power += 1\n    return sorted(chandos_numbers)[n]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    i = 0\n    while len(chandos_numbers) < n:\n        i += 1\n        for j in range(i):\n            new_num = chandos_numbers[j] + pow(5, i)\n            if new_num not in chandos_numbers:\n                chandos_numbers.append(new_num)\n                chandos_numbers.sort()\n    return chandos_numbers[n-1]",
            "logp": null
        },
        {
            "content": "def nth_chandos_number(n):\n    chandos_nums = [0]\n    power = 1\n    while len(chandos_nums) < n + 1:\n        val = 5 ** power\n        for i in range(len(chandos_nums)):\n            chandos_nums.append(chandos_nums[i] + val)\n        power += 1\n        chandos_nums = sorted(list(set(chandos_nums)))\n    return chandos_nums[n]",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        next_power = 5 ** power\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(chandos_numbers[i] + next_power)\n        power += 1\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def nth_chandos_number(n):\n    chandos_numbers = [0]\n    power = 1\n    while len(chandos_numbers) < n + 1:\n        next_power = 5 ** power\n        for i in range(len(chandos_numbers)):\n            chandos_numbers.append(next_power + chandos_numbers[i])\n        power += 1\n    chandos_numbers.sort()\n    return chandos_numbers[n]",
            "logp": null
        }
    ]
}