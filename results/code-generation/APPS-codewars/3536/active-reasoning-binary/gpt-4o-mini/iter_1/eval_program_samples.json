{
    "0": {
        "0": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 0\n    rpm_end = 0\n\n    for i in range(n, 0, -1):\n        rpm_start = rpm_end * (cogs[i] / cogs[i - 1]) if i < len(cogs) - 1 else 1\n        rpm_end = -rpm_start * (cogs[i - 1] / cogs[i])\n    \n    rpm_end = -rpm_end if n % 2 == 0 else rpm_end\n\n    for i in range(n + 1, len(cogs)):\n        rpm_start = rpm_end * (cogs[i - 1] / cogs[i])\n        rpm_end = -rpm_start * (cogs[i] / cogs[i - 1])\n\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1\n    right_rpm = 1\n    for i in range(n, 0, -1):\n        left_rpm *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= cogs[i] / cogs[i + 1]\n    return [int(left_rpm), int(-right_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] if n > 0 else rpm_start * cogs[n] / cogs[-1]\n    \n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i-1]\n    \n    for i in range(n, len(cogs)-1):\n        rpm_end = rpm_end * cogs[i] / cogs[i+1]\n    \n    return [int(rpm_start), int(-rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n == 0:\n        return [0, (-1) ** (len(cogs) - 1) * (cogs[n] / cogs[-1])]\n    \n    rpm_first = (-1) ** n * (cogs[n] / cogs[0])\n    rpm_last = (-1) ** (len(cogs) - n - 1) * (cogs[n] / cogs[-1])\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * (cogs[i] / cogs[i - 1]) * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * (cogs[i] / cogs[i + 1]) * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1\n    right_rpm = 1\n    for i in range(n, 0, -1):\n        left_rpm *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= cogs[i] / cogs[i + 1]\n    \n    return [int(left_rpm), int(-right_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 0\n    rpm_last = 0\n    \n    for i in range(n, 0, -1):\n        rpm_first = (cogs[i] / cogs[i - 1]) * rpm_last if i < len(cogs) - 1 else 1\n        rpm_last = -rpm_first\n    \n    rpm_last = 1\n    for i in range(n, len(cogs) - 1):\n        rpm_last = (cogs[i] / cogs[i + 1]) * rpm_last\n\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    if n == 0:\n        return [1 * (last_cog_teeth / first_cog_teeth), -1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm *= cogs[i] / cogs[i - 1]\n        \n    first_rpm = rpm\n    last_rpm = -first_rpm * (cogs[n] / last_cog_teeth)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n        \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    \n    if len(cogs) == 1:\n        return [1, 1]  # If there's only one cog, both RPMs are 1\n    \n    # Calculate the RPM for the first and last cogs based on the nth cog\n    rpm_first = (cogs[n] / first_teeth) * 1\n    rpm_last = (cogs[n] / last_teeth) * 1\n    \n    # If n is odd, the first cog will rotate anti-clockwise\n    if n % 2 == 1:\n        rpm_first = -rpm_first\n    \n    # If (len(cogs) - n - 1) is odd, the last cog will rotate anti-clockwise\n    if (len(cogs) - n - 1) % 2 == 1:\n        rpm_last = -rpm_last\n    \n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm_first = 0\n    rpm_last = 0\n    rotation = 1\n\n    for i in range(n, 0, -1):\n        rotation *= -cogs[i] / cogs[i - 1]\n    rpm_first = rotation\n\n    rotation = 1\n    for i in range(n, len(cogs) - 1):\n        rotation *= -cogs[i] / cogs[i + 1]\n    rpm_last = rotation\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] * (-1)**n\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i-1] * (-1)\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i+1] * (-1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = (-cogs[n] / cogs[0]) if n > 0 else 1\n    right_rpm = (-cogs[n] / cogs[-1]) if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    return [int(left_rpm), int(right_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    clockwise = 1\n    current_teeth = cogs[n]\n    \n    rpm_start = clockwise\n    rpm_end = clockwise\n    \n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_start), int(rpm_end)]\n```"
        ],
        "1": [
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0, 0]\n    clockwise = 1\n    \n    for i in range(n, -1, -1):\n        rpm[0] = rpm[0] + clockwise * (1 * cogs[i] / cogs[i + 1]) if i < len(cogs) - 1 else clockwise\n    \n    clockwise = -1\n    for i in range(n, len(cogs)):\n        rpm[1] = rpm[1] + clockwise * (1 * cogs[i] / cogs[i - 1]) if i > 0 else clockwise\n    \n    return [int(rpm[0]), int(rpm[1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_teeth = cogs[0]\n    right_teeth = cogs[-1]\n    rpm_first = -cogs[n] * right_teeth / left_teeth\n    rpm_last = cogs[n] * left_teeth / right_teeth\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] if n > 0 else rpm_start * cogs[n] / cogs[-1]\n    \n    if n == 0:\n        rpm_start = -rpm_end\n    else:\n        rpm_start = -rpm_end\n\n    for i in range(n, 0, -1):\n        rpm_end = -rpm_end * cogs[i] / cogs[i-1]\n\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n == 0:\n        return [0, 0] if len(cogs) == 1 else [1 * (cogs[n + 1] / cogs[n]), -1 * (cogs[n] / cogs[-1])]\n    elif n == len(cogs) - 1:\n        return [-1 * (cogs[n - 1] / cogs[n]), 1]\n    else:\n        first_rpm = 1 * (cogs[n + 1] / cogs[n])\n        last_rpm = -1 * (cogs[n] / cogs[-1])\n        return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * (cogs[i] / cogs[i - 1]) * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * (cogs[i] / cogs[i + 1]) * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (-cogs[n] / cogs[0]) if n > 0 else 1\n    rpm_end = (-cogs[n] / cogs[-1]) if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    last_cog_rpm = (-cogs[n] / cogs[-1]) * 1\n    first_cog_rpm = (-cogs[n] / cogs[0]) * 1\n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1 * cogs[n] / cogs[0] if n > 0 else 1\n    rpm_last = 1 * cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [int(rpm_first), int(-rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1 * cogs[n] / cogs[0] if n != 0 else 1\n    rpm_last = -1 * cogs[n] / cogs[-1] if n != len(cogs) - 1 else -1\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    target_teeth = cogs[n]\n    \n    first_rpm = (target_teeth / first_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (target_teeth / last_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    rpm_first_cog = clockwise_rpm * (cogs[n] / cogs[0]) if n > 0 else clockwise_rpm\n    rpm_last_cog = clockwise_rpm * (cogs[n] / cogs[-1]) if n < len(cogs) - 1 else clockwise_rpm\n    \n    return [int(rpm_first_cog), int(rpm_last_cog)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = -cogs[n] * last_teeth / first_teeth\n    rpm_last = -cogs[n] * first_teeth / last_teeth\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0]\n    rpm_end = cogs[n] / cogs[-1]\n    return [rpm_end, -rpm_start]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm_first = 0\n    rpm_last = 0\n\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first if i % 2 == n % 2 else -rpm_first * cogs[i] // cogs[i - 1] if rpm_first != 0 else -1 * (1 * cogs[i] // cogs[i - 1])\n\n    rpm_last = 0\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last if i % 2 == n % 2 else -rpm_last * cogs[i + 1] // cogs[i] if rpm_last != 0 else 1 * (1 * cogs[i + 1] // cogs[i])\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = (cogs[i] / cogs[i - 1]) * clockwise_rpm\n    \n    counterclockwise_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        counterclockwise_rpm = -(cogs[i + 1] / cogs[i]) * counterclockwise_rpm\n    \n    return [int(clockwise_rpm), int(counterclockwise_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 0:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i - 1]\n    \n    counterclockwise_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        counterclockwise_rpm = counterclockwise_rpm * cogs[i] / cogs[i + 1]\n    \n    return [int(round(counterclockwise_rpm)), int(round(clockwise_rpm))]\n```"
        ],
        "2": [
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1\n    right_rpm = 1\n    for i in range(n, 0, -1):\n        left_rpm *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= cogs[i] / cogs[i + 1]\n    return [int(left_rpm), int(-right_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = 1\n    \n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i-1] = rpm[i] * (cogs[i] / cogs[i-1]) * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i+1] = rpm[i] * (cogs[i] / cogs[i+1]) * -1\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n == 0:\n        return [0, (-1) ** (len(cogs) - 1) * (cogs[n] / cogs[-1])]\n    elif n == len(cogs) - 1:\n        return [(1) * (cogs[0] / cogs[n]), 0]\n    else:\n        rpm_first = (1) * (cogs[n] / cogs[0])\n        rpm_last = (-1) ** (len(cogs) - n - 1) * (cogs[n] / cogs[-1])\n        return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * (cogs[i] / cogs[i - 1]) * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * (cogs[i] / cogs[i + 1]) * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (-cogs[n] / cogs[0]) if n > 0 else 1\n    rpm_end = (-cogs[n] / cogs[-1]) if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    last_cog_rpm = (-1) ** (len(cogs) - n - 1) * cogs[n] / cogs[-1]\n    first_cog_rpm = (-1) ** n * cogs[n] / cogs[0]\n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 0\n    rpm_last = 0\n    \n    for i in range(n, 0, -1):\n        rpm_first = (cogs[i] / cogs[i - 1]) * rpm_last if i < len(cogs) - 1 else 1\n        rpm_last = -rpm_first\n    \n    rpm_last = 1\n    for i in range(n, len(cogs) - 1):\n        rpm_last = (cogs[i] / cogs[i + 1]) * rpm_first if i > 0 else 1\n        rpm_first = -rpm_last\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1  # nth cog rotates at 1 RPM\n    \n    # Calculate RPM for cogs to the left of nth cog\n    for i in range(n - 1, -1, -1):\n        rpm[i] = rpm[i + 1] * (cogs[i + 1] / cogs[i]) * -1\n    \n    # Calculate RPM for cogs to the right of nth cog\n    for i in range(n + 1, len(cogs)):\n        rpm[i] = rpm[i - 1] * (cogs[i - 1] / cogs[i]) * -1\n        \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    if n == 0:\n        return [1 * (last_cog_teeth / first_cog_teeth), -1]\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm *= cogs[i] / cogs[i + 1]\n    \n    first_rpm = rpm * (last_cog_teeth / first_cog_teeth)\n    last_rpm = -1 * rpm\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n        \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    \n    if len(cogs) == 1:\n        return [1, 1]  # If there's only one cog, both RPMs are 1\n    \n    # Calculate the RPM for the first and last cogs based on the nth cog\n    rpm_first = (cogs[n] / first_teeth) * 1\n    rpm_last = (cogs[n] / last_teeth) * 1\n    \n    # If n is odd, the first cog will rotate anti-clockwise\n    if n % 2 == 1:\n        rpm_first = -rpm_first\n    \n    # If (length-cogs) % 2 == 1, the last cog will rotate anti-clockwise\n    if (len(cogs) - n) % 2 == 1:\n        rpm_last = -rpm_last\n    \n    return [round(rpm_first), round(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm_first = 0\n    rpm_last = 0\n    rotation = 1\n\n    for i in range(n, 0, -1):\n        rotation *= -cogs[i] / cogs[i - 1]\n    rpm_first = rotation\n\n    rotation = 1\n    for i in range(n, len(cogs) - 1):\n        rotation *= -cogs[i] / cogs[i + 1]\n    rpm_last = rotation\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] * (-1)**n\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i-1] * (-1)\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i+1] * (-1)\n    return [rpm_start, int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = (-cogs[n] / cogs[0]) if n > 0 else 1\n    right_rpm = (-cogs[n] / cogs[-1]) if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    return [int(left_rpm), int(right_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 0:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i - 1]\n    \n    first_cog_rpm = clockwise_rpm\n    \n    for i in range(n, len(cogs) - 1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i + 1]\n    \n    last_cog_rpm = clockwise_rpm\n    \n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -1 if n % 2 == 0 else 1\n    rpm_last = 1 if n % 2 == 0 else -1\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm = rpm * cogs[i] / cogs[i - 1]\n    \n    first_cog_rpm = rpm\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm = rpm * cogs[i] / cogs[i + 1]\n    \n    last_cog_rpm = rpm\n    \n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i-1] = rpm[i] * cogs[i] / cogs[i-1]\n    for i in range(n, len(cogs)-1):\n        rpm[i+1] = rpm[i] * cogs[i] / cogs[i+1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = -cogs[n] / cogs[0] if n > 0 else 1\n    last_rpm = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 0\n    rpm_end = 0\n    for i in range(n, -1, -1):\n        rpm_start = (cogs[i] / cogs[i + 1]) * (rpm_start if i < n else 1)\n    for i in range(n, len(cogs) - 1):\n        rpm_end = (cogs[i] / cogs[i + 1]) * (rpm_end if i > n else 1)\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1  # nth cog rotates at 1 RPM clockwise\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (-1 if n % 2 == 0 else 1)\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1\n    rpm_end = 1\n\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_start), int(rpm_end)]\n```"
        ],
        "3": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 0\n    rpm_end = 0\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start + (cogs[i] / cogs[i - 1]) * 1 if i % 2 == 0 else rpm_start - (cogs[i] / cogs[i - 1]) * 1\n    rpm_start = -rpm_start\n\n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end + (cogs[i] / cogs[i + 1]) * 1 if i % 2 == 0 else rpm_end - (cogs[i] / cogs[i + 1]) * 1\n\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1\n    right_rpm = 1\n    for i in range(n, 0, -1):\n        left_rpm *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= cogs[i] / cogs[i + 1]\n    return [int(left_rpm), int(-right_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] if n > 0 else rpm_start * cogs[n] / cogs[-1]\n    \n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] / cogs[i + 1] if n < len(cogs) - 1 else rpm_end\n    \n    return [round(rpm_start), round(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i-1] = rpm[i] * (cogs[i] / cogs[i-1])\n        \n    for i in range(n, len(cogs) - 1):\n        rpm[i+1] = rpm[i] * (cogs[i] / cogs[i+1])\n        \n    return [round(rpm[0]), round(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n == 0:\n        return [0, (-1) ** (len(cogs) - 1) * (cogs[n] / cogs[-1])]\n    elif n == len(cogs) - 1:\n        return [(1) * (cogs[0] / cogs[n]), 0]\n    else:\n        rpm_start = (1) * (cogs[n] / cogs[0])\n        rpm_end = (-1) ** (len(cogs) - n - 1) * (cogs[n] / cogs[-1])\n        return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * (cogs[i] / cogs[i - 1]) * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * (cogs[i] / cogs[i + 1]) * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1\n    rpm_last = 1\n    \n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1  # nth cog rotates at 1 RPM\n    \n    # Calculate RPM for cogs to the left of nth cog\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    # Calculate RPM for cogs to the right of nth cog\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    if n == 0:\n        return [1 * (last_cog_teeth / first_cog_teeth), -1]\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm *= cogs[i] / cogs[i + 1]\n    \n    first_rpm = rpm * (last_cog_teeth / first_cog_teeth)\n    last_rpm = -1 * rpm\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n        \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    \n    if len(cogs) == 1:\n        return [1, 1]  # If there's only one cog, both RPMs are 1\n    \n    # Calculate the RPM for the first and last cogs based on the nth cog\n    rpm_first = (cogs[n] / first_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_teeth) * (1 if (n + 1) % 2 == 0 else -1)\n\n    return [round(rpm_first), round(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm_first = 0\n    rpm_last = 0\n    rotation = 1\n\n    for i in range(n, 0, -1):\n        rotation *= -cogs[i] / cogs[i - 1]\n    rpm_first = rotation\n\n    rotation = 1\n    for i in range(n, len(cogs) - 1):\n        rotation *= -cogs[i] / cogs[i + 1]\n    rpm_last = rotation\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] * (-1)**n\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i-1] * (-1)\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i+1] * (-1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = (-cogs[n] / cogs[0]) if n > 0 else 1\n    right_rpm = (-cogs[n] / cogs[-1]) if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 0:\n        return [0, 0]\n    \n    clockwise = 1\n    current_teeth = cogs[n]\n    \n    rpm_start = clockwise * (cogs[n] / cogs[0]) if n > 0 else clockwise\n    rpm_end = clockwise * (cogs[n] / cogs[-1]) if n < len(cogs) - 1 else clockwise\n    \n    for i in range(n, 0, -1):\n        rpm_start *= -cogs[i - 1] / cogs[i]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm_end *= -cogs[i + 1] / cogs[i]\n    \n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -1 if n % 2 == 0 else 1\n    rpm_last = 1 if n % 2 == 0 else -1\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm = rpm * cogs[i] / cogs[i - 1]\n    \n    start_rpm = rpm\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm = rpm * cogs[i] / cogs[i + 1]\n    \n    end_rpm = rpm\n    \n    return [int(start_rpm), int(end_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = -cogs[n] / cogs[0] if n > 0 else 1\n    last_rpm = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 0\n    rpm_end = 0\n    for i in range(n, -1, -1):\n        rpm_start = (cogs[i] / cogs[i - 1]) * rpm_end if i > 0 else 1\n        rpm_end = - (cogs[i - 1] / cogs[i]) * rpm_start if i > 0 else 0\n    for i in range(n, len(cogs) - 1):\n        rpm_end = - (cogs[i] / cogs[i + 1]) * rpm_start\n        rpm_start = (cogs[i + 1] / cogs[i]) * rpm_end\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1  # nth cog rotates at 1 RPM clockwise\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (-1 if n % 2 == 0 else 1)\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1\n    rpm_end = 1\n\n    for i in range(n, 0, -1):\n        rpm_end *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_start *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_end), int(rpm_start)]\n```"
        ],
        "4": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 0\n    rpm_end = 0\n\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * (-cogs[i] / cogs[i - 1]) + 1\n\n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * (-cogs[i] / cogs[i + 1]) + 1\n\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1\n    right_rpm = 1\n    for i in range(n, 0, -1):\n        left_rpm *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= cogs[i] / cogs[i + 1]\n    return [int(left_rpm), int(-right_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] if n > 0 else -1 * rpm_start * cogs[n] / cogs[-1]\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i-1] = rpm[i] * (cogs[i] / cogs[i-1]) * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i+1] = rpm[i] * (cogs[i] / cogs[i+1]) * -1\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n == 0:\n        return [0, (-1) ** (len(cogs) - 1) * (cogs[n] / cogs[-1])]\n    \n    rpm_first = (-1) ** n * (cogs[n] / cogs[0])\n    rpm_last = (-1) ** (len(cogs) - n - 1) * (cogs[n] / cogs[-1])\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * (cogs[i] / cogs[i - 1]) * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * (cogs[i] / cogs[i + 1]) * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1 * cogs[n] / cogs[0] if n > 0 else 1\n    rpm_last = 1 * cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [int(rpm_first), int(-rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1 * cogs[n] / cogs[0] if n != 0 else 1\n    rpm_last = -1 * cogs[n] / cogs[-1] if n != len(cogs) - 1 else -1\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    target_teeth = cogs[n]\n    \n    first_rpm = (target_teeth / first_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (target_teeth / last_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    rpm_first_cog = clockwise_rpm * (cogs[n] / cogs[0]) if n > 0 else clockwise_rpm\n    rpm_last_cog = clockwise_rpm * (cogs[n] / cogs[-1]) if n < len(cogs) - 1 else clockwise_rpm\n    \n    return [int(-rpm_first_cog) if n == 0 else int(rpm_first_cog), int(-rpm_last_cog) if n == len(cogs) - 1 else int(rpm_last_cog)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = -cogs[n] * last_teeth / first_teeth\n    rpm_last = -cogs[n] * first_teeth / last_teeth\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0]\n    rpm_end = cogs[n] / cogs[-1]\n    return [rpm_end, rpm_start]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm_first = 0\n    rpm_last = 0\n\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first if i == n else rpm_first * cogs[i] // cogs[i - 1] if rpm_first != 0 else 1\n        rpm_first = -rpm_first if i % 2 == 0 else rpm_first\n\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last if i == n else rpm_last * cogs[i] // cogs[i + 1] if rpm_last != 0 else 1\n        rpm_last = -rpm_last if (i + 1) % 2 == 0 else rpm_last\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = (cogs[i] / cogs[i - 1]) * clockwise_rpm\n    \n    counterclockwise_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        counterclockwise_rpm = (cogs[i] / cogs[i + 1]) * counterclockwise_rpm\n    \n    return [int(round(counterclockwise_rpm)), int(round(clockwise_rpm))]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 0:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i - 1]\n    \n    counterclockwise_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        counterclockwise_rpm = counterclockwise_rpm * cogs[i] / cogs[i + 1]\n    \n    return [int(round(counterclockwise_rpm)), int(round(clockwise_rpm))]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1\n    rpm_last = 1\n\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * cogs[i] / cogs[i - 1]\n\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm = rpm * cogs[i] / cogs[i - 1]\n    \n    first_cog_rpm = rpm\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm = rpm * cogs[i] / cogs[i + 1]\n    \n    last_cog_rpm = rpm\n    \n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_teeth) * 1\n    rpm_last = (cogs[n] / last_teeth) * -1\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * (cogs[n] / cogs[0])\n    for i in range(n, 0, -1):\n        rpm_start *= (cogs[i] / cogs[i - 1])\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= (cogs[i + 1] / cogs[i])\n    return [int(round(rpm_start)), int(round(rpm_end))]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = -cogs[n] * last_teeth / first_teeth\n    rpm_last = -cogs[n] * first_teeth / last_teeth\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1\n    rpm_end = 1\n\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_start), int(rpm_end)]\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1 * cogs[n] / cogs[0] if n > 0 else 1\n    rpm_last = 1 * cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [int(rpm_first), int(-rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1 * cogs[n] / cogs[0] if n != 0 else 1\n    rpm_last = -1 * cogs[n] / cogs[-1] if n != len(cogs) - 1 else -1\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    target_teeth = cogs[n]\n    \n    first_rpm = (target_teeth / first_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (target_teeth / last_teeth) * (1 if n % 2 == 1 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    rpm_first_cog = clockwise_rpm * (cogs[n] / cogs[0]) if n > 0 else clockwise_rpm\n    rpm_last_cog = clockwise_rpm * (cogs[n] / cogs[-1]) if n < len(cogs) - 1 else -clockwise_rpm\n    \n    return [int(rpm_first_cog), int(rpm_last_cog)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = -cogs[n] * last_teeth / first_teeth\n    rpm_last = -cogs[n] * first_teeth / last_teeth\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0]\n    rpm_end = cogs[n] / cogs[-1]\n    return [rpm_end, -rpm_start]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm_first = 0\n    rpm_last = 0\n\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first if i == n else rpm_first * cogs[i] // cogs[i - 1] * -1 if i % 2 == 0 else rpm_first * cogs[i] // cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last if i == n else rpm_last * cogs[i] // cogs[i + 1] * -1 if (i + 1) % 2 == 0 else rpm_last * cogs[i] // cogs[i + 1]\n        \n    return [rpm_first if rpm_first != 0 else -1, rpm_last if rpm_last != 0 else -1]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = (cogs[i] / cogs[i - 1]) * clockwise_rpm\n    \n    counterclockwise_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        counterclockwise_rpm = (cogs[i] / cogs[i + 1]) * counterclockwise_rpm\n    \n    return [int(round(counterclockwise_rpm)), int(round(clockwise_rpm))]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 0:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i - 1]\n    \n    counterclockwise_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        counterclockwise_rpm = counterclockwise_rpm * cogs[i] / cogs[i + 1]\n    \n    return [int(round(counterclockwise_rpm)), int(round(clockwise_rpm))]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -1 if n % 2 == 1 else 1\n    rpm_last = 1\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= -cogs[i] / cogs[i + 1]\n    for i in range(n, 0, -1):\n        rpm_first *= -cogs[i] / cogs[i - 1]\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm = rpm * cogs[i] / cogs[i - 1]\n    \n    start_rpm = rpm\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm = rpm * cogs[i] / cogs[i + 1]\n    \n    end_rpm = rpm\n    \n    return [int(start_rpm), int(end_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_teeth) * 1\n    rpm_last = (cogs[n] / last_teeth) * -1\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    current_cog_teeth = cogs[n]\n    \n    rpm_first = (current_cog_teeth / first_cog_teeth) * 1\n    rpm_last = (current_cog_teeth / last_cog_teeth) * 1\n    \n    return [int(rpm_first) if rpm_first >= 0 else int(rpm_first), int(rpm_last) if rpm_last >= 0 else int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0]\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n    rpm_end = rpm_start * cogs[n] / cogs[-1]\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm *= cogs[i] / cogs[i - 1]\n    \n    first_cog_rpm = -rpm\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm *= cogs[i] / cogs[i + 1]\n    \n    last_cog_rpm = -rpm\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (-1 if n % 2 == 0 else 1)\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1\n    rpm_end = 1\n\n    for i in range(n, 0, -1):\n        rpm_end *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_start *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_end), int(rpm_start)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    rpm_first = 0\n    rpm_last = 0\n    \n    # Calculate RPM for the first cog\n    for i in range(n, 0, -1):\n        rpm_first = (-rpm_first if i % 2 == 0 else rpm_first) + (cogs[i-1] / cogs[i]) * (1 if i % 2 == 1 else -1)\n    \n    # Calculate RPM for the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_last = (-rpm_last if i % 2 == 0 else rpm_last) + (cogs[i+1] / cogs[i]) * (1 if i % 2 == 0 else -1)\n    \n    return [int(rpm_first), int(rpm_last)]\n```"
        ],
        "1": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 0\n    rpm_last = 0\n    \n    for i in range(n, 0, -1):\n        rpm_first = (cogs[i] / cogs[i - 1]) * rpm_last if i < len(cogs) - 1 else 1\n        rpm_last = -rpm_first\n    \n    rpm_last = 1\n    for i in range(n, len(cogs) - 1):\n        rpm_last = (cogs[i] / cogs[i + 1]) * rpm_first if i > 0 else 1\n        rpm_first = -rpm_last\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1  # nth cog rotates at 1 RPM\n    \n    # Calculate RPM for cogs to the left of nth cog\n    for i in range(n - 1, -1, -1):\n        rpm[i] = rpm[i + 1] * (cogs[i + 1] / cogs[i]) * -1\n    \n    # Calculate RPM for cogs to the right of nth cog\n    for i in range(n + 1, len(cogs)):\n        rpm[i] = rpm[i - 1] * (cogs[i - 1] / cogs[i]) * -1\n        \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    \n    rpm_first = (cogs[n] / first_teeth) * (1 if n == 0 else -1)\n    rpm_last = (cogs[n] / last_teeth) * (1 if n == len(cogs) - 1 else -1)\n    \n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * (cogs[i] / cogs[i - 1]) * -1\n        \n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * (cogs[i] / cogs[i + 1]) * -1\n\n    return [round(rpm_first), round(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n        \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    \n    if len(cogs) == 1:\n        return [1, 1]  # If there's only one cog, both RPMs are 1\n    \n    # Calculate the RPM for the first and last cogs based on the nth cog\n    rpm_first = (cogs[n] / first_teeth) * 1\n    rpm_last = (cogs[n] / last_teeth) * 1\n    \n    # If n is odd, the first cog will rotate anti-clockwise\n    if n % 2 == 1:\n        rpm_first = -rpm_first\n    \n    # If (length-cogs) % 2 == 1, the last cog will rotate anti-clockwise\n    if (len(cogs) - n) % 2 == 1:\n        rpm_last = -rpm_last\n    \n    return [round(rpm_first), round(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm_first = 0\n    rpm_last = 0\n    rotation = 1\n\n    for i in range(n, 0, -1):\n        rotation *= -cogs[i] / cogs[i - 1]\n    rpm_first = rotation\n\n    rotation = 1\n    for i in range(n, len(cogs) - 1):\n        rotation *= -cogs[i] / cogs[i + 1]\n    rpm_last = rotation\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] * (-1)**n\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i-1] * (-1)\n    for i in range(n, len(cogs)-1):\n        rpm_end = rpm_end * cogs[i] / cogs[i+1] * (-1)\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = (-cogs[n] / cogs[0]) if n > 0 else 1\n    right_rpm = (-cogs[n] / cogs[-1]) if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 0:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    rpm_start = clockwise_rpm * cogs[n] / cogs[0]\n    rpm_end = clockwise_rpm * cogs[n] / cogs[-1]\n    \n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -1 * (cogs[n] / cogs[0])\n    rpm_last = -1 * (cogs[n] / cogs[-1])\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm = rpm * cogs[i] / cogs[i - 1]\n    \n    first_cog_rpm = rpm\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm = rpm * cogs[i] / cogs[i + 1]\n    \n    last_cog_rpm = rpm\n    \n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_teeth) * 1\n    rpm_last = -(cogs[n] / last_teeth) * 1\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    current_cog_teeth = cogs[n]\n    \n    rpm_first = (current_cog_teeth / first_cog_teeth) * 1\n    rpm_last = (current_cog_teeth / last_cog_teeth) * -1\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0]\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n    rpm_start = rpm_start if n % 2 == 0 else -rpm_start\n    rpm_end = rpm_end if (len(cogs) - 1 - n) % 2 == 0 else -rpm_end\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    clockwise_rpm = 1\n    first_rpm = clockwise_rpm * (cogs[n] / cogs[0])\n    last_rpm = clockwise_rpm * (cogs[n] / cogs[-1])\n    \n    return [int(first_rpm), int(last_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (-1 if n % 2 == 0 else 1)\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1\n    rpm_end = 1\n\n    for i in range(n, 0, -1):\n        rpm_end *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_start *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_end), int(rpm_start)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    rpm_first = 0\n    rpm_last = 0\n    \n    # Calculate RPM for the first cog\n    for i in range(n, 0, -1):\n        rpm_first = (-rpm_first if i % 2 == 0 else rpm_first) + (cogs[i-1] / cogs[i]) * (1 if i % 2 == 1 else -1)\n    \n    # Calculate RPM for the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_last = (-rpm_last if i % 2 == 0 else rpm_last) + (cogs[i+1] / cogs[i]) * (1 if i % 2 == 0 else -1)\n    \n    return [int(rpm_first), int(rpm_last)]\n```"
        ]
    }
}