{
    "0": [
        {
            "content": "def cog_RPM(cogs, n):\n    rpm = [1]\n    for i in range(len(cogs) - 1):\n        rpm.append(-rpm[-1] * cogs[i] / cogs[i + 1])\n    return [rpm[0], rpm[-1]]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    ratio = 1\n    for i in range(n, len(cogs) - 1):\n        ratio *= -cogs[i] / cogs[i + 1]\n    for i in range(n):\n        ratio *= -cogs[i] / cogs[i + 1]\n    return [ratio, 1]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    rpm = [1]\n    for i in range(len(cogs) - 1):\n        rpm.append(rpm[-1] * cogs[i] / cogs[i + 1])\n    if n % 2 == 1:\n        rpm[0] = -rpm[0]\n    return [rpm[0], rpm[-1]]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    rpm = [1, 1]\n    for i in range(n):\n        rpm[0] = rpm[0] * cogs[i] / cogs[i + 1]\n    for i in range(len(cogs) - 1, n, -1):\n        rpm[1] = rpm[1] * cogs[i] / cogs[i - 1]\n    return rpm",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    rpm_first = 1\n    rpm_last = 1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n        \n    for i in range(n):\n        rpm_first = rpm_first * cogs[i] / cogs[i + 1]\n        \n    return [rpm_first, rpm_last]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    rpm = 1\n    for i in range(n, len(cogs)):\n        rpm = rpm * cogs[i-1] / cogs[i]\n    for i in range(n-1, -1, -1):\n        rpm = rpm * cogs[i] / cogs[i-1]\n    return [-rpm, rpm]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    rpm_first = 1\n    rpm_last = 1\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    for i in range(n):\n        rpm_first = rpm_first * cogs[i] / cogs[i + 1]\n    return [rpm_first, rpm_last]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    first_cog_rpm = 1\n    last_cog_rpm = 1\n    for i in range(n, len(cogs) - 1):\n        last_cog_rpm *= -cogs[i] / cogs[i + 1]\n    for i in range(n):\n        first_cog_rpm *= -cogs[i] / cogs[i + 1]\n    return [first_cog_rpm, last_cog_rpm]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    result = [1, 1]\n    for i in range(n, len(cogs) - 1):\n        result[1] = result[1] * cogs[i] / cogs[i + 1]\n    for i in range(n):\n        result[0] = result[0] * cogs[i] / cogs[i + 1]\n    return result",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    rpm_first = 1\n    rpm_last = 1\n    for i in range(len(cogs) - 1):\n        if i < n:\n            rpm_first = rpm_first * cogs[i + 1] / cogs[i]\n        if i >= n:\n            rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    return [rpm_first, -rpm_last]",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def cog_RPM(cogs, n):\n    rpm_first = 1 * (-(1 if n % 2 else 1)) * (cogs[n] / cogs[0])\n    rpm_last = 1 * (-(1 if n % 2 else 1)) * (cogs[n] / cogs[-1])\n    return [rpm_first, rpm_last]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    result = [1.0, 1.0]\n    for i in range(n):\n        result[0] *= -cogs[i+1]/cogs[i]\n    for i in range(len(cogs)-1, n, -1):\n        result[1] *= -cogs[i-1]/cogs[i]\n    return result",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    rpm_first = 1\n    rpm_last = 1\n    for i in range(n):\n        rpm_first = rpm_first * cogs[n - i] / cogs[n - i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    return [-rpm_first, -rpm_last]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    first_cog_RPM = 1.0\n    last_cog_RPM = 1.0\n    \n    for i in range(n):\n        first_cog_RPM *= -cogs[i+1] / cogs[i]\n    \n    for i in range(len(cogs)-1, n, -1):\n        last_cog_RPM *= -cogs[i-1] / cogs[i]\n    \n    return [first_cog_RPM, last_cog_RPM]",
            "logp": null
        }
    ],
    "2": [],
    "3": [
        {
            "content": "def cog_RPM(cogs, n):\n    first_cog_rpm = 1 * (cogs[n] / cogs[0])\n    last_cog_rpm = 1 * (cogs[n] / cogs[-1])\n    if n % 2 == 0:\n        return [first_cog_rpm, last_cog_rpm]\n    else:\n        return [-first_cog_rpm, -last_cog_rpm]",
            "logp": null
        },
        {
            "content": "def cog_RPM(cogs, n):\n    first_cog_RPM = 1 * (cogs[n] / cogs[0])\n    last_cog_RPM = 1 * (cogs[n] / cogs[-1])\n    if n % 2 == 1:\n        return [-first_cog_RPM, -last_cog_RPM]\n    else:\n        return [first_cog_RPM, last_cog_RPM]",
            "logp": null
        }
    ]
}