{
    "0": [
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -1 * (cogs[n] / cogs[0])\n    rpm_last = -1 * (cogs[n] / cogs[-1])\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm = rpm * cogs[i] / cogs[i - 1]\n    \n    start_rpm = rpm\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm = rpm * cogs[i] / cogs[i + 1]\n    \n    end_rpm = rpm\n    \n    return [int(start_rpm), int(end_rpm)]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [rpm[0], rpm[-1]]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_teeth) * 1\n    rpm_last = (cogs[n] / last_teeth) * -1\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    current_cog_teeth = cogs[n]\n    \n    rpm_first = (current_cog_teeth / first_cog_teeth) * 1\n    rpm_last = (current_cog_teeth / last_cog_teeth) * -1\n    \n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm = [0] * len(cogs)\n    rpm[n] = 1  # The nth cog rotates at 1 RPM clockwise\n\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]  # RPM of the previous cog\n\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]  # RPM of the next cog\n\n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = 1\n    \n    # calculate the RPM from cog n to the first cog\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    \n    # calculate the RPM from cog n to the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_start), int(rpm_end)]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_rpm = (-1) ** n\n    last_rpm = first_rpm * (cogs[n] / cogs[0]) if n == 0 else first_rpm * (cogs[n] / cogs[-1])\n    \n    for i in range(n, 0, -1):\n        first_rpm *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        last_rpm *= cogs[i] / cogs[i + 1]\n\n    return [first_rpm, last_rpm]\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    last_cog_teeth = cogs[n]\n    first_cog_teeth = cogs[0]\n    \n    first_cog_rpm = -last_cog_teeth / first_cog_teeth\n    last_cog_rpm = last_cog_teeth / cogs[-1]\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    nth_cog_teeth = cogs[n]\n    last_cog_teeth = cogs[-1]\n    \n    nth_rpm = 1  # The nth cog is rotating at 1 RPM\n    \n    # RPM for first cog (clockwise)\n    first_cog_rpm = nth_rpm * (nth_cog_teeth / first_cog_teeth) * -1\n    \n    # RPM for last cog (clockwise)\n    last_cog_rpm = nth_rpm * (nth_cog_teeth / last_cog_teeth)\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (-cogs[n] / cogs[0]) * 1\n    rpm_end = (cogs[n] / cogs[-1]) * 1\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    target_teeth = cogs[n]\n\n    first_rpm = - (target_teeth / first_teeth) if n > 0 else 1\n    last_rpm = (target_teeth / last_teeth) if n < len(cogs) - 1 else 1\n\n    return [first_rpm, last_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    nth_cog_teeth = cogs[n]\n    \n    rpm_first_cog = -nth_cog_teeth / first_cog_teeth\n    rpm_last_cog = nth_cog_teeth / last_cog_teeth\n    \n    return [rpm_first_cog, rpm_last_cog]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    current_cog_teeth = cogs[n]\n    \n    # RPM of the first cog\n    first_cog_rpm = (current_cog_teeth / first_cog_teeth) * (-1)\n    \n    # RPM of the last cog\n    last_cog_rpm = (current_cog_teeth / last_cog_teeth) * (-1) ** (len(cogs) - n - 1)\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (-cogs[n] / cogs[0]) if n > 0 else 1.0\n    rpm_end = (cogs[n] / cogs[-1]) if n < len(cogs) - 1 else 1.0\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0]\n    rpm_end = cogs[n] / cogs[-1]\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -1 * (cogs[n] / cogs[0])\n    rpm_end = (cogs[n] / cogs[-1])\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_rpm = -cogs[n] / cogs[0]\n    last_rpm = cogs[n] / cogs[-1]\n    return [first_rpm, last_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -cogs[n] / cogs[0]\n    rpm_last = cogs[n] / cogs[-1]\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (-1) ** n * (cogs[n] / cogs[0])\n    rpm_end = (-1) ** (len(cogs) - n - 1) * (cogs[n] / cogs[-1])\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1.0\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    \n    return [rpm[0], rpm[-1]]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    \n    if n == 0:\n        rpm_first = 1.0\n        rpm_last = -first_teeth / last_teeth\n    elif n == len(cogs) - 1:\n        rpm_first = -last_teeth / first_teeth\n        rpm_last = 1.0\n    else:\n        rpm_first = -cogs[n] / first_teeth\n        rpm_last = cogs[n] / last_teeth\n    \n    return [rpm_first, rpm_last]\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_rpm = (-1) ** n * (cogs[n] / cogs[0])\n    last_rpm = (-1) ** (len(cogs) - 1 - n) * (cogs[n] / cogs[-1])\n    return [first_rpm, last_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_first = (-1) ** n * (cogs[n] / cogs[0])\n    rpm_last = (-1) ** (len(cogs) - n - 1) * (cogs[n] / cogs[-1])\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (-1) ** n * (cogs[n] / cogs[0])\n    rpm_end = (-1) ** (len(cogs) - 1 - n) * (cogs[n] / cogs[-1])\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        }
    ]
}