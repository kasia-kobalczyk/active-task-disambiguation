{
    "0": [
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1\n    rpm_last = 1\n    \n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_first), int(rpm_last)]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    if n == 0:\n        return [1 * (last_cog_teeth / first_cog_teeth), -1]\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm *= cogs[i] / cogs[i + 1]\n    \n    last_rpm = rpm * (last_cog_teeth / first_cog_teeth)\n    first_rpm = -1 * (last_cog_teeth / first_cog_teeth)\n    \n    return [last_rpm, first_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    \n    return [rpm[0], rpm[-1]]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    \n    if len(cogs) == 1:\n        return [1, 1]  # If there's only one cog, both RPMs are 1\n    \n    # Calculate the RPM for the first and last cogs based on the nth cog\n    rpm_first = (cogs[n] / first_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_teeth) * (1 if (n + len(cogs)) % 2 == 0 else -1)\n    \n    return [int(rpm_first), int(rpm_last)]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -1 * (cogs[n] / cogs[0])\n    rpm_last = -1 * (cogs[n] / cogs[-1])\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm *= cogs[i] / cogs[i - 1]\n    \n    first_cog_rpm = rpm\n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm *= cogs[i] / cogs[i + 1]\n    \n    last_cog_rpm = rpm\n    \n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [rpm[0], rpm[-1]]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_teeth) * 1\n    rpm_last = (cogs[n] / last_teeth) * -1\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0, 0]\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    \n    return [rpm[0], rpm[-1]]\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_end1 = (-cogs[n] / cogs[0]) * 1\n    rpm_end2 = (-cogs[n] / cogs[-1]) * 1\n    return [rpm_end1, rpm_end2]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_n = 1\n    rpm_first = rpm_n * (cogs[n] / cogs[0]) * (-1) ** n\n    rpm_last = rpm_n * (cogs[n] / cogs[-1]) * (-1) ** (len(cogs) - n - 1)\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -cogs[n] / cogs[0]\n    rpm_last = -cogs[n] / cogs[-1]\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -cogs[n] / cogs[0]\n    rpm_last = -cogs[n] / cogs[-1]\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    clockwise_teeth = cogs[n]\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    first_rpm = -clockwise_teeth / first_cog_teeth\n    last_rpm = -clockwise_teeth / last_cog_teeth\n    \n    return [first_rpm, last_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1.0\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * (cogs[i] / cogs[i - 1]) * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * (cogs[i] / cogs[i + 1]) * -1\n    \n    return [rpm[0], rpm[-1]]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0]  # RPM of the first cog\n    rpm_end = -cogs[n] / cogs[-1]    # RPM of the last cog\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0]\n    rpm_end = -cogs[n] / cogs[-1]\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    clockwise_teeth = cogs[n]\n    rpm_start = -clockwise_teeth / cogs[0]  # RPM for the first cog\n    rpm_end = -clockwise_teeth / cogs[-1]    # RPM for the last cog\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    total_teeth = cogs[n]\n    rpm_start = -total_teeth / cogs[0]  # RPM of the first cog\n    rpm_end = -total_teeth / cogs[-1]    # RPM of the last cog\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_first = (-1) ** n * (cogs[n] / cogs[0])\n    rpm_last = (-1) ** (len(cogs) - 1 - n) * (cogs[n] / cogs[-1])\n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (cogs[n] / cogs[0]) * (1 if n % 2 == 0 else -1)\n    rpm_end = (cogs[n] / cogs[-1]) * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (cogs[n] / cogs[0]) * (1 if n % 2 == 0 else -1)\n    rpm_end = (cogs[n] / cogs[-1]) * (1 if n % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    rpm_last = 1.0\n    \n    for i in range(n, 0, -1):\n        rpm_first *= -cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_last *= -cogs[i] / cogs[i + 1]\n    \n    return [rpm_first, rpm_last]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n    \n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n        \n    return [left_rpm, right_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (cogs[n] / cogs[0]) * (1 if n % 2 == 0 else -1)\n    rpm_end = (cogs[n] / cogs[-1]) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n    \n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    \n    return [left_rpm, right_rpm]\n```",
            "logp": null
        },
        {
            "content": "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n\n    return [left_rpm, right_rpm]\n```",
            "logp": null
        }
    ]
}