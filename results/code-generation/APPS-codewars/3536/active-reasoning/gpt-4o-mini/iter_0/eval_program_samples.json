{
    "0": {
        "0": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * (cogs[n] / cogs[0])\n    \n    for i in range(n, 0, -1):\n        rpm_start *= (cogs[i] / cogs[i - 1])\n        \n    for i in range(n, len(cogs) - 1):\n        rpm_end *= (cogs[i + 1] / cogs[i])\n    \n    return [int(rpm_start), int(-rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1\n    right_rpm = 1\n    for i in range(n, 0, -1):\n        left_rpm *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= cogs[i] / cogs[i + 1]\n    return [int(left_rpm), int(-right_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] if n > 0 else rpm_start * cogs[n] / cogs[-1]\n    \n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] / cogs[i + 1] if n < len(cogs) - 1 else rpm_end\n    \n    return [round(rpm_start), round(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n == 0:\n        return [0, (-1) ** (len(cogs) - 1) * (cogs[n] / cogs[-1])]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm = rpm * cogs[i] / cogs[i - 1]\n    \n    first_rpm = (-1) ** n * rpm\n    last_rpm = (-1) ** (len(cogs) - 1) * (cogs[n] / cogs[-1]) * rpm\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * (cogs[i] / cogs[i - 1]) * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * (cogs[i] / cogs[i + 1]) * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_rpm = (-1) ** n\n    last_cog_rpm = (-1) ** (len(cogs) - 1 - n)\n    \n    for i in range(n, 0, -1):\n        first_cog_rpm *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        last_cog_rpm *= cogs[i] / cogs[i + 1]\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1\n    rpm_last = 1\n    \n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    target_teeth = cogs[n]\n    \n    first_rpm = (target_teeth / first_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (target_teeth / last_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n        \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    \n    if len(cogs) == 1:\n        return [1, 1]  # If there's only one cog, both RPMs are 1\n    \n    # Calculate the RPM for the first and last cogs based on the nth cog\n    rpm_first = (cogs[n] / first_teeth) * 1\n    rpm_last = (cogs[n] / last_teeth) * 1\n    \n    # If n is odd, the first cog will rotate anti-clockwise\n    if n % 2 == 1:\n        rpm_first = -rpm_first\n    \n    # If (length-cogs) % 2 == 1, the last cog will rotate anti-clockwise\n    if (len(cogs) - n) % 2 == 1:\n        rpm_last = -rpm_last\n    \n    return [round(rpm_first), round(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm_first = 0\n    rpm_last = 0\n    rotation = 1\n\n    for i in range(n, 0, -1):\n        rotation *= -cogs[i] / cogs[i - 1]\n    rpm_first = rotation\n\n    rotation = 1\n    for i in range(n, len(cogs) - 1):\n        rotation *= -cogs[i] / cogs[i + 1]\n    rpm_last = rotation\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0] * (-1)**n\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i-1] * (-1)\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i+1] * (-1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = (-cogs[n] / cogs[0]) if n > 0 else 1\n    right_rpm = (-cogs[n] / cogs[-1]) if n < len(cogs) - 1 else 1\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    return [int(left_rpm), int(right_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    clockwise = 1\n    left_rpm = clockwise\n    right_rpm = clockwise\n    \n    for i in range(n, 0, -1):\n        left_rpm = right_rpm * cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        right_rpm = left_rpm * cogs[i] / cogs[i + 1]\n        \n    return [left_rpm, right_rpm]\n```"
        ],
        "1": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    rpm_end = rpm_start * (cogs[n] / cogs[0]) * (-1) ** n\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1] * (-1)\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1] * (-1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_first = 1.0\n    rpm_last = 1.0\n    \n    # Calculate RPM for the cogs on the left side\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    # Calculate RPM for the cogs on the right side\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0.0, 0.0]\n    \n    rpm_start = 1.0\n    rpm_end = rpm_start * (cogs[n] / cogs[0]) * (-1 if n % 2 == 0 else 1)\n    \n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1] * (-1 if (i - 1) % 2 == 0 else 1)\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1] * (-1 if (i + 1) % 2 == 0 else 1)\n\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    clockwise_rpm = 1.0\n    for i in range(n, 0, -1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i - 1]\n    left_rpm = clockwise_rpm\n    \n    clockwise_rpm = 1.0\n    for i in range(n, len(cogs) - 1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i + 1]\n    right_rpm = clockwise_rpm\n    \n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    nth_cog_teeth = cogs[n]\n\n    rpm_first_cog = (nth_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last_cog = (nth_cog_teeth / last_cog_teeth) * (1 if n % 2 == 0 else -1)\n\n    return [rpm_first_cog, rpm_last_cog]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    rpm_last = rpm_first\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    clockwise_rpm = 1.0\n    for i in range(n, 0, -1):\n        clockwise_rpm *= cogs[i] / cogs[i - 1]\n    first_cog_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        clockwise_rpm *= cogs[i] / cogs[i + 1]\n    last_cog_rpm = clockwise_rpm\n    return [first_cog_rpm, last_cog_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * (cogs[i] / cogs[i - 1])\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * (cogs[i] / cogs[i + 1])\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * (cogs[i] / cogs[i - 1]) * -1\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * (cogs[i] / cogs[i + 1]) * -1\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (cogs[n] / cogs[0]) * (1 if n % 2 == 0 else -1)\n    rpm_end = (cogs[n] / cogs[-1]) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0.0, 0.0]\n    \n    rpm = [0.0] * len(cogs)\n    rpm[n] = 1.0\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0.0, 0.0]\n    \n    rpm_start = 1.0\n    rpm_end = rpm_start * (cogs[n] / cogs[0]) * (-1) ** (n % 2)\n    \n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1] * (-1)\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1] * (-1)\n    \n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0]\n    rpm_end = cogs[n] / cogs[-1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    rpm_end = rpm_start * (cogs[n] / cogs[0])\n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * (cogs[i] / cogs[i + 1])\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = rpm_start\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    clockwise_rpm = 1.0\n    rpm = [0] * len(cogs)\n    rpm[n] = clockwise_rpm\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * (cogs[i] / cogs[i - 1]) * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * (cogs[i] / cogs[i + 1]) * -1\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "def cog_RPM(cogs, n):\n    first_rpm = 1.0\n    last_rpm = first_rpm * (cogs[n] / cogs[0]) if n == 0 else first_rpm * (cogs[n] / cogs[n - 1]) * (-1) ** (n + 1)\n    for i in range(n, len(cogs) - 1):\n        last_rpm *= -cogs[i] / cogs[i + 1]\n    return [last_rpm, first_rpm * (-1) ** n] if n == len(cogs) - 1 else [first_rpm * (-1) ** n, last_rpm]",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1.0\n    rpm_end = rpm_start * cogs[n] / cogs[0]\n    \n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] / cogs[i + 1]\n    \n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    rpm_last = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    return [rpm_first, rpm_last]\n```"
        ],
        "2": [
            "```python\ndef cog_RPM(cogs, n):\n    input_rpm = 1.0\n    left_cog_teeth = cogs[n]\n    \n    # Calculate RPM of the left cog\n    if n > 0:\n        for i in range(n, 0, -1):\n            input_rpm = input_rpm * (cogs[i] / cogs[i - 1]) * -1\n    \n    left_rpm = input_rpm\n    \n    # Calculate RPM of the right cog\n    right_cog_rpm = 1.0\n    if n < len(cogs) - 1:\n        for i in range(n, len(cogs) - 1):\n            right_cog_rpm = right_cog_rpm * (cogs[i] / cogs[i + 1]) * -1\n            \n    right_rpm = right_cog_rpm\n    \n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n == 0 else -1) ** (n % 2)\n    rpm_end = cogs[n] / cogs[-1] * (1 if n == len(cogs) - 1 else -1) ** ((len(cogs) - 1 - n) % 2)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (cogs[n] / cogs[0]) * 1.0 * (-1 if n % 2 else 1)\n    rpm_end = (cogs[n] / cogs[-1]) * 1.0 * (-1 if (len(cogs) - n - 1) % 2 else 1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```"
        ],
        "3": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    if n == 0:\n        rpm_first = 1.0\n        rpm_last = (first_cog_teeth / last_cog_teeth) * rpm_first\n    else:\n        rpm_first = (cogs[n] / first_cog_teeth) * 1.0\n        rpm_last = -((first_cog_teeth / last_cog_teeth) * rpm_first)\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    # RPM of the first cog\n    first_cog_rpm = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    \n    # RPM of the last cog\n    last_cog_rpm = (cogs[n] / last_cog_teeth) * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * cogs[i] / cogs[i - 1]\n    \n    rpm_last = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    \n    return [rpm_first, rpm_last * (-1 if (len(cogs) - n - 1) % 2 == 1 else 1)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    rpm_end = 1.0\n    \n    # Calculate the RPM for the first cog\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1] * -1\n    \n    # Calculate the RPM for the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1] * -1\n    \n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1] * -1\n    rpm_last = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1] * -1\n    return [rpm_first, rpm_last]\n```"
        ],
        "4": [
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    rpm_first = ((-1) ** n) * (cogs[n] / first_cog_teeth)\n    rpm_last = ((-1) ** (len(cogs) - 1 - n)) * (cogs[n] / last_cog_teeth)\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = 1.0\n    for i in range(n, 0, -1):\n        first_rpm *= cogs[i] / cogs[i - 1] * -1\n        \n    last_rpm = 1.0\n    for i in range(n, len(cogs) - 1):\n        last_rpm *= cogs[i] / cogs[i + 1] * -1\n\n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    rpm_last = 1.0\n    \n    # Calculate RPM towards the first cog\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1] * -1\n    \n    # Calculate RPM towards the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1] * -1\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    # Calculate the RPM of the first cog\n    rpm_first = (cogs[n] / first_cog_teeth) * (-1) ** n\n    \n    # Calculate the RPM of the last cog\n    rpm_last = (cogs[n] / last_cog_teeth) * (-1) ** (n + len(cogs) - 1)\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    rpm_last = 1.0\n    teeth_n = cogs[n]\n    \n    # Calculate RPM for the first cog\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    # Calculate RPM for the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    \n    # Adjust the sign for counter-clockwise rotation\n    rpm_first *= (-1) ** n\n    rpm_last *= (-1) ** (len(cogs) - 1 - n)\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    rpm_last = 1.0\n    teeth_n = cogs[n]\n\n    # Calculate RPM for the first cog\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1] * -1\n\n    # Calculate RPM for the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1] * -1\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    current_cog_teeth = cogs[n]\n    \n    first_rpm = (current_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (current_cog_teeth / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    target_cog_teeth = cogs[n]\n    \n    first_rpm = (target_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (target_cog_teeth / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    input_rpm = 1.0\n    rpm_start = input_rpm\n    rpm_end = input_rpm\n\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * (cogs[i] / cogs[i - 1]) * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * (cogs[i] / cogs[i + 1]) * -1\n\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1] * -1\n        \n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1] * -1\n        \n    return [rpm_start, rpm_end]\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1 * cogs[n] / cogs[0] if n > 0 else 1\n    rpm_last = 1 * cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [int(rpm_first), int(-rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1 * cogs[n] / cogs[0] if n != 0 else 1\n    rpm_last = -1 * cogs[n] / cogs[-1] if n != len(cogs) - 1 else -1\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    target_teeth = cogs[n]\n    \n    first_rpm = (target_teeth / first_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (target_teeth / last_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    rpm_first_cog = clockwise_rpm * (cogs[n] / cogs[0]) if n > 0 else clockwise_rpm\n    rpm_last_cog = clockwise_rpm * (cogs[n] / cogs[-1]) if n < len(cogs) - 1 else -clockwise_rpm\n    \n    return [int(rpm_first_cog), int(rpm_last_cog)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_teeth = cogs[0]\n    last_teeth = cogs[-1]\n    rpm_first = -cogs[n] * last_teeth / first_teeth\n    rpm_last = -cogs[n] * first_teeth / last_teeth\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0]\n    rpm_end = cogs[n] / cogs[-1]\n    return [rpm_end, -rpm_start]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    rpm_first = 0\n    rpm_last = 0\n\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first if i == n else rpm_first * cogs[i] // cogs[i - 1] * -1 if i % 2 == 0 else rpm_first * cogs[i] // cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last if i == n else rpm_last * cogs[i] // cogs[i + 1] * -1 if (i + 1) % 2 == 0 else rpm_last * cogs[i] // cogs[i + 1]\n        \n    return [rpm_first if rpm_first != 0 else -1, rpm_last if rpm_last != 0 else -1]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = (cogs[i] / cogs[i - 1]) * clockwise_rpm\n    \n    counterclockwise_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        counterclockwise_rpm = (cogs[i] / cogs[i + 1]) * counterclockwise_rpm\n    \n    return [int(round(counterclockwise_rpm)), int(round(clockwise_rpm))]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = -cogs[n] / cogs[0] if n > 0 else 1\n    rpm_end = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 0:\n        return [0, 0]\n    \n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i - 1]\n    \n    counterclockwise_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        counterclockwise_rpm = counterclockwise_rpm * cogs[i] / cogs[i + 1]\n    \n    return [int(round(counterclockwise_rpm)), int(round(clockwise_rpm))]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -1 if n % 2 == 0 else 1\n    rpm_last = 1 if n % 2 == 0 else -1\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm = rpm * cogs[i] / cogs[i - 1]\n    \n    first_cog_rpm = rpm\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm = rpm * cogs[i] / cogs[i + 1]\n    \n    last_cog_rpm = rpm\n    \n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0, 0]\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = -cogs[n] / cogs[0] if n > 0 else 1\n    last_rpm = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 0\n    rpm_end = 0\n    for i in range(n, -1, -1):\n        rpm_start = (cogs[i] / cogs[i - 1]) * rpm_end if i > 0 else 1\n        rpm_end = -rpm_start if i > 0 else rpm_start\n    for i in range(n, len(cogs) - 1):\n        rpm_start = (cogs[i] / cogs[i + 1]) * rpm_end\n        rpm_end = -rpm_start\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1  # nth cog rotates at 1 RPM clockwise\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (-1 if n % 2 == 0 else 1)\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1\n    rpm_end = 1\n\n    for i in range(n, 0, -1):\n        rpm_end *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_start *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_end), int(rpm_start)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```"
        ],
        "1": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * (cogs[i] / cogs[i - 1]) * -1\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * (cogs[i] / cogs[i + 1]) * -1\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    rpm_end = rpm_start * (cogs[n] / cogs[0])\n    \n    for i in range(n, 0, -1):\n        rpm_start *= (cogs[i] / cogs[i-1])\n        \n    for i in range(n, len(cogs) - 1):\n        rpm_end *= (cogs[i] / cogs[i+1])\n        \n    return [round(rpm_start, 10), round(rpm_end, 10)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    \n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    \n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    rpm_end = rpm_start * (cogs[n] / cogs[0])\n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * (cogs[i] / cogs[i + 1])\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    rpm_end = rpm_start * (cogs[n] / cogs[0]) if n > 0 else 1.0\n    for i in range(n, len(cogs)-1):\n        rpm_end *= (cogs[i] / cogs[i+1])\n    return [rpm_start * (-1 if n % 2 else 1), rpm_end * (-1 if (len(cogs)-1) % 2 else 1)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = (cogs[n] / cogs[0]) * (1 if n % 2 == 0 else -1)\n    last_rpm = (cogs[n] / cogs[-1]) * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0]\n    rpm_end = cogs[n] / cogs[-1]\n    return [round(-rpm_start, 1) if n % 2 else round(rpm_start, 1), round(-rpm_end, 1) if (len(cogs) - 1 - n) % 2 else round(rpm_end, 1)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    clockwise_ratio = cogs[n]\n    first_cog_rpm = clockwise_ratio / cogs[0] * 1\n    last_cog_rpm = clockwise_ratio / cogs[-1] * 1\n    return [first_cog_rpm, last_cog_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = rpm_start\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    rpm_end = rpm_start * (cogs[n] / cogs[0]) if n == 0 else rpm_start * (cogs[n] / cogs[-1])\n    \n    for i in range(n, 0, -1):\n        rpm_start *= -cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end *= -cogs[i] / cogs[i + 1]\n    \n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1.0\n    rpm_end = rpm_start * cogs[n] / cogs[0]\n    \n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] / cogs[i + 1]\n    \n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    rpm_last = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    nth_cog_teeth = cogs[n]\n    last_cog_teeth = cogs[-1]\n    \n    rpm_first = (nth_cog_teeth / first_cog_teeth) * 1\n    rpm_last = (nth_cog_teeth / last_cog_teeth) * 1\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    n_cog_teeth = cogs[n]\n    \n    first_cog_rpm = (n_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_cog_rpm = (n_cog_teeth / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    # RPM of the first cog\n    rpm_first = (cogs[n] / first_cog_teeth) * 1\n    # RPM of the last cog\n    rpm_last = (cogs[n] / last_cog_teeth) * 1\n    \n    # Adjust for direction\n    rpm_first = rpm_first if n % 2 == 0 else -rpm_first\n    rpm_last = rpm_last if n % 2 == 0 else -rpm_last\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * cogs[i] / cogs[i - 1]\n    \n    rpm_last = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    \n    return [rpm_first, rpm_last]\n```",
            "def cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1.0\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * (cogs[i] / cogs[i - 1]) * -1\n\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * (cogs[i] / cogs[i + 1]) * -1\n\n    return [rpm[0], rpm[-1]]",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1.0\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = rpm_start\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```"
        ],
        "2": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (cogs[n] / cogs[0]) * (1.0 if n % 2 == 0 else -1.0)\n    rpm_end = (cogs[n] / cogs[-1]) * (1.0 if (len(cogs) - n - 1) % 2 == 0 else -1.0)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    target_cog_teeth = cogs[n]\n    \n    first_rpm = (target_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (target_cog_teeth / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n == 0 else -1) ** n\n    rpm_end = cogs[n] / cogs[-1] * (1 if n == len(cogs) - 1 else -1) ** (len(cogs) - 1 - n)\n    return [rpm_start, rpm_end]\n```"
        ],
        "3": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1.0\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n\n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * cogs[i] / cogs[i - 1]\n    rpm_last = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    return [rpm_first, -rpm_last] if (n + len(cogs)) % 2 == 0 else [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    rpm_last = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    \n    return [rpm_first, rpm_last * -1 if (len(cogs) - n - 1) % 2 else rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    rpm_last = 1.0\n    \n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    \n    return [rpm_first, rpm_last * -1 if (len(cogs) - 1 - n) % 2 else rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    return [left_rpm, right_rpm]\n```"
        ],
        "4": [
            "```python\ndef cog_RPM(cogs, n):\n    input_rpm = 1.0\n    rpm_list = [0] * len(cogs)\n    rpm_list[n] = input_rpm\n    \n    for i in range(n, 0, -1):\n        rpm_list[i - 1] = rpm_list[i] * (cogs[i] / cogs[i - 1]) * -1\n\n    for i in range(n, len(cogs) - 1):\n        rpm_list[i + 1] = rpm_list[i] * (cogs[i] / cogs[i + 1]) * -1\n\n    return [rpm_list[0], rpm_list[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    # Calculate the RPM of the first cog\n    rpm_first = (cogs[n] / first_cog_teeth) * (-1) ** n\n    \n    # Calculate the RPM of the last cog\n    rpm_last = (cogs[n] / last_cog_teeth) * (-1) ** (n + len(cogs) - 1)\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    rpm_last = 1.0\n    teeth_n = cogs[n]\n    \n    # Calculate RPM for the first cog\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    # Calculate RPM for the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    \n    # Adjust the sign for counter-clockwise rotation\n    rpm_first *= (-1) ** n\n    rpm_last *= (-1) ** (len(cogs) - 1 - n)\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    rpm_last = 1.0\n    teeth_n = cogs[n]\n\n    # Calculate RPM for the first cog\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1] * -1\n\n    # Calculate RPM for the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1] * -1\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    target_cog_teeth = cogs[n]\n    \n    first_rpm = (target_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (target_cog_teeth / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    current_cog_teeth = cogs[n]\n    \n    first_rpm = (current_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (current_cog_teeth / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n    \n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    \n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    return [left_rpm, right_rpm]\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = -1 if n % 2 == 0 else 1\n    rpm_last = 1 if n % 2 == 0 else -1\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = 1\n    for i in range(n, 0, -1):\n        rpm = rpm * cogs[i] / cogs[i - 1]\n    \n    first_cog_rpm = rpm\n    \n    rpm = 1\n    for i in range(n, len(cogs) - 1):\n        rpm = rpm * cogs[i] / cogs[i + 1]\n    \n    last_cog_rpm = rpm\n    \n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0, 0]\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = -cogs[n] / cogs[0] if n > 0 else 1\n    last_rpm = -cogs[n] / cogs[-1] if n < len(cogs) - 1 else 1\n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 0\n    rpm_end = 0\n    for i in range(n, -1, -1):\n        rpm_start = (cogs[i] / cogs[i + 1]) * (rpm_start if i < n else 1)\n    for i in range(n, len(cogs) - 1):\n        rpm_end = (cogs[i] / cogs[i + 1]) * (rpm_end if i > n else 1)\n    return [int(rpm_start), int(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1  # nth cog rotates at 1 RPM clockwise\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (-1 if n % 2 == 0 else 1)\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1\n    rpm_end = 1\n\n    for i in range(n, 0, -1):\n        rpm_end *= cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_start *= cogs[i] / cogs[i + 1]\n    \n    return [int(rpm_end), int(rpm_start)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n\n    target_teeth = cogs[n]\n    rpm_first = -target_teeth / cogs[0] if n > 0 else 0\n    rpm_last = -target_teeth / cogs[-1] if n < len(cogs) - 1 else 0\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm = [0] * len(cogs)\n    rpm[n] = 1\n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1]\n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1\n    rpm_end = rpm_start * cogs[n] / cogs[0]\n    \n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] / cogs[i + 1]\n    \n    return [round(rpm_start), round(rpm_end)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = (-cogs[n] / cogs[0]) if n > 0 else 1\n    last_rpm = (-cogs[n] / cogs[-1]) if n < len(cogs) - 1 else 1\n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1  # nth cog is rotating at 1 RPM\n    \n    # Calculate RPM for cogs to the left of n\n    for i in range(n - 1, -1, -1):\n        rpm[i] = rpm[i + 1] * cogs[i + 1] / cogs[i]\n    \n    # Calculate RPM for cogs to the right of n\n    for i in range(n + 1, len(cogs)):\n        rpm[i] = rpm[i - 1] * cogs[i - 1] / cogs[i]\n    \n    return [int(rpm[0]), int(rpm[-1])]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 0\n    rpm_end = 0\n    rotation_direction = 1  # 1 for clockwise, -1 for anti-clockwise\n\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] // cogs[i - 1] if rpm_start != 0 else rotation_direction\n        rotation_direction *= -1\n\n    rotation_direction = 1  # reset for the end calculation\n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] // cogs[i + 1] if rpm_end != 0 else rotation_direction\n        rotation_direction *= -1\n\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    clockwise_rpm = 1\n    for i in range(n, 0, -1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i - 1]\n    first_cog_rpm = clockwise_rpm\n    for i in range(n, len(cogs) - 1):\n        clockwise_rpm = clockwise_rpm * cogs[i] / cogs[i + 1]\n    last_cog_rpm = clockwise_rpm\n    return [int(first_cog_rpm), int(last_cog_rpm)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if not cogs or n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_first = 1\n    rpm_last = 1\n    \n    # Calculate the RPM from the nth cog to the first cog\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    # Calculate the RPM from the nth cog to the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i + 1] / cogs[i]\n    \n    return [int(rpm_first), int(rpm_last)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if len(cogs) == 1:\n        return [1, 1]\n    \n    rpm_start = 1\n    rpm_end = 1\n\n    for i in range(n, 0, -1):\n        rpm_start *= -cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end *= -cogs[i] / cogs[i + 1]\n\n    return [int(rpm_start), int(rpm_end)]\n```"
        ],
        "1": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = rpm_start\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm_start = 1.0\n    rpm_end = rpm_start * cogs[n] / cogs[0]\n    \n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] / cogs[i + 1]\n    \n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    rpm_last = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    target_cog_teeth = cogs[n]\n    \n    first_cog_rpm = (target_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_cog_rpm = (target_cog_teeth / last_cog_teeth) * (1 if n % 2 == 0 else -1)\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    n_cog_teeth = cogs[n]\n    \n    first_cog_rpm = (n_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_cog_rpm = (n_cog_teeth / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start = rpm_start * cogs[i] / cogs[i - 1]\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end = rpm_end * cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "def cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    rpm_last = rpm_first\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    return [rpm_first, rpm_last]",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0, 0]\n    \n    rpm = [0] * len(cogs)\n    rpm[n] = 1.0\n    \n    for i in range(n, 0, -1):\n        rpm[i - 1] = rpm[i] * cogs[i] / cogs[i - 1] * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i + 1] = rpm[i] * cogs[i] / cogs[i + 1] * -1\n    \n    return [rpm[0], rpm[-1]]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = rpm_start\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    nth_cog_teeth = cogs[n]\n    last_cog_teeth = cogs[-1]\n\n    # Calculate RPM for first cog\n    rpm_first = (nth_cog_teeth / first_cog_teeth) * 1\n    # Calculate RPM for last cog\n    rpm_last = (nth_cog_teeth / last_cog_teeth) * 1\n\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    clockwise_rpm = 1\n    first_cog_rpm = clockwise_rpm * (cogs[n] / first_cog_teeth)\n    last_cog_rpm = clockwise_rpm * (cogs[n] / last_cog_teeth)\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "def cog_RPM(cogs, n):\n    rpm_start = 1.0\n    for i in range(n, 0, -1):\n        rpm_start *= cogs[i] / cogs[i - 1]\n    rpm_end = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_end *= cogs[i] / cogs[i + 1]\n    return [rpm_start, rpm_end]",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * 1.0\n    rpm_last = (cogs[n] / last_cog_teeth) * -1.0 if n == len(cogs) - 1 else (cogs[n] / last_cog_teeth) * 1.0\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = 1.0\n    last_rpm = first_rpm * (cogs[n] / cogs[0])\n    \n    for i in range(n, len(cogs) - 1):\n        last_rpm *= (cogs[i] / cogs[i + 1])\n    \n    return [first_rpm * (-1 if n % 2 else 1), last_rpm * (-1 if (len(cogs) - n - 1) % 2 else 1)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    clockwise_rpm = 1\n    first_cog_rpm = clockwise_rpm * (cogs[n] / first_cog_teeth)\n    last_cog_rpm = clockwise_rpm * (cogs[n] / last_cog_teeth)\n    \n    return [first_cog_rpm, last_cog_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    return [round(rpm_first, 6), round(rpm_last, 6)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    n_cog_teeth = cogs[n]\n    \n    first_rpm = (n_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (n_cog_teeth / last_cog_teeth) * (1 if n % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = 1.0\n    last_rpm = first_rpm * (cogs[n] / cogs[0])\n    \n    for i in range(n, len(cogs) - 1):\n        last_rpm *= (cogs[i] / cogs[i + 1]) * -1\n    \n    return [first_rpm * (-1 if n % 2 else 1), last_rpm * (-1 if (len(cogs) - 1 - n) % 2 else 1)]\n```"
        ],
        "2": [
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    rpm_first = (cogs[n] / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    rpm_last = (cogs[n] / last_cog_teeth) * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n == 0 else -1) ** n\n    rpm_end = cogs[n] / cogs[-1] * (1 if n == len(cogs) - 1 else -1) ** (len(cogs) - 1 - n)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = cogs[n] / cogs[0] * (1 if n % 2 == 0 else -1)\n    rpm_end = cogs[n] / cogs[-1] * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```"
        ],
        "3": [
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    for i in range(n, 0, -1):\n        left_rpm *= cogs[i] / cogs[i - 1] * -1\n    \n    right_rpm = 1.0\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= cogs[i] / cogs[i + 1] * -1\n    \n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (cogs[n] / cogs[0]) * (1.0 if n % 2 == 0 else -1)\n    rpm_end = (cogs[n] / cogs[-1]) * (1.0 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (cogs[n] / cogs[0]) * (1 if n % 2 == 0 else -1)\n    rpm_end = (cogs[n] / cogs[-1]) * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    for i in range(n, 0, -1):\n        rpm_first = rpm_first * cogs[i] / cogs[i - 1]\n    \n    rpm_last = 1.0\n    for i in range(n, len(cogs) - 1):\n        rpm_last = rpm_last * cogs[i] / cogs[i + 1]\n    \n    return [rpm_first, rpm_last * (-1 if (len(cogs) - n - 1) % 2 == 1 else 1)]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_start = (cogs[n] / cogs[0]) * (1 if n % 2 == 0 else -1)\n    rpm_end = (cogs[n] / cogs[-1]) * (1 if (len(cogs) - n - 1) % 2 == 0 else -1)\n    return [rpm_start, rpm_end]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    if n < 0 or n >= len(cogs):\n        return [0.0, 0.0]\n    \n    rpm = [0.0] * len(cogs)\n    rpm[n] = 1.0\n    \n    for i in range(n, 0, -1):\n        rpm[i-1] = rpm[i] * cogs[i] / cogs[i-1] * -1\n    \n    for i in range(n, len(cogs) - 1):\n        rpm[i+1] = rpm[i] * cogs[i] / cogs[i+1] * -1\n    \n    return [rpm[0], rpm[-1]]\n```"
        ],
        "4": [
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    \n    # Calculate the RPM of the first cog\n    rpm_first = (cogs[n] / first_cog_teeth) * (-1) ** n\n    \n    # Calculate the RPM of the last cog\n    rpm_last = (cogs[n] / last_cog_teeth) * (-1) ** (n + len(cogs) - 1)\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    rpm_first = 1.0\n    rpm_last = 1.0\n    teeth_n = cogs[n]\n    \n    # Calculate RPM for the first cog\n    for i in range(n, 0, -1):\n        rpm_first *= cogs[i] / cogs[i - 1]\n    \n    # Calculate RPM for the last cog\n    for i in range(n, len(cogs) - 1):\n        rpm_last *= cogs[i] / cogs[i + 1]\n    \n    # Adjust the sign for counter-clockwise rotation\n    rpm_first *= (-1) ** n\n    rpm_last *= (-1) ** (len(cogs) - 1 - n)\n    \n    return [rpm_first, rpm_last]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_rpm = 1.0\n    last_rpm = 1.0\n    for i in range(n, 0, -1):\n        first_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        last_rpm *= -cogs[i] / cogs[i + 1]\n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    current_cog_teeth = cogs[n]\n    \n    first_rpm = (current_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    last_rpm = (current_cog_teeth / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [first_rpm, last_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n    \n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n        \n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n        \n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n    \n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    \n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    \n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    left_rpm = 1.0\n    right_rpm = 1.0\n    for i in range(n, 0, -1):\n        left_rpm *= -cogs[i] / cogs[i - 1]\n    for i in range(n, len(cogs) - 1):\n        right_rpm *= -cogs[i] / cogs[i + 1]\n    return [left_rpm, right_rpm]\n```",
            "```python\ndef cog_RPM(cogs, n):\n    first_cog_teeth = cogs[0]\n    last_cog_teeth = cogs[-1]\n    nth_cog_teeth = cogs[n]\n    \n    # Calculate RPM of the first cog\n    rpm_first = (nth_cog_teeth / first_cog_teeth) * (1 if n % 2 == 0 else -1)\n    \n    # Calculate RPM of the last cog\n    rpm_last = (nth_cog_teeth / last_cog_teeth) * (1 if (n + len(cogs) - 1) % 2 == 0 else -1)\n    \n    return [rpm_first, rpm_last]\n```"
        ]
    }
}