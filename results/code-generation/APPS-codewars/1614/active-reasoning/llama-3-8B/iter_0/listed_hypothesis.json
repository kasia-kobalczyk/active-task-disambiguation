{
    "0": [
        {
            "content": "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "logp": null
        }
    ],
    "1": [],
    "2": [],
    "3": []
}