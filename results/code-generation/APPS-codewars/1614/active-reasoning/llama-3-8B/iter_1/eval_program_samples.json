{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for line in LINES:\n        for cell in line:\n            color = set()\n            for piece in pieces_position_dict[cell[0]]:\n                if piece in ['Yellow', 'Yellow ']:\n                    color.add('Yellow')\n                if piece in ['Red', 'Red ']:\n                    color.add('Red')\n            if len(color) == 1:\n                return list(color)[0]\n    return \"Draw\""
        ],
        "1": [],
        "2": [
            "def who_is_winner(pieces_positions):\n    column_dict = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        column_dict[piece[0]].append((piece[0], piece[2]))\n    \n    for column in column_dict.values():\n        for line in LINES:\n            pieces = [piece for piece in column if piece[1] in line]\n            if len(set([piece[2] for piece in pieces])) == 1:\n                return piece[2]\n    \n    return \"Draw\""
        ],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")"
        ],
        "1": [],
        "2": [
            "def who_is_winner(pieces_positions):\n    column_dict = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        column_dict[piece[0]].append((piece[0], piece[2]))\n    \n    for column in column_dict.values():\n        for line in LINES:\n            pieces = [piece for piece in column if piece[1] in line]\n            if len(set([piece[2] for piece in pieces])) == 1:\n                return piece[2]\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    column_dict = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[3:]\n        column_dict[col].append(color)\n\n    for col, color_list in column_dict.items():\n        for i in range(len(LINES)):\n            line = LINES[i]\n            for pos in line:\n                piece1, piece2, piece3, piece4 = f\"{pos[0]}{pos[1]}\", f\"{pos[0]}{str(ROWS[int(pos[1])]+1) if int(pos[1]) < 5 else int(pos[1])}\", f\"{pos[0]}{str(ROWS[int(pos[1])]+2) if int(pos[1]) < 4 else int(pos[1])}\", f\"{pos[0]}{str(ROWS[int(pos[1])]+3) if int(pos[1]) < 3 else int(pos[1])}\"\n                if piece1 in color_list and piece2 in color_list and piece3 in color_list and piece4 in color_list:\n                    return \"Yellow\" if color_list[-1] == \"Yellow\" else \"Red\"\n\n    return \"Draw\""
        ],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\""
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    state = ['_'] * 42\n    for position in pieces_positions:\n        column, color = position[0], position[-4:]\n        if state[(COLUMNS.index(column)) * 6 + 5] != '_':\n            continue\n        for i in range(6):\n            if state[(COLUMNS.index(column)) * 6 + i] == '_':\n                state[(COLUMNS.index(column)) * 6 + i] = color\n                break\n    for line in LINES:\n        for cell in line:\n            column, row = cell\n            color = state[(COLUMNS.index(column)) * 6 + row]\n            if color != '_':\n                if color * 4 in ''.join(color for cell in line if state[(COLUMNS.index(cell[0])) * 6 + int(cell[1])] == color):\n                    return color\n    return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    column_dict = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        column_dict[piece[0]].append((piece[0], piece[2]))\n    \n    for column in column_dict.values():\n        for line in LINES:\n            pieces = [piece for piece in column if piece[1] in line]\n            if len(set([piece[2] for piece in pieces])) == 1:\n                return piece[2]\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    columns = {column: [] for column in COLUMNS}\n    for move in pieces_positions:\n        column, color = move[0], move[3:]\n        while column in columns and columns[column]:\n            columns[column].pop()\n        columns[column].append(color)\n    for line in LINES:\n        for pair in line:\n            column, row = pair\n            if len([piece for piece in columns[column] if piece == columns[column].index(piece)]) == 4:\n                return \"Yellow\" if \"Yellow\" in columns[column] else \"Red\"\n    return \"Draw\" if all(len(column) < 4 for column in columns.values()) else \"Invalid\""
        ],
        "3": [],
        "4": []
    }
}