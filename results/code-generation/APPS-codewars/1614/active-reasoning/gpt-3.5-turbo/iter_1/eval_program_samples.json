{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the game state\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position in the list\n    for piece in pieces_positions:\n        # Extract the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to a numerical index\n        col_index = ord(column) - ord('A')\n\n        # Find the lowest empty row in the column\n        row_index = -1\n        for row in range(5, -1, -1):\n            if grid[row][col_index] == '':\n                row_index = row\n                break\n\n        # Place the piece in the grid\n        grid[row_index][col_index] = color\n\n        # Check if the current move resulted in a win\n        for line in LINES:\n            # Get the set of positions in the line\n            positions = set([(COLUMNS.index(column) + i, int(row)) for i, row in enumerate(ROWS)])\n\n            # Check if all positions in the line have the same color\n            if all(grid[row][col] == color for col, row in positions):\n                return color\n\n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to represent the game board\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Extract the column and color from each piece\n        col, color = piece.split('_')\n        \n        # Find the first available row in the chosen column\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - ord('A')] == '':\n                grid[row][ord(col) - ord('A')] = color\n                break\n    \n    # Check for a win in each line\n    for line in LINES:\n        for row, col in line:\n            if grid[row][ord(col) - ord('A')] == grid[row + 1][ord(col) - ord('A')] == \\\n               grid[row + 2][ord(col) - ord('A')] == grid[row + 3][ord(col) - ord('A')]:\n                return grid[row][ord(col) - ord('A')]\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_idx = COLUMNS.index(column)\n        row_idx = next((i for i, cell in enumerate(board[column_idx]) if cell is None), None)\n        if row_idx is not None:\n            board[column_idx][row_idx] = color\n            for line in LINES:\n                if all(board[i][j] == color for i, j in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][COLUMNS.index(column)] != '':\n            row += 1\n        board[row][COLUMNS.index(column)] = color\n    \n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def get_winner():\n        for line in LINES:\n            if all(pos in pieces_positions[player]\n                   for pos in line):\n                return player\n        return ''\n\n    players = ['Red', 'Yellow']\n    for piece in pieces_positions:\n        col, player = piece.split('_')\n        pieces_positions[player].add((col, min(ROWS - {pos[1]\n                                                       for pos in\n                                                       pieces_positions[col]})))\n        if get_winner():\n            return get_winner()\n        players = players[::-1]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line <= red_moves or line <= yellow_moves:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Red': set(), 'Yellow': set()}\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        pieces[color].add((column, len(pieces[color])))\n        for line in LINES:\n            if line <= pieces[color]:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {c: set() for c in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].add(color)\n        for line in LINES:\n            if all(board[col].issuperset(color) for col, color in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in reversed(ROWS):\n            if board[column_index][row] == '':\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[column_index][row] == color for column_index, row in line):\n                return color\n    \n    return 'Draw'",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(all(cell != None for cell in row) for row in board):\n        return 'Draw'\n    \n    return None\n```"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_positions.add((column, ROWS[len(red_positions)]))\n        elif color == 'Yellow':\n            yellow_positions.add((column, ROWS[len(yellow_positions)]))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Split the position into column and color\n        col, color = piece.split('_')\n        \n        # Find the row where the piece should be placed\n        row = 5\n        while row >= 0 and grid[row][ord(col) - ord('A')] != '':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(col) - ord('A')] = color\n        \n        # Check if there is a winner\n        for line in LINES:\n            if all(grid[row][ord(col) - ord('A')] == color for col, row in line):\n                return color\n    \n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {c: set() for c in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].add(color)\n        for line in LINES:\n            if all(pos in board[column] for pos in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a board to store the positions of the pieces\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions list\n    for position in pieces_positions:\n        # Extract the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        row = 5 - board[column_to_index(column)].count('')\n        \n        # Place the color in the corresponding position on the board\n        board[row][column_to_index(column)] = color\n        \n        # Check if the current move results in a win\n        if check_win(board):\n            # Return the color of the winner\n            return color\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = []\n    yellow_moves = []\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.append(column)\n        else:\n            yellow_moves.append(column)\n\n        if any(line <= set(red_moves) for line in LINES):\n            return 'Red'\n        if any(line <= set(yellow_moves) for line in LINES):\n            return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position.split('_')[1]\n        \n        for row in range(6):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid with 6 rows and 7 columns\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to store the color of each column\n    column_colors = {column: ' ' for column in 'ABCDEFG'}\n    \n    # Iterate through the pieces positions\n    for piece_position in pieces_positions:\n        # Split the piece position into column and color\n        column, color = piece_position.split('_')\n        \n        # Find the row index where the piece should be placed\n        row = grid[column_colors[column]].index(' ')\n        \n        # Place the piece in the grid\n        grid[row][ord(column)-ord('A')] = color\n        \n        # Check if the current move results in a win\n        for line in LINES:\n            if all(grid[row][col] == color for col, row in line):\n                return color\n        \n        # Update the color of the column\n        column_colors[column] += 1\n        \n        # Check if the grid is full and there is no winner\n        if all(grid[row][col] != ' ' for col in range(7) for row in range(6)):\n            return \"Draw\"\n        \n    # If there is no winner after all moves, return \"Draw\"\n    return \"Draw\"",
            "```python\n    board = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = COLUMNS.index(column)\n        row = len(board) - board[column].count('') - 1\n        board[row][column] = color\n\n        for line in LINES:\n            if all(board[row][column] == color for column, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [[''] * 7 for _ in range(6)]\n\n    # Map the color to its corresponding index\n    color_index = {'Yellow': 0, 'Red': 1}\n\n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Split the piece position into column and color\n        column, color = piece.split('_')\n\n        # Get the index of the column\n        column_index = ord(column) - ord('A')\n\n        # Get the next available row in the column\n        row = next((i for i, cell in enumerate(grid[::-1]) if not cell[column_index]), None)\n\n        # If the column is full, continue to the next piece\n        if row is None:\n            continue\n\n        # Update the grid with the color\n        grid[-row-1][column_index] = color\n\n        # Check if there is a winner\n        for line in LINES:\n            # Get the cells in the line\n            cells = [(column, row) for column, row in line]\n\n            # Get the colors of the cells\n            colors = [grid[row][ord(column) - ord('A')] for column, row in cells]\n\n            # Check if all colors are the same and not empty\n            if all(color and color == colors[0] for color in colors):\n                # Return the color of the winner\n                return colors[0]\n\n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    player = \"Red\"\n\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] is not None:\n            row += 1\n        board[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n        player = \"Yellow\" if player == \"Red\" else \"Red\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Initialize the game grid\n    grid = [[' ' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n\n    # Play each move\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n\n        # Find the first available row in the chosen column\n        for row_index, row in enumerate(grid[column_index]):\n            if row == ' ':\n                grid[column_index][row_index] = color\n                break\n\n    # Check if there is a winner\n    for line in LINES:\n        color = ''\n        count = 0\n        for column, row in line:\n            if grid[COLUMNS.index(column)][row] != color:\n                color = grid[COLUMNS.index(column)][row]\n                count = 1\n            else:\n                count += 1\n            if count == 4 and color != ' ':\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if board[i][COLUMNS.index(column)] is None), None)\n        if row is not None:\n            board[row][COLUMNS.index(column)] = color\n    \n    for line in LINES:\n        red_count = sum(1 for i, j in line if board[j][COLUMNS.index(i)] == 'Red')\n        yellow_count = sum(1 for i, j in line if board[j][COLUMNS.index(i)] == 'Yellow')\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [] for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(grid):\n        for line in LINES:\n            for color in ('Red', 'Yellow'):\n                if all(grid[column][row] == color for column, row in line):\n                    return color\n        return None\n\n    grid = {column: [''] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index('')\n        grid[column][row] = color\n        winner = check_winner(grid)\n        if winner:\n            return winner\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the grid with empty strings\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = -1\n\n        # find the row where the piece should be dropped\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n\n        # drop the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n\n        # check if there is a winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # if no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len(red_moves)))\n        elif color == 'Yellow':\n            yellow_moves.add((column, len(yellow_moves)))\n            \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n            \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), None)\n\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n            elif color == 'Yellow':\n                yellow_moves.add((column, row))\n\n        if any(line.issubset(red_moves) for line in LINES):\n            return \"Red\"\n        elif any(line.issubset(yellow_moves) for line in LINES):\n            return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        if color == 'Red':\n            red_positions.add(column)\n        elif color == 'Yellow':\n            yellow_positions.add(column)\n        \n        if check_winner(red_positions):\n            return 'Red'\n        elif check_winner(yellow_positions):\n            return 'Yellow'\n    \n    return 'Draw'\n\n\ndef check_winner(positions):\n    for line in LINES:\n        if line.issubset(positions):\n            return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    # initialize the board\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n\n        # find the row where the piece should be dropped\n        row = 0\n        while row < 6 and board[row][column_index] != ' ':\n            row += 1\n\n        # drop the piece\n        board[row][column_index] = color\n\n        # check for a winning condition\n        for line in LINES:\n            if all(board[row][column_index] == color for column_index, row in line):\n                return color\n\n    # if no winning condition is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column].append(color)\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = len([m for m in red_moves if m[0] == column]) + len([m for m in yellow_moves if m[0] == column])\n        if color == 'Red':\n            red_moves.add((column, row))\n        elif color == 'Yellow':\n            yellow_moves.add((column, row))\n\n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n\n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    else:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: set() for col in COLUMNS}\n    players = {\"Red\", \"Yellow\"}\n    \n    for move in pieces_positions:\n        col, player = move.split(\"_\")\n        board[col].add(player)\n        \n        for line in LINES:\n            if line.issubset(board[col]):\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to keep track of the number of pieces in each column\n    columns = {\"A\": [], \"B\": [], \"C\": [], \"D\": [], \"E\": [], \"F\": [], \"G\": []}\n    \n    # Create a dictionary to keep track of the number of pieces in each row\n    rows = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}\n    \n    # Create a dictionary to keep track of the number of pieces in each diagonal line\n    diagonals = {}\n    \n    # Create a variable to keep track of the current player\n    current_player = \"Red\"\n    \n    # Iterate through the list of piece positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split(\"_\")\n        \n        # Add the piece to the column\n        columns[column].append(color)\n        \n        # Add the piece to the row\n        rows[columns[column].count(color)].append(color)\n        \n        # Add the piece to the diagonal lines\n        for line in LINES:\n            if (column, columns[column].count(color)) in line:\n                if line not in diagonals:\n                    diagonals[line] = []\n                diagonals[line].append(color)\n        \n        # Check if the current player has won\n        for line in diagonals:\n            if diagonals[line].count(current_player) == 4:\n                return current_player\n        \n        if len(rows[5]) == 7:\n            return \"Draw\"\n        \n        # Switch to the other player\n        current_player = \"Red\" if current_player == \"Yellow\" else \"Yellow\"\n    \n    # If no player has won, it's a draw\n    return \"Draw\""
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(row for row in ROWS if (column, row) not in red and (column, row) not in yellow)\n        (red if color == 'Red' else yellow).add((column, row))\n        if any(line <= (red if color == 'Red' else yellow) for line in LINES):\n            return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len(red_moves)))\n            if any(line <= red_moves for line in LINES):\n                return 'Red'\n        else:\n            yellow_moves.add((column, len(yellow_moves)))\n            if any(line <= yellow_moves for line in LINES):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = 0\n        while grid[row][ord(column)-65] != '':\n            row += 1\n        grid[row][ord(column)-65] = color\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i in range(len(ROWS)) if (column, ROWS[i]) not in red_moves and (column, ROWS[i]) not in yellow_moves)\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n        \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        column_index = COLUMNS.index(column)\n        for row_index, row in enumerate(grid[column_index]):\n            if not row:\n                grid[column_index][row_index] = color\n                break\n\n    for line in LINES:\n        colors = set()\n        for position in line:\n            column, row = position\n            column_index = COLUMNS.index(column)\n            row_index = ROWS.index(row)\n            colors.add(grid[column_index][row_index])\n            if len(colors) == 2:\n                break\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][next(i for i in ROWS if not board[COLUMNS.index(column)][i])] = color\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if any(all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line)\n                   for line in LINES):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        row = len([p for p in red_positions | yellow_positions if p[0] == column])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if all(p in red_positions for p in line):\n                return \"Red\"\n            if all(p in yellow_positions for p in line):\n                return \"Yellow\"\n            \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n           \ndef who_is_winner(pieces_positions):\n    red_positions = set()\n    yellow_positions = set()\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = len([p for p in red_positions.union(yellow_positions) if p[0] == column])\n        if color == \"Red\":\n            red_positions.add((column, row))\n            if any(line.issubset(red_positions) for line in LINES):\n                return \"Red\"\n        else:\n            yellow_positions.add((column, row))\n            if any(line.issubset(yellow_positions) for line in LINES):\n                return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col][board[col].index(None)] = color\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        column_idx = COLUMNS.index(column)\n        row_idx = board[column_idx].index(None)\n        board[column_idx][row_idx] = color\n        \n        for line in LINES:\n            if all((c, r) in line for c, r in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [[None] * len(ROWS) for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        for line in LINES:\n            if line.issubset({(column, row_index) for column, row in line}):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len([m for m in red_moves if m[0] == column])))\n        else:\n            yellow_moves.add((column, len([m for m in yellow_moves if m[0] == column])))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return \"Red\"\n            elif line <= yellow_moves:\n                return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create an empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # Iterate over the pieces_positions list\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        \n        # Find the first empty slot in the column and place the piece\n        for row_idx, slot in enumerate(grid[column_idx]):\n            if slot == '':\n                grid[column_idx][row_idx] = color\n                break\n\n    # Check if any of the lines have four pieces of the same color\n    for line in LINES:\n        pieces = set()\n        for column, row in line:\n            pieces.add(grid[COLUMNS.index(column)][row])\n        if len(pieces) == 1 and '' not in pieces:\n            return pieces.pop()\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {c: [None]*len(ROWS) for c in COLUMNS}\n\n    for play in pieces_positions:\n        c, color = play.split('_')\n        grid[c][grid[c].index(None)] = color\n\n    for color in ('Red', 'Yellow'):\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to store the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate over the pieces positions\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n\n        # Find the first empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column)-ord('A')] != '':\n            row += 1\n\n        # If the row is within the grid bounds, place the piece\n        if row < 6:\n            grid[row][ord(column)-ord('A')] = color\n\n        # Check for a winning condition\n        for line in LINES:\n            # Get the colors of the pieces in the line\n            colors = [grid[row][ord(column)-ord('A')] for column, row in line]\n\n            # Check if all the colors are the same and not empty\n            if all(color == colors[0] and color != '' for color in colors):\n                return colors[0]\n\n    # If no winning condition is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_positions = set()\n    yellow_positions = set()\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = len([c for c in column if c in COLUMNS])\n        if color == 'Red':\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n    return 'Draw'"
        ],
        "3": [
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n           \ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    players = {'Red', 'Yellow'}\n    \n    for piece in pieces_positions:\n        column, player = piece.split('_')\n        grid[COLUMNS.index(column)][next((i for i in ROWS if not grid[COLUMNS.index(column)][i]), None)] = player\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == player for c, r in line):\n                return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len([m for m in red_moves if m[0] == column])))\n        else:\n            yellow_moves.add((column, len([m for m in yellow_moves if m[0] == column])))\n\n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n\n    if len(red_moves) + len(yellow_moves) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n    else:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: {r: None for r in ROWS} for c in COLUMNS}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column = column.upper()\n\n        for row in ROWS:\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        else:\n            return \"Draw\"\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n           \ndef who_is_winner(pieces_positions):\n    board = [[' ' for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_idx = COLUMNS.index(col)\n        for row in ROWS:\n            if board[col_idx][row] == ' ':\n                board[col_idx][row] = color[0]\n                break\n    for line in LINES:\n        color = ''\n        for cell in line:\n            col, row = cell\n            if board[COLUMNS.index(col)][row] == ' ':\n                break\n            elif color == '':\n                color = board[COLUMNS.index(col)][row]\n            elif color != board[COLUMNS.index(col)][row]:\n                break\n        else:\n            if color == 'R':\n                return 'Red'\n            elif color == 'Y':\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[COLUMNS.index(column)].index(None)\n        board[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max(i for i in ROWS if (column, i) not in red_positions and (column, i) not in yellow_positions)\n\n        if color == 'Red':\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = next((i for i, x in enumerate(grid[COLUMNS.index(column)]) if x is None), None)\n        if row is not None:\n            grid[COLUMNS.index(column)][row] = color\n            \n            for line in LINES:\n                if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [None] * len(ROWS) for column in COLUMNS}\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i, value in enumerate(board[column]) if value is None), None)\n        if row is not None:\n            board[column][row] = color\n\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = len([m for m in yellow_moves | red_moves if m[0] == column])\n        \n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            if line <= yellow_moves:\n                return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        if colors.count('Yellow') == 4:\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        else:\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in range(6) if (column, row) not in red_moves and (column, row) not in yellow_moves)\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n\n        if any(line <= red_moves for line in LINES):\n            return \"Red\"\n        elif any(line <= yellow_moves for line in LINES):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {c: {r: None for r in ROWS} for c in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        col = col.upper()\n        row = next((r for r in ROWS if grid[col][r] is None), None)\n        if row is None:\n            return 'Draw'\n        grid[col][row] = color\n\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n\n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = next((i for i, val in enumerate(board[COLUMNS.index(column)]) if val is None), None)\n        board[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    players = ['Red', 'Yellow']\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column][board[column].index(None)] = player\n\n        for line in LINES:\n            if all(board[c][r] == player for c, r in line):\n                return player\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = position.split(\"_\")[0]\n        color = position.split(\"_\")[1]\n\n        for i in range(len(board)-1, -1, -1):\n            if board[i][ord(column) - ord(\"A\")] == \"\":\n                board[i][ord(column) - ord(\"A\")] = color\n                break\n\n        for line in LINES:\n            if all(board[j][ord(i) - ord(\"A\")] == color for i, j in line):\n                if color == \"Red\":\n                    return \"Red\"\n                else:\n                    return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        grid[COLUMNS.index(col)][next(i for i in range(len(ROWS))\n                                       if grid[COLUMNS.index(col)][i] == '')] = color\n        \n    for line in LINES:\n        pieces = [grid[COLUMNS.index(col)][row] for col, row in line]\n        if len(set(pieces)) == 1 and '' not in pieces:\n            return pieces[0]\n    \n    if all('' not in row for row in grid):\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the game state\n    grid = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the list of moves\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split(\"_\")\n        \n        # Find the lowest empty row in the specified column\n        row = 5\n        while row >= 0 and grid[row][ord(column) - ord('A')] != \"\":\n            row -= 1\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check if the game is over\n        if check_winner(grid):\n            return color\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"\n\n\ndef check_winner(grid):\n    # Check all possible lines on the grid for a winner\n    for line in LINES:\n        values = set()\n        for cell in line:\n            row, col = cell[1], ord(cell[0]) - ord('A')\n            values.add(grid[row][col])\n        if len(values) == 1 and \"\" not in values:\n            return True\n    \n    # If no winner is found, return False\n    return False",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]    \n    grid = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row_index, cell in enumerate(grid[column_index]):\n            if not cell:\n                grid[column_index][row_index] = color\n                break\n        else:\n            return 'Draw'\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    player_turn = 0\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == \"\":\n                board[row][column_index] = color\n                break\n        player_turn += 1\n        if player_turn >= 7:\n            for line in LINES:\n                if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                    if color == \"Red\":\n                        return \"Red\"\n                    else:\n                        return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(column) - 1]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(column) - 1]))\n\n    for line in LINES:\n        if line.issubset(red_moves):\n            return 'Red'\n        elif line.issubset(yellow_moves):\n            return 'Yellow'\n\n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n    else:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(i for i, cell in enumerate(board[COLUMNS.index(column)]) if cell is None)\n        board[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    grid = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column = piece.split('_')[0]\n        color = get_color(piece)\n        grid[COLUMNS.index(column)][grid[COLUMNS.index(column)].index('')] = color\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[COLUMNS.index(col)][board[COLUMNS.index(col)].index(None)] = color\n    \n    for line in LINES:\n        colors = [board[COLUMNS.index(col)][row] for col, row in line]\n        if colors.count(None) == 0 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        # split the position into column and color\n        col, color = position.split('_')\n        \n        # find the lowest empty row in the column\n        row = 0\n        while grid[row][ord(col)-ord('A')]:\n            row += 1\n        \n        # place the color in the grid\n        grid[row][ord(col)-ord('A')] = color\n    \n        # check if there is a winner\n        for line in LINES:\n            if all(grid[row][ord(col)-ord('A')] == color for col, row in line):\n                return color\n    \n    # if there is no winner, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i, value in enumerate(board[COLUMNS.index(column)]) if not value), None)\n        if row is None:\n            continue\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = [[None for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(grid[column_index]) if cell is None), None)\n        if row_index is not None:\n            grid[column_index][row_index] = color\n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][row] == color for column, row in line):\n                return color.capitalize()\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty spaces\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Initialize the current player\n    current_player = 'Yellow'\n    \n    # Loop through the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != ' ':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        \n        # Switch the current player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # create an empty board\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][next(i for i, cell in enumerate(board[COLUMNS.index(column)]) if cell == '')] = color\n    \n    # check if any line of 4 connected cells has the same color\n    for line in LINES:\n        cells = [board[COLUMNS.index(column)][row] for column, row in line]\n        if len(set(cells)) == 1 and cells[0] != '':\n            return cells[0]\n    \n    # if no line of 4 connected cells has the same color, it is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create a dictionary to store the number of pieces in each position\n    grid = {(c, r): ' ' for c in COLUMNS for r in ROWS}\n\n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = max(r for r in ROWS if grid[(column, r)] == ' ')\n        grid[(column, row)] = color\n\n        # Check for a win\n        for line in LINES:\n            if all(grid[position] == color for position in line):\n                return color\n\n    # If no player has won, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [[None] * len(COLUMNS) for _ in ROWS]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i, slot in enumerate(grid) if slot[COLUMNS.index(column)] is None), None)\n        if row is None:\n            return \"Draw\"\n        grid[row][COLUMNS.index(column)] = color\n\n        for line in LINES:\n            if all(grid[i][COLUMNS.index(j)] == color for j, i in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    pieces = {'Yellow': set(), 'Red': set()}\n    for p in pieces_positions:\n        column, color = p.split('_')\n        row = max(r for r in ROWS if (column, r) not in pieces['Yellow'] and (column, r) not in pieces['Red'])\n        pieces[color].add((column, row))\n        if any(line <= pieces[color] for line in LINES):\n            return color\n    return 'Draw'"
        ]
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the moves\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_to_player = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over each move\n    for move in pieces_positions:\n        # Extract the column and color from the move\n        column, color = move.split('_')\n        \n        # Convert the column to an index\n        column_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][column_index].index('')\n        \n        # Update the grid with the move\n        grid[row_index][column_index] = color\n        \n        # Check if the move results in a winning position\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return color_to_player[color]\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        board[COLUMNS.index(column)][ROWS.index(next(i for i, v in enumerate(board[COLUMNS.index(column)]) if not v)) - 1] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(board[r][c] != None for r in range(6) for c in range(7)):\n        return \"Draw\"\n    else:\n        return \"Draw\"\n```",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][next((i for i, x in enumerate(grid[COLUMNS.index(column)][::-1]) if x == ''), None)] = color\n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = players[color]\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != '':\n                player = board[row][column]\n                if all(board[r][c] == player for r, c in line):\n                    return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a dictionary to store the number of pieces in each position\n    board = {}\n    \n    # create a dictionary to store the current player's color\n    current_player = {'color': ''}\n    \n    # iterate through each piece in the pieces_positions list\n    for piece in pieces_positions:\n        # split the piece string into column and color\n        column, color = piece.split('_')\n        \n        # if the current player is not set, set it to the color of the first piece\n        if current_player['color'] == '':\n            current_player['color'] = color\n        \n        # if the column is not in the board dictionary, add it with an empty list as the value\n        if column not in board:\n            board[column] = []\n        \n        # append the color to the column in the board dictionary\n        board[column].append(color)\n        \n        # check if the current player has won\n        if check_winner(board, current_player['color']):\n            return current_player['color']\n        \n        # switch the current player's color\n        current_player['color'] = 'Yellow' if current_player['color'] == 'Red' else 'Red'\n    \n    # if there are no more moves and no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell in the grid with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each line, check if all the cells are occupied by the same player's color.\n7. If a winner is found, return the corresponding color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[:-3]:\n                if all(board[COLUMNS[i+k]][row+k] == board[COLUMNS[i+k+1]][row+k+1] == board[COLUMNS[i+k+2]][row+k+2] == board[COLUMNS[i+k+3]][row+k+3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row+k]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[3:]:\n                if all(board[COLUMNS[i+k]][row-k] == board[COLUMNS[i+k+1]][row-k-1] == board[COLUMNS[i+k+2]][row-k-2] == board[COLUMNS[i+k+3]][row-k-3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row-k]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'"
        ],
        "1": [
            "```python\n    board = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = COLUMNS.index(column)\n        row = len(board) - board[column].count('') - 1\n        board[row][column] = color\n\n        for line in LINES:\n            if all(board[row][column] == color for column, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [[''] * 7 for _ in range(6)]\n\n    # Map the color to its corresponding index\n    color_index = {'Yellow': 0, 'Red': 1}\n\n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Split the piece position into column and color\n        column, color = piece.split('_')\n\n        # Get the index of the column\n        column_index = ord(column) - ord('A')\n\n        # Get the next available row in the column\n        row = next((i for i, cell in enumerate(grid[::-1]) if not cell[column_index]), None)\n\n        # If the column is full, continue to the next piece\n        if row is None:\n            continue\n\n        # Update the grid with the color\n        grid[-row-1][column_index] = color\n\n        # Check if there is a winner\n        for line in LINES:\n            # Get the cells in the line\n            cells = [(column, row) for column, row in line]\n\n            # Get the colors of the cells\n            colors = [grid[row][ord(column) - ord('A')] for column, row in cells]\n\n            # Check if all colors are the same and not empty\n            if all(color and color == colors[0] for color in colors):\n                # Return the color of the winner\n                return colors[0]\n\n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    player = \"Red\"\n\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] is not None:\n            row += 1\n        board[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n        player = \"Yellow\" if player == \"Red\" else \"Red\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Initialize the game grid\n    grid = [[' ' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n\n    # Play each move\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        # Find the first available row in the chosen column\n        for row_index in range(len(ROWS)):\n            if grid[column_index][row_index] == ' ':\n                grid[column_index][row_index] = color\n                break\n    \n    # Check if any of the lines is complete\n    for line in LINES:\n        colors = set()\n        for column, row in line:\n            colors.add(grid[COLUMNS.index(column)][row])\n        if len(colors) == 1 and ' ' not in colors:\n            return list(colors)[0]\n    \n    # If no line is complete, it is a draw\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if board[i][COLUMNS.index(column)] is None), None)\n        if row is not None:\n            board[row][COLUMNS.index(column)] = color\n    \n    for line in LINES:\n        red_count = sum(1 for i, j in line if board[j][COLUMNS.index(i)] == 'Red')\n        yellow_count = sum(1 for i, j in line if board[j][COLUMNS.index(i)] == 'Yellow')\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [] for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(grid):\n        for line in LINES:\n            for color in ('Red', 'Yellow'):\n                if all(grid[column][row] == color for column, row in line):\n                    return color\n        return None\n\n    grid = {column: [''] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index('')\n        grid[column][row] = color\n        winner = check_winner(grid)\n        if winner:\n            return winner\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the grid with empty strings\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = -1\n\n        # find the row where the piece should be dropped\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n\n        # drop the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n\n        # check if there is a winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # if no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len(red_moves)))\n        elif color == 'Yellow':\n            yellow_moves.add((column, len(yellow_moves)))\n            \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n            \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), None)\n\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n            elif color == 'Yellow':\n                yellow_moves.add((column, row))\n\n        if any(line.issubset(red_moves) for line in LINES):\n            return \"Red\"\n        elif any(line.issubset(yellow_moves) for line in LINES):\n            return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        if color == 'Red':\n            red_positions.add(column)\n        elif color == 'Yellow':\n            yellow_positions.add(column)\n        \n        if check_winner(red_positions):\n            return 'Red'\n        elif check_winner(yellow_positions):\n            return 'Yellow'\n    \n    return 'Draw'\n\n\ndef check_winner(positions):\n    for line in LINES:\n        if line.issubset(positions):\n            return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    # initialize the board\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n\n        # find the row where the piece should be dropped\n        row = 0\n        while row < 6 and board[row][column_index] != ' ':\n            row += 1\n\n        # drop the piece\n        board[row][column_index] = color\n\n        # check for a winning condition\n        for line in LINES:\n            if all(board[row][column_index] == color for column_index, row in line):\n                return color\n\n    # if no winning condition is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column].append(color)\n        \n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n            \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the list of piece positions\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')]:\n            row -= 1\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check for a winning condition in any of the lines\n    for line in LINES:\n        colors = set(grid[row][ord(column) - ord('A')] for column, row in line)\n        if len(colors) == 1 and colors != {''}:\n            return colors.pop()\n    \n    # If no winning condition is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: set() for col in COLUMNS}\n    players = {\"Red\", \"Yellow\"}\n    \n    for move in pieces_positions:\n        col, player = move.split(\"_\")\n        board[col].add(player)\n        \n        for line in LINES:\n            if line.issubset(board[col]):\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to keep track of the number of pieces in each column\n    columns = {\"A\": [], \"B\": [], \"C\": [], \"D\": [], \"E\": [], \"F\": [], \"G\": []}\n    \n    # Create a dictionary to keep track of the number of pieces in each row\n    rows = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}\n    \n    # Create a dictionary to keep track of the number of pieces in each diagonal line\n    diagonals = {}\n    \n    # Create a variable to keep track of the current player\n    current_player = \"Red\"\n    \n    # Iterate through the list of piece positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split(\"_\")\n        \n        # Add the piece to the column\n        columns[column].append(color)\n        \n        # Add the piece to the row\n        rows[columns[column].count(color)].append(color)\n        \n        # Add the piece to the diagonal lines\n        for line in LINES:\n            if (column, columns[column].count(color)) in line:\n                if line not in diagonals:\n                    diagonals[line] = []\n                diagonals[line].append(color)\n        \n        # Check if the current player has won\n        for line in diagonals:\n            if diagonals[line].count(current_player) == 4:\n                return current_player\n        \n        if len(rows[5]) == 7:\n            return \"Draw\"\n        \n        # Switch to the other player\n        current_player = \"Red\" if current_player == \"Yellow\" else \"Yellow\"\n    \n    # If no player has won, it's a draw\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None]*7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = ord(column) - ord(\"A\")\n        row_index = next((index for index, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        if any(all(board[column_index][row] == color for column_index, row in line) for line in LINES):\n            return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    red_pieces = set()\n    yellow_pieces = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        row = int(position[2:])\n        if position[-3:] == \"Red\":\n            red_pieces.add((column, row))\n        elif position[-6:] == \"Yellow\":\n            yellow_pieces.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_pieces):\n                return \"Red\"\n            elif line.issubset(yellow_pieces):\n                return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max(ROWS - {r for c, r in red} - {r for c, r in yellow if r == row})\n        player = red if color == 'Red' else yellow\n        player.add((column, row))\n        if any(line <= player for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Set the players' colors\n    colors = {'Red': 'R', 'Yellow': 'Y'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # Get the index of the column\n        col_index = ord(column) - ord('A')\n        \n        # Find the row where the piece will be placed\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Place the piece in the grid\n        grid[row_index][col_index] = colors[color]\n        \n        # Check if there is a winning condition\n        for line in LINES:\n            if all(grid[row][col] == colors[color] for col, row in line):\n                return color\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions)\n        if color == 'Red':\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n\n        if any(line <= red_positions for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_positions for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max(r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves)\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n\n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            if line <= yellow_moves:\n                return 'Yellow'\n\n    return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {col: {row: None for row in ROWS} for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = next(row for row in ROWS if grid[col][row] is None)\n        grid[col][row] = color\n        if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n            return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        column_index = COLUMNS.index(column)\n        for row_index, row in enumerate(grid[column_index]):\n            if not row:\n                grid[column_index][row_index] = color\n                break\n\n    for line in LINES:\n        colors = set()\n        for position in line:\n            column, row = position\n            column_index = COLUMNS.index(column)\n            row_index = ROWS.index(row)\n            colors.add(grid[column_index][row_index])\n            if len(colors) == 2:\n                break\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][next(i for i in ROWS if not board[COLUMNS.index(column)][i])] = color\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if any(all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line)\n                   for line in LINES):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        row = len([p for p in red_positions | yellow_positions if p[0] == column])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if all(p in red_positions for p in line):\n                return \"Red\"\n            if all(p in yellow_positions for p in line):\n                return \"Yellow\"\n            \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n           \ndef who_is_winner(pieces_positions):\n    red_positions = set()\n    yellow_positions = set()\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = len([p for p in red_positions.union(yellow_positions) if p[0] == column])\n        if color == \"Red\":\n            red_positions.add((column, row))\n            if any(line.issubset(red_positions) for line in LINES):\n                return \"Red\"\n        else:\n            yellow_positions.add((column, row))\n            if any(line.issubset(yellow_positions) for line in LINES):\n                return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col][board[col].index(None)] = color\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        column_idx = COLUMNS.index(column)\n        row_idx = board[column_idx].index(None)\n        board[column_idx][row_idx] = color\n        \n        for line in LINES:\n            if all((c, r) in line for c, r in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [[None] * len(ROWS) for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        for line in LINES:\n            if line.issubset({(column, row_index) for column, row in line}):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len([m for m in red_moves if m[0] == column])))\n        else:\n            yellow_moves.add((column, len([m for m in yellow_moves if m[0] == column])))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return \"Red\"\n            elif line <= yellow_moves:\n                return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create an empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # Iterate over the pieces_positions list\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        \n        # Find the first empty slot in the column and place the piece\n        for row_idx, slot in enumerate(grid[column_idx]):\n            if slot == '':\n                grid[column_idx][row_idx] = color\n                break\n\n    # Check if any of the lines have four pieces of the same color\n    for line in LINES:\n        pieces = set()\n        for column, row in line:\n            pieces.add(grid[COLUMNS.index(column)][row])\n        if len(pieces) == 1 and '' not in pieces:\n            return pieces.pop()\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to store the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate over the pieces positions\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n\n        # Find the first empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column)-ord('A')] != '':\n            row += 1\n\n        # If the row is within the grid bounds, place the piece\n        if row < 6:\n            grid[row][ord(column)-ord('A')] = color\n\n        # Check for a winning condition\n        for line in LINES:\n            # Get the colors of the cells in the line\n            colors = [grid[row][ord(column)-ord('A')] for column, row in line]\n\n            # Check if all the colors are the same and not empty\n            if all(color == colors[0] and color != '' for color in colors):\n                return colors[0]\n\n    # If no winning condition is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_positions = set()\n    yellow_positions = set()\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = len([c for c in column if c in COLUMNS])\n        if color == 'Red':\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty 6x7 grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each position in the pieces_positions list\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the lowest empty row in the column\n        row = 0\n        while grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check for a winning sequence of 4 pieces in any line\n    for line in LINES:\n        # Get the colors in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all colors are the same and not empty\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    \n    # If no winning sequence found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = []\n    yellow_positions = []\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_positions.append((column, ROWS[len(red_positions)]))\n        else:\n            yellow_positions.append((column, ROWS[len(yellow_positions)]))\n\n        for line in LINES:\n            if line.issubset(set(red_positions)):\n                return 'Red'\n            elif line.issubset(set(yellow_positions)):\n                return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = color\n                break\n\n    for line in LINES:\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        if colors.count('Yellow') == 4:\n            return 'Yellow'\n\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: {r: None for r in ROWS} for c in COLUMNS}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column = column.upper()\n\n        for row in ROWS:\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        else:\n            return \"Draw\"\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[COLUMNS.index(column)].index(None)\n        board[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['']*7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if board[i][ord(column)-65] == ''), None)\n        if row is not None:\n            board[row][ord(column)-65] = color\n            for line in LINES:\n                if all(board[row][ord(column)-65] == color for column, row in line):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max(i for i in ROWS if (column, i) not in red_positions and (column, i) not in yellow_positions)\n\n        if color == 'Red':\n            red_positions.add((column, row))\n        elif color == 'Yellow':\n            yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = next((i for i, x in enumerate(grid[COLUMNS.index(column)]) if x is None), None)\n        if row is not None:\n            grid[COLUMNS.index(column)][row] = color\n            \n            for line in LINES:\n                if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    reds = set()\n    yellows = set()\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = max((r for r in ROWS if (column, r) not in reds and (column, r) not in yellows), default=None)\n        if row is not None:\n            if color == 'Red':\n                reds.add((column, row))\n            else:\n                yellows.add((column, row))\n        \n        for line in LINES:\n            if line <= reds:\n                return \"Red\"\n            if line <= yellows:\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [None] * len(ROWS) for column in COLUMNS}\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i, value in enumerate(board[column]) if value is None), None)\n        if row is not None:\n            board[column][row] = color\n\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = len([m for m in yellow_moves | red_moves if m[0] == column])\n        \n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            if line <= yellow_moves:\n                return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        if colors.count('Yellow') == 4:\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        else:\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in range(6) if (column, row) not in red_moves and (column, row) not in yellow_moves)\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n\n        if any(line <= red_moves for line in LINES):\n            return \"Red\"\n        if any(line <= yellow_moves for line in LINES):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {c: {r: None for r in ROWS} for c in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        col = col.upper()\n        row = next((r for r in ROWS if grid[col][r] is None), None)\n        if row is None:\n            return 'Draw'\n        grid[col][row] = color\n\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = ROWS[max(i for i in ROWS if (column, i) not in red_moves and (column, i) not in yellow_moves)]\n        if color == 'Red':\n            red_moves.add((column, row))\n            if any(line <= red_moves for line in LINES):\n                return \"Red\"\n        else:\n            yellow_moves.add((column, row))\n            if any(line <= yellow_moves for line in LINES):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        row = max((r for r in range(len(ROWS)) if (column, r) not in red_moves and (column, r) not in yellow_moves))\n        \n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n            \n        if any(line <= red_moves for line in LINES):\n            return 'Red'\n        \n        if any(line <= yellow_moves for line in LINES):\n            return 'Yellow'\n        \n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {c: ['']*len(ROWS) for c in COLUMNS}\n    players = {'Red': 'Yellow', 'Yellow': 'Red'}\n\n    for piece_position in pieces_positions:\n        c, color = piece_position.split('_')\n        grid[c][grid[c].index('')] = color\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(column) - 1]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(column) - 1]))\n\n    for line in LINES:\n        if line.issubset(red_moves):\n            return 'Red'\n        elif line.issubset(yellow_moves):\n            return 'Yellow'\n\n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n    else:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        row = next(i for i in reversed(ROWS) if (column, i) not in red_positions and (column, i) not in yellow_positions)\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n\n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    grid = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column = piece.split('_')[0]\n        color = get_color(piece)\n        grid[COLUMNS.index(column)][grid[COLUMNS.index(column)].index('')] = color\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[COLUMNS.index(col)][board[COLUMNS.index(col)].index(None)] = color\n    \n    for line in LINES:\n        colors = [board[COLUMNS.index(col)][row] for col, row in line]\n        if colors.count(None) == 0 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i, value in enumerate(board[COLUMNS.index(column)]) if not value), None)\n        if row is None:\n            continue\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = [[None for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(grid[column_index]) if cell is None), None)\n        if row_index is not None:\n            grid[column_index][row_index] = color\n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][row] == color for column, row in line):\n                return color.capitalize()\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty spaces\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Initialize the current player\n    current_player = 'Yellow'\n    \n    # Loop through the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != ' ':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        \n        # Switch the current player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # create an empty board\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][next(i for i, cell in enumerate(board[COLUMNS.index(column)]) if cell == '')] = color\n    \n    # check if any line of 4 connected cells has the same color\n    for line in LINES:\n        cells = [board[COLUMNS.index(column)][row] for column, row in line]\n        if len(set(cells)) == 1 and cells[0] != '':\n            return cells[0]\n    \n    # if no line of 4 connected cells has the same color, it is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create a dictionary to store the number of pieces in each position\n    grid = {(c, r): ' ' for c in COLUMNS for r in ROWS}\n\n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = max(r for r in ROWS if grid[(column, r)] == ' ')\n        grid[(column, row)] = color\n\n        # Check for a win\n        for line in LINES:\n            if all(grid[position] == color for position in line):\n                return color\n\n    # If no player has won, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red, yellow = set(), set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((r for r in ROWS if (column, r) not in red and (column, r) not in yellow), None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red.add((column, row))\n            if any(line.issubset(red) for line in LINES):\n                return 'Red'\n        elif color == 'Yellow':\n            yellow.add((column, row))\n            if any(line.issubset(yellow) for line in LINES):\n                return 'Yellow'\n        if len(red) + len(yellow) == len(COLUMNS) * len(ROWS):\n            return 'Draw'\n    return 'Draw'"
        ]
    },
    "2": {
        "0": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a grid to store the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # iterate through the pieces positions\n    for pos in pieces_positions:\n        # get the column and color from the position\n        column, color = pos.split('_')\n        \n        # find the next empty row in the column\n        row = 5\n        while row >= 0 and grid[row][ord(column)-65] != '':\n            row -= 1\n        \n        # if the row is valid, place the piece\n        if row >= 0:\n            grid[row][ord(column)-65] = color\n    \n    # check for a win\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n    \n    # if there are no empty spaces, it's a draw\n    if all(all(cell != '' for cell in row) for row in grid):\n        return 'Draw'\n    \n    # if no one has won and there are still empty spaces, the game is ongoing\n    return 'Ongoing'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell in the grid with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each line, check if all the cells are occupied by the same player's color.\n7. If a winner is found, return the corresponding color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j+1]] == board[COLUMNS[i+2]][ROWS[j+2]] == board[COLUMNS[i+3]][ROWS[j+3]] for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)):\n            return board[col][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j-1]] == board[COLUMNS[i+2]][ROWS[j-2]] == board[COLUMNS[i+3]][ROWS[j-3]] for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))):\n            return board[col][row]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 6 for _ in range(7)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = COLUMNS.index(column)\n        row_idx = next((i for i in range(6) if board[col_idx][i] is None), None)\n        if row_idx is not None:\n            board[col_idx][row_idx] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column] = board.get(column, '') + color[0]\n\n        for line in LINES:\n            if all(board.get(cell, '') == board[column] for cell in line):\n                return board[column]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_idx = COLUMNS.index(column)\n        for row_idx in range(len(ROWS)-1, -1, -1):\n            if board[column_idx][row_idx] is None:\n                board[column_idx][row_idx] = color\n                break\n    \n    for line in LINES:\n        colors = [board[column_idx][row_idx] for column_idx, row_idx in line]\n        if all(color == \"Red\" for color in colors):\n            return \"Red\"\n        elif all(color == \"Yellow\" for color in colors):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the game grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    player_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the moves\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the column index\n        column_index = ord(column) - ord('A')\n        \n        # Find the row index\n        row_index = 5 - grid[::-1][column_index].count('')\n        \n        # Place the piece in the grid\n        grid[row_index][column_index] = color\n    \n        # Check for a winner\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return player_map[color]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for i in range(len(pieces_positions)):\n        col, player = pieces_positions[i].split('_')\n        if col not in board:\n            board[col] = []\n        board[col].append(player)\n\n        if len(board[col]) == 6:\n            board[col] = []\n            \n        for line in LINES:\n            if all((col, player) in line for col, row in line):\n                return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max([row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in reversed(range(6)):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create a dictionary to store the number of pieces for each player in each line\n    count = {'Red': 0, 'Yellow': 0}\n\n    # Iterate through each move in the list of piece positions\n    for move in pieces_positions:\n        # Get the column and player color from the move\n        column, player = move.split('_')\n        # Check if the column is valid\n        if column not in COLUMNS:\n            return 'Invalid move'\n        # Check if the line is full\n        if count['Red'] + count['Yellow'] == len(LINES):\n            return 'Draw'\n        # Iterate through each line\n        for line in LINES:\n            # Check if the move is in the line\n            if column in line:\n                # Check if the player is already winning the line\n                if player not in [color for color, num_pieces in count.items() if line in LINES[num_pieces]]:\n                    # Increment the count for the player in the line\n                    count[player] += 1\n                    # Check if the player has won\n                    if count[player] == 4:\n                        return player\n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    def check_winner(grid):\n        for line in LINES:\n            for color in ('Red', 'Yellow'):\n                if all(grid[column][row] == color for column, row in line):\n                    return color\n        return None\n\n    grid = {column: [''] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index('')\n        grid[column][row] = color\n        winner = check_winner(grid)\n        if winner:\n            return winner\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the grid with empty strings\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = -1\n\n        # find the row where the piece should be dropped\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n\n        # drop the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n\n        # check if there is a winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # if no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len(red_moves)))\n        elif color == 'Yellow':\n            yellow_moves.add((column, len(yellow_moves)))\n            \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n            \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), None)\n\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n            elif color == 'Yellow':\n                yellow_moves.add((column, row))\n\n        if any(line.issubset(red_moves) for line in LINES):\n            return \"Red\"\n        elif any(line.issubset(yellow_moves) for line in LINES):\n            return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # initialize the board\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n\n        # find the row where the piece should be dropped\n        row = 0\n        while row < 6 and board[row][column_index] != ' ':\n            row += 1\n\n        # drop the piece\n        board[row][column_index] = color\n\n        # check for a winning condition\n        for line in LINES:\n            if all(board[row][column_index] == color for column_index, row in line):\n                return color\n\n    # if no winning condition is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column].append(color)\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the list of piece positions\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')]:\n            row -= 1\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check for a winning condition in any of the lines\n    for line in LINES:\n        colors = set(grid[row][ord(column) - ord('A')] for column, row in line)\n        if len(colors) == 1 and colors != {''}:\n            return colors.pop()\n    \n    # If no winning condition is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: set() for col in COLUMNS}\n    players = {\"Red\", \"Yellow\"}\n    \n    for move in pieces_positions:\n        col, player = move.split(\"_\")\n        board[col].add(player)\n        \n        for line in LINES:\n            if line.issubset(board[col]):\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to keep track of the number of pieces in each column\n    columns = {\"A\": [], \"B\": [], \"C\": [], \"D\": [], \"E\": [], \"F\": [], \"G\": []}\n    \n    # Create a dictionary to keep track of the number of pieces in each row\n    rows = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}\n    \n    # Create a dictionary to keep track of the number of pieces in each diagonal line\n    diagonals = {}\n    \n    # Create a variable to keep track of the current player\n    current_player = \"Red\"\n    \n    # Iterate through the list of piece positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split(\"_\")\n        \n        # Add the piece to the column\n        columns[column].append(color)\n        \n        # Add the piece to the row\n        rows[columns[column].count(color)].append(color)\n        \n        # Add the piece to the diagonal lines\n        for line in LINES:\n            if (column, columns[column].count(color)) in line:\n                if line not in diagonals:\n                    diagonals[line] = []\n                diagonals[line].append(color)\n        \n        # Check if the current player has won\n        for line in diagonals:\n            if diagonals[line].count(current_player) == 4:\n                return current_player\n        \n        if len(rows[5]) == 7:\n            return \"Draw\"\n        \n        # Switch to the other player\n        current_player = \"Red\" if current_player == \"Yellow\" else \"Yellow\"\n    \n    # If no player has won, it's a draw\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None]*7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = ord(column) - ord(\"A\")\n        row_index = next((index for index, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        if any(all(board[column_index][row] == color for column_index, row in line) for line in LINES):\n            return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    red_pieces = set()\n    yellow_pieces = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        row = int(position[2:])\n        if position[-3:] == \"Red\":\n            red_pieces.add((column, row))\n        elif position[-6:] == \"Yellow\":\n            yellow_pieces.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_pieces):\n                return \"Red\"\n            elif line.issubset(yellow_pieces):\n                return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max(ROWS - {r for c, r in red} - {r for c, r in yellow if r == row})\n        player = red if color == 'Red' else yellow\n        player.add((column, row))\n        if any(line <= player for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Set the players' colors\n    colors = {'Red': 'R', 'Yellow': 'Y'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # Get the index of the column\n        col_index = ord(column) - ord('A')\n        \n        # Find the row where the piece will be placed\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Place the piece in the grid\n        grid[row_index][col_index] = colors[color]\n        \n        # Check if there is a winning condition\n        for line in LINES:\n            if all(grid[row][col] == colors[color] for col, row in line):\n                return color\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions)\n        if color == 'Red':\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n\n        if any(line <= red_positions for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_positions for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max(r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves)\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n\n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            if line <= yellow_moves:\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [[''] * len(COLUMNS) for _ in ROWS]\n\n    for pp in pieces_positions:\n        col, color = pp.split('_')\n        col_index = COLUMNS.index(col)\n        row_index = next((i for i, v in enumerate(grid) if v[col_index] == ''), None)\n        if row_index is None:\n            continue\n        grid[row_index][col_index] = color\n\n        for line in LINES:\n            if all(grid[row][col] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = len([pos for pos in red.union(yellow) if pos[0] == column])\n        pos = (column, ROWS[row])\n        \n        if color == 'Red':\n            red.add(pos)\n        else:\n            yellow.add(pos)\n        \n        if any(line <= red for line in LINES):\n            return \"Red\"\n        elif any(line <= yellow for line in LINES):\n            return \"Yellow\"\n    \n    if len(red) + len(yellow) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(len(ROWS) - 1, -1, -1):\n            if not board[COLUMNS.index(column)][i]:\n                board[COLUMNS.index(column)][i] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    player = 'Red'\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] == ' ':\n            row += 1\n        row -= 1\n        board[row][ord(column) - ord('A')] = color\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        player = 'Yellow' if player == 'Red' else 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split('_')[1]\n        \n        for row in range(6):\n            if board[row][column] is None:\n                board[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][column] == color for (column, row) in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a grid to store the game state\n    grid = [['']*7 for _ in range(6)]\n    \n    # Create a dictionary to map colors to numbers\n    color_mapping = {'Red': 'R', 'Yellow': 'Y'}\n    \n    # Iterate through the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        \n        # Get the column index from the column letter\n        column_index = ord(column) - ord('A')\n        \n        # Find the first empty row in the column\n        row = next((row for row in range(6) if grid[row][column_index] == ''), None)\n        \n        # If the column is full, skip the current position\n        if row is None:\n            continue\n        \n        # Set the color in the grid\n        grid[row][column_index] = color_mapping[color]\n        \n        # Check if there is a winner\n        for line in LINES:\n            if all(grid[row][column] == grid[row][column_index] for column, row in line):\n                return color\n    \n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    # Define the grid size and possible lines to win\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create a dictionary to store the grid\n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n\n    # Iterate over the pieces positions\n    for position in pieces_positions:\n\n        # Split the position into column and color\n        column, color = position.split('_')\n\n        # Get the column index\n        column_index = COLUMNS.index(column)\n\n        # Find the lowest empty slot in the column\n        for row in reversed(ROWS):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check if the move resulted in a win\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n\n    # If no winner is found, return \"Draw\"\n    return \"Draw\""
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        column_index = COLUMNS.index(column)\n        for row_index, row in enumerate(grid[column_index]):\n            if row == '':\n                grid[column_index][row_index] = color\n                break\n\n    for line in LINES:\n        colors = set()\n        for position in line:\n            column, row = position\n            column_index = COLUMNS.index(column)\n            row_index = ROWS.index(row)\n            colors.add(grid[column_index][row_index])\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n\n    if all(grid[column_index][row_index] != '' for column_index in range(len(COLUMNS)) for row_index in range(len(ROWS))):\n        return 'Draw'\n    else:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][next(i for i in ROWS if not board[COLUMNS.index(column)][i])] = color\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if any(all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line)\n                   for line in LINES):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        row = len([p for p in red_positions | yellow_positions if p[0] == column])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if all(p in red_positions for p in line):\n                return \"Red\"\n            if all(p in yellow_positions for p in line):\n                return \"Yellow\"\n            \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n           \ndef who_is_winner(pieces_positions):\n    red_positions = set()\n    yellow_positions = set()\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = len([p for p in red_positions.union(yellow_positions) if p[0] == column])\n        if color == \"Red\":\n            red_positions.add((column, row))\n            if any(line.issubset(red_positions) for line in LINES):\n                return \"Red\"\n        else:\n            yellow_positions.add((column, row))\n            if any(line.issubset(yellow_positions) for line in LINES):\n                return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col][board[col].index(None)] = color\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        column_idx = COLUMNS.index(column)\n        row_idx = board[column_idx].index(None)\n        board[column_idx][row_idx] = color\n        \n        for line in LINES:\n            if all((c, r) in line for c, r in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [[None] * len(ROWS) for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        for line in LINES:\n            if line.issubset({(column, row_index) for column, row in line}):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len([m for m in red_moves if m[0] == column])))\n        else:\n            yellow_moves.add((column, len([m for m in yellow_moves if m[0] == column])))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return \"Red\"\n            elif line <= yellow_moves:\n                return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create an empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # Iterate over the pieces_positions list\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        \n        # Find the first empty slot in the column and place the piece\n        for row_idx, slot in enumerate(grid[column_idx]):\n            if slot == '':\n                grid[column_idx][row_idx] = color\n                break\n\n    # Check if any of the lines have four pieces of the same color\n    for line in LINES:\n        pieces = set()\n        for column, row in line:\n            pieces.add(grid[COLUMNS.index(column)][row])\n        if len(pieces) == 1 and '' not in pieces:\n            return pieces.pop()\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to store the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate over the pieces positions\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n\n        # Find the first empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column)-ord('A')] != '':\n            row += 1\n\n        # If the row is within the grid bounds, place the piece\n        if row < 6:\n            grid[row][ord(column)-ord('A')] = color\n\n        # Check for a winning condition\n        for line in LINES:\n            # Get the colors of the pieces in the line\n            colors = [grid[row][ord(column)-ord('A')] for column, row in line]\n\n            # Check if all the colors are the same and not empty\n            if all(color == colors[0] and color != '' for color in colors):\n                return colors[0]\n\n    # If no winning condition is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_positions = set()\n    yellow_positions = set()\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = len([c for c in column if c in COLUMNS])\n        if color == 'Red':\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty 6x7 grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each position in the pieces_positions list\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the lowest empty row in the column\n        row = 0\n        while grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check for a winning sequence of 4 pieces in any line\n    for line in LINES:\n        # Get the colors in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all colors are the same and not empty\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    \n    # If no winning sequence found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None]*7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column_index = ord(column) - ord('A')\n        \n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = color\n                break\n\n    for line in LINES:\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        if colors.count('Yellow') == 4:\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        row = next(i for i in range(len(ROWS)) if board[COLUMNS.index(column)][i] is None)\n        board[COLUMNS.index(column)][row] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((row for row in range(6) if (column, row) not in red_positions and (column, row) not in yellow_positions), None)\n        if row is None:\n            return \"Draw\"\n        if color == 'Red':\n            red_positions.add((column, row))\n        elif color == 'Yellow':\n            yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[' ' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(len(ROWS)):\n            if board[ord(column)-ord('A')][row] == ' ':\n                board[ord(column)-ord('A')][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for column, row in line:\n            colors.add(board[ord(column)-ord('A')][row])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        grid[COLUMNS.index(column)][-grid[COLUMNS.index(column)].count('')] = color\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][ROWS.index(row)] == color for col, row in line):\n                return color\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max(i for i in ROWS if (column, i) not in red_positions and (column, i) not in yellow_positions)\n\n        if color == 'Red':\n            red_positions.add((column, row))\n        elif color == 'Yellow':\n            yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = next((i for i, x in enumerate(grid[COLUMNS.index(column)]) if x is None), None)\n        if row is not None:\n            grid[COLUMNS.index(column)][row] = color\n            \n            for line in LINES:\n                if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    reds = set()\n    yellows = set()\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = max((r for r in ROWS if (column, r) not in reds and (column, r) not in yellows), default=None)\n        if row is not None:\n            if color == 'Red':\n                reds.add((column, row))\n            else:\n                yellows.add((column, row))\n        \n        for line in LINES:\n            if line <= reds:\n                return \"Red\"\n            if line <= yellows:\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [None] * len(ROWS) for column in COLUMNS}\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i, value in enumerate(board[column]) if value is None), None)\n        if row is not None:\n            board[column][row] = color\n\n            for line in LINES:\n                if all(board[column][row] == color for column, row in line):\n                    return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = len([m for m in yellow_moves | red_moves if m[0] == column])\n        \n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            if line <= yellow_moves:\n                return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [None] * len(ROWS) for column in COLUMNS}\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = next(i for i, piece in enumerate(board[column]) if piece is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][next(i for i, cell in enumerate(board[COLUMNS.index(column)]) if cell is None)] = color\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if any(all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line) for line in LINES):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        else:\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        \n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - ord('A')] == \"\":\n                grid[row][ord(column) - ord('A')] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = ROWS[max(i for i in ROWS if (column, i) not in red_moves and (column, i) not in yellow_moves)]\n        (red_moves if color == 'Red' else yellow_moves).add((column, row))\n\n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        row = max((r for r in range(len(ROWS)) if (column, r) not in red_moves and (column, r) not in yellow_moves))\n        \n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n            \n        if any(line <= red_moves for line in LINES):\n            return 'Red'\n        \n        if any(line <= yellow_moves for line in LINES):\n            return 'Yellow'\n        \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the game board\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Initialize the player turn\n    turn = 'Red'\n    \n    # Iterate through each piece position\n    for piece in pieces_positions:\n        # Extract the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # Find the row to place the piece\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - ord('A')] == '':\n                # Place the piece on the board\n                board[row][ord(column) - ord('A')] = color\n                \n                # Check if the current player wins\n                if check_win(board, row, ord(column) - ord('A')):\n                    return color\n                \n                # Switch the player turn\n                turn = 'Yellow' if turn == 'Red' else 'Red'\n                break\n    \n    # If all positions are filled and no player wins, return \"Draw\"\n    return \"Draw\"\n\n\ndef check_win(board, row, column):\n    color = board[row][column]\n    \n    # Check for vertical win\n    if row >= 3 and board[row-1][column] == color and board[row-2][column] == color and board[row-3][column] == color:\n        return True\n    \n    # Check for horizontal win\n    if column >= 3 and board[row][column-1] == color and board[row][column-2] == color and board[row][column-3] == color:\n        return True\n    if column <= 3 and board[row][column+1] == color and board[row][column+2] == color and board[row][column+3] == color:\n        return True\n    \n    # Check for diagonal win\n    if row >= 3 and column >= 3 and board[row-1][column-1] == color and board[row-2][column-2] == color and board[row-3][column-3] == color:\n        return True\n    if row >= 3 and column <= 3 and board[row-1][column+1] == color and board[row-2][column+2] == color and board[row-3][column+3] == color:\n        return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][ROWS.index(next( i for i in ROWS if grid[COLUMNS.index(column)][ROWS.index(i)] is None ))] = color\n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        \n        row = 5\n        while row >= 0 and board[row][COLUMNS.index(column)] != ' ':\n            row -= 1\n        \n        board[row][COLUMNS.index(column)] = color\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    \n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    grid = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column = piece.split('_')[0]\n        color = get_color(piece)\n        grid[COLUMNS.index(column)][grid[COLUMNS.index(column)].index('')] = color\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[COLUMNS.index(col)][board[COLUMNS.index(col)].index(None)] = color\n    \n    for line in LINES:\n        colors = [board[COLUMNS.index(col)][row] for col, row in line]\n        if colors.count(None) == 0 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        # split the position into column and color\n        col, color = position.split('_')\n        \n        # find the lowest empty row in the column\n        row = 0\n        while grid[row][ord(col)-ord('A')]:\n            row += 1\n        \n        # place the color in the grid\n        grid[row][ord(col)-ord('A')] = color\n    \n        # check if there is a winner\n        for line in LINES:\n            if all(grid[row][ord(col)-ord('A')] == color for col, row in line):\n                return color\n    \n    # if there is no winner, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i, value in enumerate(board[COLUMNS.index(column)]) if not value), None)\n        if row is None:\n            continue\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty spaces\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Initialize the current player\n    current_player = 'Yellow'\n    \n    # Loop through the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != ' ':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        \n        # Switch the current player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((row for row in ROWS if (column, row) not in red_moves and (column, row) not in yellow_moves), None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            elif color == 'Yellow':\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red, yellow = set(), set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((r for r in ROWS if (column, r) not in red and (column, r) not in yellow), None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red.add((column, row))\n            if any(line.issubset(red) for line in LINES):\n                return 'Red'\n        elif color == 'Yellow':\n            yellow.add((column, row))\n            if any(line.issubset(yellow) for line in LINES):\n                return 'Yellow'\n        if len(red) + len(yellow) == len(COLUMNS) * len(ROWS):\n            return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n                \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'"
        ]
    }
}