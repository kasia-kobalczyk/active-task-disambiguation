{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c].count(color) >= 1 for c in line if c in board):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if (col, row) in line):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if (col, row) in line):\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            colors = {board[col][row] for col, row in line if board[col][row] is not None}\n            if len(colors) == 1 and None not in colors:\n                return colors.pop()\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < len(grid[c]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a winner after each move\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if check_winner(grid, col, row):\n                        return grid[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row):\n    color = grid[col][row]\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        # Check in the positive direction\n        x, y = ord(col) - ord('A'), row\n        while 0 <= x + dx < 7 and 0 <= y + dy < 6 and grid[chr(x + dx + ord('A'))][y + dy] == color:\n            count += 1\n            x += dx\n            y += dy\n            \n        # Check in the negative direction\n        x, y = ord(col) - ord('A'), row\n        while 0 <= x - dx < 7 and 0 <= y - dy < 6 and grid[chr(x - dx + ord('A'))][y - dy] == color:\n            count += 1\n            x -= dx\n            y -= dy\n            \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6)):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all(board[column][row - i] == color for i in range(4)):\n                    return color\n        \n        # Check vertical connections\n        for col in board:\n            if len(board[col]) >= 4:\n                for row in range(len(board[col]) - 1, len(board[col]) - 5, -1):\n                    if row < 0:\n                        continue\n                    if all(board[col][row - i] == color for i in range(4)):\n                        return color\n\n        # Check diagonal (left-down to right-up)\n        for col in range(len(board) - 3):\n            for row in range(3, len(ROWS)):\n                if all(board[COLUMNS[col + i]][row - i] == color for i in range(4)):\n                    return color\n\n        # Check diagonal (left-up to right-down)\n        for col in range(len(board) - 3):\n            for row in range(len(ROWS) - 3):\n                if all(board[COLUMNS[col + i]][row + i] == color for i in range(4)):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [((0, 1), (1, 0)), ((1, 0), (0, 1)), ((1, 1), (1, -1))]:\n            count = 1\n            for (dx, dy) in direction:\n                x, y = board[column].index(color), row\n                while 0 <= x + dx < 6 and 0 <= y + dy < 7 and board['ABCDEFG'[y + dy]][x + dx] == color:\n                    count += 1\n                    x += dx\n                    y += dy\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if (0 <= row < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Check vertical\n    if len(board[column]) >= 4 and all(c == color for c in board[column][-4:]):\n        return True\n    \n    # Check horizontal\n    row_index = len(board[column]) - 1\n    for c in 'ABCDEFG':\n        if board[c][-1] == color and row_index < len(board[c]):\n            count = 1\n            for offset in [1, -1]:\n                for i in range(1, 4):\n                    check_col = chr(ord(c) + offset * i)\n                    if check_col in board and row_index < len(board[check_col]) and board[check_col][row_index] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return True\n    \n    # Check diagonals\n    for offset in range(-3, 1):\n        diag1_count = diag2_count = 0\n        for i in range(4):\n            diag1_col = chr(ord(column) + offset + i)\n            diag2_col = chr(ord(column) + offset + 3 - i)\n            if diag1_col in board and row_index < len(board[diag1_col]) and board[diag1_col][row_index] == color:\n                diag1_count += 1\n            if diag2_col in board and row_index < len(board[diag2_col]) and board[diag2_col][row_index] == color:\n                diag2_count += 1\n        \n        if diag1_count >= 4 or diag2_count >= 4:\n            return True\n    \n    return False\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                for r in range(6):\n                    if board[col][r] == color:\n                        if r <= 2 and all(board[col][r+i] == color for i in range(4)):\n                            return color\n                        if col in 'ABCD' and all(board[chr(ord(col)+i)][r] == color for i in range(4)):\n                            return color\n                        if col in 'ABCDEFG' and r <= 2 and all(board[chr(ord(col)+i)][r+i] == color for i in range(4) if ord(col)+i < ord('H')):\n                            return color\n                        if col in 'ABCDEFG' and r >= 3 and all(board[chr(ord(col)+i)][r-i] == color for i in range(4) if ord(col)+i < ord('H')):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check horizontal\n                    if c <= 'D' and all(board[c][r] == board[chr(ord(c)+i)][r] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[c][r] == board[c][r+i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[c][r] == board[chr(ord(c)+i)][r-i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[c][r] == board[chr(ord(c)+i)][r+i] for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if (row <= 2 and all(grid[col][row + k] == grid[col][row] for k in range(4))) or \\\n                       (col <= 'D' and all(grid[chr(ord(col) + k)][row] == grid[col][row] for k in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == grid[col][row] for k in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == grid[col][row] for k in range(4))):\n                        return grid[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column].append(color)\n\n        # Check for a winning condition\n        if len(grid[column]) >= 4:\n            # Vertical check\n            if grid[column][-4:] == [color] * 4:\n                return color.split('_')[1]\n        \n        # Check horizontal\n        for i in range(4):\n            if all(grid[COLUMNS[j]].count(color) > i for j in range(i, i + 4)):\n                return color.split('_')[1]\n\n        # Check diagonals\n        for i in range(len(grid[column]) - 3):\n            if (i < len(grid[column]) - 3 and\n                grid[column][i:i + 4] == [color] * 4):\n                return color.split('_')[1]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                if dx == 0 and dy == 0:\n                    continue\n                count = 1\n                for step in range(1, 4):\n                    x = ord(column) - ord('A') + dx * step\n                    y = row + dy * step\n                    if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == player:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = [[None] * len(COLUMNS) for _ in ROWS]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in reversed(ROWS):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n\n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for i in range(len(ROWS)):\n                for j in range(len(COLUMNS)):\n                    if grid[i][j] == color:\n                        # Horizontal\n                        if j + 3 < len(COLUMNS) and all(grid[i][j + k] == color for k in range(4)):\n                            return color\n                        # Vertical\n                        if i + 3 < len(ROWS) and all(grid[i + k][j] == color for k in range(4)):\n                            return color\n                        # Diagonal /\n                        if i - 3 >= 0 and j + 3 < len(COLUMNS) and all(grid[i - k][j + k] == color for k in range(4)):\n                            return color\n                        # Diagonal \\\n                        if i + 3 < len(ROWS) and j + 3 < len(COLUMNS) and all(grid[i + k][j + k] == color for k in range(4)):\n                            return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == player:\n                    # Check for vertical win\n                    if row <= 2 and all(board[col][row + k] == player for k in range(4)):\n                        return player\n                    # Check for horizontal win\n                    if all(board[c][row] == player for c in 'ABCDEFG'[max(0, ord(col) - ord('A')):min(7, ord(col) - ord('A') + 4)]):\n                        return player\n                    # Check for diagonal win (bottom-left to top-right)\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == player for k in range(4)):\n                        return player\n                    # Check for diagonal win (top-left to bottom-right)\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == player for k in range(4)):\n                        return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check all lines for a win\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # Horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # Vertical\n                    check_direction(board, col, row, 1, 1, color) or  # Diagonal /\n                    check_direction(board, col, row, 1, -1, color)):  # Diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, start_col, start_row, delta_col, delta_row, color):\n    count = 0\n    col = ord(start_col) - ord('A')\n    row = start_row\n    while 0 <= col < 7 and 0 <= row < 6 and board[chr(col + ord('A'))][row] == color:\n        count += 1\n        if count == 4:\n            return True\n        col += delta_col\n        row += delta_row\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n\n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    if color is None:\n        return False\n\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = ord(col) - 65 + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + 65)][y] == color:\n                count += 1\n            else:\n                break\n\n        for step in range(1, 4):\n            x, y = ord(col) - 65 - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + 65)][y] == color:\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board[chr(c + 65)][r] == color:  # 65 is ASCII for 'A'\n                        count = 0\n                        for k in range(4):\n                            nr = r + direction[0] * k\n                            nc = c + direction[1] * k\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board[chr(nc + 65)][nr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[c][row] == color for c in 'ABCD'[ord(col) - 65:ord(col) - 61]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in 'ABCDEFG':\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[column][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if column <= 'D' and all(board[chr(ord(column)+k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal (top-left to bottom-right)\n                        if row <= 2 and column <= 'D' and all(board[chr(ord(column)+k)][row+k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (bottom-left to top-right)\n                        if row >= 3 and column <= 'D' and all(board[chr(ord(column)+k)][row-k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for d in [1, -1]:\n            for step in range(1, 4):\n                new_col = chr(ord(col) + direction[0] * d * step)\n                new_row = row + direction[1] * d * step\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n                if count == 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row >= 3:\n                if all(board[col][row-i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n    \n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if len(board[col]) > row + 3:\n                if all(board[col][row+i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n\n    for i in range(4):\n        for j in range(3):\n            colors = [board[col][row] for col in 'ABCDEFG' for row in range(len(board[col])) if col == 'ABCDEFG'[i+j]]\n            if len(colors) >= 4:\n                for k in range(len(colors) - 3):\n                    if all(colors[k+l] == colors[k] for l in range(4)):\n                        return colors[k]\n\n    for i in range(3, 7):\n        for j in range(3):\n            colors = [board[col][row] for col in 'ABCDEFG' for row in range(len(board[col])) if col == 'ABCDEFG'[i-j]]\n            if len(colors) >= 4:\n                for k in range(len(colors) - 3):\n                    if all(colors[k+l] == colors[k] for l in range(4)):\n                        return colors[k]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    if (c + 3 < 7 and \n                        board[chr(c + 65)][r] == board[chr(c + 66)][r] == board[chr(c + 67)][r] == board[chr(c + 68)][r]) or \\\n                       (r + 3 < 6 and \n                        board[chr(c + 65)][r] == board[chr(c + 65)][r + 1] == board[chr(c + 65)][r + 2] == board[chr(c + 65)][r + 3]) or \\\n                       (c + 3 < 7 and r + 3 < 6 and \n                        board[chr(c + 65)][r] == board[chr(c + 66)][r + 1] == board[chr(c + 67)][r + 2] == board[chr(c + 68)][r + 3]) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and \n                        board[chr(c + 65)][r] == board[chr(c + 66)][r - 1] == board[chr(c + 67)][r - 2] == board[chr(c + 68)][r - 3]):\n                        return board[chr(c + 65)][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win after this move\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    # Check horizontal\n                    if c <= 3 and all(board['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(board['ABCDEFG'[c-i]][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for d in range(4):\n            x = ord(col) - ord('A') + d * dx\n            y = row + d * dy\n            if 0 <= x < 7 and 0 <= y < 6 and (board[chr(x + ord('A'))][y] == color):\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        if check_winner(player_moves[player], board):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(moves, board):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for col, row in moves:\n        for d in directions:\n            count = 1\n            \n            for step in range(1, 4):\n                r = row + step * d[1]\n                c = ord(col) - ord('A') + step * d[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == board[col][row]:\n                    count += 1\n                else:\n                    break\n            \n            for step in range(1, 4):\n                r = row - step * d[1]\n                c = ord(col) - ord('A') - step * d[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == board[col][row]:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    \n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)+4]):\n                        return color\n                    \n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    \n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col)-k)][row+k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c = chr(ord(col) + dc * step)\n            r = row + dr * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c = chr(ord(col) - dc * step)\n            r = row - dr * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n\n        # Check for a win\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] is not None:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        if all(0 <= row + dy * i < 6 and 0 <= COLUMNS.index(col) + dx * i < 7 and\n                               grid[COLUMNS[COLUMNS.index(col) + dx * i]][row + dy * i] == grid[col][row]\n                               for i in range(4)):\n                            return grid[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    count = 0\n                    for step in range(4):\n                        nr, nc = r + step * direction[0], c + step * direction[1]\n                        if 0 <= nr < 6 and 0 <= nc < 7 and board['ABCDEFG'[nc]][nr] == color:\n                            count += 1\n                        else:\n                            break\n                    if count == 4:\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal connections for the winner\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        current_col = chr(ord(col) + step * delta_col)\n        current_row = row + step * delta_row\n        if current_col in board and 0 <= current_row < 6 and board[current_col][current_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player].append((column, row))\n                break\n        \n        for player in ['Red', 'Yellow']:\n            if check_winner(player_moves[player]):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for col, row in moves:\n        for dc, dr in directions:\n            count = 1\n            for step in range(1, 4):\n                if (chr(ord(col) + dc * step), row + dr * step) in moves:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                if (chr(ord(col) - dc * step), row - dr * step) in moves:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        for direction in [\n            [(0, 1), (0, -1)],  # vertical\n            [(1, 0), (-1, 0)],  # horizontal\n            [(1, 1), (-1, -1)], # diagonal down-right\n            [(1, -1), (-1, 1)]  # diagonal down-left\n        ]:\n            count = 1\n            for (dx, dy) in direction:\n                x, y = grid[col].index(color), row\n                while 0 <= (x + dx) < 6 and 0 <= (y + dy) < 7 and grid['ABCDEFG'[y + dy]][x + dx] == color:\n                    count += 1\n                    x += dx\n                    y += dy\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check all winning lines for current color\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == player for x, y in line if x in board and y < 6):\n                    return player\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if grid['ABCDEFG'[j]][i] == color:\n                    if j <= 3 and all(grid['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    if i <= 2 and all(grid['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i <= 2 and all(grid['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i >= 3 and all(grid['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for move in moves:\n        if check_direction(moves, move, (1, 0)) or check_direction(moves, move, (0, 1)) or \\\n           check_direction(moves, move, (1, 1)) or check_direction(moves, move, (1, -1)):\n            return True\n    return False\n\ndef check_direction(moves, start, direction):\n    count = 1\n    for d in (1, -1):\n        step = (start[0], start[1])\n        while True:\n            step = (chr(ord(step[0]) + direction[0] * d), step[1] + direction[1] * d)\n            if step in moves:\n                count += 1\n            else:\n                break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color_to_check:\n                        # Check horizontal\n                        if col <= 3 and all(board[chr(col + i + 65)][row] == color_to_check for i in range(4)):\n                            return color_to_check\n                        # Check vertical\n                        if row <= 2 and all(board[chr(col + 65)][row + i] == color_to_check for i in range(4)):\n                            return color_to_check\n                        # Check diagonal \\\n                        if col <= 3 and row <= 2 and all(board[chr(col + i + 65)][row + i] == color_to_check for i in range(4)):\n                            return color_to_check\n                        # Check diagonal /\n                        if col >= 3 and row <= 2 and all(board[chr(col - i + 65)][row + i] == color_to_check for i in range(4)):\n                            return color_to_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] == color:\n                    if check_winner(grid, col, row, color):\n                        return color\n\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + step * dc)\n            new_row = row + step * dr\n            if new_col in grid and new_row in ROWS and grid[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            new_col = chr(ord(col) - step * dc)\n            new_row = row - step * dr\n            if new_col in grid and new_row in ROWS and grid[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check horizontal, vertical, and diagonal lines for a win\n    for col in COLUMNS:\n        for row in ROWS:\n            if grid[col][row] == color:\n                if (check_direction(grid, color, col, row, 1, 0) or  # horizontal\n                    check_direction(grid, color, col, row, 0, 1) or  # vertical\n                    check_direction(grid, color, col, row, 1, 1) or  # diagonal down\n                    check_direction(grid, color, col, row, 1, -1)): # diagonal up\n                    return True\n    return False\n\ndef check_direction(grid, color, col, row, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if (0 <= row < 6) and (col in grid) and (grid[col][row] == color):\n            count += 1\n        else:\n            break\n        col = chr(ord(col) + delta_col)\n        row += delta_row\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if row <= 2 and col >= 'D' and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + i * dcol)\n            r = row + i * drow\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + d[0] * step)\n            new_row = row + d[1] * step\n            if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n                \n        for step in range(1, 4):\n            new_col = chr(ord(col) - d[0] * step)\n            new_row = row - d[1] * step\n            if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n                \n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for d in (1, -1):\n            x, y = COLUMNS.index(col), row\n            while True:\n                x += d * dx\n                y += d * dy\n                if 0 <= x < len(COLUMNS) and 0 <= y < len(ROWS) and grid[COLUMNS[x]][y] == color:\n                    count += 1\n                else:\n                    break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for step in [1, -1]:\n                for i in range(1, 4):\n                    new_row = row + direction[0] * i * step\n                    new_col = 'ABCDEFG'.index(col) + direction[1] * i * step\n                    if 0 <= new_row < 6 and 0 <= new_col < 7:\n                        if board['ABCDEFG'[new_col]][new_row] == color:\n                            count += 1\n                        else:\n                            break\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if grid[COLUMNS[j]][i] == color:\n                    if (j + 3 < 7 and all(grid[COLUMNS[j + k]][i] == color for k in range(4))) or \\\n                       (i + 3 < 6 and all(grid[COLUMNS[j]][i + k] == color for k in range(4))) or \\\n                       (j + 3 < 7 and i + 3 < 6 and all(grid[COLUMNS[j + k]][i + k] == color for k in range(4))) or \\\n                       (j + 3 < 7 and i - 3 >= 0 and all(grid[COLUMNS[j + k]][i - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (board[chr(col + 65)][row] == color_check and\n                        col + 3 < 7 and all(board[chr(col + k + 65)][row] == color_check for k in range(4)) or\n                        row + 3 < 6 and all(board[chr(col + 65)][row + k] == color_check for k in range(4)) or\n                        col + 3 < 7 and row + 3 < 6 and all(board[chr(col + k + 65)][row + k] == color_check for k in range(4)) or\n                        col - 3 >= 0 and row + 3 < 6 and all(board[chr(col - k + 65)][row + k] == color_check for k in range(4))):\n                        return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if (c <= 3 and all(grid[chr(c + ord('A') + k)][r] == color_check for k in range(4))) or \\\n                       (r <= 2 and all(grid[chr(c + ord('A'))][r + k] == color_check for k in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(grid[chr(c + ord('A') + k)][r + k] == color_check for k in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(grid[chr(c + ord('A') + k)][r - k] == color_check for k in range(4))):\n                        return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a winner\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) > 6:\n            return \"Draw\"\n        \n        # Check for a win\n        for line in LINES:\n            if all((c in board and len(board[c]) > r and board[c][r] == color) for c, r in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        # Check for victory\n        for column in board:\n            for row in range(6):\n                if board[column][row] == color:\n                    # Check vertically\n                    if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                        return color\n                    \n                    # Check horizontally\n                    for c in range(max(0, ord(column) - ord('A') - 3), min(7, ord(column) - ord('A') + 1)):\n                        if all(board[chr(ord('A') + c + k)][row] == color for k in range(4) if c + k < 7):\n                            return color\n                    \n                    # Check diagonal \\\n                    if row <= 2 and ord(column) <= 3 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal /\n                    if row >= 3 and ord(column) <= 3 and all(board[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            x, y = col, row\n                            x = chr(ord(x) + dx * step)\n                            y = row + dy * step\n                            if 0 <= y < 6 and x in board and board[x][y] == board[col][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(grid[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check for a win condition\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Vertical check\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Horizontal check\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Diagonal check (down-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Diagonal check (up-right)\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in board:\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[column][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        for c in range(max(0, 'ABCDEFG'.index(column)-3), min(7, 'ABCDEFG'.index(column)+1)):\n                            if all(board['ABCDEFG'[c+k]][row] == color for k in range(4) if 0 <= c+k < 7):\n                                return color\n                        # Check diagonal \\\n                        for d in range(-3, 1):\n                            if 0 <= 'ABCDEFG'.index(column) + d < 7 and 0 <= row + d < 6 and \\\n                               all(board['ABCDEFG'[c]][row + d] == color for c in range('ABCDEFG'.index(column)+d, 'ABCDEFG'.index(column)+d+4) if 0 <= c < 7):\n                                return color\n                        # Check diagonal /\n                        for d in range(-3, 1):\n                            if 0 <= 'ABCDEFG'.index(column) + d < 7 and 0 <= row - d < 6 and \\\n                               all(board['ABCDEFG'[c]][row - d] == color for c in range('ABCDEFG'.index(column)+d, 'ABCDEFG'.index(column)+d+4) if 0 <= c < 7):\n                                return color\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a win condition\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    color = grid[c][r]\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(grid[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if r <= 2 and c <= 'D' and all(grid[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if r <= 2 and c >= 'D' and all(grid[chr(ord(c)-i)][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n        \n        for direction in LINES:\n            if any(grid[pos[0]][pos[1]] != color for pos in direction):\n                continue\n            if all(grid[pos[0]][pos[1]] == color for pos in direction):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col <= 3 and all(board[chr(c + 65)][row] == color_check for c in range(col, col + 4))) or \\\n                       (row <= 2 and all(board[chr(col + 65)][row + r] == color_check for r in range(4))) or \\\n                       (col <= 3 and row <= 2 and all(board[chr(col + r + 65)][row + r] == color_check for r in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(board[chr(col + r + 65)][row - r] == color_check for r in range(4))):\n                        return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if (check_direction(grid, col, row, color, 1, 0) or\n                    check_direction(grid, col, row, color, 0, 1) or\n                    check_direction(grid, col, row, color, 1, 1) or\n                    check_direction(grid, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:  # Check rows\n                    if c + 3 < 7 and all(board[chr(c + k + 65)][r] == color for k in range(4)):\n                        return color\n                if r < 6 and board[chr(c + 65)][r] == color:  # Check columns\n                    if r + 3 < 6 and all(board[chr(c + 65)][r + k] == color for k in range(4)):\n                        return color\n                if r < 6 and c < 7 and board[chr(c + 65)][r] == color:  # Check diagonals \\\n                    if r + 3 < 6 and c + 3 < 7 and all(board[chr(c + k + 65)][r + k] == color for k in range(4)):\n                        return color\n                if r < 6 and c < 7 and board[chr(c + 65)][r] == color:  # Check diagonals /\n                    if r + 3 < 6 and c - 3 >= 0 and all(board[chr(c - k + 65)][r + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_to_check in ['Red', 'Yellow']:\n            # Check vertical\n            for c in 'ABCDEFG':\n                count = 0\n                for r in range(6):\n                    if board[c][r] == color_to_check:\n                        count += 1\n                        if count == 4:\n                            return color_to_check\n                    else:\n                        count = 0\n\n            # Check horizontal\n            for r in range(6):\n                count = 0\n                for c in 'ABCDEFG':\n                    if board[c][r] == color_to_check:\n                        count += 1\n                        if count == 4:\n                            return color_to_check\n                    else:\n                        count = 0\n\n            # Check diagonal (top-left to bottom-right)\n            for c in range(4):\n                for r in range(3, 6):\n                    if board['ABCDEFG'[c]][r] == color_to_check and \\\n                       board['ABCDEFG'[c + 1]][r - 1] == color_to_check and \\\n                       board['ABCDEFG'[c + 2]][r - 2] == color_to_check and \\\n                       board['ABCDEFG'[c + 3]][r - 3] == color_to_check:\n                        return color_to_check\n\n            # Check diagonal (bottom-left to top-right)\n            for c in range(4):\n                for r in range(3):\n                    if board['ABCDEFG'[c]][r] == color_to_check and \\\n                       board['ABCDEFG'[c + 1]][r + 1] == color_to_check and \\\n                       board['ABCDEFG'[c + 2]][r + 2] == color_to_check and \\\n                       board['ABCDEFG'[c + 3]][r + 3] == color_to_check:\n                        return color_to_check\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row + k] == color for k in range(4)) or\n                            (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or\n                            (col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or\n                            (col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            for col in range(7):\n                for row in range(6):\n                    if (board[chr(65 + col)][row] == color and\n                        (col + 3 < 7 and\n                         board[chr(65 + col + 1)][row] == color and\n                         board[chr(65 + col + 2)][row] == color and\n                         board[chr(65 + col + 3)][row] == color) or\n                        (row + 3 < 6 and\n                         board[chr(65 + col)][row + 1] == color and\n                         board[chr(65 + col)][row + 2] == color and\n                         board[chr(65 + col)][row + 3] == color) or\n                        (col + 3 < 7 and row + 3 < 6 and\n                         board[chr(65 + col + 1)][row + 1] == color and\n                         board[chr(65 + col + 2)][row + 2] == color and\n                         board[chr(65 + col + 3)][row + 3] == color) or\n                        (col + 3 < 7 and row - 3 >= 0 and\n                         board[chr(65 + col + 1)][row - 1] == color and\n                         board[chr(65 + col + 2)][row - 2] == color and\n                         board[chr(65 + col + 3)][row - 3] == color)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for d in range(4):\n            c = chr(ord(col) + dc * d)\n            r = row + dr * d\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for player in ['Red', 'Yellow']:\n            if any(all(board[col][row] == player for col, row in line) for line in LINES):\n                return player\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color_check for x, y in line if 0 <= y < 6):\n                    return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if any(all(grid[c][r] == grid[col][row] for c, r in line) for line in LINES):\n                        return grid[col][row]\n\n    return \"Draw\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and y >= 0 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 0 <= ord(c) + i < 7):\n                            return color\n                    # Check diagonal /\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and 0 <= ord(c) + d < 7 and all(\n                            board[chr(ord(c) + d)][r - d] == color for d in range(4)):\n                            return color\n                    # Check diagonal \\\n                    for d in range(-3, 1):\n                        if 0 <= r - d < len(board[c]) and 0 <= ord(c) + d < 7 and all(\n                            board[chr(ord(c) + d)][r + d] == color for d in range(4)):\n                            return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_check for col, row in line) for line in LINES):\n                return color_check\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == board[column][i-1] == board[column][i-2] == board[column][i-3]):\n                return board[column][i]\n    \n    # Check vertical wins\n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row >= 3:\n                if (board[col][row] == board[col][row-1] == board[col][row-2] == board[col][row-3]):\n                    return board[col][row]\n    \n    # Check diagonal wins\n    for col in range(len('ABCDEFG') - 3):\n        for row in range(6):\n            if row <= 2:\n                if (board[chr(65 + col)][row] == board[chr(65 + col + 1)][row + 1] == \n                    board[chr(65 + col + 2)][row + 2] == board[chr(65 + col + 3)][row + 3]):\n                    return board[chr(65 + col)][row]\n            if row >= 3:\n                if (board[chr(65 + col)][row] == board[chr(65 + col + 1)][row - 1] == \n                    board[chr(65 + col + 2)][row - 2] == board[chr(65 + col + 3)][row - 3]):\n                    return board[chr(65 + col)][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) + k]][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) - k]][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if 0 <= ord(col) + i < 7) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i < 7 and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < 7 and row - i >= 0)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] == color):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[1]\n                    c = board.keys().index(col) + d * i * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid['ABCDEFG'[ 'ABCDEFG'.index(col) + k][row + k] == color for k in range(4) if 'ABCDEFG'.index(col) + k < 7):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid['ABCDEFG'[ 'ABCDEFG'.index(col) + k][row - k] == color for k in range(4) if 'ABCDEFG'.index(col) + k < 7):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[chr(col + 65)][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 3 and all(board[chr(col + i + 65)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal (down-right)\n                    if col <= 3 and row <= 2 and all(board[chr(col + i + 65)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal (down-left)\n                    if col >= 3 and row <= 2 and all(board[chr(col - i + 65)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == player:\n                    # Check for vertical win\n                    if row <= 2 and all(board[col][row + k] == player for k in range(4)):\n                        return player\n                    # Check for horizontal win\n                    if all(board[c][row] == player for c in 'ABCDEFG'[max(0, ord(col) - ord('A')):min(7, ord(col) - ord('A') + 4)]):\n                        return player\n                    # Check for diagonal win (bottom-left to top-right)\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == player for k in range(4)):\n                        return player\n                    # Check for diagonal win (top-left to bottom-right)\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == player for k in range(4)):\n                        return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row]:\n                    color = board[col][row]\n                    if col <= 'D' and row <= 5 and all(board[col][row] == board[c][row] for c in 'DEFG'[:4]):\n                        return color\n                    if row <= 2 and all(board[col][row] == board[col][r] for r in range(row, row + 4)):\n                        return color\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[C][R] for C, R in zip('DEFG', [row + i for i in range(4)])):\n                        return color\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[C][R] for C, R in zip('DEFG', [row - i for i in range(4)])):\n                        return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board[chr(c + 65)][r] == color:  # 65 is ASCII for 'A'\n                        count = 0\n                        for k in range(4):\n                            nr = r + direction[0] * k\n                            nc = c + direction[1] * k\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board[chr(nc + 65)][nr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'[ord(col) - 65:ord(col) - 61]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        grid[column].append(color)\n        \n        # Check for a win condition after each move\n        if len(grid[column]) >= 4:\n            if check_winner(grid, column, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, column, color):\n    rows = {col: len(grid[col]) for col in grid}\n    col_index = 'ABCDEFG'.index(column)\n    row_index = len(grid[column]) - 1\n    \n    # Check vertical\n    if all(len(grid[column]) >= r and grid[column][len(grid[column]) - r - 1] == color for r in range(4)):\n        return True\n    \n    # Check horizontal\n    for start_col in range(max(0, col_index - 3), min(7 - 3, col_index + 1)):\n        if all(len(grid['ABCDEFG'[start_col + i]]) > row_index and grid['ABCDEFG'[start_col + i]][row_index] == color for i in range(4)):\n            return True\n            \n    # Check diagonal /\n    for start_col in range(max(0, col_index - 3), min(7 - 3, col_index + 1)):\n        for offset in range(4):\n            row_check = row_index + (start_col - col_index) + offset\n            if row_check < 0 or row_check >= 6:\n                continue\n            if all(len(grid['ABCDEFG'[start_col + i]]) > row_check and grid['ABCDEFG'[start_col + i]][row_check] == color for i in range(4)):\n                return True\n\n    # Check diagonal \\\n    for start_col in range(max(0, col_index - 3), min(7 - 3, col_index + 1)):\n        for offset in range(4):\n            row_check = row_index - (start_col - col_index) + offset\n            if row_check < 0 or row_check >= 6:\n                continue\n            if all(len(grid['ABCDEFG'[start_col + i]]) > row_check and grid['ABCDEFG'[start_col + i]][row_check] == color for i in range(4)):\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in range(7):\n            for row in range(6):\n                if board[chr(65 + col)][row] is not None:\n                    if (col + 3 < 7 and \n                        board[chr(65 + col)][row] == board[chr(65 + col + 1)][row] == \n                        board[chr(65 + col + 2)][row] == board[chr(65 + col + 3)][row]):\n                        return board[chr(65 + col)][row]\n                    if (row + 3 < 6 and \n                        board[chr(65 + col)][row] == board[chr(65 + col)][row + 1] == \n                        board[chr(65 + col)][row + 2] == board[chr(65 + col)][row + 3]):\n                        return board[chr(65 + col)][row]\n                    if (col + 3 < 7 and row + 3 < 6 and \n                        board[chr(65 + col)][row] == board[chr(65 + col + 1)][row + 1] == \n                        board[chr(65 + col + 2)][row + 2] == board[chr(65 + col + 3)][row + 3]):\n                        return board[chr(65 + col)][row]\n                    if (col + 3 < 7 and row - 3 >= 0 and \n                        board[chr(65 + col)][row] == board[chr(65 + col + 1)][row - 1] == \n                        board[chr(65 + col + 2)][row - 2] == board[chr(65 + col + 3)][row - 3]):\n                        return board[chr(65 + col)][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color, row, col):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color, row, col):\n    for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n        count = 1\n        for d in [1, -1]:  # Check in both directions\n            r, c = row, ord(col) - ord('A')\n            while True:\n                r += dr * d\n                c += dc * d\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (check_winner(board, col, row, board[col][row])):\n                        return board[col][row]\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * i * step)\n                new_row = row + d[1] * i * step\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                if check_winner(board, column, row, color):\n                    return color.split('_')[1]\n                break\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    def count_direction(dx, dy):\n        count = 0\n        x, y = ord(col) - ord('A'), row\n        while 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n            count += 1\n            x += dx\n            y += dy\n        return count\n\n    x, y = ord(col) - ord('A'), row\n    if (count_direction(1, 0) + count_direction(-1, 0) - 1 >= 4 or\n        count_direction(0, 1) + count_direction(0, -1) - 1 >= 4 or\n        count_direction(1, 1) + count_direction(-1, -1) - 1 >= 4 or\n        count_direction(1, -1) + count_direction(-1, 1) - 1 >= 4):\n        return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        # Check for a win after this move\n        for r in range(6):\n            for c in range(7):\n                if grid['ABCDEFG'[c]][r] == color:\n                    # Check horizontal\n                    if c <= 3 and all(grid['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(grid['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(grid['ABCDEFG'[c-i]][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for d in range(4):\n            x = ord(col) - ord('A') + d * dx\n            y = row + d * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:  # Check in both directions\n                x, y = COLUMNS.index(column), row\n                while True:\n                    x += dx * d\n                    y += dy * d\n                    if 0 <= x < len(COLUMNS) and 0 <= y < len(ROWS) and board[COLUMNS[x]][y] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 0}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_turn[color] += 1\n        \n        if check_winner(board, color):\n            return color\n\n    return \"Draw\" if player_turn['Red'] + player_turn['Yellow'] == 42 else \"Draw\"\n\ndef check_winner(board, color):\n    # Check vertical, horizontal and diagonal\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                # Check vertical\n                if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                    return True\n                # Check horizontal\n                for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n                    if all(board[chr(c + ord('A'))][row] == color for c in range(c, c + 4)):\n                        return True\n                # Check diagonal /\n                if row <= 2 and ord(col) <= 3 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                    return True\n                # Check diagonal \\\n                if row >= 3 and ord(col) <= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def drop_piece(col, player):\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                return (col, row)\n        return None\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        position = drop_piece(column, player)\n\n        if position:\n            col, row = position\n\n            # Check for winning conditions\n            for d_col, d_row in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                count = 1\n                for direction in [1, -1]:\n                    for i in range(1, 4):\n                        new_col = chr(ord(col) + d_col * direction * i)\n                        new_row = row + d_row * direction * i\n                        if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == player:\n                            count += 1\n                        else:\n                            break\n                if count >= 4:\n                    return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n        for c in range(7):\n            for r in range(6):\n                if grid['ABCDEFG'[c]][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(grid['ABCDEFG'[c]][r + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 3 and all(grid['ABCDEFG'[c + k]][r] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid['ABCDEFG'[c + k]][r + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(grid['ABCDEFG'[c + k]][r - k] == color for k in range(4)):\n                        return color\n    \n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(grid[x][y] == color for x, y in win_condition if x in grid and y < 6 and y >= 0):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in COLUMNS:\n            if grid[col][row] == color:\n                if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player] += 1\n        \n        # Check for a win\n        if check_win(grid, column, row, player):\n            return player\n    \n    return \"Draw\" if player_moves['Red'] + player_moves['Yellow'] == 42 else \"Draw\"\n\ndef check_win(grid, column, row, player):\n    # Check vertical, horizontal, and diagonal connections\n    return (check_direction(grid, column, row, player, 1, 0) or  # vertical\n            check_direction(grid, column, row, player, 0, 1) or  # horizontal\n            check_direction(grid, column, row, player, 1, 1) or  # diagonal \\\n            check_direction(grid, column, row, player, 1, -1)    # diagonal /\n           )\n\ndef check_direction(grid, column, row, player, dir_x, dir_y):\n    count = 1\n    \n    # Check in the positive direction\n    for step in range(1, 4):\n        new_col = chr(ord(column) + step * dir_x)\n        new_row = row + step * dir_y\n        if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == player:\n            count += 1\n        else:\n            break\n\n    # Check in the negative direction\n    for step in range(1, 4):\n        new_col = chr(ord(column) - step * dir_x)\n        new_row = row - step * dir_y\n        if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == player:\n            count += 1\n        else:\n            break\n\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, col, row, color):\n                winner = color\n                break\n\n    return winner if winner else \"Draw\"\n\ndef check_winner(board, col, row, color):\n    def count_direction(dx, dy):\n        count = 0\n        x, y = col_index[col], row\n        while 0 <= x < 7 and 0 <= y < 6 and board[COLUMNS[x]][y] == color:\n            count += 1\n            x += dx\n            y += dy\n        return count\n\n    COLUMNS = 'ABCDEFG'\n    col_index = {COLUMNS[i]: i for i in range(len(COLUMNS))}\n    \n    total_count = (count_direction(1, 0) + count_direction(-1, 0) - 1)  # horizontal\n    if total_count >= 4:\n        return True\n    \n    total_count = (count_direction(0, 1) + count_direction(0, -1) - 1)  # vertical\n    if total_count >= 4:\n        return True\n    \n    total_count = (count_direction(1, 1) + count_direction(-1, -1) - 1)  # diagonal \\\n    if total_count >= 4:\n        return True\n\n    total_count = (count_direction(1, -1) + count_direction(-1, 1) - 1)  # diagonal /\n    if total_count >= 4:\n        return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] is not None:\n                    color = grid[column][row]\n\n                    # Check horizontal\n                    if column_index := 'ABCDEFG'.index(column) <= 3:\n                        if all(grid['ABCDEFG'[column_index + k]][row] == color for k in range(4)):\n                            return color\n\n                    # Check vertical\n                    if row <= 2:\n                        if all(grid[column][row + k] == color for k in range(4)):\n                            return color\n\n                    # Check diagonal (top-left to bottom-right)\n                    if column_index <= 3 and row <= 2:\n                        if all(grid['ABCDEFG'[column_index + k]][row + k] == color for k in range(4)):\n                            return color\n\n                    # Check diagonal (bottom-left to top-right)\n                    if column_index <= 3 and row >= 3:\n                        if all(grid['ABCDEFG'[column_index + k]][row - k] == color for k in range(4)):\n                            return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for d in (1, -1):\n            for step in range(1, 4):\n                x = COLUMNS.index(column) + dx * step * d\n                y = row + dy * step * d\n                if 0 <= x < len(COLUMNS) and 0 <= y < len(ROWS) and board[COLUMNS[x]][y] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n        for color in ['Red', 'Yellow']:\n            # Check all winning lines for current color\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    if color is None:\n        return False\n\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n\n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    for dcol, drow in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            ncol = chr(ord(col) + dcol * step)\n                            nrow = row + drow * step\n                            if ncol in grid and 0 <= nrow < 6 and grid[ncol][nrow] == grid[col][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return grid[col][row]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] == color:\n                    if ((row <= 2 and all(grid[col][row+i] == color for i in range(4))) or\n                        (col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4))) or\n                        (row <= 2 and col <= 'D' and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4))) or\n                        (row >= 3 and col <= 'D' and all(grid[chr(ord(col)+i)][row-i] == color for i in range(4)))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            if col in board:\n                for row in range(6):\n                    if board[col][row] is not None:\n                        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                            count = 1\n                            for step in range(1, 4):\n                                next_col = chr(ord(col) + direction[0] * step)\n                                next_row = row + direction[1] * step\n                                if (next_col in board and \n                                        0 <= next_row < 6 and \n                                        board[next_col][next_row] == board[col][row]):\n                                    count += 1\n                            if count >= 4:\n                                return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in 'ABCDEFG':\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check horizontal\n                        if column <= 'D' and all(board[column][row] == color for column in 'ABCDEFG'[(ord(column)-65):(ord(column)-61)]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[column][row] == color for row in range(row, row+4)):\n                            return color\n                        # Check diagonal (bottom-left to top-right)\n                        if column <= 'D' and row >= 3 and all(board[chr(ord(column)+k)][row-k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (top-left to bottom-right)\n                        if column <= 'D' and row <= 2 and all(board[chr(ord(column)+k)][row+k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check horizontal, vertical, and diagonal lines for a win\n    for col in COLUMNS:\n        for row in ROWS:\n            if grid[col][row] == color:\n                if (check_direction(grid, color, col, row, 1, 0) or\n                    check_direction(grid, color, col, row, 0, 1) or\n                    check_direction(grid, color, col, row, 1, 1) or\n                    check_direction(grid, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(grid, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS = 'ABCDEFG'\n    ROWS = range(6)\n    \n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check for win conditions\n                    if check_winner(board, col, row, color):\n                        return color\n                    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check horizontal, vertical, and two diagonal connections\n    return (check_direction(board, color, col, row, 1, 0) or\n            check_direction(board, color, col, row, 0, 1) or\n            check_direction(board, color, col, row, 1, 1) or\n            check_direction(board, color, col, row, 1, -1))\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        new_col = chr(ord(col) + i * delta_col)\n        new_row = row + i * delta_row\n        if new_col in board and new_row in range(6) and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + d[0] * step)\n            new_row = row + d[1] * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            new_col = chr(ord(col) - d[0] * step)\n            new_row = row - d[1] * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        if check_winner(grid, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for d in [1, -1]:\n            x, y = COLUMNS.index(col), row\n            while True:\n                x += d * dx\n                y += d * dy\n                if 0 <= x < len(COLUMNS) and 0 <= y < len(ROWS) and grid[COLUMNS[x]][y] == color:\n                    count += 1\n                else:\n                    break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for step in [1, -1]:\n                for i in range(1, 4):\n                    new_row = row + direction[0] * step * i\n                    new_col = 'ABCDEFG'.index(col) + direction[1] * step * i\n                    if 0 <= new_row < 6 and 0 <= new_col < 7:\n                        if board['ABCDEFG'[new_col]][new_row] == color:\n                            count += 1\n                        else:\n                            break\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in COLUMNS:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c = chr(ord(col) + dc * step)\n            r = row + dr * step\n            if c in grid and r in range(6) and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c = chr(ord(col) - dc * step)\n            r = row - dr * step\n            if c in grid and r in range(6) and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 0\n            for step in range(-3, 4):\n                r = row + step * direction[0]\n                c = list(board.keys()).index(col) + step * direction[1]\n                if 0 <= r < 6 and 0 <= c < 7 and board[list(board.keys())[c]][r] == color:\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    count = 0\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for i in range(4):\n        new_col = chr(ord(col) + i * d_col)\n        new_row = row + i * d_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = players[color]\n        \n        if check_winner(board, players[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, player, col, row, 1, 0) or \\\n                   check_direction(board, player, col, row, 0, 1) or \\\n                   check_direction(board, player, col, row, 1, 1) or \\\n                   check_direction(board, player, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, player, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    move_set = set(moves)\n    \n    for col, row in moves:\n        for d in directions:\n            count = 1\n            for step in [1, -1]:\n                for i in range(1, 4):\n                    new_col = chr(ord(col) + d[0] * step * i)\n                    new_row = row + d[1] * step * i\n                    if (new_col, new_row) in move_set:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return True\n    return False\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (board[chr(col + 65)][row] == color_check and \n                        col + 3 < 7 and \n                        all(board[chr(col + k + 65)][row] == color_check for k in range(4))):\n                        return color_check\n                    if (board[chr(col + 65)][row] == color_check and \n                        row + 3 < 6 and \n                        all(board[chr(col + 65)][row + k] == color_check for k in range(4))):\n                        return color_check\n                    if (board[chr(col + 65)][row] == color_check and \n                        col + 3 < 7 and row + 3 < 6 and \n                        all(board[chr(col + k + 65)][row + k] == color_check for k in range(4))):\n                        return color_check\n                    if (board[chr(col + 65)][row] == color_check and \n                        col + 3 < 7 and row - 3 >= 0 and \n                        all(board[chr(col + k + 65)][row - k] == color_check for k in range(4))):\n                        return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if (c <= 3 and all(grid[chr(c + ord('A') + k)][r] == color_check for k in range(4))) or \\\n                       (r <= 2 and all(grid[chr(c + ord('A'))][r + k] == color_check for k in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(grid[chr(c + ord('A') + k)][r + k] == color_check for k in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(grid[chr(c + ord('A') + k)][r - k] == color_check for k in range(4))):\n                        return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-61]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n        \n        for r in range(6):\n            for c in range(7):\n                if grid['ABCDEFG'[c]][r] == player:\n                    # Check horizontal\n                    if c <= 3 and all(grid['ABCDEFG'[c+i]][r] == player for i in range(4)):\n                        return player\n                    # Check vertical\n                    if r <= 2 and all(grid['ABCDEFG'[c]][r+i] == player for i in range(4)):\n                        return player\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(grid['ABCDEFG'[c+i]][r-i] == player for i in range(4)):\n                        return player\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid['ABCDEFG'[c+i]][r+i] == player for i in range(4)):\n                        return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCD'[ord(col)-65:ord(col)-65+4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board['ABCDEFG'[i]][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board['ABCDEFG'[i]][row-i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(grid[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(col + ord('A'))][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[chr(col + ord('A'))][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 3 and all(grid[chr(col + k + ord('A'))][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 3 and row <= 2 and all(grid[chr(col + k + ord('A'))][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 3 and row >= 3 and all(grid[chr(col + k + ord('A'))][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in board:\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[column][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        for c in range(max(0, 'ABCDEFG'.index(column)-3), min(7, 'ABCDEFG'.index(column)+1)):\n                            if all(board['ABCDEFG'[c+k]][row] == color for k in range(4) if 0 <= c+k < 7):\n                                return color\n                        # Check diagonal \\\n                        for d in range(-3, 1):\n                            if 0 <= 'ABCDEFG'.index(column) + d < 7 and row + d >= 0 and row + d <= 5:\n                                if all(board['ABCDEFG'[c]][row + d] == color for c in range('ABCDEFG'.index(column) + d, 'ABCDEFG'.index(column) + d + 4)):\n                                    return color\n                        # Check diagonal /\n                        for d in range(-3, 1):\n                            if 0 <= 'ABCDEFG'.index(column) + d < 7 and row - d >= 0 and row - d <= 5:\n                                if all(board['ABCDEFG'[c]][row - d] == color for c in range('ABCDEFG'.index(column) + d, 'ABCDEFG'.index(column) + d + 4)):\n                                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for i in range(7):\n            for j in range(6):\n                if grid['ABCDEFG'[i]][j] == color:\n                    if (i + 3 < 7 and all(grid['ABCDEFG'[i+k]][j] == color for k in range(4))) or \\\n                       (j + 3 < 6 and all(grid['ABCDEFG'[i]][j+k] == color for k in range(4))) or \\\n                       (i + 3 < 7 and j + 3 < 6 and all(grid['ABCDEFG'[i+k]][j+k] == color for k in range(4))) or \\\n                       (i + 3 < 7 and j - 3 >= 0 and all(grid['ABCDEFG'[i+k]][j-k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win after each move\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal wins\n    for column in board:\n        for row in range(len(board[column])):\n            if board[column][row] == color:\n                # Check horizontal\n                if check_direction(board, column, row, 1, 0, color):\n                    return True\n                # Check vertical\n                if check_direction(board, column, row, 0, 1, color):\n                    return True\n                # Check diagonal /\n                if check_direction(board, column, row, 1, 1, color):\n                    return True\n                # Check diagonal \\\n                if check_direction(board, column, row, 1, -1, color):\n                    return True\n    return False\n\ndef check_direction(board, column, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        col_idx = ord(column) - ord('A') + delta_col * i\n        row_idx = row + delta_row * i\n        if 0 <= col_idx < 7 and 0 <= row_idx < 6 and (board[chr(ord('A') + col_idx)][row_idx] == color if row_idx < len(board[chr(ord('A') + col_idx)]) else False):\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for column in 'ABCDEFG':\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[column][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if column <= 'D' and all(board[chr(ord(column)+k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if column <= 'D' and row >= 3 and all(board[chr(ord(column)+k)][row-k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if column <= 'D' and row <= 2 and all(board[chr(ord(column)+k)][row+k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        count = 0\n                        for step in range(4):\n                            check_col = chr(ord(col) + direction[0] * step)\n                            check_row = row + direction[1] * step\n                            if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n                                count += 1\n                        if count == 4:\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player].append((column, row))\n                break\n\n        for player in ['Red', 'Yellow']:\n            for (c, r) in player_moves[player]:\n                if all((c, r) in player_moves[player] for c in [chr(i) for i in range(ord(c), ord(c) + 4)]):  # Horizontal\n                    return player\n                if all((c, r) in player_moves[player] for r in range(r, r + 4)):  # Vertical\n                    return player\n                if all((chr(ord(c) + k), r + k) in player_moves[player] for k in range(4)):  # Diagonal \\\n                    return player\n                if all((chr(ord(c) + k), r - k) in player_moves[player] for k in range(4)):  # Diagonal /\n                    return player\n\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for r in range(6):\n            for c in range(7):\n                if board[chr(ord('A') + c)][r] is not None:\n                    color = board[chr(ord('A') + c)][r]\n                    if c + 3 < 7 and all(board[chr(ord('A') + c + i)][r] == color for i in range(4)):\n                        return color\n                    if r + 3 < 6 and all(board[chr(ord('A') + c)][r + i] == color for i in range(4)):\n                        return color\n                    if c + 3 < 7 and r + 3 < 6 and all(board[chr(ord('A') + c + i)][r + i] == color for i in range(4)):\n                        return color\n                    if c + 3 < 7 and r - 3 >= 0 and all(board[chr(ord('A') + c + i)][r - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_to_check in [\"Red\", \"Yellow\"]:\n            # Check vertical\n            for c in 'ABCDEFG':\n                count = 0\n                for r in range(6):\n                    if board[c][r] == color_to_check:\n                        count += 1\n                        if count == 4:\n                            return color_to_check\n                    else:\n                        count = 0\n\n            # Check horizontal\n            for r in range(6):\n                count = 0\n                for c in 'ABCDEFG':\n                    if board[c][r] == color_to_check:\n                        count += 1\n                        if count == 4:\n                            return color_to_check\n                    else:\n                        count = 0\n\n            # Check diagonal (top-left to bottom-right)\n            for c in range(4):\n                for r in range(3, 6):\n                    if all(board[chr(c + ord('A') + i)][r - i] == color_to_check for i in range(4)):\n                        return color_to_check\n\n            # Check diagonal (bottom-left to top-right)\n            for c in range(4):\n                for r in range(3):\n                    if all(board[chr(c + ord('A') + i)][r + i] == color_to_check for i in range(4)):\n                        return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row + k] == color for k in range(4)) or\n                            (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or\n                            (col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or\n                            (col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check vertical\n            for col in board:\n                count = 0\n                for cell in board[col]:\n                    if cell == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n            \n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if board[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n            \n            # Check diagonals\n            for i in range(3, 6):\n                for j in range(4):\n                    if board['ABCDEFG'[j]][i] == color and \\\n                       board['ABCDEFG'[j+1]][i-1] == color and \\\n                       board['ABCDEFG'[j+2]][i-2] == color and \\\n                       board['ABCDEFG'[j+3]][i-3] == color:\n                        return color\n            \n            for i in range(3):\n                for j in range(4):\n                    if board['ABCDEFG'[j]][i] == color and \\\n                       board['ABCDEFG'[j+1]][i] == color and \\\n                       board['ABCDEFG'[j+2]][i] == color and \\\n                       board['ABCDEFG'[j+3]][i] == color:\n                        return color\n\n    return \"Draw\" if len(pieces_positions) >= 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        moves[color] += 1\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color_check for c, r in line) for line in LINES):\n                return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (\n                        (col, row) in [(col, row) for col in 'ABCDEFG' for row in range(6)]\n                    ):\n                        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                            count = 0\n                            for step in range(4):\n                                c = chr(ord(col) + direction[0] * step)\n                                r = row + direction[1] * step\n                                if c in board and 0 <= r < 6 and board[c][r] == color:\n                                    count += 1\n                            if count == 4:\n                                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if check_winner(grid, col, row):\n                        return grid[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row):\n    color = grid[col][row]\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dc, dr in directions:\n        count = 1\n        \n        for step in range(1, 4):\n            c = chr(ord(col) + step * dc)\n            r = row + step * dr\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            c = chr(ord(col) - step * dc)\n            r = row - step * dr\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if (j <= 3 and all(board[chr(col + j)][i] == color for col in range(ord('A'), ord('A') + 4))) or \\\n                       (i <= 2 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                       (j <= 3 and i <= 2 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)) and \\\n                       all(board[chr(j + k + ord('A'))][i + (3 - k)] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for d in range(1, 4):\n                            cc = chr(ord(c) + direction[0] * d)\n                            rr = r + direction[1] * d\n                            if 0 <= ord(cc) - ord('A') < 7 and 0 <= rr < 6 and grid[cc][rr] == grid[c][r]:\n                                count += 1\n                        if count >= 4:\n                            return grid[c][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:\n                        if (col <= 3 and all(board[chr(col + i + 65)][row] == color for i in range(4)) or\n                            row <= 2 and all(board[chr(col + 0 + 65)][row + i] == color for i in range(4)) or\n                            col <= 3 and row <= 2 and all(board[chr(col + i + 65)][row + i] == color for i in range(4)) or\n                            col <= 3 and row >= 3 and all(board[chr(col + i + 65)][row - i] == color for i in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(grid[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) + k]][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) - k]][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if 0 <= ord(col) + i < ord('H')) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i < ord('H') and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < ord('H') and row - i >= 0)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for positions in LINES:\n            if all(board[col][row] == color for col, row in positions if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[1]\n                    c = board.keys().index(col) + d * i * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[COLUMNS[i]][row + i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[COLUMNS[i]][row - i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for win_condition in LINES:\n        colors = {board[col][row] for col, row in win_condition}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Horizontal check\n                    if c <= 'D' and all(board[c][r] == board[c][r] for c in 'DEFG'[:4]):\n                        return board[c][r]\n                    # Vertical check\n                    if r <= 2 and all(board[c][r] == board[c][r] for r in range(4)):\n                        return board[c][r]\n                    # Diagonal check (down-right)\n                    if c <= 'D' and r <= 2 and all(board[c][r] == board[c][r] for k in range(4)):\n                        return board[c][r]\n                    # Diagonal check (down-left)\n                    if c >= 'D' and r <= 2 and all(board[c][r] == board[c][r] for k in range(4)):\n                        return board[c][r]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    for line in LINES:\n                        if (col, row) in line and all(board[c][r] == color for c, r in line):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for combination in LINES:\n            if all(board[col][row] == color for col, row in combination if row < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            if (column, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if row < 6):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col].count(color) > 0 for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check if this move wins the game\n        if check_winner(board, col, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    # Calculate row based on the column's length\n    row = len(board[col]) - 1\n\n    # Check all directions: vertical, horizontal, diagonal \\\n    directions = [\n        [(0, 1)],  # vertical\n        [(1, 0)],  # horizontal\n        [(1, 1)],  # diagonal /\n        [(1, -1)], # diagonal \\\n    ]\n    \n    for direction in directions:\n        count = 1\n        for dir in direction:\n            for step in range(1, 4):\n                new_col = chr(ord(col) + dir[0] * step)\n                new_row = row + dir[1] * step\n                if new_col in board and new_row < len(board[new_col]) and new_row >= 0:\n                    if board[new_col][new_row] == color:\n                        count += 1\n                    else:\n                        break\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[c][row] == color for c in 'ABCD'[ord(col) - 65:ord(col) - 61]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'[ord(col) - 65:ord(col) - 61]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in range(7):\n            for row in range(6):\n                if board[chr(65 + col)][row] is not None:\n                    if (col + 3 < 7 and \n                        board[chr(65 + col)][row] == board[chr(65 + col + 1)][row] == \n                        board[chr(65 + col + 2)][row] == board[chr(65 + col + 3)][row]):\n                        return board[chr(65 + col)][row]\n                    if (row + 3 < 6 and \n                        board[chr(65 + col)][row] == board[chr(65 + col)][row + 1] == \n                        board[chr(65 + col)][row + 2] == board[chr(65 + col)][row + 3]):\n                        return board[chr(65 + col)][row]\n                    if (col + 3 < 7 and row + 3 < 6 and \n                        board[chr(65 + col)][row] == board[chr(65 + col + 1)][row + 1] == \n                        board[chr(65 + col + 2)][row + 2] == board[chr(65 + col + 3)][row + 3]):\n                        return board[chr(65 + col)][row]\n                    if (col + 3 < 7 and row - 3 >= 0 and \n                        board[chr(65 + col)][row] == board[chr(65 + col + 1)][row - 1] == \n                        board[chr(65 + col + 2)][row - 2] == board[chr(65 + col + 3)][row - 3]):\n                        return board[chr(65 + col)][row]\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for d in [1, -1]:\n            for step in range(1, 4):\n                new_col = chr(ord(col) + direction[0] * d * step)\n                new_row = row + direction[1] * d * step\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n                if count == 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + dcol * i)\n            r = row + drow * i\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = player\n\n            # Check for a win\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(65 + c)][r] is not None:\n                        if (c <= 3 and all(board[chr(65 + c + k)][r] == board[chr(65 + c)][r] for k in range(4))) or \\\n                           (r <= 2 and all(board[chr(65 + c)][r + k] == board[chr(65 + c)][r] for k in range(4))) or \\\n                           (c <= 3 and r <= 2 and all(board[chr(65 + c + k)][r + k] == board[chr(65 + c)][r] for k in range(4))) or \\\n                           (c <= 3 and r >= 3 and all(board[chr(65 + c + k)][r - k] == board[chr(65 + c)][r] for k in range(4))):\n                            return board[chr(65 + c)][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + d[0] * step)\n            r = row + d[1] * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for d in (1, -1):\n            for step in range(1, 4):\n                x, y = chr(ord(col) + dx * d * step), row + dy * d * step\n                if 0 <= y < 6 and x in board and board[x][y] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        if check_winner(player_moves[player], board):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(moves, board):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for col, row in moves:\n        for dr, dc in directions:\n            count = 1\n            for step in range(1, 4):\n                r, c = row + step * dr, 'ABCDEFG'.index(col) + step * dc\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == board[col][row]:\n                    count += 1\n                else:\n                    break\n            \n            for step in range(1, 4):\n                r, c = row - step * dr, 'ABCDEFG'.index(col) - step * dc\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == board[col][row]:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color_to_check in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color_to_check:\n                        if (col in board and\n                            (row <= 2 and all(board[col][row+i] == color_to_check for i in range(4)) or\n                             col <= 'D' and all(board[chr(ord(col)+i)][row] == color_to_check for i in range(4)) or\n                             col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color_to_check for i in range(4)) or\n                             col >= 'D' and row <= 2 and all(board[chr(ord(col)-i)][row+i] == color_to_check for i in range(4)))):\n                            return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(grid[x][y] == color for x, y in win_condition if x in grid and y < 6 and y >= 0):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board[COLUMNS[i]][j] is not None:\n                    current_color = board[COLUMNS[i]][j]\n                    if (i <= 3 and all(board[COLUMNS[i+k]][j] == current_color for k in range(4))) or \\\n                       (j <= 2 and all(board[COLUMNS[i]][j+k] == current_color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[COLUMNS[i+k]][j+k] == current_color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[COLUMNS[i+k]][j-k] == current_color for k in range(4))):\n                        return current_color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check horizontal, vertical, and diagonal\n            for column in 'ABCDEFG':\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Horizontal Check\n                        if column <= 'D' and all(board[column][row] == color for column in 'DEFG'[ord(column)-65:ord(column)-61]):\n                            return color\n                        # Vertical Check\n                        if row <= 2 and all(board[column][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Diagonal Check \\\n                        if column <= 'D' and row <= 2 and all(board[c][r] == color for c, r in zip('DEFG', range(row, row + 4))):\n                            return color\n                        # Diagonal Check /\n                        if column <= 'D' and row >= 3 and all(board[c][r] == color for c, r in zip('DEFG', range(row, row - 4, -1))):\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in COLUMNS:\n            if grid[col][row] == color:\n                if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    # Check for horizontal\n                    if col <= 'D' and all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                        return grid[col][row].split('_')[1]\n                    # Check for vertical\n                    if row <= 2 and all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                        return grid[col][row].split('_')[1]\n                    # Check for diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return grid[col][row].split('_')[1]\n                    # Check for diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return grid[col][row].split('_')[1]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, col, row, color):\n                winner = color\n                break\n\n    return winner if winner else \"Draw\"\n\ndef check_winner(board, col, row, color):\n    def count_connected(dx, dy):\n        count = 0\n        x, y = col_index[col], row\n        while 0 <= x < 7 and 0 <= y < 6 and board[COLUMNS[x]][y] == color:\n            count += 1\n            x += dx\n            y += dy\n        return count\n\n    col_index = {c: i for i, c in enumerate('ABCDEFG')}\n    COLUMNS = 'ABCDEFG'\n    \n    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        if count_connected(dx, dy) + count_connected(-dx, -dy) - 1 >= 4:\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] is None:\n                    continue\n                color = grid[column][row]\n                \n                # Check horizontal\n                if column in 'ABCDEFG'[:4] and all(grid[column][row] == color for column in 'ABCDEFG'[0:4]):\n                    return color\n\n                # Check vertical\n                if row <= 2 and all(grid[column][row] == color for row in range(row, row + 4)):\n                    return color\n                \n                # Check diagonal /\n                if column in 'ABCDEFG'[:4] and row >= 3 and all(grid[column][row] == color for column, row in \n                    [(chr(ord(column)+i), row-i) for i in range(4)]):\n                    return color\n\n                # Check diagonal \\\n                if column in 'ABCDEFG'[:4] and row <= 2 and all(grid[column][row] == color for column, row in \n                    [(chr(ord(column)+i), row+i) for i in range(4)]):\n                    return color\n\n    winner = check_winner()\n    if winner:\n        return winner\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n    \n        for direction in range(4):\n            count = 0\n            for d in range(-3, 1):\n                check_pos = (ord(column) - ord('A') + d, row) if direction < 2 else (ord(column) - ord('A') + d if direction == 2 else ord(column) - ord('A') + d, row - d)\n                if 0 <= check_pos[0] < 7 and 0 <= check_pos[1] < 6 and board[chr(check_pos[0] + ord('A'))][check_pos[1]] == color:\n                    count += 1\n                else:\n                    count = 0\n                if count == 4:\n                    return color\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in 'ABCDEFG':\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if column <= 'D' and all(board[chr(ord(column) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and column <= 'D' and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and column <= 'D' and all(board[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check horizontal, vertical, and diagonal lines for a win\n    for col in COLUMNS:\n        for row in ROWS:\n            if grid[col][row] == color:\n                if (check_direction(grid, color, col, row, 1, 0) or  # horizontal\n                    check_direction(grid, color, col, row, 0, 1) or  # vertical\n                    check_direction(grid, color, col, row, 1, 1) or  # diagonal down\n                    check_direction(grid, color, col, row, 1, -1)):  # diagonal up\n                    return True\n    return False\n\ndef check_direction(grid, color, col, row, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + step * delta_col)\n        new_row = row + step * delta_row\n        if (new_col in grid and \n                0 <= new_row < 6 and \n                grid[new_col][new_row] == color):\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS = 'ABCDEFG'\n    ROWS = range(6)\n    \n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check for win conditions\n                    if check_winner(board, col, row, color):\n                        return color\n                    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check horizontal, vertical, and two diagonal connections\n    return (check_direction(board, color, col, row, 1, 0) or\n            check_direction(board, color, col, row, 0, 1) or\n            check_direction(board, color, col, row, 1, 1) or\n            check_direction(board, color, col, row, 1, -1))\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        new_col = chr(ord(col) + i * delta_col)\n        new_row = row + i * delta_row\n        if new_col in board and new_row in range(6) and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        if (col, row) in [(c, r) for c in 'ABCDEFG' for r in range(6)]:\n                            # Check horizontal\n                            if all(grid[col][row] == grid[col_next][row] for col_next in 'ABCDEFG' if (col_next >= col and col_next < chr(ord(col) + 4))):\n                                return color\n                            # Check vertical\n                            if row < 3 and all(grid[col][row] == grid[col][row_next] for row_next in range(row, row + 4)):\n                                return color\n                            # Check diagonal /\n                            if row >= 3 and all(grid[col][row] == grid[chr(ord(col) + k)][row - k] for k in range(4) if (col >= 'A' and ord(col) + k < ord('H') and row - k >= 0)):\n                                return color\n                            # Check diagonal \\\n                            if row < 3 and all(grid[col][row] == grid[chr(ord(col) + k)][row + k] for k in range(4) if (col >= 'A' and ord(col) + k < ord('H') and row + k < 6)):\n                                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n\n        if check_winner(player_moves[player]):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for d in (-1, 1):\n            count += count_direction(moves, direction, d)\n        if count >= 4:\n            return True\n    return False\n\ndef count_direction(moves, direction, d):\n    count = 0\n    col_offset, row_offset = direction\n    for move in moves:\n        col, row = move\n        new_col = chr(ord(col) + col_offset * d)\n        new_row = row + row_offset * d\n        if (new_col in 'ABCDEFG' and 0 <= new_row < 6 and \n                (new_col, new_row) in moves):\n            count += 1\n        else:\n            break\n    return count\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for step in [1, -1]:\n                for i in range(1, 4):\n                    new_row = row + direction[0] * i * step\n                    new_col = 'ABCDEFG'.index(col) + direction[1] * i * step\n                    if 0 <= new_row < 6 and 0 <= new_col < 7:\n                        if board['ABCDEFG'[new_col]][new_row] == color:\n                            count += 1\n                        else:\n                            break\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        player = player_moves[color]\n        \n        # Drop the piece into the column\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = player\n                break\n        \n        # Check for a winner\n        for r in range(6):\n            for c in range(7):\n                if grid['ABCDEFG'[c]][r] == player:\n                    # Check horizontal\n                    if c <= 3 and all(grid['ABCDEFG'[c+i]][r] == player for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(grid['ABCDEFG'[c]][r+i] == player for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid['ABCDEFG'[c+i]][r+i] == player for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(grid['ABCDEFG'[c-i]][r+i] == player for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if grid[COLUMNS[j]][i] == color:\n                    if (j + 3 < 7 and all(grid[COLUMNS[j + k]][i] == color for k in range(4))) or \\\n                       (i + 3 < 6 and all(grid[COLUMNS[j]][i + k] == color for k in range(4))) or \\\n                       (j + 3 < 7 and i + 3 < 6 and all(grid[COLUMNS[j + k]][i + k] == color for k in range(4))) or \\\n                       (j + 3 < 7 and i - 3 >= 0 and all(grid[COLUMNS[j + k]][i - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for d in (1, -1):\n            for step in range(1, 4):\n                c = chr(ord(col) + step * dc * d)\n                r = row + step * dr * d\n                if c in board and 0 <= r < 6 and board[c][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for step in (1, -1):\n                for _ in range(3):\n                    r = row + direction[0] * step * _\n                    c = grid[column].index(None) - 1 + direction[1] * step * _\n                    if 0 <= r < 6 and 0 <= c < 7 and grid['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:  # Check column\n                        if (row <= 2 and \n                            all(board[chr(col + 65)][row + k] == color for k in range(4))):\n                            return color\n                    if board[chr(col + 65)][row] == color:  # Check row\n                        if (col <= 3 and \n                            all(board[chr(col + k + 65)][row] == color for k in range(4))):\n                            return color\n                    if board[chr(col + 65)][row] == color:  # Check diagonal /\n                        if (col <= 3 and row >= 3 and \n                            all(board[chr(col + k + 65)][row - k] == color for k in range(4))):\n                            return color\n                    if board[chr(col + 65)][row] == color:  # Check diagonal \\\n                        if (col <= 3 and row <= 2 and \n                            all(board[chr(col + k + 65)][row + k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = players[color]\n        \n        if check_winner(board, players[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, player, col, row, 1, 0) or \\\n                   check_direction(board, player, col, row, 0, 1) or \\\n                   check_direction(board, player, col, row, 1, 1) or \\\n                   check_direction(board, player, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, player, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    move_set = set(moves)\n    \n    for col, row in moves:\n        for d in directions:\n            count = 1\n            for step in [1, -1]:\n                for i in range(1, 4):\n                    new_col = chr(ord(col) + d[0] * i * step)\n                    new_row = row + d[1] * i * step\n                    if (new_col, new_row) in move_set:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return True\n    return False\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(col + 65)][row] == color:\n                        if col <= 3 and all(grid[chr(col + k + 65)][row] == color for k in range(4)):\n                            return color\n                        if row <= 2 and all(grid[chr(col + i + 65)][row + i] == color for i in range(4)):\n                            return color\n                        if col >= 3 and row <= 2 and all(grid[chr(col - i + 65)][row + i] == color for i in range(4)):\n                            return color\n                        if row <= 3 and all(grid[chr(col + 65)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCD'[ord(col)-65:ord(col)-65+4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board['ABCDEFG'[i]][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board['ABCDEFG'[i]][row-i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check horizontally\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return board[col][row]\n                    # Check vertically\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        # Check for victory\n        for column in board:\n            for row in range(6):\n                if board[column][row] == color:\n                    # Check vertically\n                    if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                        return color\n                    \n                    # Check horizontally\n                    for c in range(max(0, ord(column) - ord('A') - 3), min(7, ord(column) - ord('A') + 1)):\n                        if all(board[chr(ord('A') + c + k)][row] == color for k in range(4) if c + k < 7):\n                            return color\n                    \n                    # Check diagonal \\\n                    if row <= 2 and ord(column) <= 3:\n                        if all(board[chr(ord(column) + k)][row + k] == color for k in range(4) if ord(column) + k < 7 and row + k < 6):\n                            return color\n                    \n                    # Check diagonal /\n                    if row >= 3 and ord(column) <= 3:\n                        if all(board[chr(ord(column) + k)][row - k] == color for k in range(4) if ord(column) + k < 7 and row - k >= 0):\n                            return color\n                    \n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            x, y = col, row\n                            x = chr(ord(x) + dx * step)\n                            y = y + dy * step\n                            if 0 <= y < 6 and x in board and board[x][y] == board[col][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(grid[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color_to_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_to_check for col, row in line) for line in LINES):\n                return color_to_check\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(col + ord('A'))][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[chr(col + ord('A'))][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 3 and all(grid[chr(col + k + ord('A'))][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 3 and row <= 2 and all(grid[chr(col + k + ord('A'))][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 3 and row >= 3 and all(grid[chr(col + k + ord('A'))][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in board:\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[column][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        for c in range(max(0, 'ABCDEFG'.index(column)-3), min(7, 'ABCDEFG'.index(column)+1)):\n                            if all(board['ABCDEFG'[c+k]][row] == color for k in range(4) if 0 <= c+k < 7):\n                                return color\n                        # Check diagonal \\\n                        for d in range(-3, 1):\n                            if 0 <= 'ABCDEFG'.index(column) + d < 7 and 0 <= row + d < 6 and \\\n                               all(0 <= 'ABCDEFG'.index(column) + d+k < 7 and 0 <= row + k < 6 and \n                                   board['ABCDEFG'[ 'ABCDEFG'.index(column) + d+k ]][row + k] == color for k in range(4)):\n                                return color\n                        # Check diagonal /\n                        for d in range(-3, 1):\n                            if 0 <= 'ABCDEFG'.index(column) + d < 7 and 0 <= row - d < 6 and \\\n                               all(0 <= 'ABCDEFG'.index(column) + d+k < 7 and 0 <= row - k < 6 and \n                                   board['ABCDEFG'[ 'ABCDEFG'.index(column) + d+k ]][row - k] == color for k in range(4)):\n                                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[column][row] == color for column, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if grid[COLUMNS[j]][i] is not None:\n                    if j <= 3 and all(grid[COLUMNS[j+k]][i] == grid[COLUMNS[j]][i] for k in range(4)):\n                        return grid[COLUMNS[j]][i]\n                    if i <= 2 and all(grid[COLUMNS[j]][i+k] == grid[COLUMNS[j]][i] for k in range(4)):\n                        return grid[COLUMNS[j]][i]\n                    if j <= 3 and i <= 2 and all(grid[COLUMNS[j+k]][i+k] == grid[COLUMNS[j]][i] for k in range(4)):\n                        return grid[COLUMNS[j]][i]\n                    if j <= 3 and i >= 3 and all(grid[COLUMNS[j+k]][i-k] == grid[COLUMNS[j]][i] for k in range(4)):\n                        return grid[COLUMNS[j]][i]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x])):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if (j <= 3 and all(board[chr(k + 65)][i] == color for k in range(j, j + 4))) or \\\n                       (i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4))) or \\\n                       (i <= 2 and j <= 3 and all(board[chr(j + k + 65)][i + k] == color for k in range(4))) or \\\n                       (i >= 3 and j <= 3 and all(board[chr(j + k + 65)][i - k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a winner\n        for color in ['Red', 'Yellow']:\n            # Check horizontal, vertical, and diagonal connections\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(65 + c)][r] == color:\n                        if (c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                           (r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                           (c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                           (c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4))):\n                            return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = player\n                break\n\n        for player in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == player:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == player for k in range(4)):\n                            return player\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + k)][row] == player for k in range(4)):\n                            return player\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == player for k in range(4)):\n                            return player\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == player for k in range(4)):\n                            return player\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal (down-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (down-left)\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        for key in board:\n            if len(board[key]) >= 4:\n                for i in range(len(board[key]) - 3):\n                    if all(board[key][i+j] == color for j in range(4)):\n                        return color\n        \n        for col in range(len(board)):\n            if len(board[chr(65 + col)]) >= 4:\n                for i in range(len(board[chr(65 + col)]) - 3):\n                    if all(board[chr(65 + col)][i+j] == color for j in range(4)):\n                        return color\n            \n            if col <= len(board) - 4:\n                for row in range(6):\n                    if (len(board[chr(65 + col)]) > row and \n                        len(board[chr(65 + col + 1)]) > row and \n                        len(board[chr(65 + col + 2)]) > row and \n                        len(board[chr(65 + col + 3)]) > row):\n                        if (board[chr(65 + col)][row] == color and \n                            board[chr(65 + col + 1)][row] == color and \n                            board[chr(65 + col + 2)][row] == color and \n                            board[chr(65 + col + 3)][row] == color):\n                            return color\n            \n            if col <= len(board) - 4:\n                for i in range(len(board[chr(65 + col)]) - 3):\n                    if (len(board[chr(65 + col)]) > i and \n                        len(board[chr(65 + col + 1)]) > i + 1 and \n                        len(board[chr(65 + col + 2)]) > i + 2 and \n                        len(board[chr(65 + col + 3)]) > i + 3):\n                        if (board[chr(65 + col)][i] == color and \n                            board[chr(65 + col + 1)][i + 1] == color and \n                            board[chr(65 + col + 2)][i + 2] == color and \n                            board[chr(65 + col + 3)][i + 3] == color):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        # Check for a winner after every move\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, 1, 0, color) or \\\n                   check_direction(board, col, row, 0, 1, color) or \\\n                   check_direction(board, col, row, 1, 1, color) or \\\n                   check_direction(board, col, row, 1, -1, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + step * delta_col)\n        r = row + step * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win after this move\n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    if row < 0:\n        return False\n\n    # Check vertical, horizontal, and diagonal connections\n    return (check_direction(board, column, row, color, 0, 1) or  # horizontal\n            check_direction(board, column, row, color, 1, 0) or  # vertical\n            check_direction(board, column, row, color, 1, 1) or  # diagonal /\n            check_direction(board, column, row, color, 1, -1)    # diagonal \\\n           )\n\ndef check_direction(board, column, row, color, delta_row, delta_col):\n    count = 0\n\n    for i in range(-3, 4):  # Check in both directions\n        col = chr(ord(column) + i * delta_col)\n        r = row + i * delta_row\n\n        if col in board and r in range(6) and (len(board[col]) > r and board[col][r] == color):\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        if col in grid:\n            for row in range(6):\n                if grid[col][row] is None:\n                    grid[col][row] = color\n                    player_moves[color].append((col, row))\n                    break\n\n            if check_winner(player_moves[color]):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n\ndef check_winner(moves):\n    for col, row in moves:\n        if (check_direction(moves, col, row, 1, 0) or \n            check_direction(moves, col, row, 0, 1) or \n            check_direction(moves, col, row, 1, 1) or \n            check_direction(moves, col, row, 1, -1)):\n            return True\n    return False\n\ndef check_direction(moves, col, row, d_col, d_row):\n    count = 0\n    for i in range(-3, 4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if 0 <= r < 6 and c in 'ABCDEFG' and (c, r) in moves:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if (j <= 3 and all(board[chr(col + j)][i] == color for col in range(ord('A'), ord('A') + 4))) or \\\n                       (i <= 2 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                       (j <= 3 and i <= 2 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)) and \\\n                       all(board[chr(j + k + ord('A'))][i + (3 - k)] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in range(6) if grid[column][r] is None), None)\n        if row is not None:\n            grid[column][row] = color\n            \n            # Check for a win\n            for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n                count = 1\n                # Check in one direction\n                r, c = row, 'ABCDEFG'.index(column)\n                while 0 <= r + dr < 6 and 0 <= c + dc < 7 and grid['ABCDEFG'[c + dc]][r + dr] == color:\n                    count += 1\n                    r += dr\n                    c += dc\n                # Check in the opposite direction\n                r, c = row, 'ABCDEFG'.index(column)\n                while 0 <= r - dr < 6 and 0 <= c - dc < 7 and grid['ABCDEFG'[c - dc]][r - dr] == color:\n                    count += 1\n                    r -= dr\n                    c -= dc\n                \n                if count >= 4:\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for d in range(1, 4):\n                            cc = chr(ord(c) + direction[0] * d)\n                            rr = r + direction[1] * d\n                            if 0 <= ord(cc) - ord('A') < 7 and 0 <= rr < 6 and grid[cc][rr] == grid[c][r]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return grid[c][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col <= 3 and all(board[chr(i + 65)][row] == color for i in range(col, col + 4))) or \\\n                       (row <= 2 and all(board[chr(col + 65)][j] == color for j in range(row, row + 4))) or \\\n                       (col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_col = chr(ord(col) + direction[0] * step)\n                            new_row = row + direction[1] * step\n                            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check if this move resulted in a win\n        if check_winner(board, column, color):\n            return color.replace(\"Red\", \"Red\").replace(\"Yellow\", \"Yellow\")\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Get the position of the last move\n    row = len(board[column]) - 1\n    \n    # Check vertical, horizontal, and diagonal\n    return (check_direction(board, column, row, color, 1, 0) or  # vertical\n            check_direction(board, column, row, color, 0, 1) or  # horizontal\n            check_direction(board, column, row, color, 1, 1) or  # diagonal /\n            check_direction(board, column, row, color, 1, -1)    # diagonal \\\n           )\n\ndef check_direction(board, column, row, color, d_row, d_col):\n    count = 0\n    for i in range(-3, 4):\n        c = chr(ord(column) + i * d_col)\n        r = row + i * d_row\n        if c in board and r in range(6) and (len(board[c]) > r and board[c][r] == color):\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win after the move\n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal positions for a win\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_line(board, color, col, row):\n                    return True\n    return False\n\ndef check_line(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for step in range(4):\n            new_col = chr(ord(col) + step * dx)\n            new_row = row + step * dy\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```"
        ]
    }
}