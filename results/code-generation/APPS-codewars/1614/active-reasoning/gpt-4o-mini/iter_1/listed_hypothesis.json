{
    "0": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and y >= 0):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and y >= 0 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 'A' <= chr(ord(c) + i) <= 'G'\n                        ):\n                            return color\n                    # Check diagonal /\n                    if r <= 2:\n                        if all(\n                            board[chr(ord(c) + i)][r + i] == color for i in range(4) if 0 <= ord(c) + i - ord('A') < 7\n                        ):\n                            return color\n                    # Check diagonal \\\n                    if r >= 3:\n                        if all(\n                            board[chr(ord(c) + i)][r - i] == color for i in range(4) if 0 <= ord(c) + i - ord('A') < 7\n                        ):\n                            return color\n                        \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) + k]][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) - k]][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col_start in 'ABCDEFG':\n            for row in range(6):\n                if board[col_start][row] is not None:\n                    color = board[col_start][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col_start][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col_start <= 'D' and all(board[chr(ord(col_start) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col_start <= 'D' and all(board[chr(ord(col_start) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col_start <= 'D' and all(board[chr(ord(col_start) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        grid[column].append(color)\n        \n        # Check for a win condition after each move\n        if len(grid[column]) >= 4:\n            if check_winner(grid, column, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, column, color):\n    rows = {col: len(grid[col]) for col in grid}\n    col_index = 'ABCDEFG'.index(column)\n    row_index = len(grid[column]) - 1\n    \n    # Check vertical\n    if all(len(grid[column]) >= r and grid[column][len(grid[column]) - r - 1] == color for r in range(4)):\n        return True\n    \n    # Check horizontal\n    for start_col in range(max(0, col_index - 3), min(7 - 3, col_index + 1)):\n        if all(len(grid['ABCDEFG'[start_col + i]]) > row_index and grid['ABCDEFG'[start_col + i]][row_index] == color for i in range(4)):\n            return True\n            \n    # Check diagonal /\n    for start_col in range(max(0, col_index - 3), min(7 - 3, col_index + 1)):\n        for offset in range(4):\n            row_check = row_index + (start_col - col_index) + offset\n            if row_check < 0 or row_check >= 6:\n                continue\n            if len(grid['ABCDEFG'[start_col + offset]]) <= row_check or grid['ABCDEFG'[start_col + offset]][row_check] != color:\n                break\n        else:\n            return True\n    \n    # Check diagonal \\\n    for start_col in range(max(0, col_index - 3), min(7 - 3, col_index + 1)):\n        for offset in range(4):\n            row_check = row_index - (start_col - col_index) + offset\n            if row_check < 0 or row_check >= 6:\n                continue\n            if len(grid['ABCDEFG'[start_col + offset]]) <= row_check or grid['ABCDEFG'[start_col + offset]][row_check] != color:\n                break\n        else:\n            return True\n    \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 1}\n    moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n        \n        if check_winner(moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(positions):\n    for x, y in positions:\n        if all((x, y) in positions for (x, y) in [(chr(ord(x) + i), y) for i in range(4)]) or \\\n               all((x, y) in positions for (x, y) in [(x, y + i) for i in range(4)]) or \\\n               all((x, y) in positions for (x, y) in [(chr(ord(x) + i), y + i) for i in range(4)]) or \\\n               all((x, y) in positions for (x, y) in [(chr(ord(x) + i), y - i) for i in range(4)]):\n            return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r + k] == board[c][r] for k in range(4)):\n                        return board[c][r]\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c) + k)][r] == board[c][r] for k in range(4)):\n                        return board[c][r]\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[chr(ord(c) + k)][r - k] == board[c][r] for k in range(4)):\n                        return board[c][r]\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c) + k)][r + k] == board[c][r] for k in range(4)):\n                        return board[c][r]\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n        for c in range(7):\n            for r in range(6):\n                if grid['ABCDEFG'[c]][r] == color:\n                    # Check vertical\n                    if r < 3 and all(grid['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c < 4 and all(grid['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if c < 4 and r < 3 and all(grid['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal up-right\n                    if c < 4 and r > 2 and all(grid['ABCDEFG'[c+i]][r-i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(grid[x][y] == color for x, y in win_condition if x in grid and y < 6 and y >= 0):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board[COLUMNS[i]][j] is not None:\n                    current_color = board[COLUMNS[i]][j]\n                    if (i <= 3 and all(board[COLUMNS[i+k]][j] == current_color for k in range(4))) or \\\n                       (j <= 2 and all(board[COLUMNS[i]][j+k] == current_color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[COLUMNS[i+k]][j+k] == current_color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[COLUMNS[i+k]][j-k] == current_color for k in range(4))):\n                        return current_color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [] for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[col].append(color)\n\n        if len(grid[col]) >= 4:\n            for i in range(len(grid[col]) - 3):\n                if all(grid[col][i+j] == color for j in range(4)):\n                    return color\n\n        for i in range(6):\n            if len(grid[COLUMNS[i]]) > 0 and len(grid[COLUMNS[i]]) >= 4:\n                for j in range(len(grid[COLUMNS[i]]) - 3):\n                    if all(grid[COLUMNS[i]][j+k] == color for k in range(4)):\n                        return color\n\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all((grid[COLUMNS[i + k]].__len__() > j + k and grid[COLUMNS[i + k]][j + k] == color) for k in range(4)):\n                    return color\n\n                if all((grid[COLUMNS[i + k]].__len__() > j + (3 - k) and grid[COLUMNS[i + k]][j + (3 - k)] == color) for k in range(4)):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if (0 <= r + direction[0] * 3 < 6 and\n                        0 <= c + direction[1] * 3 < 7 and\n                        board['ABCDEFG'[c]][r] == color and\n                        board['ABCDEFG'[c + direction[1]]][r + direction[0]] == color and\n                        board['ABCDEFG'[c + direction[1] * 2]][r + direction[0] * 2] == color and\n                        board['ABCDEFG'[c + direction[1] * 3]][r + direction[0] * 3] == color):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        if check_winner(board, player):\n            return player.split('_')[1]\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, player, col, row, 1, 0) or \\\n                   check_direction(board, player, col, row, 0, 1) or \\\n                   check_direction(board, player, col, row, 1, 1) or \\\n                   check_direction(board, player, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, player, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[c][row] == color for c in 'ABCDEFG'[ord(col) - 65:ord(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if check_winner(grid, col, row):\n                        return grid[col][row]\n\n    return \"Draw\"\n\ndef check_winner(grid, col, row):\n    color = grid[col][row]\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = chr(ord(col) + dx * step), row + dy * step\n            if x in grid and 0 <= y < 6 and grid[x][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = chr(ord(col) - dx * step), row - dy * step\n            if x in grid and 0 <= y < 6 and grid[x][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == player for x, y in line if x in board and y < 6):\n                    return player\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        for color_to_check in ['Red', 'Yellow']:\n            if any(all(grid[col][row] == color_to_check for col, row in line) for line in LINES):\n                return color_to_check\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] == color:\n                    if ((row <= 2 and all(grid[col][row+i] == color for i in range(4))) or\n                        (col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4))) or\n                        (row <= 2 and col <= 'D' and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4))) or\n                        (row >= 3 and col <= 'D' and all(grid[chr(ord(col)+i)][row-i] == color for i in range(4)))):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for win conditions\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check horizontal, vertical, and diagonal lines for a win\n    for col in COLUMNS:\n        for row in ROWS:\n            if grid[col][row] == color:\n                if (check_direction(grid, color, col, row, 1, 0) or\n                    check_direction(grid, color, col, row, 0, 1) or\n                    check_direction(grid, color, col, row, 1, 1) or\n                    check_direction(grid, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(grid, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        if (col, row) in [(c, r) for c in 'ABCDEFG' for r in range(6)]:\n                            # Check horizontal\n                            if all(grid[col][row] == grid[col_next][row] for col_next in 'ABCDEFG' if (ord(col_next) - ord(col) < 4)):\n                                return color\n                            # Check vertical\n                            if row <= 2 and all(grid[col][row] == grid[col][row_next] for row_next in range(row, row + 4)):\n                                return color\n                            # Check diagonal /\n                            if row >= 3 and all(grid[col][row] == grid[col_next][row_next] for k in range(4) for col_next, row_next in [(chr(ord(col) + k), row - k)]):\n                                return color\n                            # Check diagonal \\\n                            if row <= 2 and all(grid[col][row] == grid[col_next][row_next] for k in range(4) for col_next, row_next in [(chr(ord(col) + k), row + k)]):\n                                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n                    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = players[color]\n        \n        if check_winner(board, players[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, player, col, row, 1, 0) or \\\n                   check_direction(board, player, col, row, 0, 1) or \\\n                   check_direction(board, player, col, row, 1, 1) or \\\n                   check_direction(board, player, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, player, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (board[chr(col + 65)][row] == color_check and \n                        col + 3 < 7 and \n                        all(board[chr(col + k + 65)][row] == color_check for k in range(4))):\n                        return color_check\n                    if (board[chr(col + 65)][row] == color_check and \n                        row + 3 < 6 and \n                        all(board[chr(col + 65)][row + k] == color_check for k in range(4))):\n                        return color_check\n                    if (board[chr(col + 65)][row] == color_check and \n                        col + 3 < 7 and \n                        row + 3 < 6 and \n                        all(board[chr(col + k + 65)][row + k] == color_check for k in range(4))):\n                        return color_check\n                    if (board[chr(col + 65)][row] == color_check and \n                        col + 3 < 7 and \n                        row - 3 >= 0 and \n                        all(board[chr(col + k + 65)][row - k] == color_check for k in range(4))):\n                        return color_check\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if (c <= 3 and all(grid[chr(c + ord('A') + k)][r] == color_check for k in range(4))) or \\\n                       (r <= 2 and all(grid[chr(c + ord('A'))][r + k] == color_check for k in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(grid[chr(c + ord('A') + k)][r + k] == color_check for k in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(grid[chr(c + ord('A') + k)][r - k] == color_check for k in range(4))):\n                        return color_check\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for victory\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_check for col, row in line) for line in LINES):\n                return color_check\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check for a win condition\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Vertical check\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Horizontal check\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Diagonal check (down-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Diagonal check (up-right)\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(col + ord('A'))][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[chr(col + ord('A'))][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 3 and all(grid[chr(col + k + ord('A'))][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 3 and row <= 2 and all(grid[chr(col + k + ord('A'))][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 3 and row >= 3 and all(grid[chr(col + k + ord('A'))][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n        for color in ['Red', 'Yellow']:\n            for c in 'ABCDEFG':\n                for r in range(6):\n                    if board[c][r] == color:\n                        if (r <= 2 and all(board[c][r + i] == color for i in range(4)) or\n                            c <= 'D' and all(board[chr(ord(c) + i)][r] == color for i in range(4)) or\n                            c <= 'D' and r <= 2 and all(board[chr(ord(c) + i)][r + i] == color for i in range(4)) or\n                            c <= 'D' and r >= 3 and all(board[chr(ord(c) + i)][r - i] == color for i in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[column][row] == color for column, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if grid[COLUMNS[j]][i] is not None:\n                    if j <= 3 and all(grid[COLUMNS[j+k]][i] == grid[COLUMNS[j]][i] for k in range(4)):\n                        return grid[COLUMNS[j]][i]\n                    if i <= 2 and all(grid[COLUMNS[j]][i+k] == grid[COLUMNS[j]][i] for k in range(4)):\n                        return grid[COLUMNS[j]][i]\n                    if j <= 3 and i <= 2 and all(grid[COLUMNS[j+k]][i+k] == grid[COLUMNS[j]][i] for k in range(4)):\n                        return grid[COLUMNS[j]][i]\n                    if j <= 3 and i >= 3 and all(grid[COLUMNS[j+k]][i-k] == grid[COLUMNS[j]][i] for k in range(4)):\n                        return grid[COLUMNS[j]][i]\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for i in range(len(board[column]) - 3, len(board[column])):\n                if board[column][i] == color and board[column][i-1] == color and board[column][i-2] == color and board[column][i-3] == color:\n                    return color\n    \n    # Check horizontal, vertical, and diagonal connections\n    for column in board:\n        for row in range(len(board[column])):\n            if row >= 3:  # check vertical\n                if (len(board[column]) > row and board[column][row] == board[column][row-1] == board[column][row-2] == board[column][row-3]):\n                    return board[column][row]\n            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                count = 0\n                for step in range(4):\n                    new_col = ord(column) - ord('A') + step * direction[0]\n                    new_row = row + step * direction[1]\n                    if 0 <= new_col < 7 and 0 <= new_row < 6:\n                        if (len(board[chr(ord('A') + new_col)]) > new_row and\n                            board[chr(ord('A') + new_col)][new_row] == board[column][row]):\n                            count += 1\n                if count == 4:\n                    return board[column][row]\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x])):\n                return color\n    return \"Draw\"\n```",
            "logp": null
        }
    ]
}