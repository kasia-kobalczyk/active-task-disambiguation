{
    "0": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if all(board[c][row] == color for c in 'ABCDEFG' if c >= col and c <= col + 3):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][r] == color for r in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'E' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if (col, row) in line):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if (col, row) in line):\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 0 <= ord(c) + i < 7):\n                            return color\n                    # Check diagonal /\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r + d - i] == color for i in range(4) if 0 <= ord(c) + i < 7 and 0 <= r + d - i < 6):\n                            return color\n                    # Check diagonal \\\n                    for d in range(-3, 1):\n                        if 0 <= r - d < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r - d + i] == color for i in range(4) if 0 <= ord(c) + i < 7 and 0 <= r - d + i < 6):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for col in COLUMNS:\n                for row in ROWS:\n                    if board[col][row] == color:\n                        if (col in COLUMNS[:-3] and\n                            board[col][row] == color and\n                            board[COLUMNS[COLUMNS.index(col) + 1]][row] == color and\n                            board[COLUMNS[COLUMNS.index(col) + 2]][row] == color and\n                            board[COLUMNS[COLUMNS.index(col) + 3]][row] == color):\n                            return color\n                        if (row <= 2 and\n                            board[col][row] == color and\n                            board[col][row + 1] == color and\n                            board[col][row + 2] == color and\n                            board[col][row + 3] == color):\n                            return color\n                        if (col in COLUMNS[:-3] and row <= 2 and\n                            board[col][row] == color and\n                            board[COLUMNS[COLUMNS.index(col) + 1]][row + 1] == color and\n                            board[COLUMNS[COLUMNS.index(col) + 2]][row + 2] == color and\n                            board[COLUMNS[COLUMNS.index(col) + 3]][row + 3] == color):\n                            return color\n                        if (col in COLUMNS[:-3] and row >= 3 and\n                            board[col][row] == color and\n                            board[COLUMNS[COLUMNS.index(col) + 1]][row - 1] == color and\n                            board[COLUMNS[COLUMNS.index(col) + 2]][row - 2] == color and\n                            board[COLUMNS[COLUMNS.index(col) + 3]][row - 3] == color):\n                            return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {column: [None] * 6 for column in COLUMNS}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y in ROWS):\n                return True\n        return False\n\n    LINES = [{(COLUMNS[i+k], j) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in ROWS] \\\n           + [{(COLUMNS[i], j+k) for k in range(4)}\n             for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n           + [{(COLUMNS[i+k], j+k) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n           + [{(COLUMNS[i+k], j-k) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    if any(all(board[c][r] == board[col][row] for c, r in line) for line in LINES):\n                        return board[col][row]\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check if this move creates a winning condition\n        if len(board[col]) >= 4:\n            # Check vertical\n            if board[col][-4:] == [color] * 4:\n                return color.split('_')[1]\n\n            # Check horizontal\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) > 0:\n                    count = 0\n                    for pc in board[c]:\n                        if pc == color:\n                            count += 1\n                            if count == 4:\n                                return color.split('_')[1]\n                        else:\n                            count = 0\n            \n            # Check diagonal /\n            for c in range(max(0, ord(col) - 3), min(len(board), ord(col) + 1)):\n                count = 0\n                for r in range(len(board[c])):\n                    if board[chr(c + 65)][r] == color:\n                        count += 1\n                        if count == 4:\n                            return color.split('_')[1]\n                    else:\n                        count = 0\n\n            # Check diagonal \\\n            for c in range(max(0, ord(col) - 3), min(len(board), ord(col) + 1)):\n                count = 0\n                for r in range(len(board[c])):\n                    if board[chr(c + 65)][5 - r] == color:\n                        count += 1\n                        if count == 4:\n                            return color.split('_')[1]\n                    else:\n                        count = 0\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A')) + 1):\n                        if all(board[chr(ord('A') + c + i)][row] == board[col][row] for i in range(4)):\n                            return board[col][row]\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        if check_winner(grid, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            r = row + i * d[1]\n            c = col_index(col) + i * d[0]\n            if 0 <= r < 6 and 0 <= c < 7 and grid[COLUMNS[c]][r] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            r = row - i * d[1]\n            c = col_index(col) - i * d[0]\n            if 0 <= r < 6 and 0 <= c < 7 and grid[COLUMNS[c]][r] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n\ndef col_index(col):\n    return 'ABCDEFG'.index(col)\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal for a win\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # horizontal\n                        check_direction(board, col, row, 0, 1, color) or  # vertical\n                        check_direction(board, col, row, 1, 1, color) or  # diagonal /\n                        check_direction(board, col, row, 1, -1, color)):  # diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + delta_col * step)\n        r = row + delta_row * step\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in COLUMNS:\n            for row in ROWS:\n                if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                   (col <= 'D' and all(board[COLUMNS[COLUMNS.index(col) + k]][row] == color for k in range(4))) or \\\n                   (row <= 2 and col <= 'D' and all(board[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4))) or \\\n                   (row >= 3 and col <= 'D' and all(board[COLUMNS[COLUMNS.index(col) + k]][row - k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = players[color]\n        \n        if check_winner(board, players[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, col, row, player):\n                    return True\n    return False\n\ndef check_direction(board, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d_col, d_row in directions:\n        count = 0\n        for i in range(4):\n            new_col = chr(ord(col) + d_col * i)\n            new_row = row + d_row * i\n            \n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == player:\n                count += 1\n            else:\n                break\n        \n        if count == 4:\n            return True\n            \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n\n        # Check for win\n        for c in range(7):\n            for r in range(6):\n                if grid[chr(65 + c)][r] == color:  # Check columns\n                    if c <= 3 and all(grid[chr(65 + c + i)][r] == color for i in range(4)):\n                        return color\n                if r <= 2 and grid[chr(65 + c)][r] == color:  # Check rows\n                    if all(grid[chr(65 + c)][r + i] == color for i in range(4)):\n                        return color\n                if c <= 3 and r <= 2 and grid[chr(65 + c)][r] == color:  # Check diagonal \\\n                    if all(grid[chr(65 + c + i)][r + i] == color for i in range(4)):\n                        return color\n                if c <= 3 and r >= 3 and grid[chr(65 + c)][r] == color:  # Check diagonal /\n                    if all(grid[chr(65 + c + i)][r - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((r for r in range(6) if board[column][r] is None), None)\n        if row is not None:\n            board[column][row] = color\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][r] == color for r in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[COLUMNS[COLUMNS.index(col) + k]][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col <= 3 and all(board[chr(col + i + 65)][row] == color for i in range(4))) or \\\n                       (row <= 2 and all(board[chr(col + 65)][row + j] == color for j in range(4))) or \\\n                       (col <= 3 and row <= 2 and all(board[chr(col + i + 65)][row + i] == color for i in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(board[chr(col + i + 65)][row - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    def check_winner():\n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == player for col, row in line if 0 <= row < 6):\n                    return player\n        return None\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = player\n                if check_winner():\n                    return player\n                break\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col_index := 'ABCDEFG'.index(col) <= 3:\n                            if all(board['ABCDEFG'[col_index+k]][row] == color for k in range(4)):\n                                return color\n                        # Check diagonal \\\n                        if row <= 2 and col_index <= 3:\n                            if all(board['ABCDEFG'[col_index+k]][row+k] == color for k in range(4)):\n                                return color\n                        # Check diagonal /\n                        if row >= 3 and col_index <= 3:\n                            if all(board['ABCDEFG'[col_index+k]][row-k] == color for k in range(4)):\n                                return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if (0 <= row < 6)):\n                    return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:\n                        if (col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4)) or\n                            row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)) or\n                            row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)) or\n                            row <= 2 and col <= 3 and all(board[chr(col + k + 65)][row + k] == color for k in range(4))):\n                            return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    moves_set = set(moves)\n    for (col, row) in moves:\n        if (check_direction(moves_set, col, row, 1, 0) or  # horizontal\n                check_direction(moves_set, col, row, 0, 1) or  # vertical\n                check_direction(moves_set, col, row, 1, 1) or  # diagonal \\\n                check_direction(moves_set, col, row, 1, -1)):  # diagonal /\n            return True\n    return False\n\ndef check_direction(moves_set, col, row, delta_col, delta_row):\n    color = (col, row)\n    count = 1\n    for step in range(1, 4):\n        next_pos = (chr(ord(col) + delta_col * step), row + delta_row * step)\n        if next_pos in moves_set:\n            count += 1\n        else:\n            break\n\n    for step in range(1, 4):\n        next_pos = (chr(ord(col) - delta_col * step), row - delta_row * step)\n        if next_pos in moves_set:\n            count += 1\n        else:\n            break\n\n    return count >= 4\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] is None:\n                    continue\n                color = grid[column][row]\n                # Check vertical\n                if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                    return color\n                # Check horizontal\n                if column <= 'D' and all(grid[chr(ord(column) + k)][row] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column <= 'D' and row >= 3 and all(grid[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(grid[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = players[player]\n        \n        # Check for a win\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] is not None:\n                    color = board['ABCDEFG'[c]][r]\n                    \n                    # Check horizontal\n                    if c <= 3 and all(board['ABCDEFG'[c + k]][r] == color for k in range(4)):\n                        return player\n                    # Check vertical\n                    if r <= 2 and all(board['ABCDEFG'[c]][r + k] == color for k in range(4)):\n                        return player\n                    # Check diagonal /\n                    if r >= 3 and c <= 3 and all(board['ABCDEFG'[c + k]][r - k] == color for k in range(4)):\n                        return player\n                    # Check diagonal \\\n                    if r <= 2 and c <= 3 and all(board['ABCDEFG'[c + k]][r + k] == color for k in range(4)):\n                        return player\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player] += 1\n                break\n        \n        # Check for win condition\n        for player in ['Red', 'Yellow']:\n            if any(all(board[column][row] == player for column, row in line) for line in LINES):\n                return player\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in COLUMNS:\n                for row in ROWS:\n                    if (board[col][row] == color and\n                        ((col <= 'D' and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4))) or\n                         (row <= 2 and all(board[col][row + k] == color for k in range(4))) or\n                         (col <= 'D' and row <= 2 and all(board[COLUMNS[i][j]][row + j] == color for j in range(4) for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4))) or\n                         (col <= 'D' and row >= 3 and all(board[COLUMNS[i][j]][row - j] == color for j in range(4) for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4))))):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        }
    ]
}