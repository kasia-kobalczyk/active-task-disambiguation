{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c].count(color) >= 1 for c in line if c in board):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [grid[column][row] for column, row in line if grid[column][row] is not None]\n        if len(set(colors)) == 1 and colors:\n            return colors[0]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < len(grid[c]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line]\n        if colors.count('Red') == 4:\n            return \"Red\"\n        if colors.count('Yellow') == 4:\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece.split('_')[1]\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x]) and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c][row] == color if c in board and len(board[c]) > row else False) for c in 'ABCDEFG'):\n                    return color\n\n        # Check vertical connections\n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                for r in range(len(board[col]) - 3):\n                    if all(board[col][r + k] == color for k in range(4)):\n                        return color\n\n        # Check diagonal connections\n        for c in range(4):\n            for r in range(6):\n                if all((board[chr(ord('A') + c + k)] and len(board[chr(ord('A') + c + k)]) > r - k and board[chr(ord('A') + c + k)][r - k] == color) for k in range(4)):\n                    return color\n                if all((board[chr(ord('A') + c + k)] and len(board[chr(ord('A') + c + k)]) > r + k and board[chr(ord('A') + c + k)][r + k] == color) for k in range(4)):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Game in Progress\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [((0, 1), (1, 0)), ((1, 0), (0, 1)), ((1, 1), (1, -1))]:\n            count = 1\n            for (dx, dy) in direction:\n                x, y = board[column].index(color), row\n                while 0 <= x + dx < 6 and 0 <= y + dy < 7 and board['ABCDEFG'[y + dy]][x + dx] == color:\n                    count += 1\n                    x += dx\n                    y += dy\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == color and \n                (i >= 3 and all(board[column][i-j] == color for j in range(4)) or\n                 any(board[c][i] == color for c in 'ABCDEFG' if len(board[c]) > i and abs(ord(c) - ord(column)) <= 3) and\n                 all(board[column][i - j] == color for j in range(4)) or\n                 all(board[chr(ord(column) + j)][i - j] == color for j in range(4) if 0 <= ord(column) + j < ord('G') + 1) or\n                 all(board[chr(ord(column) - j)][i - j] == color for j in range(4) if 0 <= ord(column) - j > ord('A') - 1)))):\n                return color\n        \n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for col in COLUMNS:\n                for row in ROWS:\n                    if board[col][row] == color:\n                        if (col in COLUMNS[:-3] and\n                            all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4))):\n                            return color\n                        if (row < 3 and\n                            all(board[col][j] == color for j in range(row, row + 4))):\n                            return color\n                        if (col in COLUMNS[:-3] and row < 3 and\n                            all(board[COLUMNS[i]][row + i] == color for i in range(4))):\n                            return color\n                        if (col in COLUMNS[:-3] and row > 2 and\n                            all(board[COLUMNS[i]][row - i] == color for i in range(4))):\n                            return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {column: [None] * 6 for column in COLUMNS}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(len(COLUMNS)):\n            for j in range(len(ROWS)):\n                if any(((COLUMNS[i+k], ROWS[j]) in board[column] and board[column][ROWS[j]] == color) \n                        for k in range(4) if i + k < len(COLUMNS) and j < len(ROWS)):\n                    return True\n                if any(((COLUMNS[i], ROWS[j+k]) in board[column] and board[column][ROWS[j]] == color) \n                        for k in range(4) if j + k < len(ROWS)):\n                    return True\n                if any(((COLUMNS[i+k], ROWS[j+k]) in board[column] and board[column][ROWS[j]] == color) \n                        for k in range(4) if i + k < len(COLUMNS) and j + k < len(ROWS)):\n                    return True\n                if any(((COLUMNS[i+k], ROWS[j-k]) in board[column] and board[column][ROWS[j]] == color) \n                        for k in range(4) if i + k < len(COLUMNS) and j - k >= 0):\n                    return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (board[chr(col + 65)][row] == color and\n                        (col + 3 < 7 and all(board[chr(col + k + 65)][row] == color for k in range(4))) or\n                        (row + 3 < 6 and all(board[chr(col + 65)][row + k] == color for k in range(4))) or\n                        (col + 3 < 7 and row + 3 < 6 and all(board[chr(col + k + 65)][row + k] == color for k in range(4))) or\n                        (col + 3 < 7 and row - 3 >= 0 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n    def check_winner():\n        for col in COLUMNS:\n            for row in ROWS:\n                color = grid[col][row]\n                if color is None:\n                    continue\n                \n                # Check horizontal\n                if col <= 'D' and all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                    return color\n                \n                # Check vertical\n                if row <= 2 and all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                    return color\n                \n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                    return color\n                \n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                    return color\n                \n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner.split('_')[1]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(7):\n            for j in range(6):\n                if j < 3 and all(board[chr(i + 65)][j + k] == color for k in range(4)):\n                    return color\n                if i < 4 and all(board[chr(i + k + 65)][j] == color for k in range(4)):\n                    return color\n                if i < 4 and j < 3 and all(board[chr(i + k + 65)][j + k] == color for k in range(4)):\n                    return color\n                if i < 4 and j > 2 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(column) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A')) + 1):\n                        if all(board[chr(ord('A') + c + i)][row] == board[col][row] for i in range(4)):\n                            return board[col][row]\n                    # Check diagonal (down-right)\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal (down-left)\n                    if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in [(c, r) for c in 'ABCDEFG' for r in range(6) if board[c][r] == color]:\n                            count = 1\n                            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                                for step in range(1, 4):\n                                    c, r = chr(ord(col) + direction[0] * step), row + direction[1] * step\n                                    if 0 <= r < 6 and c in board and board[c][r] == color:\n                                        count += 1\n                                    else:\n                                        break\n                                if count >= 4:\n                                    return color\n                                count = 1  # reset count for the next direction\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (0 <= r < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(color):\n                    return color\n                break\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (col in 'ABCD' and all(board[chr(ord(col) + i)][row] == color for i in range(4))) or \\\n                       (row <= 2 and all(board[col][row + i] == color for i in range(4))) or \\\n                       (col in 'ABCD' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4))) or \\\n                       (col in 'ABCD' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((i for i in range(6) if board[col][i] is None), None)\n        if row is not None:\n            board[col][row] = color\n            player_moves[color].append((col, row))\n            if check_winner(player_moves[color]):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    for col, row in positions:\n        if (check_direction(positions, col, row, 1, 0) or  # horizontal\n            check_direction(positions, col, row, 0, 1) or  # vertical\n            check_direction(positions, col, row, 1, 1) or  # diagonal \\\n            check_direction(positions, col, row, 1, -1)):  # diagonal /\n            return True\n    return False\n\ndef check_direction(positions, col, row, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        new_col = chr(ord(col) + delta_col * step)\n        new_row = row + delta_row * step\n        if new_col in 'ABCDEFG' and new_row in range(6) and (new_col, new_row) in positions:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = players[color]\n        \n        if check_winner(board, players[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, col, row, player):\n                    return True\n    return False\n\ndef check_direction(board, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d_col, d_row in directions:\n        count = 0\n        for i in range(4):\n            new_col = chr(ord(col) + d_col * i)\n            new_row = row + d_row * i\n            \n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == player:\n                count += 1\n            else:\n                break\n        \n        if count == 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            new_col = chr(ord(col) + d[0] * i)\n            new_row = row + d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        for i in range(1, 4):\n            new_col = chr(ord(col) - d[0] * i)\n            new_row = row - d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    color = board[c][r]\n\n                    # Check horizontal\n                    if c <= 'D' and all(board[c][r] == color for c in 'DEFG'):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[c][r] == color for r in range(r, r + 4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[c][r] == color for c, r in zip('DEFG', range(r, r - 4, -1))):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[c][r] == color for c, r in zip('DEFG', range(r, r + 4))):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                \n                color = board[col][row]\n                \n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                    return color\n                \n                # Check vertical\n                if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                    return color\n                \n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                    return color\n                \n                # Check diagonal /\n                if col >= 'D' and row <= 2 and all(board[chr(ord(col)-i)][row+i] == color for i in range(4)):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        if check_winner(board, player):\n            return player.split('_')[1]\n\n    return \"Draw\"\n\ndef check_winner(board, player):\n    positions = [(col, row) for col in board for row in ROWS if board[col][row] == player]\n    \n    for pos in positions:\n        if (check_direction(pos, 1, 0, board, player) or  # Horizontal\n            check_direction(pos, 0, 1, board, player) or  # Vertical\n            check_direction(pos, 1, 1, board, player) or  # Diagonal /\n            check_direction(pos, 1, -1, board, player)):   # Diagonal \\\n            return True\n    return False\n\ndef check_direction(pos, delta_col, delta_row, board, player):\n    count = 1\n    for direction in (1, -1):\n        for step in range(1, 4):\n            col = chr(ord(pos[0]) + delta_col * step * direction)\n            row = pos[1] + delta_row * step * direction\n            if col in board and 0 <= row < 6 and board[col][row] == player:\n                count += 1\n            else:\n                break\n    return count >= 4\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for color_check in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board['ABCDEFG'[col]][row] == color_check:\n                        # Horizontal\n                        if col <= 3 and all(board['ABCDEFG'[col + i]][row] == color_check for i in range(4)):\n                            return color_check\n                        # Vertical\n                        if row <= 2 and all(board['ABCDEFG'[col]][row + i] == color_check for i in range(4)):\n                            return color_check\n                        # Diagonal \\\n                        if col <= 3 and row <= 2 and all(board['ABCDEFG'[col + i]][row + i] == color_check for i in range(4)):\n                            return color_check\n                        # Diagonal /\n                        if col <= 3 and row >= 3 and all(board['ABCDEFG'[col + i]][row - i] == color_check for i in range(4)):\n                            return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in [1, -1]:\n            x, y = ord(col) - ord('A'), row\n            while 0 <= x + step * dx < 7 and 0 <= y + step * dy < 6:\n                if board[chr(x + step * dx + ord('A'))][y + step * dy] == color:\n                    count += 1\n                else:\n                    break\n                x += step * dx\n                y += step * dy\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return True\n        return False\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                if check_winner(color):\n                    return color\n                break\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < len(board[x]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (\n                        check_win(board, col, row, board[col][row]) or \n                        check_win(board, col, row, board[col][row], horizontal=True) or\n                        check_win(board, col, row, board[col][row], diagonal=True) or\n                        check_win(board, col, row, board[col][row], anti_diagonal=True)\n                    ):\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_win(board, col, row, color, horizontal=False, diagonal=False, anti_diagonal=False):\n    if horizontal:\n        count = 0\n        for c in range(7):\n            if board[chr(c + 65)][row] == color:  # 65 is the ASCII for 'A'\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n    elif diagonal:\n        count = 0\n        for d in range(-3, 1):\n            if 0 <= row + d < 6 and 0 <= ord(col) - 65 + d < 7:\n                if board[chr(ord(col) + d)][row + d] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n    elif anti_diagonal:\n        count = 0\n        for d in range(-3, 1):\n            if 0 <= row - d < 6 and 0 <= ord(col) - 65 + d < 7:\n                if board[chr(ord(col) + d)][row - d] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n    else:\n        count = 0\n        for r in range(6):\n            if board[col][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for row in range(6):\n            if board[col][row] == color:\n                # Check vertical\n                if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                    return color\n                # Check horizontal\n                if any(all(board[COLUMNS[i]][row] == color for i in range(j, j + 4))\n                       for j in range(len(COLUMNS) - 3)):\n                    return color\n                # Check diagonal (down-right)\n                if row <= 2 and col <= 'D' and all(board[COLUMNS[ord(col) - ord('A') + k]][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal (down-left)\n                if row <= 2 and col >= 'D' and all(board[COLUMNS[ord(col) - ord('A') - k]][row + k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 3:\n            for i in range(len(board[column]) - 3):\n                if board[column][i] == board[column][i + 1] == board[column][i + 2] == board[column][i + 3]:\n                    return board[column][i]\n    \n    for col in board:\n        for i in range(len(board[col])):\n            if i < len(board[col]) - 3:\n                if board[col][i] == board[col][i + 1] == board[col][i + 2] == board[col][i + 3]:\n                    return board[col][i]\n    \n    for i in range(7):\n        for j in range(6):\n            if j < 3:\n                if i < 4 and len(board['ABCDEFG'[i]]) > j and len(board['ABCDEFG'[i + 1]]) > j and len(board['ABCDEFG'[i + 2]]) > j and len(board['ABCDEFG'[i + 3]]) > j:\n                    if (board['ABCDEFG'[i]][j] == board['ABCDEFG'[i + 1]][j] == \n                        board['ABCDEFG'[i + 2]][j] == board['ABCDEFG'[i + 3]][j]):\n                        return board['ABCDEFG'[i]][j]\n                \n            if j > 2:\n                if i < 4 and len(board['ABCDEFG'[i]]) > j and len(board['ABCDEFG'[i + 1]]) > j and len(board['ABCDEFG'[i + 2]]) > j and len(board['ABCDEFG'[i + 3]]) > j:\n                    if (board['ABCDEFG'[i]][j] == board['ABCDEFG'[i + 1]][j] == \n                        board['ABCDEFG'[i + 2]][j] == board['ABCDEFG'[i + 3]][j]):\n                        return board['ABCDEFG'[i]][j]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                if col in board:\n                    for row in range(6):\n                        if board[col][row] == color:\n                            # Check vertical\n                            if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                                return color\n                            # Check horizontal\n                            if col in board and all(board[chr(ord(col) + i)][row] == color for i in range(4) if chr(ord(col) + i) in board):\n                                return color\n                            # Check diagonal \\\n                            if row <= 2 and col in board and all(board[chr(ord(col) + i)][row + i] == color for i in range(4) if chr(ord(col) + i) in board):\n                                return color\n                            # Check diagonal /\n                            if row >= 3 and col in board and all(board[chr(ord(col) + i)][row - i] == color for i in range(4) if chr(ord(col) + i) in board):\n                                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal down right\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal down left\n                        if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for move in moves:\n        if check_directions(move, moves):\n            return True\n    return False\n\ndef check_directions(start, moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for direction in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                new_col = chr(ord(start[0]) + direction[0] * step * i)\n                new_row = start[1] + direction[1] * step * i\n                if (new_col, new_row) in moves:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] is None:\n                    continue\n                color = grid[column][row]\n                # Check vertical\n                if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                    return color\n                # Check horizontal\n                if column <= 'D' and all(grid[chr(ord(column) + k)][row] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column <= 'D' and row >= 3 and all(grid[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(grid[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner is None:\n        return \"Draw\"\n    return winner\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        # Check for win\n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        # Check in the positive direction\n        for i in range(1, 4):\n            x, y = ord(col) - ord('A') + i * dx, row + i * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        # Check in the negative direction\n        for i in range(1, 4):\n            x, y = ord(col) - ord('A') - i * dx, row - i * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    # Check horizontal\n                    if c <= 3 and all(board['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if c <= 3 and r <= 2 and all(board['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal up-right\n                    if c <= 3 and r >= 3 and all(board['ABCDEFG'[c+i]][r-i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player] += 1\n                break\n        \n        # Check for win condition\n        for player in ['Red', 'Yellow']:\n            if check_winner(board, player):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == player:\n                if check_direction(board, column, row, player, 1, 0) or \\\n                   check_direction(board, column, row, player, 0, 1) or \\\n                   check_direction(board, column, row, player, 1, 1) or \\\n                   check_direction(board, column, row, player, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, column, row, player, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        col = chr(ord(column) + delta_col * i)\n        r = row + delta_row * i\n        if col in board and 0 <= r < 6 and board[col][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    for d_col, d_row in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for direction in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d_col * direction * i)\n                new_row = row + d_row * direction * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (i + 3 < 7 and all(board[chr(ord('A') + i + k)][j] == color for k in range(4))) or \\\n                       (j + 3 < 6 and all(board[chr(ord('A') + i)][j + k] == color for k in range(4))) or \\\n                       (i + 3 < 7 and j + 3 < 6 and all(board[chr(ord('A') + i + k)][j + k] == color for k in range(4))) or \\\n                       (i + 3 < 7 and j - 3 >= 0 and all(board[chr(ord('A') + i + k)][j - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = player\n                player_moves[player].append((col, row))\n                break\n                \n        # Check for winner\n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    positions = set(moves)\n    for pos in moves:\n        col, row = pos\n        if all((chr(c), r) in positions for c in range(ord(col), ord(col) + 4) for r in [row]) or \\\n           all((col, r) in positions for r in range(row, row + 4)) or \\\n           all((chr(ord(col) + k), row + k) in positions for k in range(4)) or \\\n           all((chr(ord(col) + k), row - k) in positions for k in range(4)):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player].append((column, row))\n                break\n        \n        for player in ['Red', 'Yellow']:\n            if check_winner(player_moves[player]):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for col, row in moves:\n        for d in directions:\n            count = 1\n            for i in range(1, 4):\n                if (chr(ord(col) + d[0] * i), row + d[1] * i) in moves:\n                    count += 1\n                else:\n                    break\n            for i in range(1, 4):\n                if (chr(ord(col) - d[0] * i), row - d[1] * i) in moves:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a win after each move\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    if (r <= 2 and all(board[c][r + i] == color for i in range(4))) or \\\n                       (c <= 'D' and all(board[chr(ord(c) + i)][r] == color for i in range(4))) or \\\n                       (c <= 'D' and r <= 2 and all(board[chr(ord(c) + i)][r + i] == color for i in range(4))) or \\\n                       (c >= 'D' and r <= 2 and all(board[chr(ord(c) - i)][r + i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(65 + i)][j] == color:\n                        if (i <= 3 and all(board[chr(65 + i + k)][j] == color for k in range(4))) or \\\n                           (j <= 2 and all(board[chr(65 + i)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == color for k in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or \n                    check_direction(board, col, row, 0, 1, color) or \n                    check_direction(board, col, row, 1, 1, color) or \n                    check_direction(board, col, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, d_col, d_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col in board:\n                for r in range(6):\n                    if board[col][r] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            c = chr(ord(col) + direction[0] * step)\n                            row = r + direction[1] * step\n                            if c in board and 0 <= row < 6 and board[c][row] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in COLUMNS:\n        for row in ROWS:\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c = chr(ord(col) + dc * step)\n            r = row + dr * step\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + d[0] * step)\n            r = row + d[1] * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n\n        # Check for a win condition\n        for line in LINES:\n            if any((c, r) in line for c in grid for r in range(6) if grid[c][r] == color):\n                if all(grid[c][r] == color for (c, r) in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[pos[0]][pos[1]] == color for pos in line if pos[0] in board and pos[1] < 6):\n                return color\n\n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal connections\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # vertical\n                    check_direction(board, col, row, 1, 1, color) or  # diagonal /\n                    check_direction(board, col, row, 1, -1, color)):  # diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, col, row, d_col, d_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            # Check vertical\n            for c in 'ABCDEFG':\n                count = 0\n                for r in range(6):\n                    if board[c][r] == color_check:\n                        count += 1\n                        if count == 4:\n                            return color_check\n                    else:\n                        count = 0\n\n            # Check horizontal\n            for r in range(6):\n                count = 0\n                for c in 'ABCDEFG':\n                    if board[c][r] == color_check:\n                        count += 1\n                        if count == 4:\n                            return color_check\n                    else:\n                        count = 0\n\n            # Check diagonal (bottom-left to top-right)\n            for c in range(4):\n                for r in range(3, 6):\n                    if (board['ABCDEFG'[c]][r] == color_check and\n                        board['ABCDEFG'[c+1]][r-1] == color_check and\n                        board['ABCDEFG'[c+2]][r-2] == color_check and\n                        board['ABCDEFG'[c+3]][r-3] == color_check):\n                        return color_check\n\n            # Check diagonal (top-left to bottom-right)\n            for c in range(4):\n                for r in range(3):\n                    if (board['ABCDEFG'[c]][r] == color_check and\n                        board['ABCDEFG'[c+1]][r+1] == color_check and\n                        board['ABCDEFG'[c+2]][r+2] == color_check and\n                        board['ABCDEFG'[c+3]][r+3] == color_check):\n                        return color_check\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (j <= 2 and all(board[chr(i + ord('A'))][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and all(board[chr(i + k + ord('A'))][j] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(i + k + ord('A'))][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(i + k + ord('A'))][j - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6)):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[column][row - i] == color) for i in range(4)):\n                    return color\n                    \n                # Check vertical\n                if len(board[column]) >= 4:\n                    if all((board[column][row] == color) for _ in range(4)):\n                        return color\n                \n                # Check diagonals\n                for dx, dy in [(1, 1), (1, -1)]:\n                    count = 0\n                    for step in range(-3, 4):\n                        x = board[column][row][0] + dx * step\n                        y = row + dy * step\n                        if 0 <= y < 6 and x in board and board[x][y] == color:\n                            count += 1\n                        else:\n                            count = 0\n                        if count >= 4:\n                            return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y >= 0 and y < 6 and x in board and board[x][y] == color):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color.capitalize()\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if row >= 3 and all(board[column][row - i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for col in 'ABCDEFG':\n        if col in board and len(board[col]) > row and board[col][row] == color:\n            count = 0\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) > row and board[c][row] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n    \n    # Check diagonal /\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if all(board[chr(ord('A') + c + i)][row - i] == color for i in range(4) if 0 <= row - i < 6 and 0 <= c + i < 7):\n            return True\n\n    # Check diagonal \\\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if all(board[chr(ord('A') + c + i)][row + i] == color for i in range(4) if 0 <= row + i < 6 and 0 <= c + i < 7):\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) + k]][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) - k]][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for column in grid:\n            for row in range(6):\n                if grid[column][row] == color:\n                    if ((column, row) in LINES or \n                        (column, row + 1) in LINES or \n                        (column, row + 2) in LINES or \n                        (column, row + 3) in LINES):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (row <= 2 and all(board[col][row+k] == board[col][row] for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col)+k)][row] == board[col][row] for k in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(board[chr(ord(col)+k)][row+k] == board[col][row] for k in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(board[chr(ord(col)+k)][row-k] == board[col][row] for k in range(4))):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[1]\n                    c = board.keys().index(col) + d * i * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row - 4, -1))):\n                            return color\n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for d in (1, -1):\n            for step in range(1, 4):\n                r = row + d * dr * step\n                c = col_index(col) + d * dc * step\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n\ndef col_index(col):\n    return 'ABCDEFG'.index(col)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(column) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A')) + 1):\n                        if all(board[chr(ord('A') + c + i)][row] == board[col][row] for i in range(4)):\n                            return board[col][row]\n                    # Check diagonal (down-right)\n                    if row <= 2 and ord(col) <= 3 and all(board[chr(ord(col) + i)][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal (down-left)\n                    if row <= 2 and ord(col) >= 3 and all(board[chr(ord(col) - i)][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    if (col in 'ABCDEFG' and all(board[c][row] == color for c in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4] if c in board) or\n                        row <= 2 and all(board[col][r] == color for r in range(row, row + 4)) or\n                        row <= 2 and all(board[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)) or\n                        row >= 3 and all(board[COLUMNS[COLUMNS.index(col) + k]][row - k] == color for k in range(4))):\n                        return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(color):\n                    return color\n                break\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if c + direction[0] * 3 < 7 and r + direction[1] * 3 < 6 and r + direction[1] * 3 >= 0:\n                        if board[chr(c + ord('A'))][r] == color and \\\n                           board[chr(c + ord('A') + direction[0])][r + direction[1]] == color and \\\n                           board[chr(c + ord('A') + 2 * direction[0])][r + 2 * direction[1]] == color and \\\n                           board[chr(c + ord('A') + 3 * direction[0])][r + 3 * direction[1]] == color:\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = players[color]\n        \n        if check_winner(board, players[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, col, row, player):\n                    return True\n    return False\n\ndef check_direction(board, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d_col, d_row in directions:\n        count = 0\n        for i in range(4):\n            new_col = chr(ord(col) + d_col * i)\n            new_row = row + d_row * i\n            \n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == player:\n                count += 1\n            else:\n                break\n        \n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            new_col = chr(ord(col) + d[0] * i)\n            new_row = row + d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        for i in range(1, 4):\n            new_col = chr(ord(col) - d[0] * i)\n            new_row = row - d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row]:\n                    color = grid[col][row]\n                    # Check horizontal\n                    if col in 'ABCDE' and all(grid[col][row] == color for col in 'ABCDEFG'[grid[col].index(color):grid[col].index(color) + 4]):\n                        return color\n                    # Check vertical\n                    if row < 3 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col in 'ABCD' and row < 3 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col in 'ABCDE' and row < 3 and all(grid[chr(ord(col) + k)][row + 3 - k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n    for color in [\"Red\", \"Yellow\"]:\n        for i in range(len(COLUMNS)):\n            for j in range(len(ROWS)):\n                if (i <= len(COLUMNS) - 4 and\n                    all(grid[COLUMNS[i + k]][j] == color for k in range(4))):\n                    return color\n                if (j <= len(ROWS) - 4 and\n                    all(grid[COLUMNS[i]][j + k] == color for k in range(4))):\n                    return color\n                if (i <= len(COLUMNS) - 4 and j <= len(ROWS) - 4 and\n                    all(grid[COLUMNS[i + k]][j + k] == color for k in range(4))):\n                    return color\n                if (i <= len(COLUMNS) - 4 and j >= 3 and\n                    all(grid[COLUMNS[i + k]][j - k] == color for k in range(4))):\n                    return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            # Check vertical\n            for col in COLUMNS:\n                count = 0\n                for row in ROWS:\n                    count = count + 1 if board[col][row] == color_check else 0\n                    if count == 4:\n                        return color_check\n            \n            # Check horizontal\n            for row in ROWS:\n                count = 0\n                for col in COLUMNS:\n                    count = count + 1 if board[col][row] == color_check else 0\n                    if count == 4:\n                        return color_check\n            \n            # Check diagonal /\n            for col in range(len(COLUMNS) - 3):\n                for row in range(3, len(ROWS)):\n                    if all(board[COLUMNS[col + k]][row - k] == color_check for k in range(4)):\n                        return color_check\n            \n            # Check diagonal \\\n            for col in range(len(COLUMNS) - 3):\n                for row in range(len(ROWS) - 3):\n                    if all(board[COLUMNS[col + k]][row + k] == color_check for k in range(4)):\n                        return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) - 61]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        # Check for win\n        if len(board[col]) >= 4:\n            # Vertical Check\n            if board[col][-4:] == [color] * 4:\n                return color.split('_')[1]\n\n            # Horizontal Check\n            for c in 'ABCDEFG':\n                if len(board[c]) >= 4 and all(board[c][i] == color for i in range(max(0, len(board[c])-4), len(board[c]))):\n                    return color.split('_')[1]\n\n            # Diagonal Check (Top-Left to Bottom-Right)\n            for r in range(6):\n                for c in range(4):\n                    if (r < len(board[COLUMNS[c]]) and r < len(board[COLUMNS[c + 1]]) and\n                        r < len(board[COLUMNS[c + 2]]) and r < len(board[COLUMNS[c + 3]])):\n                        if (board[COLUMNS[c]][r] == color and board[COLUMNS[c + 1]][r + 1] == color and\n                                board[COLUMNS[c + 2]][r + 2] == color and board[COLUMNS[c + 3]][r + 3] == color):\n                            return color.split('_')[1]\n            \n            # Diagonal Check (Bottom-Left to Top-Right)\n            for r in range(3, 6):\n                for c in range(4):\n                    if (r < len(board[COLUMNS[c]]) and r < len(board[COLUMNS[c + 1]]) and\n                        r < len(board[COLUMNS[c + 2]]) and r < len(board[COLUMNS[c + 3]])):\n                        if (board[COLUMNS[c]][r] == color and board[COLUMNS[c + 1]][r - 1] == color and\n                                board[COLUMNS[c + 2]][r - 2] == color and board[COLUMNS[c + 3]][r - 3] == color):\n                            return color.split('_')[1]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        # Check for a winner after each move\n        for color in ['Red', 'Yellow']:\n            # Check vertical\n            for col in board:\n                if board[col][-4:].count(color) == 4:\n                    return color\n            \n            # Check horizontal and diagonals\n            for row in range(6):\n                for col in range(4):\n                    if all((board[c][row] if row < len(board[c]) else None) == color for c in 'ABCDEFG'[col:col+4]):\n                        return color\n                for col in range(4):\n                    if all((board[c][row + k] if row + k < len(board[c]) else None) == color for k, c in enumerate('ABCDEFG'[col:col+4])):\n                        return color\n            \n            # Check diagonal /\n            for row in range(3, 6):\n                for col in range(4):\n                    if all((board[c][row - k] if row - k < len(board[c]) else None) == color for k, c in enumerate('ABCDEFG'[col:col+4])):\n                        return color\n            \n            # Check diagonal \\\n            for row in range(3):\n                for col in range(4):\n                    if all((board[c][row + k] if row + k < len(board[c]) else None) == color for k, c in enumerate('ABCDEFG'[col:col+4])):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    def check_winner(player):\n        for line in LINES:\n            if all(board[x][y] == player for x, y in line if x in board and y in ROWS):\n                return True\n        return False\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = player\n                if check_winner(player):\n                    return player.split('_')[1]\n                break\n    return \"Draw\"\n\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win after each move\n        if len(board[column]) >= 4:\n            last_color = board[column][-4]\n            if all(color == last_color for color in board[column][-4:]):\n                return last_color\n\n        for i in range(7):\n            if len(board[COLUMNS[i]]) >= 4:\n                for j in range(len(board[COLUMNS[i]]) - 3):\n                    if all(board[COLUMNS[i]][j+k] == board[COLUMNS[i]][j] for k in range(4)):\n                        return board[COLUMNS[i]][j]\n\n        for i in range(4):\n            for j in range(6):\n                if j < len(board[COLUMNS[i]]) and j < len(board[COLUMNS[i+1]]) and j < len(board[COLUMNS[i+2]]) and j < len(board[COLUMNS[i+3]]):\n                    if (board[COLUMNS[i]][j] == board[COLUMNS[i+1]][j] == \n                        board[COLUMNS[i+2]][j] == board[COLUMNS[i+3]][j]):\n                        return board[COLUMNS[i]][j]\n\n        for i in range(4):\n            for j in range(3, 6):\n                if j < len(board[COLUMNS[i]]) and j-1 < len(board[COLUMNS[i+1]]) and j-2 < len(board[COLUMNS[i+2]]) and j-3 < len(board[COLUMNS[i+3]]):\n                    if (board[COLUMNS[i]][j] == board[COLUMNS[i+1]][j-1] == \n                        board[COLUMNS[i+2]][j-2] == board[COLUMNS[i+3]][j-3]):\n                        return board[COLUMNS[i]][j]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [] for column in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if len(board[column]) < 6:\n            board[column].append(color)\n\n        for line in LINES:\n            if all(pos in [(c, r) for c in board for r in board[c]] for pos in line):\n                colors = {pos[1] for pos in line if pos in [(c, r) for c in board for r in board[c]]}\n                if len(colors) == 1:\n                    return colors.pop()\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (row <= 2 and all(board[col][row+k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(board[chr(ord(col)+k)][row+k] == color for k in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(board[chr(ord(col)+k)][row-k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    def check_winner():\n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == player for col, row in line if 0 <= row < 6):\n                    return player\n        return None\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = player\n                if check_winner():\n                    return player\n                break\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col + 3 < 7 and\n                        all(board[chr(c)][row] == color for c in range(ord('A') + col, ord('A') + col + 4))):\n                        return color\n                    if (row + 3 < 6 and\n                        all(board[chr(col + ord('A'))][r] == color for r in range(row, row + 4))):\n                        return color\n                    if (col + 3 < 7 and row + 3 < 6 and\n                        all(board[chr(c)][row + k] == color for k, c in enumerate(range(ord('A') + col, ord('A') + col + 4)))):\n                        return color\n                    if (col + 3 < 7 and row - 3 >= 0 and\n                        all(board[chr(c)][row - k] == color for k, c in enumerate(range(ord('A') + col, ord('A') + col + 4)))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (0 <= y < 6)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col_index := 'ABCDEFG'.index(col) <= 3:\n                            if all(board['ABCDEFG'[col_index+k]][row] == color for k in range(4)):\n                                return color\n                        # Check diagonal \\\n                        if row <= 2 and col_index <= 3:\n                            if all(board['ABCDEFG'[col_index+k]][row+k] == color for k in range(4)):\n                                return color\n                        # Check diagonal /\n                        if row >= 3 and col_index <= 3:\n                            if all(board['ABCDEFG'[col_index+k]][row-k] == color for k in range(4)):\n                                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(65 + col)][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[chr(65 + col)][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 3 and all(board[chr(65 + col + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 3 and row >= 3 and all(board[chr(65 + col + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 3 and row <= 2 and all(board[chr(65 + col + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check horizontal\n                    if col in COLUMNS and all(grid[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col)+4) if i < len(COLUMNS)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col in COLUMNS and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col)+i]][row+i] == color for i in range(4) if COLUMNS.index(col)+i < len(COLUMNS)):\n                        return color\n                    # Check diagonal \\\n                    if col in COLUMNS and row >= 3 and all(grid[COLUMNS[COLUMNS.index(col)+i]][row-i] == color for i in range(4) if COLUMNS.index(col)+i < len(COLUMNS)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] is None:\n                    continue\n                if (\n                    c + 3 < 7 and all(board[chr(c + k + 65)][r] == board[chr(c + 65)][r] for k in range(4)) or\n                    r + 3 < 6 and all(board[chr(c + 65)][r + k] == board[chr(c + 65)][r] for k in range(4)) or\n                    c + 3 < 7 and r + 3 < 6 and all(board[chr(c + k + 65)][r + k] == board[chr(c + 65)][r] for k in range(4)) or\n                    c + 3 < 7 and r - 3 >= 0 and all(board[chr(c + k + 65)][r - k] == board[chr(c + 65)][r] for k in range(4))\n                ):\n                    return board[chr(c + 65)][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:\n                        if (col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4)) or\n                            row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)) or\n                            col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)) or\n                            col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == player:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == player for i in range(4)):\n                        return player\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == player for i in range(4)):\n                        return player\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - i)][row + i] == player for i in range(4)):\n                        return player\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == player for i in range(4)):\n                        return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n                \n        # Check for a winner\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    current_color = board[chr(65 + c)][r]\n                    \n                    # Check horizontal\n                    if c + 3 < 7 and all(board[chr(65 + c + k)][r] == current_color for k in range(4)):\n                        return current_color\n                    \n                    # Check vertical\n                    if r + 3 < 6 and all(board[chr(65 + c)][r + k] == current_color for k in range(4)):\n                        return current_color\n                    \n                    # Check diagonal /\n                    if c + 3 < 7 and r - 3 >= 0 and all(board[chr(65 + c + k)][r - k] == current_color for k in range(4)):\n                        return current_color\n                    \n                    # Check diagonal \\\n                    if c + 3 < 7 and r + 3 < 6 and all(board[chr(65 + c + k)][r + k] == current_color for k in range(4)):\n                        return current_color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    moves_set = set(moves)\n    for (col, row) in moves:\n        if (check_direction(moves_set, col, row, 1, 0) or  # horizontal\n                check_direction(moves_set, col, row, 0, 1) or  # vertical\n                check_direction(moves_set, col, row, 1, 1) or  # diagonal \\\n                check_direction(moves_set, col, row, 1, -1)):  # diagonal /\n            return True\n    return False\n\ndef check_direction(moves_set, col, row, delta_col, delta_row):\n    color = (col, row)\n    count = 1\n    for step in range(1, 4):\n        next_pos = (chr(ord(col) + delta_col * step), row + delta_row * step)\n        if next_pos in moves_set:\n            count += 1\n        else:\n            break\n\n    for step in range(1, 4):\n        next_pos = (chr(ord(col) - delta_col * step), row - delta_row * step)\n        if next_pos in moves_set:\n            count += 1\n        else:\n            break\n\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if 0 <= y < 6):\n                    return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_turn = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, player_color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player_color\n        \n        # Check for a winner\n        for color in ['Red', 'Yellow']:\n            if check_winner(board, color):\n                return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Create a list of positions occupied by the player\n    positions = [(c, r) for c in board for r in range(6) if board[c][r] == color]\n    \n    # Check all possible winning combinations\n    for line in LINES:\n        if line <= set(positions):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if check_direction(board, column, row, color):\n                    return True\n    return False\n\ndef check_direction(board, start_column, start_row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for step in range(1, 4):\n            col = chr(ord(start_column) + d_col * step)\n            row = start_row + d_row * step\n            if col in board and 0 <= row < 6 and board[col][row] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            col = chr(ord(start_column) - d_col * step)\n            row = start_row - d_row * step\n            if col in board and 0 <= row < 6 and board[col][row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for r in range(6):\n            for c in range(7):\n                if board[COLUMNS[c]][r] == color:\n                    if (c <= 3 and all(board[COLUMNS[c + i]][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[COLUMNS[c]][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[COLUMNS[c + i]][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[COLUMNS[c + i]][r - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + d[0] * step)\n            r = row + d[1] * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                new_col = chr(ord(col) + step * d_col * i)\n                new_row = row + step * d_row * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Check for vertical\n                    if r <= 2 and all(board[c][r+i] == board[c][r] for i in range(4)):\n                        return board[c][r]\n                    # Check for horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == board[c][r] for i in range(4)):\n                        return board[c][r]\n                    # Check for diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c)+i)][r+i] == board[c][r] for i in range(4)):\n                        return board[c][r]\n                    # Check for diagonal /\n                    if c <= 'D' and r >= 3 and all(board[chr(ord(c)+i)][r-i] == board[c][r] for i in range(4)):\n                        return board[c][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    for d_col, d_row in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for direction in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d_col * direction * i)\n                new_row = row + d_row * direction * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, color, col, row):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for d in [1, -1]:\n            for step in range(1, 4):\n                c, r = chr(ord(col) + d * step * dc), row + d * step * dr\n                if 0 <= r < 6 and c in board and board[c][r] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:\n                    if (r <= 2 and all(board[chr(65 + c)][r + k] == color for k in range(4)) or\n                        c <= 3 and all(board[chr(65 + c + k)][r] == color for k in range(4)) or\n                        r <= 2 and c <= 3 and all(board[chr(65 + c + k)][r + k] == color for k in range(4)) or\n                        r >= 3 and c <= 3 and all(board[chr(65 + c + k)][r - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check vertical\n                if row <= 2 and all(board[column][row + i] == color for i in range(4)):\n                    return color\n                # Check horizontal\n                for col_offset in range(4):\n                    if column <= 'D' and all(board[chr(ord(column) + i)][row] == color for i in range(4)):\n                        return color\n                # Check diagonal /\n                if row >= 3 and column <= 'D' and all(board[chr(ord(column) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal \\\n                if row <= 2 and column <= 'D' and all(board[chr(ord(column) + i)][row + i] == color for i in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a win after each move\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Check horizontal\n                    if c <= 'D' and all(board[c][r] == board[chr(ord(c) + i)][r] for i in range(4)):\n                        return board[c][r]\n                    # Check vertical\n                    if r <= 2 and all(board[c][r] == board[c][r + i] for i in range(4)):\n                        return board[c][r]\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[c][r] == board[chr(ord(c) + i)][r - i] for i in range(4)):\n                        return board[c][r]\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[c][r] == board[chr(ord(c) + i)][r + i] for i in range(4)):\n                        return board[c][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a win\n        for i in range(7):\n            for j in range(6):\n                if board[chr(65 + i)][j] is not None:\n                    if (i <= 3 and all(board[chr(65 + i + k)][j] == board[chr(65 + i)][j] for k in range(4))) or \\\n                       (j <= 2 and all(board[chr(65 + i)][j + k] == board[chr(65 + i)][j] for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == board[chr(65 + i)][j] for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == board[chr(65 + i)][j] for k in range(4))):\n                        return board[chr(65 + i)][j]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for victory\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal up-right\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + d[0] * step)\n            r = row + d[1] * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[pos[0]][pos[1]] == color for pos in line if pos[1] < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal connections\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # vertical\n                    check_direction(board, col, row, 1, 1, color) or  # diagonal /\n                    check_direction(board, col, row, 1, -1, color)):  # diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, col, row, d_col, d_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [\n            [(0, 1), (0, -1)],  # vertical\n            [(1, 0), (-1, 0)],  # horizontal\n            [(1, 1), (-1, -1)], # diagonal \\\n            [(1, -1), (-1, 1)], # diagonal /\n        ]:\n            count = 1\n            for d in direction:\n                r, c = row, ord(col) - ord('A')\n                while True:\n                    r += d[0]\n                    c += d[1]\n                    if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n        \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for move in moves:\n        x, y = move\n        for dx, dy in directions:\n            count = 1\n            for step in range(1, 4):\n                if (chr(ord(x) + step * dx), y + step * dy) in moves:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                if (chr(ord(x) - step * dx), y - step * dy) in moves:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in board:\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                    return color\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (j <= 2 and all(board[chr(i + ord('A'))][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and all(board[chr(i + k + ord('A'))][j] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(i + k + ord('A'))][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(i + k + ord('A'))][j - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                player = board[col][row]\n\n                # Check vertical\n                if row <= 2 and all(board[col][row + k] == player for k in range(4)):\n                    return player\n\n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + k)][row] == player for k in range(4)):\n                    return player\n\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == player for k in range(4)):\n                    return player\n\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == player for k in range(4)):\n                    return player\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if any(board[c][r] != color for c, r in line):\n                continue\n            return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < 6)):\n                return color\n    \n    return \"Draw\"\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (y < len(board[x])) and (board[x][y] is not None)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and all(color == colors[0] for color in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (all(board[col][row + k] == color for k in range(4) if row + k < 6) or\n                                all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4) if i < len(COLUMNS)) or\n                                all(board[COLUMNS[COLUMNS.index(col) + k][row + k] == color for k in range(4) if COLUMNS.index(col) + k < len(COLUMNS) and row + k < 6) or\n                                all(board[COLUMNS[COLUMNS.index(col) + k][row - k] == color for k in range(4) if COLUMNS.index(col) + k < len(COLUMNS) and row - k >= 0)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i + 3 < 7 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j + 3 < 6 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == 'Red' for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return 'Red'\n            if all(board[c][r] == 'Yellow' for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[COLUMNS[i]][row + i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[COLUMNS[i]][row - i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for win_positions in LINES:\n        colors = {color: 0 for color in ['Red', 'Yellow']}\n        for position in win_positions:\n            col, row = position\n            if board[col][row] is not None:\n                colors[board[col][row]] += 1\n        if colors['Red'] == 4:\n            return 'Red'\n        if colors['Yellow'] == 4:\n            return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    color = board[chr(65 + c)][r]\n                    if (c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # Horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # Vertical\n                    check_direction(board, col, row, 1, 1, color) or  # Diagonal \\\n                    check_direction(board, col, row, 1, -1, color)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for d in range(4):\n        new_col = chr(ord(col) + d * delta_col)\n        new_row = row + d * delta_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal right, diagonal left\n            count = 1\n            \n            # Check in the positive direction\n            for i in range(1, 4):\n                r = row + i * direction[0]\n                c = board[column].index(color) + i * direction[1]\n                if 0 <= r < 6 and 0 <= c < 7 and board[columns[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the negative direction\n            for i in range(1, 4):\n                r = row - i * direction[0]\n                c = board[column].index(color) - i * direction[1]\n                if 0 <= r < 6 and 0 <= c < 7 and board[columns[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col])):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and col in board):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col].count(color) > 0 and (row := board[col].index(color)) in line for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            new_col = chr(ord(col) + d[0] * i)\n            new_row = row + d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        for i in range(1, 4):\n            new_col = chr(ord(col) - d[0] * i)\n            new_row = row - d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if (col in board and\n                    board[col][row] == color):\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        if check_winner(board, player):\n            return player.split('_')[1]\n\n    return \"Draw\"\n\ndef check_winner(board, player):\n    positions = [(col, row) for col in board for row in ROWS if board[col][row] == player]\n    \n    for pos in positions:\n        if any(check_direction(pos, d, board, player) for d in [(1, 0), (0, 1), (1, 1), (1, -1)]):\n            return True\n    return False\n\ndef check_direction(start, direction, board, player):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(start[0]) + direction[0] * step)\n        new_row = start[1] + direction[1] * step\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner():\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row]:\n                    color = grid[col][row]\n                    if col in COLUMNS[:-3]:\n                        if all(grid[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                            return color\n                    if row in ROWS[:-3]:\n                        if all(grid[col][j] == color for j in range(row, row + 4)):\n                            return color\n                    if col in COLUMNS[:-3] and row in ROWS[:-3]:\n                        if all(grid[COLUMNS[i]][ROWS.index(row) + i] == color for i in range(4)):\n                            return color\n                    if col in COLUMNS[:-3] and row in ROWS[3:]:\n                        if all(grid[COLUMNS[i]][ROWS.index(row) - i] == color for i in range(4)):\n                            return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner.split('_')[1]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n    for color in [\"Red\", \"Yellow\"]:\n        for i in range(len(COLUMNS)):\n            for j in range(len(ROWS)):\n                if (i <= len(COLUMNS) - 4 and\n                    all(grid[COLUMNS[i + k]][j] == color for k in range(4))):\n                    return color\n                if (j <= len(ROWS) - 4 and\n                    all(grid[COLUMNS[i]][j + k] == color for k in range(4))):\n                    return color\n                if (i <= len(COLUMNS) - 4 and j <= len(ROWS) - 4 and\n                    all(grid[COLUMNS[i + k]][j + k] == color for k in range(4))):\n                    return color\n                if (i <= len(COLUMNS) - 4 and j >= 3 and\n                    all(grid[COLUMNS[i + k]][j - k] == color for k in range(4))):\n                    return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {column: [None] * 6 for column in COLUMNS}\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for c in COLUMNS:\n            if board[c].count(color) >= 4:\n                # Check vertical\n                for r in range(3):\n                    if all(board[c][r + i] == color for i in range(4)):\n                        return color\n                # Check horizontal\n                for r in range(6):\n                    for c_start in range(4):\n                        if all(board[COLUMNS[c_start + i]][r] == color for i in range(4)):\n                            return color\n                # Check diagonal /\n                for r in range(3):\n                    for c_start in range(4):\n                        if all(board[COLUMNS[c_start + i]][r + i] == color for i in range(4)):\n                            return color\n                # Check diagonal \\\n                for r in range(3, 6):\n                    for c_start in range(4):\n                        if all(board[COLUMNS[c_start + i]][r - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        for row in reversed(ROWS):\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][COLUMNS.index(col)] == color for col, row in line if row in ROWS):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        col = COLUMNS.index(position[0])\n        color = position.split('_')[1]\n        \n        for row in reversed(ROWS):\n            if grid[row][col] == '':\n                grid[row][col] = color\n                break\n\n    def check_winner(color):\n        # Check horizontal, vertical and diagonal lines\n        for i in range(6):\n            for j in range(7):\n                if j <= 3 and all(grid[i][j+k] == color for k in range(4)):\n                    return True\n                if i <= 2 and all(grid[i+k][j] == color for k in range(4)):\n                    return True\n                if i <= 2 and j <= 3 and all(grid[i+k][j+k] == color for k in range(4)):\n                    return True\n                if i >= 3 and j <= 3 and all(grid[i-k][j+k] == color for k in range(4)):\n                    return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        col = COLUMNS.index(piece[0])\n        row = next(r for r in range(5, -1, -1) if grid[r][col] is None)\n        grid[row][col] = piece[2:]\n\n    for player in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if grid[i][j] == player:\n                    # Check horizontal\n                    if j <= 3 and all(grid[i][j+k] == player for k in range(4)):\n                        return player\n                    # Check vertical\n                    if i <= 2 and all(grid[i+k][j] == player for k in range(4)):\n                        return player\n                    # Check diagonal \\\n                    if i <= 2 and j <= 3 and all(grid[i+k][j+k] == player for k in range(4)):\n                        return player\n                    # Check diagonal /\n                    if i >= 3 and j <= 3 and all(grid[i-k][j+k] == player for k in range(4)):\n                        return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for col, row in moves:\n        if check_direction(moves, col, row, 1, 0) or check_direction(moves, col, row, 0, 1) or \\\n           check_direction(moves, col, row, 1, 1) or check_direction(moves, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, col, row, d_col, d_row):\n    count = 0\n    for i in range(-3, 4):\n        check_col = chr(ord(col) + i * d_col)\n        check_row = row + i * d_row\n        if check_col in 'ABCDEFG' and 0 <= check_row < 6 and (check_col, check_row) in moves:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [] for col in COLUMNS}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        if len(board[col]) < 6:\n            board[col].append(color)\n\n    def check_winner():\n        for col in COLUMNS:\n            for row in ROWS:\n                if (col, row) in board[col]: \n                    color = board[col][row] if row < len(board[col]) else None\n                    if color:\n                        # Check horizontal\n                        if all((col, row) in board[col] for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all((col, row+i) in board[col] for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row <= 2 and all((chr(ord(col)+i), row+i) in board[col] for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row >= 3 and all((chr(ord(col)+i), row-i) in board[col] for i in range(4)):\n                            return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in COLUMNS:\n        for row in ROWS:\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + d[0] * step)\n            new_row = row + d[1] * step\n            if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [] for col in COLUMNS}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Draw\"  # More than 42 moves case\n        \n        if check_winner(board, column, color):\n            return color.split('_')[1]\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    color = board[column][row]\n    \n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for step in range(1, 4):\n            x = ord(column) - ord('A') + dx * step\n            y = row + dy * step\n            \n            if 0 <= x < 7 and 0 <= y < 6 and len(board[chr(x + ord('A'))]) > y and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            x = ord(column) - ord('A') - dx * step\n            y = row - dy * step\n            \n            if 0 <= x < 7 and 0 <= y < 6 and len(board[chr(x + ord('A'))]) > y and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    def check_winner():\n        for col in COLUMNS:\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) + i]][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal up\n                    if col <= 'D' and row >= 3 and all(board[COLUMNS[COLUMNS.index(col) + i]][row - i] == color for i in range(4)):\n                        return color\n        return None\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                winner = check_winner()\n                if winner:\n                    return winner\n                break\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        player_moves[color] += 1\n        \n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in COLUMNS:\n        for row in ROWS:\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color, 1, 0) or \\\n                   check_direction(grid, col, row, color, 0, 1) or \\\n                   check_direction(grid, col, row, color, 1, 1) or \\\n                   check_direction(grid, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in grid and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = COLUMNS.index(position[0])\n        for row in reversed(ROWS):\n            if grid[row][column] == '':\n                grid[row][column] = position[2:]  # Get color\n                break\n\n    def check_winner(color):\n        for i in range(6):\n            for j in range(7):\n                if j + 3 < 7 and all(grid[i][j+k] == color for k in range(4)):  # Horizontal\n                    return True\n                if i + 3 < 6 and all(grid[i+k][j] == color for k in range(4)):  # Vertical\n                    return True\n                if i + 3 < 6 and j + 3 < 7 and all(grid[i+k][j+k] == color for k in range(4)):  # Diagonal \\\n                    return True\n                if i - 3 >= 0 and j + 3 < 7 and all(grid[i-k][j+k] == color for k in range(4)):  # Diagonal /\n                    return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for i in range(6):\n            for j in range(7):\n                if (j <= 3 and all(board[chr(k + 65)][i] == color for k in range(j, j + 4))) or \\\n                   (i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4))) or \\\n                   (i <= 2 and j <= 3 and all(board[chr(j + k + 65)][i + k] == color for k in range(4))) or \\\n                   (i >= 3 and j <= 3 and all(board[chr(j + k + 65)][i - k] == color for k in range(4))):\n                    return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col_index := 'ABCDEFG'.index(col) <= 3:\n                            if all(board['ABCDEFG'[col_index+k]][row] == color for k in range(4)):\n                                return color\n                        # Check diagonal \\\n                        if row <= 2 and col_index <= 3:\n                            if all(board['ABCDEFG'[col_index+k]][row+k] == color for k in range(4)):\n                                return color\n                        # Check diagonal /\n                        if row >= 3 and col_index <= 3:\n                            if all(board['ABCDEFG'[col_index+k]][row-k] == color for k in range(4)):\n                                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for player in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (i <= 3 and all(board[chr(65 + i + k)][j] == player for k in range(4))) or \\\n                       (j <= 2 and all(board[chr(65 + i)][j + k] == player for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == player for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == player for k in range(4))):\n                        return player\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] is None:\n                    continue\n                if (\n                    c <= 3 and all(board[chr(c + k + 65)][r] == board[chr(c + 65)][r] for k in range(4)) or\n                    r <= 2 and all(board[chr(c + 65)][r + k] == board[chr(c + 65)][r] for k in range(4)) or\n                    c <= 3 and r <= 2 and all(board[chr(c + k + 65)][r + k] == board[chr(c + 65)][r] for k in range(4)) or\n                    c <= 3 and r >= 3 and all(board[chr(c + k + 65)][r - k] == board[chr(c + 65)][r] for k in range(4))\n                ):\n                    return board[chr(c + 65)][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 3:\n            for i in range(len(board[column]) - 3):\n                if board[column][i] == board[column][i + 1] == board[column][i + 2] == board[column][i + 3]:\n                    return board[column][i]\n    \n    for i in range(6):\n        for column in 'ABCDEFG':\n            if len(board[column]) > i:\n                color = board[column][i]\n                \n                # Check horizontal\n                if all(len(board[C]) > i and board[C][i] == color for C in 'ABCDEFG'[list('ABCDEFG').index(column):list('ABCDEFG').index(column) + 4]):\n                    return color\n                \n                # Check vertical\n                if i <= 2 and color == (board[column][i]) and all(len(board[column]) > j and board[column][j] == color for j in range(i, i + 4)):\n                    return color\n                \n                # Check diagonal /\n                if i <= 2 and all(len(board[C]) > (i + j) and board[C][i + j] == color for j, C in enumerate('ABCDEFG'[list('ABCDEFG').index(column):list('ABCDEFG').index(column) + 4][::-1])):\n                    return color\n                \n                # Check diagonal \\\n                if i >= 3 and all(len(board[C]) > (i - j) and board[C][i - j] == color for j, C in enumerate('ABCDEFG'[list('ABCDEFG').index(column):list('ABCDEFG').index(column) + 4])):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:\n                        if (col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4)) or\n                            row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)) or\n                            col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)) or\n                            col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col <= 3 and all(board[chr(65 + col + i)][row] == color for i in range(4))) or \\\n                       (row <= 2 and all(board[chr(65 + col)][row + i] == color for i in range(4))) or \\\n                       (col <= 3 and row <= 2 and all(board[chr(65 + col + i)][row + i] == color for i in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(board[chr(65 + col + i)][row - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n                \n        # Check for a winner\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65+c)][r] is not None:  # Check if the cell is filled\n                    color = board[chr(65+c)][r]\n                    \n                    # Horizontal\n                    if c <= 3 and all(board[chr(65+k)][r] == color for k in range(c, c+4)):\n                        return color\n                    \n                    # Vertical\n                    if r <= 2 and all(board[chr(65+c)][r+k] == color for k in range(4)):\n                        return color\n                    \n                    # Diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(65+c+k)][r-k] == color for k in range(4)):\n                        return color\n                    \n                    # Diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(65+c+k)][r+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win after the current move\n        if check_winner(board, column, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]  # right, down, down-right, down-left\n\n    for dx, dy in directions:\n        count = 1  # count the current piece\n        # Check in the positive direction\n        x, y = ord(column) - ord('A'), row\n        while 0 <= x + dx < 7 and 0 <= y + dy < 6 and len(board[chr(x + dx + ord('A'))]) > y + dy and board[chr(x + dx + ord('A'))][y + dy] == color:\n            count += 1\n            x += dx\n            y += dy\n\n        # Check in the negative direction\n        x, y = ord(column) - ord('A'), row\n        while 0 <= x - dx < 7 and 0 <= y - dy < 6 and len(board[chr(x - dx + ord('A'))]) > y - dy and board[chr(x - dx + ord('A'))][y - dy] == color:\n            count += 1\n            x -= dx\n            y -= dy\n\n        if count >= 4:\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal down right\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal down left\n                        if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    moves_set = set(moves)\n    for (col, row) in moves:\n        if all((chr(ord(col) + i), row) in moves_set for i in range(4)):  # Horizontal\n            return True\n        if all((col, row + i) in moves_set for i in range(4)):  # Vertical\n            return True\n        if all((chr(ord(col) + i), row + i) in moves_set for i in range(4)):  # Diagonal /\n            return True\n        if all((chr(ord(col) + i), row - i) in moves_set for i in range(4)):  # Diagonal \\\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, dcol, drow):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dcol)\n        r = row + i * drow\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for color_check in ['Red', 'Yellow']:\n            # Check vertical\n            for col in 'ABCDEFG':\n                for r in range(3):\n                    if all(board[col][r + i] == color_check for i in range(4)):\n                        return color_check\n            \n            # Check horizontal\n            for r in range(6):\n                for c in range(4):\n                    if all(board[chr(65 + c + i)][r] == color_check for i in range(4)):\n                        return color_check\n            \n            # Check diagonal \\\n            for c in range(4):\n                for r in range(3):\n                    if all(board[chr(65 + c + i)][r + i] == color_check for i in range(4)):\n                        return color_check\n            \n            # Check diagonal /\n            for c in range(4):\n                for r in range(3, 6):\n                    if all(board[chr(65 + c + i)][r - i] == color_check for i in range(4)):\n                        return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_turn[player] += 1\n        \n        # Check for a win\n        if check_winner(board, player):\n            return player\n    \n    return \"Draw\" if player_turn['Red'] + player_turn['Yellow'] == 42 else \"Draw\"\n\ndef check_winner(board, player):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == player:\n                if check_direction(board, column, row, player):\n                    return True\n    return False\n\ndef check_direction(board, column, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]  # right, down, down-right, down-left\n    for dx, dy in directions:\n        count = 0\n        for step in range(4):\n            x = ord(column) - ord('A') + step * dx\n            y = row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == player:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) - 61]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if check_winner(grid, col, row, grid[col][row]):\n                        return grid[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c = chr(ord(col) + dc * step)\n            r = row + dr * step\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c = chr(ord(col) - dc * step)\n            r = row - dr * step\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for victory\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if (c, r) in [(c, r) for c in 'ABCDEFG' for r in range(6)]:\n                        # Check vertical\n                        if r <= 2 and all(board[c][r+i] == board[c][r] for i in range(4)):\n                            return board[c][r]\n                        # Check horizontal\n                        if c <= 'D' and all(board[chr(ord(c)+i)][r] == board[c][r] for i in range(4)):\n                            return board[c][r]\n                        # Check diagonal /\n                        if c <= 'D' and r >= 3 and all(board[chr(ord(c)+i)][r-i] == board[c][r] for i in range(4)):\n                            return board[c][r]\n                        # Check diagonal \\\n                        if c <= 'D' and r <= 2 and all(board[chr(ord(c)+i)][r+i] == board[c][r] for i in range(4)):\n                            return board[c][r]\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for d in (1, -1):\n            r, c = row, ord(col) - ord('A')\n            while True:\n                r += direction[0] * d\n                c += direction[1] * d\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for step in range(1, 4):\n                    r = row + d * step * direction[1]\n                    c = 'ABCDEFG'.index(column) + d * step * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7:\n                        if board['ABCDEFG'[c]][r] == color:\n                            count += 1\n                        else:\n                            break\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for victory\n        for dr in [-1, 0, 1]:  # delta row\n            for dc in [-1, 0, 1]:  # delta column\n                if dr == 0 and dc == 0:\n                    continue\n                count = 1\n                \n                # Check one direction\n                r, c = row, 'ABCDEFG'.index(col)\n                while 0 <= r + dr < 6 and 0 <= c + dc < 7 and board['ABCDEFG'[c + dc]][r + dr] == color:\n                    count += 1\n                    r += dr\n                    c += dc\n                \n                # Check opposite direction\n                r, c = row, 'ABCDEFG'.index(col)\n                while 0 <= r - dr < 6 and 0 <= c - dc < 7 and board['ABCDEFG'[c - dc]][r - dr] == color:\n                    count += 1\n                    r -= dr\n                    c -= dc\n                \n                if count >= 4:\n                    return color\n                \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player] += 1\n                break\n        \n        # Check for win condition\n        for player in ['Red', 'Yellow']:\n            if check_winner(board, player):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == player:\n                if check_direction(board, column, row, player, 1, 0) or \\\n                   check_direction(board, column, row, player, 0, 1) or \\\n                   check_direction(board, column, row, player, 1, 1) or \\\n                   check_direction(board, column, row, player, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, column, row, player, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        col = chr(ord(column) + i * delta_col)\n        r = row + i * delta_row\n        if col in board and 0 <= r < 6 and board[col][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for line in LINES:\n        colors = [board[c][r] for c, r in line if board[c][r] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    for d_col, d_row in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for direction in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d_col * direction * i)\n                new_row = row + d_row * direction * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a win\n        for i in range(7):\n            for j in range(6):\n                if board[chr(65 + i)][j] is not None:\n                    if (i <= 3 and all(board[chr(65 + i + k)][j] == board[chr(65 + i)][j] for k in range(4))) or \\\n                       (j <= 2 and all(board[chr(65 + i)][j + k] == board[chr(65 + i)][j] for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == board[chr(65 + i)][j] for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == board[chr(65 + i)][j] for k in range(4))):\n                        return board[chr(65 + i)][j]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        for line in LINES:\n            if any((col, len(board[col]) - 1) in line for col in board if board[col]):\n                colors = [board[c][r] for c in board for r in range(len(board[c])) if (c, r) in line]\n                if len(colors) == 4 and len(set(colors)) == 1:\n                    return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[pos[0]][pos[1]] == color for pos in line if pos[1] < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal connections\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # vertical\n                    check_direction(board, col, row, 1, 1, color) or  # diagonal /\n                    check_direction(board, col, row, 1, -1, color)):  # diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, col, row, d_col, d_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [\n            [(0, 1), (0, -1)],  # vertical\n            [(1, 0), (-1, 0)],  # horizontal\n            [(1, 1), (-1, -1)], # diagonal \\\n            [(1, -1), (-1, 1)], # diagonal /\n        ]:\n            count = 1\n            for d in direction:\n                r, c = row, ord(col) - ord('A')\n                while True:\n                    r += d[0]\n                    c += d[1]\n                    if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n        \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for move in moves:\n        x, y = move\n        for dx, dy in directions:\n            count = 1\n            for step in range(1, 4):\n                if (chr(ord(x) + step * dx), y + step * dy) in moves:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                if (chr(ord(x) - step * dx), y - step * dy) in moves:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                player = board[col][row]\n                # Check vertical\n                if row <= 2 and all(board[col][row + k] == player for k in range(4)):\n                    return player\n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + k)][row] == player for k in range(4)):\n                    return player\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == player for k in range(4)):\n                    return player\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == player for k in range(4)):\n                    return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or\n                    check_direction(board, col, row, 0, 1, color) or\n                    check_direction(board, col, row, 1, 1, color) or\n                    check_direction(board, col, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + step * delta_col)\n        new_row = row + step * delta_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if (col + str(row)).count(color) >= 4:\n                        return color\n                    \n                    # Check vertical\n                    if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                        return color\n                    \n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal down-right\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal up-right\n                    if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for col, row in moves:\n        if check_direction(moves, col, row, 1, 0) or check_direction(moves, col, row, 0, 1) or \\\n           check_direction(moves, col, row, 1, 1) or check_direction(moves, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(-3, 4):\n        if (chr(ord(col) + delta_col * i), row + delta_row * i) in moves:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for d in range(1, 4):\n                            r, c = row + direction[0] * d, ord(col) - 65 + direction[1] * d\n                            if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + 65)][r] == board[col][row]:\n                                count += 1\n                        if count >= 4:\n                            return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_positions = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_positions[player].append((column, row))\n        \n        for line in LINES:\n            if all((pos in player_positions[player]) for pos in line):\n                return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]  # right, down, diagonal down-right, diagonal up-right\n    for d_col, d_row in directions:\n        count = 0\n        for i in range(4):\n            new_col = chr(ord(col) + d_col * i)\n            new_row = row + d_row * i\n            if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```"
        ]
    }
}