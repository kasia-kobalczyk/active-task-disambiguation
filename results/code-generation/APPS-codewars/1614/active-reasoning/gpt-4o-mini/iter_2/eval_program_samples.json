{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (\n                        c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4)) or\n                        r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4)) or\n                        c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)) or\n                        c - 3 >= 0 and r + 3 < 6 and all(board[chr(c - i + 65)][r + i] == color for i in range(4))\n                    ):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if row < 6 and board[col][row] is not None):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if row < 6 and board[col][row] is not None):\n            return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c, r) in grid.items() and r < 6 and grid[c][r] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a win after each move\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if check_win(grid, col, row):\n                        return grid[col][row]\n    \n    return \"Draw\"\n\ndef check_win(grid, col, row):\n    color = grid[col][row]\n    # Check vertical\n    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n        return True\n    # Check horizontal\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        if all(grid[chr(c + ord('A'))][row] == color for i in range(4)):\n            return True\n    # Check diagonal /\n    for d in range(-3, 1):\n        if 0 <= row + d < 6 and 0 <= ord(col) - ord('A') + d < 7:\n            if all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= row - i < 6 and 0 <= ord(col) + i < 7):\n                return True\n    # Check diagonal \\\n    for d in range(-3, 1):\n        if 0 <= row + d < 6 and 0 <= ord(col) - ord('A') + d < 7:\n            if all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= row + i < 6 and 0 <= ord(col) + i < 7):\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[col] if len(board[col]) > row else [])[-1] == color for col in 'ABCDEFG' if (col == column or (len(board[col]) > row and len(board[col]) >= row + 1))):\n                    return color\n    \n    # Check for draw\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y >= 0 and y < 6 and x in board and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Check vertical\n    if len(board[column]) >= 4 and all(c == color for c in board[column][-4:]):\n        return True\n    \n    # Check horizontal\n    row_index = len(board[column]) - 1\n    for c in 'ABCDEFG':\n        if board[c][-1] == color and row_index < len(board[c]):\n            if sum(1 for k in range(-3, 1) if c in board and len(board[c]) > row_index + k and board[c][row_index + k] == color) >= 4:\n                return True\n    \n    # Check diagonal (top-left to bottom-right)\n    for i in range(-3, 1):\n        if (column_index := 'ABCDEFG'.index(column) + i) in range(7):\n            if row_index - i >= 0 and row_index - i < 6:\n                if all((col := 'ABCDEFG'[column_index + j]) in board and len(board[col]) > row_index - j and board[col][row_index - j] == color for j in range(4)):\n                    return True\n    \n    # Check diagonal (bottom-left to top-right)\n    for i in range(-3, 1):\n        if (column_index := 'ABCDEFG'.index(column) + i) in range(7):\n            if row_index + i >= 0 and row_index + i < 6:\n                if all((col := 'ABCDEFG'[column_index + j]) in board and len(board[col]) > row_index + j and board[col][row_index + j] == color for j in range(4)):\n                    return True\n    \n    return False\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + dcol * step)\n            r = row + drow * step\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n    \n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if grid['ABCDEFG'[col]][row] == color:\n                    if col <= 3 and all(grid['ABCDEFG'[col + i]][row] == color for i in range(4)):\n                        return True\n                    if row <= 2 and all(grid['ABCDEFG'[col]][row + i] == color for i in range(4)):\n                        return True\n                    if col <= 3 and row <= 2 and all(grid['ABCDEFG'[col + i]][row + i] == color for i in range(4)):\n                        return True\n                    if col <= 3 and row >= 3 and all(grid['ABCDEFG'[col + i]][row - i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n    \n    def check_winner():\n        for col in COLUMNS:\n            for row in ROWS:\n                player = board[col][row]\n                if player:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return player\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return player\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return player\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return player\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner.split('_')[1]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    if (col + str(row) in board and board[col][row] == color and\n                        ((col in 'ABCD' and board[chr(ord(col) + 1)][row] == color and\n                          board[chr(ord(col) + 2)][row] == color and\n                          board[chr(ord(col) + 3)][row] == color) or\n                         (row <= 2 and board[col][row + 1] == color and\n                          board[col][row + 2] == color and\n                          board[col][row + 3] == color) or\n                         (col in 'ABCD' and row <= 2 and\n                          board[chr(ord(col) + 1)][row + 1] == color and\n                          board[chr(ord(col) + 2)][row + 2] == color and\n                          board[chr(ord(col) + 3)][row + 3] == color) or\n                         (col in 'ABCD' and row >= 3 and\n                          board[chr(ord(col) + 1)][row - 1] == color and\n                          board[chr(ord(col) + 2)][row - 2] == color and\n                          board[chr(ord(col) + 3)][row - 3] == color))):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS = 'ABCDEFG'\n    ROWS = range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] is not None:\n                    if j + 3 < 7 and all(board[COLUMNS[j+k]][i] == board[COLUMNS[j]][i] for k in range(4)):\n                        return board[COLUMNS[j]][i].split('_')[1]\n                    if i + 3 < 6 and all(board[COLUMNS[j]][i+k] == board[COLUMNS[j]][i] for k in range(4)):\n                        return board[COLUMNS[j]][i].split('_')[1]\n                    if j + 3 < 7 and i + 3 < 6 and all(board[COLUMNS[j+k]][i+k] == board[COLUMNS[j]][i] for k in range(4)):\n                        return board[COLUMNS[j]][i].split('_')[1]\n                    if j + 3 < 7 and i - 3 >= 0 and all(board[COLUMNS[j+k]][i-k] == board[COLUMNS[j]][i] for k in range(4)):\n                        return board[COLUMNS[j]][i].split('_')[1]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    row = len(board[col]) - 1\n\n    for dr, dc in directions:\n        count = 1\n        for step in range(1, 4):\n            r, c = row + dr * step, ord(col) - ord('A') + dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and (c >= 0 and c < 7) and (board[chr(c + ord('A'))].count(color) >= r + 1):\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            r, c = row - dr * step, ord(col) - ord('A') - dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and (c >= 0 and c < 7) and (board[chr(c + ord('A'))].count(color) >= r + 1):\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # Horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # Vertical\n                    check_direction(board, col, row, 1, 1, color) or  # Diagonal \\\n                    check_direction(board, col, row, 1, -1, color)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, col, row, d_col, d_row, color):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + step * d_col)\n        new_row = row + step * d_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n\n        # Check for a win after each move\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    # Check vertical\n    if len(board[col]) >= 4 and all(board[col][-i] == color for i in range(1, 5)):\n        return True\n    \n    # Check horizontal\n    for c in 'ABCDEFG':\n        if len(board[c]) >= 1 and all(board[c][-i] == color for i in range(1, 5) if c in board and len(board[c]) >= i):\n            if c in ['A', 'B', 'C', 'D', 'E', 'F', 'G']:\n                positions = [c, chr(ord(c)+1), chr(ord(c)+2), chr(ord(c)+3)]\n                if all(pos in board and len(board[pos]) > 0 and board[pos][-1] == color for pos in positions):\n                    return True\n    \n    # Check diagonals\n    for c in range(4):\n        for r in range(3, 6):\n            if (board[chr(c + 65)][r] == color and \n                board[chr(c + 66)][r - 1] == color and \n                board[chr(c + 67)][r - 2] == color and \n                board[chr(c + 68)][r - 3] == color):\n                return True\n            if (board[chr(c + 65)][r] == color and \n                board[chr(c + 66)][r + 1] == color and \n                board[chr(c + 67)][r + 2] == color and \n                board[chr(c + 68)][r + 3] == color):\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        # Check for a win\n        if check_winner(grid, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, column, row, color):\n    return (check_direction(grid, column, row, color, 1, 0) or  # horizontal\n            check_direction(grid, column, row, color, 0, 1) or  # vertical\n            check_direction(grid, column, row, color, 1, 1) or  # diagonal \\\n            check_direction(grid, column, row, color, 1, -1)    # diagonal /\n           )\n\ndef check_direction(grid, column, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        col = chr(ord(column) + step * delta_col)\n        r = row + step * delta_row\n        if col in grid and 0 <= r < 6 and grid[col][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (i <= 3 and all(board[chr(65 + i + k)][j] == color for k in range(4))) or \\\n                       (j <= 2 and all(board[chr(65 + i)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j < 4 and all(board[chr(65 + j + k)][i] == color for k in range(4)):\n                    return color\n                if i < 3 and all(board[chr(65 + j)][i + k] == color for k in range(4)):\n                    return color\n                if j < 4 and i < 3 and all(board[chr(65 + j + k)][i + k] == color for k in range(4)):\n                    return color\n                if j < 4 and i > 2 and all(board[chr(65 + j + k)][i - k] == color for k in range(4)):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        # Check if this move causes a win\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n    \n    # Check vertical\n    if row >= 3 and all(board[col][row-i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        if all(board[chr(ord('A') + c + i)][row] == color for i in range(4) if c + i < 7):\n            return True\n    \n    # Check diagonal /\n    for start_col in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        for start_row in range(max(0, row - 3), min(6, row + 1)):\n            if all(board[chr(ord('A') + start_col + i)][start_row - i] == color for i in range(4) \n                   if start_col + i < 7 and start_row - i >= 0):\n                return True\n    \n    # Check diagonal \\\n    for start_col in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        for start_row in range(min(6, row + 1), max(-1, row - 4), -1):\n            if all(board[chr(ord('A') + start_col + i)][start_row + i] == color for i in range(4) \n                   if start_col + i < 7 and start_row + i < 6):\n                return True\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if (\n                        # Vertical\n                        r <= 2 and all(board[c][r + i] == board[c][r] for i in range(4)) or\n                        # Horizontal\n                        c <= 'D' and all(board[chr(ord(c) + i)][r] == board[c][r] for i in range(4)) or\n                        # Diagonal /\n                        c <= 'D' and r <= 2 and all(board[chr(ord(c) + i)][r + i] == board[c][r] for i in range(4)) or\n                        # Diagonal \\\n                        c <= 'D' and r >= 3 and all(board[chr(ord(c) + i)][r - i] == board[c][r] for i in range(4))\n                    ):\n                        return board[c][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    def check_win(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in [col, chr(ord(col)+1), chr(ord(col)+2), chr(ord(col)+3)]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == color for (col, row) in [(col, row), (chr(ord(col)+1), row+1), (chr(ord(col)+2), row+2), (chr(ord(col)+3), row+3)]):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == color for (col, row) in [(col, row), (chr(ord(col)+1), row-1), (chr(ord(col)+2), row-2), (chr(ord(col)+3), row-3)]):\n                        return True\n        return False\n\n    if check_win(\"Red\"):\n        return \"Red\"\n    elif check_win(\"Yellow\"):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board['ABCDEFG'[col]][row] == color:\n                    if col + 3 < 7 and all(board['ABCDEFG'[col + k]][row] == color for k in range(4)):\n                        return True\n                    if row + 3 < 6 and all(board['ABCDEFG'[col]][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row + 3 < 6 and all(board['ABCDEFG'[col + k]][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row - 3 >= 0 and all(board['ABCDEFG'[col + k]][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n                \n                # Horizontal check\n                if col <= 'D' and all(board[col][row] == color for col in 'ABCD'):\n                    return color\n                \n                # Vertical check\n                if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                    return color\n                \n                # Diagonal check (down-right)\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                    return color\n                \n                # Diagonal check (down-left)\n                if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                    return color\n\n        return None\n    \n    winner = check_winner()\n    \n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[chr(j + k + 65)][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal (top-left to bottom-right)\n                    if j <= 3 and i <= 2 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal (bottom-left to top-right)\n                    if j <= 3 and i >= 3 and all(board[chr(j + k + 65)][i - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                       (col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                       (col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n                        if all(board[chr(ord('A') + c + i)][row] == color for i in range(4)):\n                            return color\n                    # Check diagonal \\\n                    if row <= 2 and ord(col) <= ord('D'):\n                        if all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                    # Check diagonal /\n                    if row >= 3 and ord(col) <= ord('D'):\n                        if all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if (c in board and\n                        board[c][r] == board[c][r + 1] == board[c][r + 2] == board[c][r + 3] if r <= 2 else False or\n                        board[c][r] == board[chr(ord(c) + 1)][r] == board[chr(ord(c) + 2)][r] == board[chr(ord(c) + 3)][r] if c <= 'E' else False or\n                        board[c][r] == board[chr(ord(c) + 1)][r + 1] == board[chr(ord(c) + 2)][r + 2] == board[chr(ord(c) + 3)][r + 3] if c <= 'E' and r <= 2 else False or\n                        board[c][r] == board[chr(ord(c) + 1)][r - 1] == board[chr(ord(c) + 2)][r - 2] == board[chr(ord(c) + 3)][r - 3] if c <= 'E' and r >= 3 else False):\n                        return board[c][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    if (r <= 2 and all(grid[c][r + k] == color for k in range(4))) or \\\n                       (c in 'ABCDEFG' and c <= 'D' and all(grid[chr(ord(c) + k)][r] == color for k in range(4))) or \\\n                       (r <= 2 and c <= 'D' and all(grid[chr(ord(c) + k)][r + k] == color for k in range(4))) or \\\n                       (r >= 3 and c <= 'D' and all(grid[chr(ord(c) + k)][r - k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, color, row, col):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color, row, col):\n    row_index = grid[col].index(color)\n    for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n        count = 1\n        for step in [1, -1]:\n            r, c = row_index, ord(col) - ord('A')\n            while 0 <= r + step * direction[0] < 6 and 0 <= c + step * direction[1] < 7:\n                r += step * direction[0]\n                c += step * direction[1]\n                if r < 0 or c < 0 or c >= 7 or grid[chr(c + ord('A'))][r] != color:\n                    break\n                count += 1\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                \n                # Check horizontal\n                if col <= 'D' and all(board[col][row] == board[c][row] for c in 'DEFG'[:7 - (ord(col) - ord('A'))]):\n                    return board[col][row]\n                \n                # Check vertical\n                if row <= 2 and all(board[col][row] == board[col][r] for r in range(row, row + 4)):\n                    return board[col][row]\n                \n                # Check diagonal down-right\n                if col <= 'D' and row <= 2 and all(board[col][row] == board[c][r] for c, r in zip('DEFG', range(row, row + 4))):\n                    return board[col][row]\n                \n                # Check diagonal down-left\n                if col >= 'D' and row <= 2 and all(board[col][row] == board[c][r] for c, r in zip('DCBA', range(row, row + 4))):\n                    return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(65 + col)][row] == color:\n                    if (col <= 3 and all(grid[chr(65 + col + i)][row] == color for i in range(4))) or \\\n                       (row <= 2 and all(grid[chr(65 + col)][row + i] == color for i in range(4))) or \\\n                       (col <= 3 and row <= 2 and all(grid[chr(65 + col + i)][row + i] == color for i in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(grid[chr(65 + col + i)][row - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] == color:\n                    if col in COLUMNS[:-3] and all(grid[col][row] == color for col in COLUMNS[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                        return color\n                    if row in ROWS[:-3] and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    if col in COLUMNS[:-3] and row in ROWS[:-3] and all(grid[COLUMNS[COLUMNS.index(col) + k]][ROWS[row + k]] == color for k in range(4)):\n                        return color\n                    if col in COLUMNS[:-3] and row in ROWS[3:] and all(grid[COLUMNS[COLUMNS.index(col) + k]][ROWS[row - k]] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a winner\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(col + 65)][row] is not None:\n                    color = grid[chr(col + 65)][row]\n\n                    # Check horizontal\n                    if col <= 3 and all(grid[chr(col + k + 65)][row] == color for k in range(4)):\n                        winner = color\n                    # Check vertical\n                    if row <= 2 and all(grid[chr(col + 65)][row + k] == color for k in range(4)):\n                        winner = color\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(grid[chr(col + k + 65)][row + k] == color for k in range(4)):\n                        winner = color\n                    # Check diagonal /\n                    if col <= 3 and row >= 3 and all(grid[chr(col + k + 65)][row - k] == color for k in range(4)):\n                        winner = color\n\n                if winner:\n                    break\n            if winner:\n                break\n\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for (col, row) in moves:\n        if check_direction(moves, col, row, 1, 0) or check_direction(moves, col, row, 0, 1) or \\\n           check_direction(moves, col, row, 1, 1) or check_direction(moves, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, col, row, delta_col, delta_row):\n    count = 1\n    for direction in (1, -1):\n        for step in range(1, 4):\n            new_col = chr(ord(col) + direction * step * delta_col)\n            new_row = row + direction * step * delta_row\n            if new_col in 'ABCDEFG' and 0 <= new_row < 6 and (new_col, new_row) in moves:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontally\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'[col.index(col):col.index(col)+4]):\n                        return True\n                    # Check vertically\n                    if row <= 2 and all(grid[col][row + r] == color for r in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + d_col * i)\n            r = row + d_row * i\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    if (j + 3 < 7 and\n                        board['ABCDEFG'[j + 1]][i] == color and\n                        board['ABCDEFG'[j + 2]][i] == color and\n                        board['ABCDEFG'[j + 3]][i] == color):\n                        return color\n                    if (i + 3 < 6 and\n                        board['ABCDEFG'[j]][i + 1] == color and\n                        board['ABCDEFG'[j]][i + 2] == color and\n                        board['ABCDEFG'[j]][i + 3] == color):\n                        return color\n                    if (j + 3 < 7 and i + 3 < 6 and\n                        board['ABCDEFG'[j + 1]][i + 1] == color and\n                        board['ABCDEFG'[j + 2]][i + 2] == color and\n                        board['ABCDEFG'[j + 3]][i + 3] == color):\n                        return color\n                    if (j + 3 < 7 and i - 3 >= 0 and\n                        board['ABCDEFG'[j + 1]][i - 1] == color and\n                        board['ABCDEFG'[j + 2]][i - 2] == color and\n                        board['ABCDEFG'[j + 3]][i - 3] == color):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for x in range(7):\n                for y in range(6):\n                    count = 0\n                    color_check = board[COLUMNS[x]][y] if x < 7 and y < 6 else None\n                    if color_check is not None:\n                        for d in range(4):\n                            nx, ny = x + d * direction[0], y + d * direction[1]\n                            if 0 <= nx < 7 and 0 <= ny < 6 and board[COLUMNS[nx]][ny] == color_check:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (row <= 2 and all(grid[col][row + k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                       (col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                       (col >= 'D' and row <= 2 and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4))):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = next((i for i in range(6) if board[column][i] is None), None)\n        if row is not None:\n            board[column][row] = player\n            player_moves[player].append((column, row))\n\n            if check_winner(player_moves[player]):\n                return player\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for (c1, r1) in moves:\n        for dc, dr in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for step in range(1, 4):\n                    c2 = chr(ord(c1) + d * step * dc)\n                    r2 = r1 + d * step * dr\n                    if (0 <= r2 < 6) and (c2 in 'ABCDEFG') and ((c2, r2) in moves):\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    if (r <= 2 and all(board[c][r+i] == color for i in range(4))) or \\\n                       (c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4))) or \\\n                       (r <= 2 and c <= 'D' and all(board[chr(ord(c)+i)][r+i] == color for i in range(4))) or \\\n                       (r >= 3 and c <= 'D' and all(board[chr(ord(c)+i)][r-i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS = 'ABCDEFG'\n    ROWS = range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n    def check_winner():\n        for col in COLUMNS:\n            for row in ROWS:\n                color = grid[col][row]\n                if color is not None:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][j] == color for j in range(row, row + 4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[i]][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(grid[COLUMNS[i]][row + i] == color for i in range(4)):\n                        return color\n\n    winner = check_winner()\n    if winner:\n        return winner\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Horizontal\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return board[col][row]\n                    # Vertical\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return board[col][row]\n                    # Diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return board[col][row]\n                    # Diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if all(board[c][row] == color for c in 'ABCDEFG' if 'ABCDEFG'.index(c) <= 'ABCDEFG'.index(col) + 3):\n                        return color\n                    # Check diagonal /\n                    if col in 'ABCD' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col in 'DEFG' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner is None:\n        return \"Draw\"\n    return winner\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for win condition\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    if (c + 3 < 7 and \n                        board[chr(65 + c)][r] == board[chr(65 + c + 1)][r] == \n                        board[chr(65 + c + 2)][r] == board[chr(65 + c + 3)][r]):\n                        return board[chr(65 + c)][r]\n                    if (r + 3 < 6 and \n                        board[chr(65 + c)][r] == board[chr(65 + c)][r + 1] == \n                        board[chr(65 + c)][r + 2] == board[chr(65 + c)][r + 3]):\n                        return board[chr(65 + c)][r]\n                    if (c + 3 < 7 and r + 3 < 6 and \n                        board[chr(65 + c)][r] == board[chr(65 + c + 1)][r + 1] == \n                        board[chr(65 + c + 2)][r + 2] == board[chr(65 + c + 3)][r + 3]):\n                        return board[chr(65 + c)][r]\n                    if (c + 3 < 7 and r - 3 >= 0 and \n                        board[chr(65 + c)][r] == board[chr(65 + c + 1)][r - 1] == \n                        board[chr(65 + c + 2)][r - 2] == board[chr(65 + c + 3)][r - 3]):\n                        return board[chr(65 + c)][r]\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in [\"Red\", \"Yellow\"]:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j + 3 < 7 and all(board[chr(c)][i] == color for c in range(ord('A') + j, ord('A') + j + 4))):\n                    return color\n                if (i + 3 < 6 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4))):\n                    return color\n                if (j + 3 < 7 and i + 3 < 6 and all(board[chr(c)][i + c - ord('A')] == color for c in range(ord('A') + j, ord('A') + j + 4))):\n                    return color\n                if (j + 3 < 7 and i - 3 >= 0 and all(board[chr(c)][i - (c - ord('A'))] == color for c in range(ord('A') + j, ord('A') + j + 4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if grid[chr(c + 65)][r] == color:\n                    if (c <= 3 and all(grid[chr(c + k + 65)][r] == color for k in range(4))) or \\\n                       (r <= 2 and all(grid[chr(c + 65)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(grid[chr(c + k + 65)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(grid[chr(c + k + 65)][r - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for line in LINES:\n        colors = [grid[col][row] for col, row in line if grid[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all((col, row) in [(c, r) for c in board for r in range(6) if board[c][r] == color] for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (row <= 2 and all(board[col][row + i] == color for i in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if row <= 2 and col >= 'D' and all(grid[chr(ord(col)-i)][row+i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        # Check if this move wins the game\n        if check_winner(player_moves[player], board):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(moves, board):\n    for col, row in moves:\n        if (check_direction(col, row, 1, 0, board) or  # Horizontal\n                check_direction(col, row, 0, 1, board) or  # Vertical\n                check_direction(col, row, 1, 1, board) or  # Diagonal \\\n                check_direction(col, row, 1, -1, board)):  # Diagonal /\n            return True\n    return False\n\ndef check_direction(col, row, delta_col, delta_row, board):\n    count = 1\n    player = board[col][row]\n\n    # Check one direction\n    for step in range(1, 4):\n        new_col = chr(ord(col) + delta_col * step)\n        new_row = row + delta_row * step\n        if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == player:\n            count += 1\n        else:\n            break\n\n    # Check the opposite direction\n    for step in range(1, 4):\n        new_col = chr(ord(col) - delta_col * step)\n        new_row = row - delta_row * step\n        if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == player:\n            count += 1\n        else:\n            break\n\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if column <= 'D' and all(board[chr(ord(column) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if column <= 'D' and row >= 3 and all(board[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if column <= 'D' and row <= 2 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for i in range(len(moves)):\n        col, row = moves[i]\n        if check_direction(moves, col, row, 1, 0) or \\\n           check_direction(moves, col, row, 0, 1) or \\\n           check_direction(moves, col, row, 1, 1) or \\\n           check_direction(moves, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(-3, 4):\n        new_col = chr(ord(col) + i * delta_col)\n        new_row = row + i * delta_row\n        if new_col in 'ABCDEFG' and 0 <= new_row < 6 and (new_col, new_row) in moves:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4)):\n                    return color\n                if i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4)):\n                    return color\n                if j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4)):\n                    return color\n                if j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4)):\n                    return color\n    \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for c in range(7):\n            for r in range(6):\n                if grid[chr(c + 65)][r] == color:\n                    if c + 3 < 7 and all(grid[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    if r + 3 < 6 and all(grid[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    if c + 3 < 7 and r + 3 < 6 and all(grid[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n                    if c + 3 < 7 and r - 3 >= 0 and all(grid[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {column: [None] * 6 for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in [\"Red\", \"Yellow\"]:\n        for column in COLUMNS:\n            for row in ROWS:\n                if grid[column][row] == color:\n                    # Check horizontal\n                    if column <= 'D' and all(grid[column][row] == color for column in COLUMNS[COLUMNS.index(column):COLUMNS.index(column)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[column][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if column <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(column) + k]][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if column <= 'D' and row >= 3 and all(grid[COLUMNS[COLUMNS.index(column) + k]][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner():\n        for col in board:\n            for row in range(6):\n                if board[col][row]:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        # Check for a win after each move\n        if check_winner(board, col, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    # Get the row index of the last piece placed\n    row = len(board[col]) - 1\n    \n    # Directions to check for winning condition\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        \n        # Check in the positive direction\n        for i in range(1, 4):\n            r, c = row + d[0] * i, 'ABCDEFG'.index(col) + d[1] * i\n            if 0 <= r < 6 and 0 <= c < 7 and (c >= 0 and c < len(board)):\n                if len(board['ABCDEFG'[c]]) > r and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n        \n        # Check in the negative direction\n        for i in range(1, 4):\n            r, c = row - d[0] * i, 'ABCDEFG'.index(col) - d[1] * i\n            if 0 <= r < 6 and 0 <= c < 7 and (c >= 0 and c < len(board)):\n                if len(board['ABCDEFG'[c]]) > r and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n        \n        if count >= 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (row <= 2 and all(grid[col][row+i] == color for i in range(4)) or\n                        (col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4))) or\n                        (col <= 'D' and row <= 2 and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4))) or\n                        (col <= 'D' and row >= 3 and all(grid[chr(ord(col)+i)][row-i] == color for i in range(4)))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for step in [1, -1]:\n                for i in range(1, 4):\n                    r = row + direction[0] * i * step\n                    c = 'ABCDEFG'.index(col) + direction[1] * i * step\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[x][y] for x, y in line if board[x][y] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board.get(chr(c + 65), [None]*6)[r] == color:\n                        count = 0\n                        for step in range(4):\n                            nr = r + direction[0] * step\n                            nc = c + direction[1] * step\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board.get(chr(nc + 65), [None]*6)[nr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            x, y = col, row\n                            x_index = 'ABCDEFG'.index(x) + dx * step\n                            y_index = y + dy * step\n                            if 0 <= x_index < 7 and 0 <= y_index < 6:\n                                if board['ABCDEFG'[x_index]][y_index] == board[col][row]:\n                                    count += 1\n                            if count == 4:\n                                return board[col][row]\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = color\n                break\n\n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(65 + col)][row] == color:\n                    if col <= 3 and all(grid[chr(65 + col + k)][row] == color for k in range(4)):\n                        return True\n                    if row <= 2 and all(grid[chr(65 + col)][row + k] == color for k in range(4)):\n                        return True\n                    if col <= 3 and row <= 2 and all(grid[chr(65 + col + k)][row + k] == color for k in range(4)):\n                        return True\n                    if col <= 3 and row >= 3 and all(grid[chr(65 + col + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    player_turn = {\"Red\": 0, \"Yellow\": 0}\n    \n    for move in pieces_positions:\n        col, player = move.split(\"_\")\n        row = board[col].index(None)\n        board[col][row] = player\n        player_turn[player] += 1\n        \n        # Check for a win\n        if check_win(board, col, row, player):\n            return player\n\n    return \"Draw\" if player_turn[\"Red\"] + player_turn[\"Yellow\"] == 42 else \"Draw\"\n\ndef check_win(board, col, row, player):\n    # Check horizontal, vertical, and two diagonal possibilities for a win\n    return (check_direction(board, col, row, player, 1, 0) or   # Horizontal\n            check_direction(board, col, row, player, 0, 1) or   # Vertical\n            check_direction(board, col, row, player, 1, 1) or   # Diagonal /\n            check_direction(board, col, row, player, 1, -1))    # Diagonal \\\n    \ndef check_direction(board, col, row, player, delta_col, delta_row):\n    count = 1\n    for direction in (1, -1):\n        for step in range(1, 4):\n            new_col = chr(ord(col) + delta_col * direction * step)\n            new_row = row + delta_row * direction * step\n            \n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == player:\n                count += 1\n            else:\n                break\n            \n            if count == 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if grid[chr(c + 65)][r] == color:\n                    # Check horizontal\n                    if c <= 3 and all(grid[chr(c + i + 65)][r] == color for i in range(4)):\n                        winner = color\n                    # Check vertical\n                    if r <= 2 and all(grid[chr(c + 65)][r + i] == color for i in range(4)):\n                        winner = color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        winner = color\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(grid[chr(c - i + 65)][r + i] == color for i in range(4)):\n                        winner = color\n\n        if winner:\n            return winner\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(7):\n            for j in range(6):\n                if (j < 3 and all(board[chr(65 + i)][j + k] == color for k in range(4))) or \\\n                   (i < 4 and all(board[chr(65 + i + k)][j] == color for k in range(4))) or \\\n                   (i < 4 and j < 3 and all(board[chr(65 + i + k)][j + k] == color for k in range(4))) or \\\n                   (i < 4 and j > 2 and all(board[chr(65 + i + k)][j - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is not None:\n                    color = board[column][row]\n                    if (row <= 2 and all(board[column][row + i] == color for i in range(4))) or \\\n                       (column <= 'D' and all(board[chr(ord(column) + i)][row] == color for i in range(4))) or \\\n                       (row <= 2 and column <= 'D' and all(board[chr(ord(column) + i)][row + i] == color for i in range(4))) or \\\n                       (row >= 3 and column <= 'D' and all(board[chr(ord(column) + i)][row - i] == color for i in range(4))):\n                        return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] == color:  # chr(c + 65) to get columns A-G\n                    if (c <= 3 and all(board[chr(c + k + 65)][r] == color for k in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + k + 65)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + k + 65)][r - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDE'[ord(col) - 65:ord(col) - 61]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    \n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    \n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [1, -1]:\n                r, c = row, ord(column) - ord('A')\n                while True:\n                    r += direction[0] * d\n                    c += direction[1] * d\n                    if 0 <= r < 6 and 0 <= c < 7 and grid[chr(c + ord('A'))][r] == color:\n                        count += 1\n                    else:\n                        break\n                    \n                    if count >= 4:\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row+i] == color for i in range(4))) or \\\n                           (col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4))) or \\\n                           (row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == color for i in range(4))) or \\\n                           (row >= 3 and col <= 'D' and all(board[chr(ord(col)+i)][row-i] == color for i in range(4))):\n                            return color\n    \n    return \"Draw\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 0 <= ord(c) + i < 7):\n                            return color\n                    # Check diagonal /\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r - i] == color for i in range(4) if 0 <= ord(c) + i < 7 and r - i >= 0):\n                            return color\n                    # Check diagonal \\\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r + i] == color for i in range(4) if 0 <= ord(c) + i < 7 and r + i < 6):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y in range(6)):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == color and \n                (i < 1 or (board[column][i-1] == color and \n                (i < 2 or (board[column][i-2] == color and \n                (i < 3 or (board[column][i-3] == color)))))))):\n                return color\n            \n            # Check vertical\n            if len(board[column]) >= 4:\n                if board[column][i] == color and all(board[column][j] == color for j in range(i-3, i+1)):\n                    return color\n                \n            # Check horizontal\n            for c in 'ABCDEFG':\n                if (c in board and \n                    len(board[c]) > 0 and \n                    board[c][-1] == color):\n                    for j in range(1, 4):\n                        if (len(board.get(chr(ord(c) + j), [])) == 0 or \n                            board[chr(ord(c) + j)][-1] != color):\n                            break\n                    else:\n                        return color\n            \n            # Check diagonal\n            for j in range(-3, 1):\n                if (len(board.get(chr(ord(column) + j), [])) > i and \n                    len(board.get(chr(ord(column) + j + 1), [])) > i + 1 and \n                    len(board.get(chr(ord(column) + j + 2), [])) > i + 2 and \n                    len(board.get(chr(ord(column) + j + 3), [])) > i + 3):\n                    if (board[column][i] == color and \n                        board[chr(ord(column) + j)][i] == color and \n                        board[chr(ord(column) + j + 1)][i + 1] == color and \n                        board[chr(ord(column) + j + 2)][i + 2] == color and \n                        board[chr(ord(column) + j + 3)][i + 3] == color):\n                        return color\n                        \n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCDEFG'[(ord(column)-65):(ord(column)-61)]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row] == color for row in range(row, row + 4)):\n                    return color\n                # Check diagonal (bottom-left to top-right)\n                if column <= 'D' and row >= 3 and all(board[chr(ord(column) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal (top-left to bottom-right)\n                if column <= 'D' and row <= 2 and all(board[chr(ord(column) + i)][row + i] == color for i in range(4)):\n                    return color\n\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n\n        # Check for a winner\n        for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if (0 <= r + 3 * dr < 6) and (0 <= c + 3 * dc < 7):\n                        colors = {board['ABCDEFG'[c + i * dc]][r + i * dr] for i in range(4)}\n                        if len(colors) == 1 and None not in colors:\n                            return colors.pop()\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[COLUMNS[i]][row + i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[COLUMNS[i]][row - i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            # Check horizontal, vertical, and diagonal lines\n            for c in range(7):\n                for r in range(6):\n                    if (c <= 3 and all(board[COLUMNS[c+i]][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[COLUMNS[c]][r+i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[COLUMNS[c+i]][r+i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[COLUMNS[c+i]][r-i] == color for i in range(4))):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n    \n    for color in ['Red', 'Yellow']:\n        for col in board:\n            # Check vertical\n            for i in range(len(board[col]) - 3):\n                if all(board[col][i+j] == color for j in range(4)):\n                    return color\n            # Check horizontal\n            for i in range(len(board)):\n                if len(board[chr(65 + i)]) < 4:\n                    continue\n                for j in range(len(board[chr(65 + i)]) - 3):\n                    if all(board[chr(65 + i)][j+k] == color for k in range(4)):\n                        return color\n            # Check diagonal \\\n            for i in range(len(board) - 3):\n                for j in range(len(board[chr(65 + i)]) - 3):\n                    if all(board[chr(65 + i + k)][j + k] == color for k in range(4)):\n                        return color\n            # Check diagonal /\n            for i in range(3, len(board)):\n                for j in range(len(board[chr(65 + i)]) - 3):\n                    if all(board[chr(65 + i - k)][j + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS = 'ABCDEFG'\n    ROWS = range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    if (j + 3 < 7 and all(board[COLUMNS[j+k]][i] == color for k in range(4))) or \\\n                       (i + 3 < 6 and all(board[COLUMNS[j]][i+k] == color for k in range(4))) or \\\n                       (j + 3 < 7 and i + 3 < 6 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4))) or \\\n                       (j - 3 >= 0 and i + 3 < 6 and all(board[COLUMNS[j-k]][i+k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(7):\n            for j in range(6):\n                if board[chr(i + 65)][j] == color:\n                    if (i <= 3 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                       (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for col, row in moves:\n        for dr, dc in directions:\n            count = 1\n            for d in [1, -1]:\n                r, c = row, ord(col) - ord('A')\n                while 0 <= r + d * dr < 6 and 0 <= c + d * dc < 7 and (chr(c + d * dc + ord('A')), r + d * dr) in moves:\n                    count += 1\n                    r += d * dr\n                    c += d * dc\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 1}\n    moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n        \n        if check_winner(moves[color]):\n            return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n\ndef check_winner(positions):\n    for col, row in positions:\n        if check_direction(positions, col, row, 1, 0) or \\\n           check_direction(positions, col, row, 0, 1) or \\\n           check_direction(positions, col, row, 1, 1) or \\\n           check_direction(positions, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(positions, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(-3, 4):\n        if (chr(ord(col) + i * delta_col), row + i * delta_row) in positions:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDE'):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                   (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                   (row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                   (row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n\n    def check_winner(player):\n        for line in LINES:\n            if all(board[col][row] == player for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(7):\n            for j in range(6):\n                if grid[chr(65 + i)][j] == color:\n                    if i < 4 and all(grid[chr(65 + k)][j] == color for k in range(i, i + 4)):\n                        return True\n                    if j < 3 and all(grid[chr(65 + i)][j + k] == color for k in range(4)):\n                        return True\n                    if i < 4 and j < 3 and all(grid[chr(65 + k)][j + k] == color for k in range(4)):\n                        return True\n                    if i < 4 and j > 2 and all(grid[chr(65 + k)][j - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (\n                        (col <= 3 and all(board[chr(65 + col + k)][row] == color for k in range(4))) or  # horizontal\n                        (row <= 2 and all(board[chr(65 + col)][row + k] == color for k in range(4))) or  # vertical\n                        (col <= 3 and row <= 2 and all(board[chr(65 + col + k)][row + k] == color for k in range(4))) or  # diagonal \\\n                        (col <= 3 and row >= 3 and all(board[chr(65 + col + k)][row - k] == color for k in range(4)))  # diagonal /\n                    ):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j < 4 and all(board[chr(65 + j + k)][i] == color for k in range(4)):\n                    return color\n                if i < 3 and all(board[chr(65 + j)][i + k] == color for k in range(4)):\n                    return color\n                if j < 4 and i < 3 and all(board[chr(65 + j + k)][i + k] == color for k in range(4)):\n                    return color\n                if j < 4 and i > 2 and all(board[chr(65 + j + k)][i - k] == color for k in range(4)):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[chr(col + 65)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {column: [None] * 6 for column in COLUMNS}\n\n    def check_winner(color):\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return True\n        return False\n\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        if check_winner(color):\n            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + dcol * i)\n            r = row + drow * i\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner():\n        for col in board:\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                    return color\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + d_col * step)\n            new_row = row + d_row * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board['ABCDEFG'[col]][row] == color:\n                    if col + 3 < 7 and all(board['ABCDEFG'[col + k]][row] == color for k in range(4)):\n                        return True\n                    if row + 3 < 6 and all(board['ABCDEFG'[col]][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row + 3 < 6 and all(board['ABCDEFG'[col + k]][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row - 3 >= 0 and all(board['ABCDEFG'[col + k]][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n    def check_winner(color):\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    if (r <= 2 and all(board[c][r+i] == color for i in range(4))) or \\\n                       (c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4))) or \\\n                       (r <= 2 and c <= 'D' and all(board[chr(ord(c)+i)][r+i] == color for i in range(4))) or \\\n                       (r >= 3 and c <= 'D' and all(board[chr(ord(c)+i)][r-i] == color for i in range(4))):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n    \n        # Check for a winner\n        for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            # Check in the positive direction\n            r, c = row, 'ABCDEFG'.index(col)\n            while 0 <= r + dr < 6 and 0 <= c + dc < 7 and grid['ABCDEFG'[c + dc]][r + dr] == color:\n                count += 1\n                r += dr\n                c += dc\n            \n            # Check in the negative direction\n            r, c = row, 'ABCDEFG'.index(col)\n            while 0 <= r - dr < 6 and 0 <= c - dc < 7 and grid['ABCDEFG'[c - dc]][r - dr] == color:\n                count += 1\n                r -= dr\n                c -= dc\n            \n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    current_turn = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if board[column][i] is None), None)\n        if row is not None:\n            board[column][row] = color\n            current_turn[color] += 1\n            \n            if check_winner(board, column, row, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    return (check_direction(board, column, row, color, 1, 0) or  # horizontal\n            check_direction(board, column, row, color, 0, 1) or  # vertical\n            check_direction(board, column, row, color, 1, 1) or  # diagonal \\\n            check_direction(board, column, row, color, 1, -1))   # diagonal /\n\ndef check_direction(board, column, row, color, d_col, d_row):\n    count = 0\n    for step in range(-3, 4):\n        c = chr(ord(column) + step * d_col)\n        r = row + step * d_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + i * dc)\n            r = row + i * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'[col.index(col):col.index(col)+4]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == color for col, row in zip('ABCD'[col.index(col):col.index(col)+4], range(row, row - 4, -1))):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == color for col, row in zip('ABCD'[col.index(col):col.index(col)+4], range(row, row + 4))):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    player = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == player for i in range(4)):\n                        return player\n                    # Check horizontal\n                    for offset in range(-3, 1):\n                        if col_index := 'ABCDEFG'.index(col) + offset >= 0 and col_index <= 6:\n                            if all(board['ABCDEFG'[col_index + i]][row] == player for i in range(4)):\n                                return player\n                    # Check diagonal (bottom-left to top-right)\n                    if row <= 2 and col_index <= 3 and all(board['ABCDEFG'[col_index + i]][row + i] == player for i in range(4)):\n                        return player\n                    # Check diagonal (top-left to bottom-right)\n                    if row >= 3 and col_index <= 3 and all(board['ABCDEFG'[col_index + i]][row - i] == player for i in range(4)):\n                        return player\n        return None\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                winner = check_winner()\n                if winner:\n                    return winner\n                break\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is None:\n                    continue\n                color = grid[col][row]\n                # Check horizontal\n                if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                    return color\n                # Check vertical\n                if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                    return color\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return color\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        if (col in grid and \n                            grid[col][row:row+4] == [color] * 4 or \n                            row <= 2 and \n                            all(grid[col][row+k] == color for k in range(4)) or \n                            col in 'ABCDEFG' and \n                            row <= 2 and \n                            all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)) or \n                            col in 'ABCDEFG' and \n                            row >= 3 and \n                            all(grid[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                            return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_col = chr(ord(col) + direction[0] * step)\n                            new_row = row + direction[1] * step\n                            if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    # Check horizontally\n                    if col <= 'D':\n                        if all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                            winner = grid[col][row]\n                    # Check vertically\n                    if row <= 2:\n                        if all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                            winner = grid[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2:\n                        if all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                            winner = grid[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3:\n                        if all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                            winner = grid[col][row]\n\n    if winner is None:\n        return \"Draw\"\n    return winner\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) - k]][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n        \n        # Check for victory\n        if check_victory(player_moves[player]):\n            return player\n            \n    return \"Draw\"\n\ndef check_victory(positions):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    positions_set = set(positions)\n    \n    for x, y in positions:\n        for dx, dy in directions:\n            count = 1\n            for step in range(1, 4):\n                if (chr(ord(x) + step * dx), y + step * dy) in positions_set:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                if (chr(ord(x) - step * dx), y - step * dy) in positions_set:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 4 + 1, len(board[column])):\n                if board[column][row] == board[column][row - 1] == board[column][row - 2] == board[column][row - 3]:\n                    return color\n                    \n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row >= 3:\n                if board[col][row] == board[col][row - 1] == board[col][row - 2] == board[col][row - 3]:\n                    return board[col][row]\n                \n            if col in 'ABCDEFG' and row < len(board[col]) - 3:\n                for i in range(4):\n                    if row + i < len(board[col]) and board[col][row] == board[col][row + i]:\n                        if all(row + j < len(board[col]) and board[col][row] == board[col][row + j] for j in range(4)):\n                            return board[col][row]\n    \n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row >= 3 and col <= 'D':\n                if all((col, row - i) in board and board[col][row - i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                \n            if row < len(board[col]) - 3 and col <= 'D':\n                for i in range(4):\n                    if board[col][row] == board[col][row + i] and all(board[col][row] == board[col][row + j] for j in range(4)):\n                        return board[col][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + d_col * i)\n            r = row + d_row * i\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in get_lines(board):\n            if line.count('Red') == 4:\n                return \"Red\"\n            if line.count('Yellow') == 4:\n                return \"Yellow\"\n    \n    return \"Draw\"\n\ndef get_lines(board):\n    lines = []\n    # Vertical\n    for col in board:\n        lines.append([board[col][row] for row in range(6)])\n    \n    # Horizontal\n    for row in range(6):\n        lines.append([board[col][row] for col in board])\n    \n    # Diagonal /\n    for col in range(4):\n        for row in range(3, 6):\n            lines.append([board[COLUMNS[col + i]][row - i] for i in range(4)])\n    \n    # Diagonal \\\n    for col in range(4):\n        for row in range(6):\n            if row <= 2:\n                lines.append([board[COLUMNS[col + i]][row + i] for i in range(4)])\n    \n    return lines\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (row <= 2 and all(grid[col][row + i] == color for i in range(4))) or \\\n                       (col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4))) or \\\n                       (col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4))) or \\\n                       (col >= 'D' and row <= 2 and all(grid[chr(ord(col) - i)][row + i] == color for i in range(4))):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if (col + 3 < 7 and all(board[chr(col + k + 65)][row] == color for k in range(4))) or \\\n                       (row + 3 < 6 and all(board[chr(col + 65)][row + k] == color for k in range(4))) or \\\n                       (col + 3 < 7 and row + 3 < 6 and all(board[chr(col + k + 65)][row + k] == color for k in range(4))) or \\\n                       (col + 3 < 7 and row - 3 >= 0 and all(board[chr(col + k + 65)][row - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n\n                    # Horizontal\n                    if col <= 'D':\n                        if all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n\n                    # Vertical\n                    if row <= 2:\n                        if all(board[col][row + i] == color for i in range(4)):\n                            return color\n\n                    # Diagonal \\\n                    if col <= 'D' and row <= 2:\n                        if all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n\n                    # Diagonal /\n                    if col <= 'D' and row >= 3:\n                        if all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def drop_piece(col, color):\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                return row, col\n        return None\n\n    def check_winner(color):\n        for row in range(6):\n            for col in range(7):\n                if board[COLUMNS[col]][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board[COLUMNS[col + i]][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[COLUMNS[col]][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(board[COLUMNS[col + i]][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col >= 3 and row <= 2 and all(board[COLUMNS[col - i]][row + i] == color for i in range(4)):\n                        return True\n        return False\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        drop_piece(col, color)\n        if check_winner(color):\n            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(ROWS):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(len(COLUMNS)):\n            for j in range(len(ROWS)):\n                if (i + 3 < len(COLUMNS) and all(grid[COLUMNS[i + k]][j] == color for k in range(4))) or \\\n                   (j + 3 < len(ROWS) and all(grid[COLUMNS[i]][j + k] == color for k in range(4))) or \\\n                   (i + 3 < len(COLUMNS) and j + 3 < len(ROWS) and all(grid[COLUMNS[i + k]][j + k] == color for k in range(4))) or \\\n                   (i + 3 < len(COLUMNS) and j - 3 >= 0 and all(grid[COLUMNS[i + k]][j - k] == color for k in range(4))):\n                    return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board[chr(col + i + 65)][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[chr(col + 65)][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(board[chr(col + i + 65)][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col >= 3 and row <= 2 and all(board[chr(col - i + 65)][row + i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check for vertical\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check for horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check for diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check for diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j < 4 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return color\n                if i < 3 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return color\n                if i < 3 and j < 4 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return color\n                if i >= 3 and j < 4 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win condition\n        for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            # Count in the positive direction\n            r, c = row, COLUMNS.index(col)\n            while 0 <= r + dr < 6 and 0 <= c + dc < 7 and board[COLUMNS[c + dc]][r + dr] == color:\n                count += 1\n                r += dr\n                c += dc\n            \n            # Count in the negative direction\n            r, c = row, COLUMNS.index(col)\n            while 0 <= r - dr < 6 and 0 <= c - dc < 7 and board[COLUMNS[c - dc]][r - dr] == color:\n                count += 1\n                r -= dr\n                c -= dc\n            \n            if count >= 4:\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (row <= 2 and all(board[col][row+i] == board[col][row] for i in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col)+i)][row] == board[col][row] for i in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == board[col][row] for i in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(board[chr(ord(col)+i)][row-i] == board[col][row] for i in range(4))):\n                        return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if all(board[COLUMNS[i]][row] == color for i in range(max(0, ord(col) - ord('A')), min(7, ord(col) - ord('A') + 4))):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    elif len(pieces_positions) >= 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal (down-right)\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal (up-right)\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal up-right\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCD'[('A' <= col) * 1:('G' >= col) * 1 + 4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal\n    for row in range(6):\n        count = 0\n        for column in 'ABCDEFG':\n            if board[column][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check vertical\n    for column in 'ABCDEFG':\n        count = 0\n        for row in range(6):\n            if board[column][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check diagonal /\n    for col in range(4):\n        for row in range(3, 6):\n            if all(board[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                return True\n\n    # Check diagonal \\\n    for col in range(4):\n        for row in range(6):\n            if row + 3 < 6 and all(board[chr(col + ord('A') + k)][row + k] == color for k in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if grid[chr(c + 65)][r] == color:\n                    if c <= 3 and all(grid[chr(c + k + 65)][r] == color for k in range(4)):\n                        return color\n                    if r <= 2 and all(grid[chr(c + k + 65)][r + k] == color for k in range(4)):\n                        return color\n                    if r >= 3 and all(grid[chr(c + k + 65)][r - k] == color for k in range(4)):\n                        return color\n                    if c <= 3 and r <= 2 and all(grid[chr(c + k + 65)][r + k] == color for k in range(4)):\n                        return color\n        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(col + 65)][row] == color:\n                    if col <= 3 and all(grid[chr(col + k + 65)][row] == color for k in range(4)):\n                        return color\n                    if row <= 2 and all(grid[chr(col + 65)][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 3 and row <= 2 and all(grid[chr(col + k + 65)][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 3 and row >= 3 and all(grid[chr(col + k + 65)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col)+k)][row] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player].append((column, row))\n                break\n        \n        for player in ['Red', 'Yellow']:\n            if check_winner(player_moves[player]):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    positions = {(col, row) for col, row in moves}\n    \n    for col, row in moves:\n        for d in directions:\n            count = 1\n            for step in [1, -1]:\n                for i in range(1, 4):\n                    new_col = chr(ord(col) + d[0] * step * i)\n                    new_row = row + d[1] * step * i\n                    if (new_col, new_row) in positions:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        # Check if this move wins the game\n        if check_winner(player_moves[player], board):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(moves, board):\n    for col, row in moves:\n        if (check_direction(col, row, 1, 0, board) or  # Horizontal\n                check_direction(col, row, 0, 1, board) or  # Vertical\n                check_direction(col, row, 1, 1, board) or  # Diagonal \\\n                check_direction(col, row, 1, -1, board)):  # Diagonal /\n            return True\n    return False\n\ndef check_direction(col, row, delta_col, delta_row, board):\n    count = 1\n    player = board[col][row]\n\n    # Check one direction\n    for step in range(1, 4):\n        new_col = chr(ord(col) + delta_col * step)\n        new_row = row + delta_row * step\n        if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == player:\n            count += 1\n        else:\n            break\n\n    # Check the opposite direction\n    for step in range(1, 4):\n        new_col = chr(ord(col) - delta_col * step)\n        new_row = row - delta_row * step\n        if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == player:\n            count += 1\n        else:\n            break\n\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {column: [None] * 6 for column in COLUMNS}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                player_moves[color].append((col, row))\n                break\n\n    def check_winner(color):\n        for col, row in player_moves[color]:\n            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                count = 1\n                for step in range(1, 4):\n                    new_col = chr(ord(col) + direction[0] * step)\n                    new_row = row + direction[1] * step\n                    if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                        count += 1\n                    else:\n                        break\n                for step in range(1, 4):\n                    new_col = chr(ord(col) - direction[0] * step)\n                    new_row = row - direction[1] * step\n                    if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n        return None\n\n    red_winner = check_winner('Red')\n    yellow_winner = check_winner('Yellow')\n\n    if red_winner:\n        return 'Red'\n    if yellow_winner:\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4))) or \\\n                   (i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4))) or \\\n                   (j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4))) or \\\n                   (j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4))):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[(ord(col) - ord('A')):(ord(col) - ord('A')) + 4]):\n                        return color\n                    # Vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row - k] == color for k in range(4)):\n                        return color\n                    # Diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_win(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return True\n                    if col in 'ABCDEF' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return True\n                    if row <= 2 and col in 'ABCDEFG' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return True\n                    if row >= 3 and col in 'ABCDEFG' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_win(\"Red\"):\n        return \"Red\"\n    elif check_win(\"Yellow\"):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n    for column in 'ABCDEFG':\n        for row in range(6):\n            if board[column][row] is None:\n                continue\n            color = board[column][row]\n            # Check vertical\n            if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                return color\n            # Check horizontal\n            for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n                if all(board[chr(c + ord('A'))][row] == color for c in range(c, c + 4)):\n                    return color\n            # Check diagonal \\\n            if row <= 2 and ord(column) <= 3 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                return color\n            # Check diagonal /\n            if row >= 3 and ord(column) <= 3 and all(board[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if col in 'ABCD' and all(grid[col][row] == grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return True\n                    if row <= 2 and all(grid[col][row] == grid[col][row + i] == color for i in range(4)):\n                        return True\n                    if col in 'ABCD' and row <= 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return True\n                    if col in 'ABCD' and row >= 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for step in [1, -1]:\n                for i in range(1, 4):\n                    r = row + direction[0] * i * step\n                    c = 'ABCDEFG'.index(col) + direction[1] * i * step\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[x][y] for x, y in line if (x in board and y < 6 and board[x][y] is not None)]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board.get(chr(c + 65), [None]*6)[r] == color:\n                        count = 0\n                        for step in range(4):\n                            nr = r + direction[0] * step\n                            nc = c + direction[1] * step\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board.get(chr(nc + 65), [None]*6)[nr] == color:\n                                count += 1\n                        if count == 4:\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            x, y = ord(col) - ord('A') + step * dx, row + step * dy\n                            if 0 <= x < 7 and 0 <= y < 6 and (board[chr(x + ord('A'))][y] == board[col][row]):\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = color\n                break\n\n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(65 + col)][row] == color:\n                    if col <= 3 and all(grid[chr(65 + col + k)][row] == color for k in range(4)):\n                        return True\n                    if row <= 2 and all(grid[chr(65 + col)][row + k] == color for k in range(4)):\n                        return True\n                    if col <= 3 and row <= 2 and all(grid[chr(65 + col + k)][row + k] == color for k in range(4)):\n                        return True\n                    if col <= 3 and row >= 3 and all(grid[chr(65 + col + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j < 4 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4))) or \\\n                   (i < 3 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4))) or \\\n                   (i < 3 and j < 4 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4))) or \\\n                   (i >= 3 and j < 4 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for win condition\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(65 + col)][row] == color:  # A-G\n                    if col <= 3 and all(grid[chr(65 + col + k)][row] == color for k in range(4)):\n                        winner = color\n                    if row <= 2 and all(grid[chr(65 + col)][row + k] == color for k in range(4)):\n                        winner = color\n                    if col <= 3 and row <= 2 and all(grid[chr(65 + col + k)][row + k] == color for k in range(4)):\n                        winner = color\n                    if col <= 3 and row >= 3 and all(grid[chr(65 + col + k)][row - k] == color for k in range(4)):\n                        winner = color\n\n        if winner:\n            return winner\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(7):\n            for j in range(6):\n                if (j < 3 and all(board[chr(65 + i)][j + k] == color for k in range(4))) or \\\n                   (i < 4 and all(board[chr(65 + i + k)][j] == color for k in range(4))) or \\\n                   (i < 4 and j < 3 and all(board[chr(65 + i + k)][j + k] == color for k in range(4))) or \\\n                   (i < 4 and j > 2 and all(board[chr(65 + i + k)][j - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is not None:\n                    color = board[column][row]\n                    if (row <= 2 and all(board[column][row + i] == color for i in range(4))) or \\\n                       (column <= 'D' and all(board[chr(ord(column) + i)][row] == color for i in range(4))) or \\\n                       (row <= 2 and column <= 'D' and all(board[chr(ord(column) + i)][row + i] == color for i in range(4))) or \\\n                       (row >= 3 and column <= 'D' and all(board[chr(ord(column) + i)][row - i] == color for i in range(4))):\n                        return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] == color:  # chr(c + 65) to get columns A-G\n                    if (c <= 3 and all(board[chr(c + k + 65)][r] == color for k in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + k + 65)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + k + 65)][r - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row+i] == color for i in range(4))) or \\\n                           (col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4))) or \\\n                           (row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == color for i in range(4))) or \\\n                           (row >= 3 and col <= 'D' and all(board[chr(ord(col)+i)][row-i] == color for i in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] is not None:\n                color = board[col][row]\n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                    return color\n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                    return color\n                # Check diagonal down-right\n                if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return color\n                # Check diagonal down-left\n                if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                    return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(grid[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j < 4 and all(board[chr(c)][i] == color for c in range(ord('A') + j, ord('A') + j + 4)):\n                    return color\n                if i < 3 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)):\n                    return color\n                if i < 3 and j < 4 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4) for j in range(4)):\n                    return color\n                if i >= 3 and j < 4 and all(board[chr(j + ord('A'))][i - k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i in range(6) if grid[column][i] is None)\n        grid[column][row] = color\n        \n        if check_winner(grid, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, column, row, color):\n    # Check horizontal, vertical and both diagonals\n    return (check_line(grid, color, 0, 1, column, row) or\n            check_line(grid, color, 1, 0, column, row) or\n            check_line(grid, color, 1, 1, column, row) or\n            check_line(grid, color, 1, -1, column, row))\n\ndef check_line(grid, color, delta_row, delta_col, start_col, start_row):\n    count = 0\n    for step in range(-3, 4):\n        col = chr(ord(start_col) + step * delta_col)\n        if col in grid:\n            row = start_row + step * delta_row\n            if 0 <= row < 6 and grid[col][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for c in range(7):\n            for r in range(6):\n                if (\n                    (c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or\n                    (r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or\n                    (c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or\n                    (c + 3 < 7 and r - 3 >= 0 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)))\n                ):\n                    return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row - i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    else:\n        return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a winner after each move\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if board[chr(65 + col)][row] == color:\n                    if (col <= 3 and all(board[chr(65 + col + i)][row] == color for i in range(4)) or\n                        row <= 2 and all(board[chr(65 + col)][row + i] == color for i in range(4)) or\n                        col <= 3 and row <= 2 and all(board[chr(65 + col + i)][row + i] == color for i in range(4)) or\n                        col <= 3 and row >= 3 and all(board[chr(65 + col + i)][row - i] == color for i in range(4))):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                r = row\n                c = 'ABCDEFG'.index(col)\n                while 0 <= r + d * direction[1] < 6 and 0 <= c + d * direction[0] < 7:\n                    r += d * direction[1]\n                    c += d * direction[0]\n                    if r < 0 or c < 0 or c >= 7 or board['ABCDEFG'[c]][r] != color:\n                        break\n                    count += 1\n                if count >= 4:\n                    return color\n\n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCDEFG'[(ord(column)-65):(ord(column)-61)]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row] == color for row in range(row, row + 4)):\n                    return color\n                # Check diagonal (bottom-left to top-right)\n                if column <= 'D' and row >= 3 and all(board[chr(ord(column) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal (top-left to bottom-right)\n                if column <= 'D' and row <= 2 and all(board[chr(ord(column) + i)][row + i] == color for i in range(4)):\n                    return color\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        all(grid[c][row] == color for c in 'ABCDEFG' if grid[c][row] is not None) or\n                        all(grid[COLUMNS[i][j]][row + j] == color for j in range(4) \n                            if row + j < 6 and i < len(COLUMNS)) or\n                        all(grid[COLUMNS[i][3 - j]][row + j] == color for j in range(4) \n                            if row + j < 6 and 3 - j >= 0)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c].count(color) > 0 for c in line):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(k + 65)][j] == color for k in range(i, i + 4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < len(board[x]))):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (\n                        all(grid[col][row] == grid[c][row] for c in 'ABCDEFG' if c in grid) or\n                        all(grid[col][row] == grid[col][r] for r in range(6) if r < 6) or\n                        all(grid[col][row] == grid[c][row + k] for k, c in enumerate('ABCDEFG') if 0 <= row + k < 6) or\n                        all(grid[col][row] == grid[c][row - k] for k, c in enumerate('ABCDEFG') if 0 <= row - k < 6)\n                    ):\n                        return color\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for win_positions in LINES:\n        colors = {color for pos in win_positions for color in [board[pos[0]][pos[1]] if board[pos[0]][pos[1]] is not None else 'None']}\n        if 'Red' in colors and len(colors) == 1:\n            return 'Red'\n        if 'Yellow' in colors and len(colors) == 1:\n            return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Horizontal check\n                    if c <= 'D' and all(board[c][r] == board[c][r] for c in 'DEFG' if board[c][r] == board[c][r]):\n                        return board[c][r]\n                    # Vertical check\n                    if r <= 2 and all(board[c][r] == board[c][r] for r in range(r, r + 4)):\n                        return board[c][r]\n                    # Diagonal /\n                    if c <= 'D' and r >= 3 and all(board[c][r] == board[c][r] for c in 'DEFG' if board[c][r] == board[c][r]):\n                        return board[c][r]\n                    # Diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[c][r] == board[c][r] for c in 'DEFG' if board[c][r] == board[c][r]):\n                        return board[c][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, start_col, start_row, color, delta_col, delta_row):\n    count = 0\n    col_index = 'ABCDEFG'.index(start_col)\n    for step in range(4):\n        col = col_index + step * delta_col\n        row = start_row + step * delta_row\n        if 0 <= col < 7 and 0 <= row < 6 and board['ABCDEFG'[col]][row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col].count(color) > 0 and (row := board[col].index(color)) in line for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 1}\n    moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n        \n        if check_winner(moves[color]):\n            return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n\ndef check_winner(positions):\n    for pos in positions:\n        if count_consecutive(positions, pos) >= 4:\n            return True\n    return False\n\ndef count_consecutive(positions, start):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    count = 0\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            next_pos = (chr(ord(start[0]) + step * dx), start[1] + step * dy)\n            if next_pos in positions:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return count\n    return count\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or\n                    check_direction(board, col, row, 0, 1, color) or\n                    check_direction(board, col, row, 1, 1, color) or\n                    check_direction(board, col, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check for horizontal, vertical, and diagonal wins\n            for i in range(7):\n                for j in range(6):\n                    if grid[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(grid[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j <= 2 and all(grid[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(grid[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(grid[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if len(board[column]) < 6:\n            board[column].append(color)\n            if check_winner(board, column, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    return (check_direction(board, column, row, color, 1, 0) or  # horizontal\n            check_direction(board, column, row, color, 0, 1) or  # vertical\n            check_direction(board, column, row, color, 1, 1) or  # diagonal \\\n            check_direction(board, column, row, color, 1, -1)    # diagonal /\n           )\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 1\n    for direction in [1, -1]:  # Check in both directions\n        for step in range(1, 4):\n            col = chr(ord(column) + step * delta_col * direction)\n            r = row + step * delta_row * direction\n            if col in board and r in range(6) and (len(board[col]) > r) and board[col][r] == color:\n                count += 1\n            else:\n                break\n            if count == 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                   (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                   (row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                   (row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontally\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) + 4]):\n                        return True\n                    # Check vertically\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonally \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonally /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return True\n        return False\n\n    red_wins = check_winner('Red')\n    yellow_wins = check_winner('Yellow')\n\n    if red_wins and yellow_wins:\n        return \"Draw\"\n    elif red_wins:\n        return \"Red\"\n    elif yellow_wins:\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = player\n                player_moves[player] += 1\n                if check_winner(grid, player):\n                    return player\n                break\n    \n    return \"Draw\"\n\ndef check_winner(grid, player):\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == player:\n                for d in directions:\n                    count = 1\n                    for step in range(1, 4):\n                        new_col = chr(ord(col) + d[0] * step)\n                        new_row = row + d[1] * step\n                        if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == player:\n                            count += 1\n                        else:\n                            break\n                    if count >= 4:\n                        return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for player in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (\n                        (col <= 3 and all(board[chr(65 + col + k)][row] == player for k in range(4))) or  # horizontal\n                        (row <= 2 and all(board[chr(65 + col)][row + k] == player for k in range(4))) or  # vertical\n                        (col <= 3 and row <= 2 and all(board[chr(65 + col + k)][row + k] == player for k in range(4))) or  # diagonal \\\n                        (col <= 3 and row >= 3 and all(board[chr(65 + col + k)][row - k] == player for k in range(4)))  # diagonal /\n                    ):\n                        return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j < 4 and all(board[chr(65 + j + k)][i] == color for k in range(4)):\n                    return color\n                if i < 3 and all(board[chr(65 + j)][i + k] == color for k in range(4)):\n                    return color\n                if j < 4 and i < 3 and all(board[chr(65 + j + k)][i + k] == color for k in range(4)):\n                    return color\n                if j < 4 and i > 2 and all(board[chr(65 + j + k)][i - k] == color for k in range(4)):\n                    return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[chr(col + 65)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {column: [None] * 6 for column in COLUMNS}\n\n    def check_winner(color):\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return True\n        return False\n\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        if check_winner(color):\n            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + dcol * step)\n            r = row + drow * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        if check_winner(board, player):\n            return player\n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, col, row, player):\n                    return True\n    return False\n\ndef check_direction(board, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + d_col * step)\n            new_row = row + d_row * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == player:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check horizontally\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCDE'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                        return color\n                    # Check vertically\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonally \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == color for col in 'ABCDE'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4] if row + 'ABCDEFG'.index(col) - 'ABCDEFG'.index(col) in range(6)):\n                        return color\n                    # Check diagonally /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == color for col in 'ABCDE'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4] if row - 'ABCDEFG'.index(col) + 'ABCDEFG'.index(col) in range(6)):\n                        return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n    \n    for line in LINES:\n        colors = [board[column].count('Red') for column, row in line]\n        if any(c == 4 for c in colors):\n            return \"Red\"\n        \n        colors = [board[column].count('Yellow') for column, row in line]\n        if any(c == 4 for c in colors):\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for r in range(6):\n                if board[col][r] is None:\n                    continue\n                \n                # Check vertical\n                if r <= 2 and all(board[col][r + i] == color for i in range(4)):\n                    return color\n                \n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + i)][r] == color for i in range(4)):\n                    return color\n                \n                # Check diagonal \\\n                if col <= 'D' and r <= 2 and all(board[chr(ord(col) + i)][r + i] == color for i in range(4)):\n                    return color\n                \n                # Check diagonal /\n                if col <= 'D' and r >= 3 and all(board[chr(ord(col) + i)][r - i] == color for i in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for i in range(1, 4):\n            x, y = ord(col) - ord('A') + i * dx, row + i * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            x, y = ord(col) - ord('A') - i * dx, row - i * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n    def check_winner(color):\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    # Check horizontal\n                    if c <= 'D' and all(grid[c][r] == color for c in 'DEFG'):\n                        return True\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r] == color for c in 'ABCDEFG'):\n                        return True\n                    # Check diagonal down-right\n                    if c <= 'D' and r <= 2 and all(grid[c][r] == color for i in range(4) for c in 'DEFG'[i:i+1]):\n                        return True\n                    # Check diagonal down-left\n                    if c >= 'D' and r <= 2 and all(grid[c][r] == color for i in range(4) for c in 'ABCDEFG'[-i-1:][:1]):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_col = chr(ord(col) + direction[0] * step)\n                            new_row = row + direction[1] * step\n                            if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    # Check horizontally\n                    if col <= 'D':\n                        if all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                            winner = grid[col][row]\n                    # Check vertically\n                    if row <= 2:\n                        if all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                            winner = grid[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2:\n                        if all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                            winner = grid[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3:\n                        if all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                            winner = grid[col][row]\n\n    if winner is None:\n        return \"Draw\"\n    return winner\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) - k]][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n        \n        # Check for victory\n        if check_victory(player_moves[player]):\n            return player\n            \n    return \"Draw\"\n\ndef check_victory(positions):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    positions_set = set(positions)\n    \n    for x, y in positions:\n        for dx, dy in directions:\n            count = 1\n            for step in range(1, 4):\n                if (chr(ord(x) + step * dx), y + step * dy) in positions_set:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                if (chr(ord(x) - step * dx), y - step * dy) in positions_set:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + d_col * i)\n            r = row + d_row * i\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        current_col = chr(ord(col) + delta_col * i)\n        current_row = row + delta_row * i\n        if 0 <= current_row < 6 and current_col in board and board[current_col][current_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n                     for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] + \\\n                     [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n                     for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] + \\\n                     [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n                     for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] + \\\n                     [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n                     for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and len(set(colors)) == 1:\n                return colors[0]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (row <= 2 and all(grid[col][row + k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                       (col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                       (col >= 'D' and row <= 2 and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4))):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + i * dc)\n            r = row + i * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Horizontal\n                    if col <= 'D':\n                        if all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                    # Vertical\n                    if row <= 2:\n                        if all(board[col][row + i] == color for i in range(4)):\n                            return color\n                    # Diagonal \\\n                    if col <= 'D' and row <= 2:\n                        if all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                    # Diagonal /\n                    if col <= 'D' and row >= 3:\n                        if all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row]:\n                    piece = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == piece for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                        return piece\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == piece for row in range(row, row + 4)):\n                        return piece\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == piece for col, row in zip('ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4], range(row, row - 4, -1))):\n                        return piece\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == piece for col, row in zip('ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4], range(row, row + 4))):\n                        return piece\n        return None\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = player\n                winner = check_winner()\n                if winner:\n                    return winner.split('_')[1]\n                break\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a winner\n        for i in range(7):\n            for j in range(6):\n                if board[COLUMNS[i]][j] is not None:\n                    color = board[COLUMNS[i]][j]\n                    # Check horizontal\n                    if i <= 3 and all(board[COLUMNS[i + k]][j] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if j <= 2 and all(board[COLUMNS[i]][j + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if i <= 3 and j <= 2 and all(board[COLUMNS[i + k]][j + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if i >= 3 and j <= 2 and all(board[COLUMNS[i - k]][j + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[chr(k + 65)][i] == color for k in range(j, j + 4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[chr(j + 65)][k] == color for k in range(i, i + 4)):\n                        return color\n                    # Check diagonal \\\n                    if i <= 2 and j <= 3 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if i >= 3 and j <= 3 and all(board[chr(j + k + 65)][i - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is not None:\n                    color = board[column][row]\n                    # Check horizontally\n                    if column <= 'D' and all(board[column][row] == color for column in 'ABCDEFG'[COLUMNS.index(column):COLUMNS.index(column) + 4]):\n                        return color\n                    # Check vertically\n                    if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if column <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(column) + k]][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if column <= 'D' and row >= 3 and all(board[COLUMNS[COLUMNS.index(column) + k]][row - k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            x, y = ord(col) - ord('A') + dx * step, row + dy * step\n                            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == board[col][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win condition\n        for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            # Count in the positive direction\n            r, c = row, COLUMNS.index(col)\n            while 0 <= r + dr < 6 and 0 <= c + dc < 7 and board[COLUMNS[c + dc]][r + dr] == color:\n                count += 1\n                r += dr\n                c += dc\n            \n            # Count in the negative direction\n            r, c = row, COLUMNS.index(col)\n            while 0 <= r - dr < 6 and 0 <= c - dc < 7 and board[COLUMNS[c - dc]][r - dr] == color:\n                count += 1\n                r -= dr\n                c -= dc\n            \n            if count >= 4:\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner():\n        for col in board:\n            for row in range(6):\n                if board[col][row]:\n                    piece = board[col][row]\n                    if any(all(board[c][r] == piece for c, r in line) for line in LINES):\n                        return piece\n        return None\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                winner = check_winner()\n                if winner:\n                    return winner.split('_')[1]\n                break\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for d in [1, -1]:\n            c, r = col, row\n            while True:\n                c = chr(ord(c) + dc * d)\n                r += dr * d\n                if c in board and 0 <= r < 6 and board[c][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS = 'ABCDEFG'\n    ROWS = range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    def drop_piece(col, color):\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                return True\n        return False\n\n    def check_winner(color):\n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[COLUMNS[i]][row - (i - COLUMNS.index(col))] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[i]][row + (i - COLUMNS.index(col))] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n        return None\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        if drop_piece(col, color):\n            winner = check_winner(color)\n            if winner:\n                return winner\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (col in 'ABCDEFG' and\n                        all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4])) or \\\n                       (row <= 2 and all(board[col][row+k] == color for k in range(4))) or \\\n                       (row <= 2 and col in 'ABCDEFG' and\n                        all(board[COLUMNS[COLUMNS.index(col)+k]][row+k] == color for k in range(4))) or \\\n                       (row >= 3 and col in 'ABCDEFG' and\n                        all(board[COLUMNS[COLUMNS.index(col)+k]][row-k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(len(COLUMNS)):\n            for j in range(len(ROWS)):\n                if (i + 3 < len(COLUMNS) and \n                    all(grid[COLUMNS[i+k]][j] == color for k in range(4))):\n                    return color\n                if (j + 3 < len(ROWS) and \n                    all(grid[COLUMNS[i]][j+k] == color for k in range(4))):\n                    return color\n                if (i + 3 < len(COLUMNS) and j + 3 < len(ROWS) and \n                    all(grid[COLUMNS[i+k]][j+k] == color for k in range(4))):\n                    return color\n                if (i + 3 < len(COLUMNS) and j - 3 >= 0 and \n                    all(grid[COLUMNS[i+k]][j-k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    current_player = {'Red': 1, 'Yellow': 2}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for player in current_player.keys():\n            if check_winner(board, player):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, col, row, player):\n                    return True\n    return False\n\ndef check_direction(board, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for i in range(4):\n            x = ord(col) - ord('A') + i * dx\n            y = row + i * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == player:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if row <= 2 and col >= 'D' and all(grid[chr(ord(col)-i)][row+i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * d * step\n                    c = 'ABCDEFG'.index(column) + direction[1] * d * step\n                    \n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    if i + 3 < 6 and j + 3 < 7 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n                    if i - 3 >= 0 and j + 3 < 7 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check horizontally\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return board[col][row]\n                    # Check vertically\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            player_moves[color].append((col, row))\n            if check_winner(player_moves[color], board):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(moves, board):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for col, row in moves:\n        for d_col, d_row in directions:\n            count = 1\n            for step in range(1, 4):\n                new_col = chr(ord(col) + d_col * step)\n                new_row = row + d_row * step\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == board[col][row]:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                new_col = chr(ord(col) - d_col * step)\n                new_row = row - d_row * step\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == board[col][row]:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (c < 4 and all(board[chr(c + k + 65)][r] == color for k in range(4))) or \\\n                       (r < 3 and all(board[chr(c + 65)][r + k] == color for k in range(4))) or \\\n                       (c < 4 and r < 3 and all(board[chr(c + k + 65)][r + k] == color for k in range(4))) or \\\n                       (c > 2 and r < 3 and all(board[chr(c - k + 65)][r + k] == color for k in range(4))):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [\n            [(0, 1), (0, 2), (0, 3)],  # Vertical\n            [(1, 0), (2, 0), (3, 0)],  # Horizontal\n            [(1, 1), (2, 2), (3, 3)],  # Diagonal /\n            [(1, -1), (2, -2), (3, -3)],  # Diagonal \\\n        ]:\n            for row in range(6):\n                for col in range(7):\n                    if board[chr(ord('A') + col)][row] is not None:\n                        count = 1\n                        for dr, dc in direction:\n                            r, c = row + dr, col + dc\n                            if 0 <= r < 6 and 0 <= c < 7 and board[chr(ord('A') + c)][r] == board[chr(ord('A') + col)][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return board[chr(ord('A') + col)][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (col + str(row)).count(color) >= 4:\n                        return color\n                    if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n    for column in 'ABCDEFG':\n        for row in range(6):\n            if board[column][row] is not None:\n                color = board[column][row]\n\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                \n                # Check horizontal\n                if all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(column), COLUMNS.index(column) + 4)):\n                    return color\n\n                # Check diagonal /\n                if column <= 'D' and row >= 3 and all(board[COLUMNS[COLUMNS.index(column) + k]][row - k] == color for k in range(4)):\n                    return color\n\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(column) + k]][row + k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if (col <= 3 and all(board['ABCDEFG'[col + i]][row] == color for i in range(4))) or \\\n                   (row <= 2 and all(board['ABCDEFG'[col]][row + i] == color for i in range(4))) or \\\n                   (col <= 3 and row <= 2 and all(board['ABCDEFG'[col + i]][row + i] == color for i in range(4))) or \\\n                   (col <= 3 and row >= 3 and all(board['ABCDEFG'[col + i]][row - i] == color for i in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board[chr(c + 65)][r] == color:  # 65 is ASCII for 'A'\n                        count = 1\n                        for step in range(1, 4):\n                            nr, nc = r + direction[0] * step, c + direction[1] * step\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board[chr(nc + 65)][nr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if (col + 3 < 7 and all(board[chr(col + i + 65)][row] == color for i in range(4))) or \\\n                       (row + 3 < 6 and all(board[chr(col + 65)][row + i] == color for i in range(4))) or \\\n                       (col + 3 < 7 and row + 3 < 6 and all(board[chr(col + i + 65)][row + i] == color for i in range(4))) or \\\n                       (col + 3 < 7 and row - 3 >= 0 and all(board[chr(col + i + 65)][row - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n                if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                   (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                   (col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                   (col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                    return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if (row <= 2 and all(board[col][row+i] == color for i in range(4))) or \\\n                   (col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4))) or \\\n                   (row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == color for i in range(4))) or \\\n                   (row >= 3 and col <= 'D' and all(board[chr(ord(col)+i)][row-i] == color for i in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (col + str(row)) in [f'{c}{r}' for c in 'ABCDEFG' for r in range(6) if board[c][r] == color]:\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return True\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return True\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return True\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = color\n                break\n\n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(65 + col)][row] == color:\n                    if col <= 3 and all(grid[chr(65 + col + k)][row] == color for k in range(4)):\n                        return True\n                    if row <= 2 and all(grid[chr(65 + col)][row + k] == color for k in range(4)):\n                        return True\n                    if col <= 3 and row <= 2 and all(grid[chr(65 + col + k)][row + k] == color for k in range(4)):\n                        return True\n                    if col <= 3 and row >= 3 and all(grid[chr(65 + col + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    player_turn = {\"Red\": 0, \"Yellow\": 0}\n    \n    for move in pieces_positions:\n        col, player = move.split(\"_\")\n        row = board[col].index(None)\n        board[col][row] = player\n        player_turn[player] += 1\n        \n        # Check for a win\n        if check_winner(board, player):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, col, row, player):\n                    return True\n    return False\n\ndef check_direction(board, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + dx * step)\n            new_row = row + dy * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == player:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if grid[chr(c + 65)][r] == color:\n                    # Check horizontal\n                    if c <= 3 and all(grid[chr(c + i + 65)][r] == color for i in range(4)):\n                        winner = color\n                    # Check vertical\n                    if r <= 2 and all(grid[chr(c + 65)][r + i] == color for i in range(4)):\n                        winner = color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        winner = color\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(grid[chr(c - i + 65)][r + i] == color for i in range(4)):\n                        winner = color\n\n        if winner:\n            return winner\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(7):\n            for j in range(6):\n                if board[chr(65 + i)][j] == color:\n                    if i <= 3 and all(board[chr(65 + i + k)][j] == color for k in range(4)):\n                        return color\n                    if j <= 2 and all(board[chr(65 + i)][j + k] == color for k in range(4)):\n                        return color\n                    if i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == color for k in range(4)):\n                        return color\n                    if i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4) if chr(ord(col) + i) in board):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4) if chr(ord(col) + i) in board):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4) if chr(ord(col) + i) in board):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] == color:  # chr(c + 65) to get columns A-G\n                    if (c <= 3 and all(board[chr(c + k + 65)][r] == color for k in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + k + 65)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + k + 65)][r - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    for offset in range(-3, 1):\n                        if all(board[COLUMNS[i + offset]][row] == color for i in range(4)):\n                            return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[COLUMNS[col_idx]][row + col_idx] == color for col_idx in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[COLUMNS[col_idx]][row - col_idx] == color for col_idx in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\" if len(set(board[col][row] for col in board for row in range(6) if board[col][row] is not None)) == 2 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for column in grid:\n            for row in range(6):\n                if grid[column][row] == color:\n                    # Check horizontal\n                    if column <= 'D' and all(grid[chr(ord(column) + k)][row] == color for k in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if column <= 'D' and row >= 3 and all(grid[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if column <= 'D' and row <= 2 and all(grid[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (row + 3 < 6 and all(board[col][row + k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                       (col <= 'D' and row + 3 < 6 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                       (col >= 'D' and row + 3 < 6 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4))):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row+i] == color for i in range(4))) or \\\n                           (col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4))) or \\\n                           (row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == color for i in range(4))) or \\\n                           (row >= 3 and col <= 'D' and all(board[chr(ord(col)+i)][row-i] == color for i in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for c in range(7):\n            for r in range(6):\n                if (\n                    (c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or\n                    (r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or\n                    (c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or\n                    (c + 3 < 7 and r - 3 >= 0 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)))\n                ):\n                    return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a winner after each move\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                color = grid[col][row]\n                if color is not None:\n                    # Horizontal\n                    if col <= 'D' and all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    # Vertical\n                    if row <= 2 and all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                        return color\n                    # Diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n                    # Diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n                \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal\n    for row in range(6):\n        count = 0\n        for col in 'ABCDEFG':\n            if board[col][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check vertical\n    for col in 'ABCDEFG':\n        count = 0\n        for row in range(6):\n            if board[col][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check diagonal \\\n    for col in range(4):\n        for row in range(3, 6):\n            if (board[chr(col + 65)][row] == color and\n                    board[chr(col + 66)][row - 1] == color and\n                    board[chr(col + 67)][row - 2] == color and\n                    board[chr(col + 68)][row - 3] == color):\n                return True\n\n    # Check diagonal /\n    for col in range(4):\n        for row in range(3):\n            if (board[chr(col + 65)][row] == color and\n                    board[chr(col + 66)][row + 1] == color and\n                    board[chr(col + 67)][row + 2] == color and\n                    board[chr(col + 68)][row + 3] == color):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n                # Check horizontally\n                if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                    return color\n                # Check vertically\n                if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                    return color\n                # Check diagonally /\n                if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonally \\\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, color, column, row):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = ord(col) - 65 + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + 65)][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = ord(col) - 65 - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + 65)][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```"
        ]
    }
}