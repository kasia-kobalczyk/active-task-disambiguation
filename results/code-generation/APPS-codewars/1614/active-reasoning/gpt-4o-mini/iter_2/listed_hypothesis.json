{
    "0": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) + k]][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) - k]][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if 0 <= ord(col) + i < ord('A') + 7) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i < ord('A') + 7 and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < ord('A') + 7 and row - i >= 0)):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (row <= 2 and all(board[col][row+k] == board[col][row] for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col)+k)][row] == board[col][row] for k in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(board[chr(ord(col)+k)][row+k] == board[col][row] for k in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(board[chr(ord(col)+k)][row-k] == board[col][row] for k in range(4))):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Horizontal check\n                    if c <= 'D' and all(board[c][r] == board[c][r] for c in 'DEFG' if board[c][r] == board[c][r]):\n                        return board[c][r]\n                    # Vertical check\n                    if r <= 2 and all(board[c][r] == board[c][r] for r in range(r, r + 4)):\n                        return board[c][r]\n                    # Diagonal /\n                    if c <= 'D' and r >= 3 and all(board[c][r] == board[c][r] for c in 'DEFG' if board[c][r] == board[c][r]):\n                        return board[c][r]\n                    # Diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[c][r] == board[c][r] for c in 'DEFG' if board[c][r] == board[c][r]):\n                        return board[c][r]\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = {board[col][row] for col, row in line if board[col][row] is not None}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for i in range(7):\n            for j in range(6):\n                if board['ABCDEFG'[i]][j] == color:\n                    if (i + 3 < 7 and all(board['ABCDEFG'[i+k]][j] == color for k in range(4))) or \\\n                       (j + 3 < 6 and all(board['ABCDEFG'[i]][j+k] == color for k in range(4))) or \\\n                       (i + 3 < 7 and j + 3 < 6 and all(board['ABCDEFG'[i+k]][j+k] == color for k in range(4))) or \\\n                       (i + 3 < 7 and j - 3 >= 0 and all(board['ABCDEFG'[i+k]][j-k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for col, row in moves:\n        for dx, dy in directions:\n            count = 1\n            for step in (1, -1):\n                for i in range(1, 4):\n                    new_col = chr(ord(col) + dx * step * i)\n                    new_row = row + dy * step * i\n                    if (new_col, new_row) in moves:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 1}\n    moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n        \n        if check_winner(moves[color]):\n            return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n\ndef check_winner(positions):\n    for pos in positions:\n        if count_consecutive(positions, pos) >= 4:\n            return True\n    return False\n\ndef count_consecutive(positions, start):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    count = 0\n    \n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            next_pos = (chr(ord(start[0]) + step * dx), start[1] + step * dy)\n            if next_pos in positions:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return count\n            \n        count = 1\n        for step in range(1, 4):\n            prev_pos = (chr(ord(start[0]) - step * dx), start[1] - step * dy)\n            if prev_pos in positions:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return count\n            \n    return count\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j + 3 < 7 and all(grid[chr(c)][i] == color for c in range(ord('A') + j, ord('A') + j + 4))) or \\\n                   (i + 3 < 6 and all(grid[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                   (j + 3 < 7 and i + 3 < 6 and all(grid[chr(c)][i + (c - (ord('A') + j))] == color for c in range(ord('A') + j, ord('A') + j + 4))) or \\\n                   (j - 3 >= 0 and i + 3 < 6 and all(grid[chr(c)][i + (c - (ord('A') + j))] == color for c in range(ord('A') + j, ord('A') + j - 4, -1))):\n                    return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                   (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                   (row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                   (row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        \n        # Check for a win\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:  # Horizontal, Vertical, Diagonal\n            count = 1\n            \n            # Check in one direction\n            for step in range(1, 4):\n                r, c = row + direction[0] * step, 'ABCDEFG'.index(col) + direction[1] * step\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == player:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the opposite direction\n            for step in range(1, 4):\n                r, c = row - direction[0] * step, 'ABCDEFG'.index(col) - direction[1] * step\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == player:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return player\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = player\n                player_moves[player] += 1\n                break\n        \n        for player in ['Red', 'Yellow']:\n            if check_winner(grid, player):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(grid, player):\n    # Check vertical, horizontal and diagonal winning conditions\n    for column in 'ABCDEFG':\n        for row in range(6):\n            if grid[column][row] == player:\n                if check_direction(grid, column, row, player, 1, 0) or \\\n                   check_direction(grid, column, row, player, 0, 1) or \\\n                   check_direction(grid, column, row, player, 1, 1) or \\\n                   check_direction(grid, column, row, player, 1, -1):\n                    return True\n    return False\n\ndef check_direction(grid, column, row, player, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        col = chr(ord(column) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and col in grid and grid[col][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(7):\n            for j in range(6):\n                if board[chr(65 + i)][j] == color:\n                    # Check horizontal\n                    if i + 3 < 7 and all(board[chr(65 + k)][j] == color for k in range(i, i + 4)):\n                        return True\n                    # Check vertical\n                    if j + 3 < 6 and all(board[chr(65 + i)][j + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if i + 3 < 7 and j - 3 >= 0 and all(board[chr(65 + i + k)][j - k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if i + 3 < 7 and j + 3 < 6 and all(board[chr(65 + i + k)][j + k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + d_col * i)\n        r = row + d_row * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + dcol * step)\n            r = row + drow * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n                if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                    return color\n                if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                    return color\n                if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                    return color\n                if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        if check_winner(board, player):\n            return player\n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, col, row, player):\n                    return True\n    return False\n\ndef check_direction(board, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 0\n        for step in range(4):\n            new_col = chr(ord(col) + d_col * step)\n            new_row = row + d_row * step\n            if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == player:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_col = chr(ord(col) + direction[0] * step)\n                            new_row = row + direction[1] * step\n                            if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    # Check horizontally\n                    if col <= 'D':\n                        if all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                            winner = grid[col][row]\n                    # Check vertically\n                    if row <= 2:\n                        if all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                            winner = grid[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2:\n                        if all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                            winner = grid[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3:\n                        if all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                            winner = grid[col][row]\n\n    return winner if winner else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) - k]][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if (col, row) in board and board[col][row] == color:\n                    if (col, row+1) in board and board[col][row+1] == color and \\\n                       (col, row+2) in board and board[col][row+2] == color and \\\n                       (col, row+3) in board and board[col][row+3] == color:\n                        return color\n                    \n                    if (col+1, row) in board and board[col+1][row] == color and \\\n                       (col+2, row) in board and board[col+2][row] == color and \\\n                       (col+3, row) in board and board[col+3][row] == color:\n                        return color\n                    \n                    if (col+1, row+1) in board and board[col+1][row+1] == color and \\\n                       (col+2, row+2) in board and board[col+2][row+2] == color and \\\n                       (col+3, row+3) in board and board[col+3][row+3] == color:\n                        return color\n                    \n                    if (col+1, row-1) in board and board[col+1][row-1] == color and \\\n                       (col+2, row-2) in board and board[col+2][row-2] == color and \\\n                       (col+3, row-3) in board and board[col+3][row-3] == color:\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(len(COLUMNS)):\n            for j in range(len(ROWS)):\n                if (i + 3 < len(COLUMNS) and \n                    all(board[COLUMNS[i + k]][j] == color for k in range(4)) or \n                    j + 3 < len(ROWS) and \n                    all(board[COLUMNS[i]][j + k] == color for k in range(4)) or \n                    (i + 3 < len(COLUMNS) and j + 3 < len(ROWS) and \n                     all(board[COLUMNS[i + k]][j + k] == color for k in range(4))) or \n                    (i + 3 < len(COLUMNS) and j - 3 >= 0 and \n                     all(board[COLUMNS[i + k]][j - k] == color for k in range(4)))):\n                    return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for player in ['Red', 'Yellow']:\n            for col_idx in range(7):\n                for row_idx in range(6):\n                    if (col_idx <= 3 and all(board[chr(65 + col_idx + i)][row_idx] == player for i in range(4)) or\n                        row_idx <= 2 and all(board[chr(65 + col_idx)][row_idx + i] == player for i in range(4)) or\n                        col_idx <= 3 and row_idx <= 2 and all(board[chr(65 + col_idx + i)][row_idx + i] == player for i in range(4)) or\n                        col_idx <= 3 and row_idx >= 3 and all(board[chr(65 + col_idx + i)][row_idx - i] == player for i in range(4))):\n                        return player\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def drop_piece(col, color):\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                return row, col\n        return None\n\n    def check_winner(color):\n        for row in range(6):\n            for col in range(7):\n                if board[COLUMNS[col]][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board[COLUMNS[col + i]][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[COLUMNS[col]][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(board[COLUMNS[col + i]][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col >= 3 and row <= 2 and all(board[COLUMNS[col - i]][row + i] == color for i in range(4)):\n                        return True\n        return False\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        drop_piece(col, color)\n        if check_winner(color):\n            return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n                \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or \n                    check_direction(board, color, col, row, 0, 1) or \n                    check_direction(board, color, col, row, 1, 1) or \n                    check_direction(board, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        new_col = chr(ord(col) + d_col * i)\n        new_row = row + d_row * i\n        if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for i in range(6):\n            for j in range(7):\n                if j < 4 and all(board[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4)):\n                    return True\n                if i < 3 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)):\n                    return True\n                if i < 3 and j < 4 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)) and \\\n                        all(board[chr(j + k + ord('A'))][i + 3 - k] == color for k in range(4)):\n                    return True\n                if i >= 3 and j < 4 and all(board[chr(j + ord('A'))][i - k] == color for k in range(4)) and \\\n                        all(board[chr(j + k + ord('A'))][i - 3 + k] == color for k in range(4)):\n                    return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                        return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    elif len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is not None:\n                    color = board[column][row]\n                    # Check vertical\n                    if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(column), COLUMNS.index(column) + 4) if i < 7):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and all(board[COLUMNS[COLUMNS.index(column) + k]][row - k] == color for k in range(4) if COLUMNS.index(column) + k < 7):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and all(board[COLUMNS[COLUMNS.index(column) + k]][row + k] == color for k in range(4) if COLUMNS.index(column) + k < 7):\n                        return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x])):\n                return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for step in [1, -1]:\n                for i in range(1, 4):\n                    x = ord(col) - ord('A') + step * i * direction[0]\n                    y = row + step * i * direction[1]\n                    if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == player:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return player\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board['ABCDEFG'[col]][row] == color:\n                    if col < 4 and all(board['ABCDEFG'[col + i]][row] == color for i in range(4)):\n                        return True\n                    if row < 3 and all(board['ABCDEFG'[col]][row + i] == color for i in range(4)):\n                        return True\n                    if col < 4 and row < 3 and all(board['ABCDEFG'[col + i]][row + i] == color for i in range(4)):\n                        return True\n                    if col < 4 and row > 2 and all(board['ABCDEFG'[col + i]][row - i] == color for i in range(4)):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j <= 3 and all(grid[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4)):\n                    return color\n                if i <= 2 and all(grid[chr(j + ord('A'))][i + k] == color for k in range(4)):\n                    return color\n                if j <= 3 and i <= 2 and all(grid[chr(j + ord('A') + k)][i + k] == color for k in range(4)):\n                    return color\n                if j <= 3 and i >= 3 and all(grid[chr(j + ord('A') + k)][i - k] == color for k in range(4)):\n                    return color\n                    \n    return \"Draw\"\n```",
            "logp": null
        }
    ]
}