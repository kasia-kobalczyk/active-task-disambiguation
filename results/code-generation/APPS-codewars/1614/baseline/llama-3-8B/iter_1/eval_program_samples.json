{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(ROWS[LINES.index(line)]) - 1)) in line:\n                line.remove((column, str(int(ROWS[LINES.index(line)]) - 1)))\n                if len(line) < 4:\n                    line.clear()\n        if any(len([i for i in line if i[1] == str(int(ROWS[LINES.index(line)]) - 1) and i[1].split(\"_\")[1] == color]) >= 4 for line in LINES):\n            winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\""
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\""
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\""
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\""
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    winner = None\n    for i, pos in enumerate(pieces_positions):\n        player = pos.split('_')[1]\n        column = column_map[pos[0]]\n        row = 5 - (i % 6)\n        pieces_positions[i] = (player, column, row)\n    for line in LINES:\n        winner = next((player for piece in line if piece in pieces_positions and pieces_positions[pieces_positions.index(piece)][0] == player), None)\n        if winner:\n            return winner\n    return \"Draw\""
        ],
        "2": [],
        "3": [],
        "4": []
    }
}