{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in LINES:\n            if ((column, str(int(6) - 4)) in i and (column, str(int(6) - 3)) in i and (column, str(int(6) - 2)) in i and (column, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and (int(ord(column)) - 65, str(int(6) - 3)) in i and (int(ord(column)) - 65, str(int(6) - 2)) in i and (int(ord(column)) - 65, str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 2)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 1)) in i):\n                winner[color] = True\n            if ((int(ord(column)) - 65, str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 1), str(int(6) - 4)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 3)) in i and ((int(ord(column)) - 65 + 2), str(int(6) - 2)) in i):\n                winner[color] = True\n        if winner[color]:\n            return color\n    for i in range(len(pieces_positions)):\n        column, color = pieces_positions[i][0], pieces_positions[i][1]\n        for j in range(len(pieces_positions) - 3):\n            if pieces_positions[j][0] == column and pieces_positions[j+1][0] == column and pieces_positions[j+2][0] == column and pieces_positions[j+3][0] == column and pieces_positions[j][1] == color and pieces_positions[j+1][1] == color and pieces_positions[j+2][1] == color and pieces_positions[j+3][1] == color:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_\"\n    return \"Draw\""
        ],
        "1": [],
        "2": [],
        "3": [
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    column_status = [[] for _ in range(7)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[-3:]\n        column_status[column].append(color)\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for column in column_status:\n            for i in range(len(column) - 3):\n                if len(set(column[i:i+4])) == 1 and winner[color] == False:\n                    winner[color] = True\n                    break\n        if winner[color]:\n            return color\n    \n    for column in column_status:\n        if len(column) == 4:\n            return \"Draw\"\n    \n    if \"Red\" in winner.values():\n        return \"Red\"\n    elif \"Yellow\" in winner.values():\n        return \"Yellow\"\n    else:\n        return \"Draw\""
        ],
        "4": []
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\""
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {f\"{column}_{color}\" for column, row in line}.issubset({f\"{c}_{color}\" for c in [column] for c in COLUMNS}):\n                    return color\n    return \"Draw\""
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    }
}