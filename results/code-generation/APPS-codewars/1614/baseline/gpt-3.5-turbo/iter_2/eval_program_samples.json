{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the game state\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position in the list\n    for piece in pieces_positions:\n        # Extract the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to a numerical index\n        column_index = ord(column) - ord('A')\n\n        # Find the lowest empty row in the selected column\n        row_index = 0\n        while row_index < 6 and grid[row_index][column_index] != '':\n            row_index += 1\n\n        # Place the color in the selected position on the grid\n        grid[row_index][column_index] = color\n\n        # Check if the current move has resulted in a winning position\n        for line in LINES:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n\n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to store the count of each player's pieces\n    count = {\"Red\": 0, \"Yellow\": 0}\n    \n    # Create a grid to represent the game board\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for piece in pieces_positions:\n        # Get the column and color of the piece\n        column, color = piece.split(\"_\")\n        \n        # Convert the column letter to an index\n        column_idx = ord(column) - ord(\"A\")\n        \n        # Find the first empty row in the column\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == \"\":\n                # Place the piece in the empty spot\n                board[row][column_idx] = color\n                break\n        \n        # Check for a winning move\n        for line in LINES:\n            if all(board[row][column_idx] == color for column_idx, row in line):\n                return color\n        \n        # Update the count of the player's pieces\n        count[color] += 1\n    \n    # Check if the game is a draw\n    if count[\"Red\"] + count[\"Yellow\"] == 42:\n        return \"Draw\"\n    \n    # If there is no winner and the game is not a draw, return \"None\"\n    return \"None\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in reversed(ROWS) if (column, r) not in red_positions and (column, r) not in yellow_positions), None)\n        if row is None:\n            return \"Draw\"\n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n        \n        if any(line.issubset(red_positions) for line in LINES):\n            return \"Red\"\n        if any(line.issubset(yellow_positions) for line in LINES):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][COLUMNS.index(column)] == ' ':\n            row += 1\n        board[row-1][COLUMNS.index(column)] = color[0]\n\n    for line in LINES:\n        line_values = [board[ROWS.index(row)][COLUMNS.index(column)] for column, row in line]\n        if all(value == 'R' for value in line_values):\n            return 'Red'\n        if all(value == 'Y' for value in line_values):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def get_winner():\n        for line in LINES:\n            if all(pos in pieces_positions[player]\n                   for pos in line):\n                return player\n        return None\n\n    players = {'Yellow': [], 'Red': []}\n    for move in pieces_positions:\n        player, column = move.split('_')\n        players[player].append(column)\n\n        if len(players[player]) >= 4 and get_winner():\n            return get_winner()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line <= red_moves or line <= yellow_moves:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Red': set(), 'Yellow': set()}\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        pieces[color].add((column, len(pieces[color])))\n        for line in LINES:\n            if line <= pieces[color]:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {c: set() for c in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].add(color)\n        for line in LINES:\n            if all(board[col].issuperset(color) for col, color in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if all(cell in board[column] for cell in line):\n                return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        board[COLUMNS.index(column)][ROWS.index(next(i for i, v in enumerate(board[COLUMNS.index(column)]) if not v)) - 1] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(all(cell != None for cell in row) for row in board):\n        return 'Draw'\n    \n    return None\n```"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col][board[col].index(None)] = color\n\n    for line in LINES:\n        colors = [board[c][r] for c, r in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        elif colors.count('Yellow') == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(COLUMNS) for _ in ROWS]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(row for row in reversed(ROWS) if board[row][COLUMNS.index(column)] is None)\n        board[row][COLUMNS.index(column)] = color\n\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = board[column_index].index('')\n        board[column_index][row_index] = color\n    \n    for line in LINES:\n        for column, row in line:\n            if board[COLUMNS.index(column)][row] == '':\n                break\n        else:\n            colors = [board[COLUMNS.index(column)][row] for column, row in line]\n            if len(set(colors)) == 1:\n                return colors[0]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED = set()\n    YELLOW = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position.split(\"_\")[1]\n        \n        if color == \"Red\":\n            RED.add((column, len(RED)))\n        else:\n            YELLOW.add((column, len(YELLOW)))\n        \n        for line in LINES:\n            if line.issubset(RED):\n                return \"Red\"\n            elif line.issubset(YELLOW):\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = {f\"{c}_{r}\" for r, row in enumerate(pieces_positions)\n                 for c in COLUMNS if row.endswith('Red')}\n    yellow_moves = {f\"{c}_{r}\" for r, row in enumerate(pieces_positions)\n                    for c in COLUMNS if row.endswith('Yellow')}\n    for line in LINES:\n        if line.issubset(red_moves):\n            return \"Red\"\n        elif line.issubset(yellow_moves):\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: set() for col in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].add(color)\n\n    for line in LINES:\n        if all(color in board[col] for col, color in line):\n            return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def check_lines(piece_list):\n        for line in LINES:\n            if line.issubset(piece_list):\n                return True\n        return False\n\n    board = {}\n    players = {'Red': 'Yellow', 'Yellow': 'Red'}\n    for piece_position in pieces_positions:\n        column, player = piece_position.split('_')\n        row = board.get(column, set())\n        row.add((column, len(row)))\n        if check_lines(row):\n            return player\n        board[column] = row\n        if all(len(board[column]) == 6 for column in COLUMNS):\n            return \"Draw\"\n        player = players[player]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Keep track of the next player\n    next_player = 'Red'\n    \n    # Iterate through each move in the pieces_positions list\n    for move in pieces_positions:\n        # Get the column and player color from the move\n        column, color = move.split('_')\n        \n        # Find the empty row in the column\n        row = -1\n        while grid[row][ord(column) - ord('A')]:\n            row -= 1\n        \n        # Place the player's color in the grid\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check if the player has won\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        \n        # Switch to the next player\n        next_player = 'Red' if next_player == 'Yellow' else 'Yellow'\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the board\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map column names to indices\n    column_dict = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column name and player color\n        column, color = position.split('_')\n        \n        # Get the index of the column\n        column_index = column_dict[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for row in range(6):\n            if board[row][column_index] == '':\n                row_index = row\n                break\n        \n        # Place the piece in the board\n        board[row_index][column_index] = color\n    \n    # Check for a win\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [board[row][column_dict[column]] for column, row in line]\n        \n        # Check if all the colors are the same and not empty\n        if colors.count(colors[0]) == 4 and colors[0] != '':\n            return colors[0]\n    \n    # If no one has won, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != ' ':\n            row += 1\n        grid[row][ord(column) - ord('A')] = color\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: set() for c in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].add(color)\n        for line in LINES:\n            if all(position in board[column] for position in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def check_winner(lines):\n        for line in lines:\n            red_count = 0\n            yellow_count = 0\n            for pos in line:\n                if pos in pieces_positions:\n                    color = pieces_positions[pos].split(\"_\")[1]\n                    if color == \"Red\":\n                        red_count += 1\n                        yellow_count = 0\n                    else:\n                        yellow_count += 1\n                        red_count = 0\n                    if red_count == 4:\n                        return \"Red\"\n                    elif yellow_count == 4:\n                        return \"Yellow\"\n                else:\n                    red_count = 0\n                    yellow_count = 0\n        return \"Draw\"\n    \n    return check_winner(LINES)",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n\n    for line in LINES:\n        color = None\n        for cell in line:\n            row, column = int(cell[1]), ord(cell[0]) - ord('A')\n            if board[row][column] == '':\n                color = None\n                break\n            if color is None:\n                color = board[row][column]\n            elif color != board[row][column]:\n                color = None\n                break\n        if color is not None:\n            return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a dictionary to store the grid\n    grid = {}\n    for col in 'ABCDEFG':\n        grid[col] = [' ']*6\n\n    # iterate over the pieces positions\n    for piece in pieces_positions:\n        # extract the column and color from the piece position\n        col, color = piece.split('_')\n        # check if the column is valid\n        if col not in grid.keys():\n            return \"Invalid column\"\n        # check if the column is full\n        if ' ' not in grid[col]:\n            return \"Column is full\"\n        # add the piece to the grid\n        row = grid[col].index(' ')\n        grid[col][row] = color\n\n    # iterate over the lines to check for a winner\n    for line in LINES:\n        # iterate over the colors\n        for color in ['Yellow', 'Red']:\n            # check if there is a winner\n            if all(grid[col][row] == color for col, row in line):\n                return color\n\n    # if no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_pieces = set()\n    yellow_pieces = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_pieces.add((column, len(red_pieces)))\n        else:\n            yellow_pieces.add((column, len(yellow_pieces)))\n\n        for line in LINES:\n            if line.issubset(red_pieces):\n                return 'Red'\n            elif line.issubset(yellow_pieces):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def find_winner(board):\n        for line in LINES:\n            if all(board.get(cell) == 'Red' for cell in line):\n                return 'Red'\n            elif all(board.get(cell) == 'Yellow' for cell in line):\n                return 'Yellow'\n        return 'Draw'\n\n    board = {}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            cell = (column, row)\n            if cell not in board:\n                board[cell] = color\n                break\n    return find_winner(board)",
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(COLUMNS) for _ in ROWS]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    for piece in pieces_positions:\n        column, player = piece.split('_')\n        column = COLUMNS.index(column)\n        for row in ROWS:\n            if board[row][column] is None:\n                board[row][column] = players[player]\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == players[player] for column, row in line):\n                return player\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        if row < 6:\n            grid[row][ord(column) - ord('A')] = color\n    \n    for line in LINES:\n        line_values = set(grid[row][ord(column) - ord('A')] for column, row in line)\n        if len(line_values) == 1 and '' not in line_values:\n            return line_values.pop()\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {col: [] for col in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        for line in LINES:\n            if all(board[col] == color for col, color in line):\n                return color\n            \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column = COLUMNS.index(column)\n        row = next((r for r in range(6) if (COLUMNS[column], ROWS[r]) not in {c for line in LINES for c in line}), None)\n        if row is None:\n            continue\n        if (lines := [line for line in LINES if (COLUMNS[column], ROWS[row]) in line and len(line) == 4]) \\\n        or any(COLUMNS[column] in columns and ROWS[row] in rows for columns, rows in LINES):\n            return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {col: set() for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].add((col, len(board[col])))\n        if any(line.issubset(board[col]) for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(board):\n        for line in LINES:\n            cells = [board.get(cell) for cell in line]\n            if all(cells) and cells[0] == cells[1] == cells[2] == cells[3]:\n                return cells[0]\n        return None\n\n    board = {}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in reversed(ROWS) if (column, r) not in board), None)\n        if row is None:\n            return 'Draw'\n        board[(column, row)] = color\n\n        winner = check_winner(board)\n        if winner:\n            return winner\n\n    return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty spaces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # Find the first empty row in the column\n        row = 0\n        while grid[row][ord(column)-65]:\n            row += 1\n        \n        # Add the color to the grid\n        grid[row][ord(column)-65] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[r][ord(c)-65] == color for c, r in line):\n                return color\n    \n    # If there is no winner, return Draw\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the list of pieces positions\n    for piece_position in pieces_positions:\n        # Extract the column and color from the piece position\n        column, color = piece_position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - 65] == '':\n                # Place the piece in the grid\n                grid[row][ord(column) - 65] = color\n                break\n    \n    # Check for a winning condition\n    for line in LINES:\n        # Get the colors in the line\n        colors = [grid[row][ord(column) - 65] for column, row in line]\n        \n        # Check if all the colors are the same\n        if colors[0] != '' and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    # If there are no winning conditions, it's a draw\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position.split('_')[1]\n        \n        for row in range(5, -1, -1):\n            if grid[row][column] is None:\n                grid[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    RED = 'Red'\n    YELLOW = 'Yellow'\n    DRAW = 'Draw'\n\n    # Initialize the grid\n    grid = [[''] * 7 for _ in range(6)]\n\n    # Iterate through each move\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n        \n        # Check if the current move leads to a win\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no winner is found, return draw\n    return DRAW",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n    \n    for line in LINES:\n        colors = [board[COLUMNS.index(column)][row] for column, row in line]\n        if colors == ['Yellow'] * 4:\n            return 'Yellow'\n        if colors == ['Red'] * 4:\n            return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        col_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][col_index] == '':\n                board[row][col_index] = color\n                break\n    for line in LINES:\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        if ''.join(colors) == 'Yellow' * 4:\n            return 'Yellow'\n        if ''.join(colors) == 'Red' * 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column = ord(move[0]) - 65\n        color = move.split(\"_\")[1]\n        for row in range(6):\n            if board[row][column] == \"\":\n                board[row][column] = color\n                break\n        winner = check_winner(board)\n        if winner:\n            return winner\n    return \"Draw\"\n\ndef check_winner(board):\n    for line in LINES:\n        colors = set()\n        for cell in line:\n            row, col = int(cell[1]), ord(cell[0]) - 65\n            colors.add(board[row][col])\n        if len(colors) == 1 and \"\" not in colors:\n            return colors.pop()\n    return None",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n\n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n\n    for line in LINES:\n        cells = [board[row][ord(column) - ord('A')] for column, row in line]\n        if all(cell == 'Yellow' for cell in cells):\n            return 'Yellow'\n        if all(cell == 'Red' for cell in cells):\n            return 'Red'\n\n    if all(cell is not None for row in board for cell in row):\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {COLUMNS[i]:[' ' for _ in ROWS] for i in range(len(COLUMNS))}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[col][grid[col].index(' ')] = color\n        for line in LINES:\n            if all(grid[x][y] == color for (x, y) in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == ' ':\n                board[row][column_index] = players[color]\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[color] for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        if color == 'Red':\n            red.add((col, ROWS[len(red)]))\n        else:\n            yellow.add((col, ROWS[len(yellow)]))\n        for line in LINES:\n            if line <= red:\n                return 'Red'\n            if line <= yellow:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        else:\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n\n    for line in LINES:\n        if line.issubset(red_moves):\n            return 'Red'\n        if line.issubset(yellow_moves):\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * len(COLUMNS) for _ in ROWS]\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        for row in ROWS:\n            if grid[row][COLUMNS.index(column)] is None:\n                grid[row][COLUMNS.index(column)] = color\n                break\n        for line in LINES:\n            if all(grid[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i, value in enumerate(board[COLUMNS.index(column)]) if value is None)\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color.capitalize()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[''] * len(COLUMNS) for _ in ROWS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = next((i for i, row in enumerate(board) if row[COLUMNS.index(column)] == ''), None)\n        if row is None:\n            return 'Draw'\n        board[row][COLUMNS.index(column)] = color\n\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # iterate through the pieces positions\n    for position in pieces_positions:\n        # extract the column and color\n        column, color = position.split('_')\n        # find the row where the piece will be placed\n        row = -1\n        while grid[row][ord(column)-65] != ' ':\n            row -= 1\n        # place the piece in the grid\n        grid[row][ord(column)-65] = color\n    \n    # check for a winner\n    for line in LINES:\n        # get the colors of the cells in the line\n        colors = set(grid[row][ord(column)-65] for column, row in line)\n        # if there is a winner, return the color\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    # if there is no winner, return 'Draw'\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    grid = [[''] * len(COLUMNS) for _ in ROWS]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in reversed(range(len(ROWS))):\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n    \n    for line in LINES:\n        cells = [grid[row][COLUMNS.index(column)] for column, row in line]\n        if all(cell == 'Yellow' for cell in cells):\n            return 'Yellow'\n        elif all(cell == 'Red' for cell in cells):\n            return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        for row in ROWS:\n            if board[COLUMNS.index(column)][row] == '':\n                board[COLUMNS.index(column)][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        for i in range(len(grid)):\n            if grid[i][ord(column)-65] is None:\n                grid[i][ord(column)-65] = color\n                break\n    for line in LINES:\n        for i in range(4):\n            colors = [grid[row][ord(column)-65] for column, row in line]\n            if colors.count('Red') == 4:\n                return 'Red'\n            elif colors.count('Yellow') == 4:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['']*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - 65\n        color = piece.split('_')[1]\n        for row in range(6):\n            if grid[row][column] == '':\n                grid[row][column] = color\n                break\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None] * len(COLUMNS) for _ in ROWS]\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in reversed(ROWS) if grid[r][COLUMNS.index(col)] is None), None)\n        if row is None:\n            return 'Invalid move'\n        grid[row][COLUMNS.index(col)] = color\n\n        for line in LINES:\n            if all(grid[r][COLUMNS.index(c)] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the game grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # iterate over the pieces positions\n    for position in pieces_positions:\n        # extract the column and color from the position string\n        column, color = position.split('_')\n        # find the lowest empty row in the column\n        row = 0\n        while grid[row][ord(column) - ord('A')]:\n            row += 1\n        # place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n\n        # check for a winning condition\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # if no winning condition is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty spaces\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Loop through the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        \n        # Find the lowest empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column)-65] == ' ':\n            row += 1\n        \n        # Place the color in the grid\n        grid[row-1][ord(column)-65] = color\n    \n    # Check for a win in all possible lines\n    for line in LINES:\n        # Get the colors in the line\n        colors = [grid[row][ord(column)-65] for column, row in line]\n        \n        # Check if all colors are the same and not empty\n        if all(color == colors[0] and color != ' ' for color in colors):\n            return colors[0]\n    \n    # If no win is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['']*6 for _ in range(7)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col_index = COLUMNS.index(col)\n        row_index = board[col_index].index('')\n        board[col_index][row_index] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['']*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n    for line in LINES:\n        colors = {board[row][ord(column)-ord('A')] for column, row in line}\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED = 'Red'\n    YELLOW = 'Yellow'\n    DRAW = 'Draw'\n    \n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position.split('_')[1]\n        \n        if color == RED:\n            symbol = 'R'\n        else:\n            symbol = 'Y'\n        \n        for row in range(6):\n            if grid[row][ord(column) - ord('A')] == ' ':\n                grid[row][ord(column) - ord('A')] = symbol\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == symbol for column, row in line):\n                return RED if symbol == 'R' else YELLOW\n    \n    return DRAW",
            "def who_is_winner(pieces_positions):\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Yellow': 'Y', 'Red': 'R'}\n\n    for pos in pieces_positions:\n        col, player = pos.split('_')\n        col_index = ord(col) - ord('A')\n\n        for i in range(6):\n            if board[i][col_index] == '':\n                board[i][col_index] = players[player]\n                break\n\n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == players[player] for (i, j) in line):\n                return player\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {COLUMNS[i]: [None] * len(ROWS) for i in range(len(COLUMNS))}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n    for line in LINES:\n        colors = {board[column][row] for column, row in line}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while board[row][COLUMNS.index(column)] is not None:\n            row += 1\n        board[row][COLUMNS.index(column)] = color\n    \n    for line in LINES:\n        colors = [board[ROWS.index(row)][COLUMNS.index(column)]\n                  for column, row in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        elif colors.count('Yellow') == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == ' ':\n                board[row][column_index] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_index] == '':\n                board[row][column_index] = players[color]\n                break\n    \n    for line in LINES:\n        values = [board[row][ord(column) - ord('A')] for column, row in line]\n        if 'RRRR' in ''.join(values):\n            return 'Red'\n        elif 'YYYY' in ''.join(values):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty cells\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color of the current piece\n        column, color = piece.split('_')\n        \n        # Find the first empty cell in the column\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == '':\n                grid[i][ord(column) - ord('A')] = color\n                break\n    \n    # Check if there is a winner\n    for line in LINES:\n        cells = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # If no winner, it is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: {row: None for row in ROWS} for col in COLUMNS}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in ROWS:\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for line in LINES:\n        colors = {board[column][row] for column, row in line}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_index = ord(col) - 65\n        for row in range(6):\n            if grid[row][col_index] == ' ':\n                grid[row][col_index] = color\n                break\n    for line in LINES:\n        for i in range(4):\n            cells = [(col, row) for col, row in line]\n            colors = set(grid[row][ord(col) - 65] for col, row in cells)\n            if len(colors) == 1 and ' ' not in colors:\n                return colors.pop()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = ord(column) - ord('A')\n        for row in range(6):\n            if grid[row][col_idx] == '':\n                grid[row][col_idx] = color\n                break\n        for line in LINES:\n            if all(grid[row][ord(col)-ord('A')] == color for col, row in line):\n                return color\n    return \"Draw\""
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = \"Red\", \"Yellow\"\n    grid = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = 0\n        \n        while grid[row][ord(column)-65] != \"\":\n            row += 1\n        \n        grid[row][ord(column)-65] = color\n        \n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[' ' for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row_index, cell in enumerate(board[column_index]):\n            if cell == ' ':\n                board[column_index][row_index] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to store the positions of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Split the piece into column and color\n        column, color = piece.split('_')\n\n        # Find the lowest empty row in the column\n        row = -1\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n\n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n\n        # Check if there is a winning condition\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # If no winning condition is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None]*len(ROWS) for c in COLUMNS}\n    players = {'Yellow': set(), 'Red': set()}\n\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col][board[col].index(None)] = color\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n\n        players[color].add(piece)\n\n        if len(players[color]) >= 4:\n            if any(all(p in players[color] for p in line) for line in LINES):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    colors = {'Red': 'R', 'Yellow': 'Y'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] == '':\n            row += 1\n        if row == 0:\n            return color\n        board[row - 1][ord(column) - ord('A')] = colors[color]\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == colors[color] for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the grid\n    grid = [[\"\"] * 7 for _ in range(6)]\n\n    # iterate over the pieces positions\n    for piece in pieces_positions:\n        # extract the column and color from the piece string\n        column, color = piece.split(\"_\")\n\n        # find the lowest empty cell in the column\n        row = 5\n        while row >= 0 and grid[row][ord(column) - 65] != \"\":\n            row -= 1\n\n        # place the piece in the grid\n        grid[row][ord(column) - 65] = color\n\n        # check for a winner\n        for line in LINES:\n            if all(grid[row][ord(column) - 65] == color for column, row in line):\n                return color\n\n    # if no winner is found, it's a draw\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Yellow': set(), 'Red': set()}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = len(pieces[color])\n        pieces[color].add((column, row))\n        if any(line <= pieces[color] for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        column = move[0]\n        color = move[2:]\n        if color == 'Red':\n            red_moves.append((column, len(red_moves)))\n        elif color == 'Yellow':\n            yellow_moves.append((column, len(yellow_moves)))\n    \n    for line in LINES:\n        red_count = 0\n        yellow_count = 0\n        for column, row in line:\n            if (column, row) in red_moves:\n                red_count += 1\n            elif (column, row) in yellow_moves:\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n    \n    for line in LINES:\n        colors = {board[row][ord(column) - ord('A')] for column, row in line}\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(len(ROWS)) if board[COLUMNS.index(column)][i] == ''), None)\n        if row is None:\n            continue\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the game grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # iterate over the pieces positions\n    for piece in pieces_positions:\n        # split the piece position into column and color\n        column, color = piece.split('_')\n        \n        # find the first empty row in the column\n        row = 5\n        while row >= 0 and grid[row][ord(column)-ord('A')] != ' ':\n            row -= 1\n        \n        # place the piece in the grid\n        grid[row][ord(column)-ord('A')] = color\n    \n    # check if there is a winner\n    for line in LINES:\n        # get the colors in the line\n        colors = [grid[row][ord(column)-ord('A')] for column, row in line]\n        \n        # check if all colors are the same and not empty\n        if all(color == colors[0] and color != ' ' for color in colors):\n            return colors[0]  # return the winner\n    \n    return \"Draw\"  # no winner, return draw",
            "def who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column = ord(position[0]) - 65\n        color = position[2:]\n        for row in range(6):\n            if board[row][column] is None:\n                board[row][column] = color\n                break\n    for line in LINES:\n        colors = [board[row][ord(column) - 65] for column, row in line]\n        if colors.count('Yellow') == 4:\n            return 'Yellow'\n        elif colors.count('Red') == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red = set()\n    yellow = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position.split(\"_\")[1]\n        \n        if color == \"Red\":\n            red.add((column, len(red)))\n        elif color == \"Yellow\":\n            yellow.add((column, len(yellow)))\n            \n    for line in LINES:\n        if line.issubset(red):\n            return \"Red\"\n        elif line.issubset(yellow):\n            return \"Yellow\"\n        \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if board[i][ord(column)-65] is None), None)\n        if row is None:\n            continue\n        board[row][ord(column)-65] = color\n    \n        for line in LINES:\n            if all(board[r][ord(c)-65] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n           \ndef who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i in range(6) if board[i][ord(column) - ord('A')] is None), None)\n        if row is not None:\n            board[row][ord(column) - ord('A')] = color\n            for line in LINES:\n                if all(board[i][ord(j) - ord('A')] == color for j, i in line):\n                    return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column_index = ord(column) - ord(\"A\")\n        \n        for i in range(6):\n            if grid[i][column_index] == None:\n                grid[i][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[j][ord(i)-65] == color for i,j in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None]*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    players = {'Yellow': 'Y', 'Red': 'R'}\n    \n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = players[position[2:]]\n        for row in range(6):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n        if check_win(board):\n            return position[2:]\n    \n    return 'Draw'\n\ndef check_win(board):\n    for line in LINES:\n        values = [board[row][ord(column) - ord('A')] for column, row in line]\n        if values[0] != ' ' and all(value == values[0] for value in values):\n            return True\n    return False",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    # Initialize player turn\n    player = \"Red\"\n    \n    # Loop through the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split(\"_\")\n        \n        # Get the index of the column\n        col_index = ord(column) - ord(\"A\")\n        \n        # Loop through the rows in the column\n        for i in range(6):\n            # Check if the current cell is empty\n            if grid[i][col_index] == \"\":\n                # Place the player's color in the cell\n                grid[i][col_index] = color\n                \n                # Check if the player wins\n                if check_winner(grid, color):\n                    return color\n                \n                # Switch player turn\n                player = \"Yellow\" if player == \"Red\" else \"Red\"\n                break\n    \n    # If there is no winner, return \"Draw\"\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check for a horizontal line\n    for i in range(6):\n        for j in range(4):\n            if grid[i][j] == color and grid[i][j+1] == color and grid[i][j+2] == color and grid[i][j+3] == color:\n                return True\n    \n    # Check for a vertical line\n    for i in range(3):\n        for j in range(7):\n            if grid[i][j] == color and grid[i+1][j] == color and grid[i+2][j] == color and grid[i+3][j] == color:\n                return True\n    \n    # Check for a diagonal line\n    for i in range(3):\n        for j in range(4):\n            if grid[i][j] == color and grid[i+1][j+1] == color and grid[i+2][j+2] == color and grid[i+3][j+3] == color:\n                return True\n            \n    # Check for a diagonal line\n    for i in range(3):\n        for j in range(3, 7):\n            if grid[i][j] == color and grid[i+1][j-1] == color and grid[i+2][j-2] == color and grid[i+3][j-3] == color:\n                return True\n    \n    # If no line is found, return False\n    return False",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position[2:]\n\n        for row in range(6):\n            if grid[row][column] is None:\n                grid[row][column] = color\n                break\n\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [['']*7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - 65\n        for i in range(5, -1, -1):\n            if board[i][column_index] == '':\n                board[i][column_index] = color\n                break\n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == color for i,j in line):\n                return color\n    return 'Draw'"
        ]
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the moves\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_to_player = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over each move\n    for move in pieces_positions:\n        # Extract the column and color from the move\n        column, color = move.split('_')\n        \n        # Convert the column to an index\n        column_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][column_index].index('')\n        \n        # Update the grid with the move\n        grid[row_index][column_index] = color\n        \n        # Check if the move results in a winning position\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return color_to_player[color]\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def color_count(column):\n        count = {'Yellow': 0, 'Red': 0}\n        for line in LINES:\n            if column in line:\n                color = line[column]\n                count[color] += 1\n        return count\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        count = color_count(column)\n        count[color] += 1\n        if count['Yellow'] >= 4:\n            return 'Yellow'\n        elif count['Red'] >= 4:\n            return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        board[COLUMNS.index(column)][ROWS.index(next(i for i, v in enumerate(board[COLUMNS.index(column)]) if not v)) - 1] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(board[r][c] != None for r in range(6) for c in range(7)):\n        return \"Draw\"\n    else:\n        return \"Draw\"\n```",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a grid to store the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # iterate through the pieces positions\n    for pos in pieces_positions:\n        # get the column and color from the position\n        column, color = pos.split('_')\n        \n        # find the next empty row in the column\n        row = 5\n        while row >= 0 and grid[row][ord(column)-65] != '':\n            row -= 1\n        \n        # if the row is valid, place the piece\n        if row >= 0:\n            grid[row][ord(column)-65] = color\n    \n    # check for a win\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n    \n    # if there are no empty spaces, it's a draw\n    if all(all(cell != '' for cell in row) for row in grid):\n        return 'Draw'\n    \n    # if no one has won and there are still empty spaces, the game is ongoing\n    return 'Ongoing'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell in the grid with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each line, check if all the cells are occupied by the same player's color.\n7. If a winner is found, return the corresponding color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j+1]] == board[COLUMNS[i+2]][ROWS[j+2]] == board[COLUMNS[i+3]][ROWS[j+3]] for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)):\n            return board[col][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j-1]] == board[COLUMNS[i+2]][ROWS[j-2]] == board[COLUMNS[i+3]][ROWS[j-3]] for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))):\n            return board[col][row]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    RED = set()\n    YELLOW = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position.split(\"_\")[1]\n        \n        if color == \"Red\":\n            RED.add((column, len(RED)))\n        else:\n            YELLOW.add((column, len(YELLOW)))\n        \n        for line in LINES:\n            if line.issubset(RED):\n                return \"Red\"\n            elif line.issubset(YELLOW):\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = {f\"{c}_{r}\" for r, row in enumerate(pieces_positions)\n                 for c in COLUMNS if row.endswith('Red')}\n    yellow_moves = {f\"{c}_{r}\" for r, row in enumerate(pieces_positions)\n                    for c in COLUMNS if row.endswith('Yellow')}\n    for line in LINES:\n        if line.issubset(red_moves):\n            return \"Red\"\n        elif line.issubset(yellow_moves):\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: set() for col in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].add(color)\n\n        for line in LINES:\n            if all(pos in board[col] for col, pos in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def check_lines(piece_list):\n        for line in LINES:\n            if line.issubset(piece_list):\n                return True\n        return False\n\n    board = {}\n    players = {'Red': set(), 'Yellow': set()}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = len(board.get(column, []))\n        board.setdefault(column, []).append(row)\n        players[color].add((column, row))\n\n        if check_lines(players[color]):\n            return color\n\n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Keep track of the current player\n    current_player = 'Red'\n    \n    # Iterate through each move in the pieces_positions list\n    for move in pieces_positions:\n        # Get the column and player color from the move\n        column, color = move.split('_')\n        \n        # Find the empty row in the column\n        row = -1\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n        \n        # Place the player's color in the grid\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check if the current player wins\n        if check_winner(grid, row, ord(column) - ord('A'), color):\n            return color\n        \n        # Switch the current player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n    \n    # If no player wins, return \"Draw\"\n    return \"Draw\"\n\ndef check_winner(grid, row, col, color):\n    # Check for horizontal win\n    count = 0\n    for i in range(max(0, col - 3), min(7, col + 4)):\n        if grid[row][i] == color:\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    \n    # Check for vertical win\n    count = 0\n    for i in range(max(0, row - 3), min(6, row + 4)):\n        if grid[i][col] == color:\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    \n    # Check for diagonal win (top-left to bottom-right)\n    count = 0\n    for i in range(max(0, row - 3), min(6, row + 4)):\n        if col + row - i >= 0 and col + row - i < 7:\n            if grid[i][col + row - i] == color:\n                count += 1\n            else:\n                count = 0\n            if count == 4:\n                return True\n    \n    # Check for diagonal win (top-right to bottom-left)\n    count = 0\n    for i in range(max(0, row - 3), min(6, row + 4)):\n        if col - row + i >= 0 and col - row + i < 7:\n            if grid[i][col - row + i] == color:\n                count += 1\n            else:\n                count = 0\n            if count == 4:\n                return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: set() for c in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].add(color)\n        for line in LINES:\n            if all(position in board[column] for position in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def check_winner(lines):\n        for line in lines:\n            red_count = 0\n            yellow_count = 0\n            for pos in line:\n                if pos in pieces_positions:\n                    color = pieces_positions[pos].split(\"_\")[1]\n                    if color == \"Red\":\n                        red_count += 1\n                        yellow_count = 0\n                    else:\n                        yellow_count += 1\n                        red_count = 0\n                    if red_count == 4:\n                        return \"Red\"\n                    elif yellow_count == 4:\n                        return \"Yellow\"\n                else:\n                    red_count = 0\n                    yellow_count = 0\n        return \"Draw\"\n    \n    return check_winner(LINES)",
            "def who_is_winner(pieces_positions):\n    # create a dictionary to store the grid\n    grid = {}\n    for col in 'ABCDEFG':\n        grid[col] = [' ']*6\n\n    # iterate over the pieces positions\n    for piece in pieces_positions:\n        # extract the column and color from the piece position\n        col, color = piece.split('_')\n        # check if the column is valid\n        if col not in grid.keys():\n            return \"Invalid column\"\n        # check if the column is already full\n        if ' ' not in grid[col]:\n            return \"Column is full\"\n        # find the first empty row in the column\n        row = grid[col].index(' ')\n        # place the color in the grid\n        grid[col][row] = color\n\n        # check if there is a winning combination\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n\n    # if no winning combination is found, return draw\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_pieces = set()\n    yellow_pieces = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_pieces.add((column, len(red_pieces)))\n        else:\n            yellow_pieces.add((column, len(yellow_pieces)))\n\n        for line in LINES:\n            if line.issubset(red_pieces):\n                return 'Red'\n            elif line.issubset(yellow_pieces):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def find_winner(board):\n        for line in LINES:\n            if all(board.get(cell) == 'Red' for cell in line):\n                return 'Red'\n            elif all(board.get(cell) == 'Yellow' for cell in line):\n                return 'Yellow'\n        return 'Draw'\n\n    board = {}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            cell = (col, row)\n            if cell not in board:\n                board[cell] = color\n                break\n    return find_winner(board)",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        if row < 6:\n            grid[row][ord(column) - ord('A')] = color\n    \n    for line in LINES:\n        line_values = set(grid[row][ord(column) - ord('A')] for column, row in line)\n        if len(line_values) == 1 and '' not in line_values:\n            return line_values.pop()\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {col: [] for col in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        for line in LINES:\n            if all(board[col] == color for col, color in line):\n                return color\n            \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column = COLUMNS.index(column)\n        row = next((r for r in range(6) if (COLUMNS[column], ROWS[r]) not in {c for line in LINES for c in line}), None)\n        if row is None:\n            continue\n        if (lines := [line for line in LINES if (COLUMNS[column], ROWS[row]) in line and len(line) == 4]) \\\n        or any(COLUMNS[column] in columns and ROWS[row] in rows for columns, rows in LINES):\n            return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {col: set() for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].add((col, len(board[col])))\n        if any(line.issubset(board[col]) for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(board):\n        for line in LINES:\n            cells = [board.get(cell) for cell in line]\n            if all(cells) and cells.count(cells[0]) == len(cells):\n                return cells[0]\n        return None\n    \n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        row = next((i for i in range(5, -1, -1) if (column, i) not in board), None)\n        if row is not None:\n            board[(column, row)] = color\n        winner = check_winner(board)\n        if winner is not None:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def is_winner(player):\n        for line in LINES:\n            if line.issubset(positions[player]):\n                return True\n        return False\n\n    positions = {'Red': set(), 'Yellow': set()}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((r for r in ROWS if (column, r) not in positions['Red'] and (column, r) not in positions['Yellow']), None)\n        positions[color].add((column, row))\n        \n        if is_winner(color):\n            return color\n        \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to keep track of the number of pieces in each column\n    column_count = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0}\n    \n    # Create a dictionary to store the grid\n    grid = {}\n    \n    # Create a variable to keep track of the current player\n    current_player = 'Red'\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Split the piece into column and color\n        column, color = piece.split('_')\n        \n        # Check if the current column is full\n        if column_count[column] == 6:\n            continue\n        \n        # Add the piece to the grid\n        grid[(column, column_count[column])] = color\n        \n        # Increment the column count\n        column_count[column] += 1\n        \n        # Check if the current player has won\n        for line in LINES:\n            if all(grid.get(cell) == current_player for cell in line):\n                return current_player\n        \n        # Switch to the other player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [[None] * 7 for _ in range(6)]\n    \n    # Iterate over each piece position\n    for piece in pieces_positions:\n        # Split the piece position into column and color\n        column, color = piece.split('_')\n        \n        # Find the next available row in the column\n        row = next((i for i in range(5, -1, -1) if grid[i][ord(column) - ord('A')] is None), None)\n        \n        # If the column is full, ignore the piece\n        if row is None:\n            continue\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all colors are the same and not None\n        if all(color == colors[0] and color is not None for color in colors):\n            return colors[0]\n    \n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[''] * 7 for _ in range(6)]\n    turn = 'Red'\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(6):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n        \n        turn = 'Yellow' if turn == 'Red' else 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = ord(column) - ord('A')\n\n        for row in range(5, -1, -1):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n\n    for line in LINES:\n        values = [board[row][ord(column) - ord('A')] for column, row in line]\n        if ''.join(values) == 'Yellow' * 4:\n            return 'Yellow'\n        elif ''.join(values) == 'Red' * 4:\n            return 'Red'\n\n    return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n    \n    for line in LINES:\n        colors = set()\n        for column, row in line:\n            colors.add(board[COLUMNS.index(column)][row])\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        col_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][col_index] == '':\n                board[row][col_index] = color\n                break\n    for line in LINES:\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        if ''.join(colors) == 'Yellow' * 4:\n            return 'Yellow'\n        if ''.join(colors) == 'Red' * 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column = ord(move[0]) - 65\n        color = move.split(\"_\")[1]\n        for row in range(6):\n            if board[row][column] == \"\":\n                board[row][column] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column)-65] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n\n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n\n    for line in LINES:\n        cells = [board[row][ord(column) - ord('A')] for column, row in line]\n        if all(cell == 'Yellow' for cell in cells):\n            return 'Yellow'\n        if all(cell == 'Red' for cell in cells):\n            return 'Red'\n\n    if all(cell is not None for row in board for cell in row):\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {COLUMNS[i]:[' ' for _ in ROWS] for i in range(len(COLUMNS))}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[col][grid[col].index(' ')] = color\n        for line in LINES:\n            if all(grid[x][y] == color for (x, y) in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == ' ':\n                board[row][column_index] = players[color]\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[color] for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split('_')[1]\n        row = 0\n        while row < 6 and grid[row][column] == '':\n            row += 1\n        if row != 0:\n            row -= 1\n        grid[row][column] = color\n        \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            colors.add(grid[cell[1]][ord(cell[0]) - ord('A')])\n        if len(colors) == 1 and '' not in colors:\n            return list(colors)[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        if color == 'Red':\n            red.add((col, ROWS[len(red)]))\n        else:\n            yellow.add((col, ROWS[len(yellow)]))\n        for line in LINES:\n            if line.issubset(red):\n                return \"Red\"\n            if line.issubset(yellow):\n                return \"Yellow\"\n    if len(red) + len(yellow) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Red': set(), 'Yellow': set()}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        pieces[color].add((column, next((r for r in ROWS if (column, r) not in pieces['Red'] and (column, r) not in pieces['Yellow']), None)))\n        for line in LINES:\n            if pieces[color] >= line:\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        else:\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n\n    for line in LINES:\n        if line.issubset(red_moves):\n            return 'Red'\n        if line.issubset(yellow_moves):\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = len(board.get(col, {}))\n        board.setdefault(col, {})[row] = color\n\n        for line in LINES:\n            if all(board.get(c, {}).get(r) == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to represent the Connect Four board\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Convert the column letter to index\n        column_index = ord(column) - ord('A')\n        \n        # Find the lowest empty row in the column\n        row = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row = i\n                break\n        \n        # Place the piece in the grid\n        grid[row][column_index] = color\n    \n    # Check for four-in-a-row in horizontal, vertical, and diagonal lines\n    for line in LINES:\n        line_colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if line_colors.count('Red') == 4:\n            return 'Red'\n        elif line_colors.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # If no four-in-a-row is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red_positions = set()\n    yellow_positions = set()\n\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n\n        if color == \"Red\":\n            red_positions.add((column, len(red_positions)))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, len(yellow_positions)))\n\n        for line in LINES:\n            if line <= red_positions:\n                return \"Red\"\n            elif line <= yellow_positions:\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # initialize the grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # iterate through the pieces positions\n    for position in pieces_positions:\n        # extract the column and color\n        column, color = position.split('_')\n        # find the row where the piece will be placed\n        row = -1\n        while grid[row][ord(column)-65] != ' ':\n            row -= 1\n        # place the piece in the grid\n        grid[row][ord(column)-65] = color\n    \n    # check for a winner\n    for line in LINES:\n        # get the colors of the cells in the line\n        colors = set(grid[row][ord(column)-65] for column, row in line)\n        # if there is a winner, return the color\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    # if there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i in ROWS if (column, i) not in red_moves and (column, i) not in yellow_moves)\n        \n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n        \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        if color == \"Red\":\n            red_positions.add((column, max([row for row in ROWS if (column, row) not in red_positions])))\n            if any(line <= red_positions for line in LINES):\n                return \"Red\"\n        else:\n            yellow_positions.add((column, max([row for row in ROWS if (column, row) not in yellow_positions])))\n            if any(line <= yellow_positions for line in LINES):\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    board = [[''] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = piece.split('_')[0]\n        color = get_color(piece)\n        \n        for row in range(6):\n            if board[row][ord(column) - ord('A')]:\n                continue\n            board[row][ord(column) - ord('A')] = color\n            break\n        \n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    # initialize the game board\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    # iterate over the pieces positions\n    for position in pieces_positions:\n        # extract the column and color from the position string\n        column, color = position.split('_')\n        # find the lowest empty row in the column\n        row = 0\n        while board[row][ord(column) - ord('A')] != ' ':\n            row += 1\n        # place the color in the board\n        board[row][ord(column) - ord('A')] = color\n\n        # check if the current move is a winning move\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # if no winning move is found, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['']*6 for _ in range(7)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col_index = COLUMNS.index(col)\n        row_index = board[col_index].index('')\n        board[col_index][row_index] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['']*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n    for line in LINES:\n        colors = {board[row][ord(column)-ord('A')] for column, row in line}\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED = 'Red'\n    YELLOW = 'Yellow'\n    DRAW = 'Draw'\n    \n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position.split('_')[1]\n        \n        if color == RED:\n            symbol = 'R'\n        else:\n            symbol = 'Y'\n        \n        for row in range(6):\n            if grid[row][ord(column) - ord('A')] == ' ':\n                grid[row][ord(column) - ord('A')] = symbol\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == symbol for column, row in line):\n                return RED if symbol == 'R' else YELLOW\n    \n    return DRAW",
            "def who_is_winner(pieces_positions):\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Yellow': 'Y', 'Red': 'R'}\n\n    for pos in pieces_positions:\n        col, player = pos.split('_')\n        col_index = ord(col) - ord('A')\n\n        for i in range(6):\n            if board[i][col_index] == '':\n                board[i][col_index] = players[player]\n                break\n\n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == players[player] for (i, j) in line):\n                return player\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {COLUMNS[i]: [None] * len(ROWS) for i in range(len(COLUMNS))}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n    for line in LINES:\n        colors = {board[column][row] for column, row in line}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column = move[0]\n        color = move[2:]\n        \n        row = -1\n        while board[row][ord(column) - ord('A')] and row > -6:\n            row -= 1\n        \n        if row == -6:\n            return \"Draw\"\n        \n        board[row][ord(column) - ord('A')] = color\n        \n        for line in LINES:\n            if all(board[r][ord(c) - ord('A')] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == ' ':\n                board[row][column_index] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = -1\n        for i in range(6):\n            if board[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n        board[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(board[i][ord(column) - ord('A')] == color for column, i in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty cells\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color of the current piece\n        column, color = piece.split('_')\n        \n        # Find the first empty cell in the column\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == '':\n                grid[i][ord(column) - ord('A')] = color\n                break\n    \n    # Check if there is a winner\n    for line in LINES:\n        cells = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # If no winner, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: {row: None for row in ROWS} for col in COLUMNS}\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in ROWS:\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for line in LINES:\n        colors = {board[column][row] for column, row in line}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_index = ord(col) - 65\n        for row in range(6):\n            if grid[row][col_index] == ' ':\n                grid[row][col_index] = color\n                break\n    for line in LINES:\n        for i in range(4):\n            cells = [(col, row) for col, row in line]\n            colors = set(grid[row][ord(col) - 65] for col, row in cells)\n            if len(colors) == 1 and ' ' not in colors:\n                return colors.pop()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        col_index = COLUMNS.index(col)\n        row_index = next(i for i, piece in enumerate(board[col_index]) if piece == '')\n        board[col_index][row_index] = color\n    \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if any(all(board[COLUMNS.index(col)][row_index] == color for col, row_index in line) for line in LINES):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = ord(column) - ord('A')\n        for row in range(6):\n            if grid[row][col_idx] == '':\n                grid[row][col_idx] = color\n                break\n        for line in LINES:\n            if all(grid[row][ord(col)-ord('A')] == color for col, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create an empty board\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        col, color = position.split('_')\n        \n        # Find the lowest empty row in the column\n        row = 5\n        while row >= 0 and board[row][ord(col) - ord('A')] != '':\n            row -= 1\n        \n        # Place the color in the board\n        board[row][ord(col) - ord('A')] = color\n    \n    # Check if there is a winner\n    for line in LINES:\n        for i in range(4):\n            if all(board[row][ord(col) - ord('A')] == color for (col, row) in line):\n                return color\n    \n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Extract the column and color from the position\n        column, color = position.split('_')\n\n        # Find the first empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column)-65] != '':\n            row += 1\n\n        # Place the color in the grid\n        grid[row][ord(column)-65] = color\n\n        # Check if the current color has won\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n\n    # If no color has won, return 'Draw'\n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Yellow': set(), 'Red': set()}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = len(pieces[color])\n        pieces[color].add((column, row))\n        if any(line <= pieces[color] for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        column = move[0]\n        color = move[2:]\n        if color == 'Red':\n            red_moves.append((column, len(red_moves)))\n        elif color == 'Yellow':\n            yellow_moves.append((column, len(yellow_moves)))\n    \n    for line in LINES:\n        red_count = 0\n        yellow_count = 0\n        for column, row in line:\n            if (column, row) in red_moves:\n                red_count += 1\n            elif (column, row) in yellow_moves:\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n    \n    for line in LINES:\n        colors = {board[row][ord(column) - ord('A')] for column, row in line}\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(len(ROWS)) if board[COLUMNS.index(column)][i] == ''), None)\n        if row is None:\n            continue\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the game grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # iterate over the pieces positions\n    for piece in pieces_positions:\n        # split the piece position into column and color\n        column, color = piece.split('_')\n        \n        # find the first empty row in the column\n        row = 5\n        while row >= 0 and grid[row][ord(column)-ord('A')] != ' ':\n            row -= 1\n        \n        # place the piece in the grid\n        grid[row][ord(column)-ord('A')] = color\n    \n    # check if there is a winner\n    for line in LINES:\n        # get the colors in the line\n        colors = [grid[row][ord(column)-ord('A')] for column, row in line]\n        \n        # check if all colors are the same and not empty\n        if all(color == colors[0] and color != ' ' for color in colors):\n            return colors[0]  # return the winner\n    \n    return \"Draw\"  # no winner, return draw",
            "def who_is_winner(pieces_positions):\n    red = set()\n    yellow = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position.split(\"_\")[1]\n        \n        if color == \"Red\":\n            red.add((column, len(red)))\n        elif color == \"Yellow\":\n            yellow.add((column, len(yellow)))\n            \n    for line in LINES:\n        if line.issubset(red):\n            return \"Red\"\n        elif line.issubset(yellow):\n            return \"Yellow\"\n        \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if board[i][ord(column)-65] is None), None)\n        if row is None:\n            continue\n        board[row][ord(column)-65] = color\n    \n        for line in LINES:\n            if all(board[r][ord(c)-65] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n           \ndef who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i in range(6) if board[i][ord(column) - ord('A')] is None), None)\n        if row is not None:\n            board[row][ord(column) - ord('A')] = color\n            for line in LINES:\n                if all(board[i][ord(j) - ord('A')] == color for j, i in line):\n                    return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column_index = ord(column) - ord(\"A\")\n        \n        for i in range(5, -1, -1):\n            if grid[i][column_index] is None:\n                grid[i][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[j][COLUMNS.index(i)] == color for i, j in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None]*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    players = {'Yellow': 'Y', 'Red': 'R'}\n    \n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = players[position[2:]]\n        for row in range(6):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n        if check_win(board):\n            return position[2:]\n    \n    return 'Draw'\n\ndef check_win(board):\n    for line in LINES:\n        values = [board[row][ord(column) - ord('A')] for column, row in line]\n        if values[0] != ' ' and all(value == values[0] for value in values):\n            return True\n    return False",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position[2:]\n\n        for row in range(6):\n            if grid[row][column] is None:\n                grid[row][column] = color\n                break\n\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [['']*7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - 65\n        for i in range(5, -1, -1):\n            if board[i][column_index] == '':\n                board[i][column_index] = color\n                break\n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == color for i,j in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(5, -1, -1) if (column, i) not in red_moves and (column, i) not in yellow_moves), None)\n        if row is None:\n            return 'Invalid move'\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        if any(line.issubset(red_moves) for line in LINES):\n            return 'Red'\n        if any(line.issubset(yellow_moves) for line in LINES):\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    def check_winner(positions):\n        for line in LINES:\n            red_count = 0\n            yellow_count = 0\n            for pos in line:\n                if pos in positions:\n                    if positions[pos] == \"Red\":\n                        red_count += 1\n                    elif positions[pos] == \"Yellow\":\n                        yellow_count += 1\n                if red_count == 4:\n                    return \"Red\"\n                elif yellow_count == 4:\n                    return \"Yellow\"\n        return \"Draw\"\n\n    positions = {}\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        row = len([x for x in positions.keys() if x[0] == column])\n        positions[(column, row)] = color\n\n    return check_winner(positions)",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = 0\n        while row < 6 and board[row][ord(col)-65] == '':\n            row += 1\n        row -= 1\n        board[row][ord(col)-65] = players[player]\n        \n        for line in LINES:\n            if all(board[row][ord(col)-65] == players[player] for col, row in line):\n                return player\n        \n    return 'Draw'"
        ]
    },
    "2": {
        "0": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a grid to store the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # iterate through the pieces positions\n    for pos in pieces_positions:\n        # get the column and color from the position\n        column, color = pos.split('_')\n        \n        # find the next empty row in the column\n        row = 5\n        while row >= 0 and grid[row][ord(column)-65] != '':\n            row -= 1\n        \n        # if the row is valid, place the piece\n        if row >= 0:\n            grid[row][ord(column)-65] = color\n    \n    # check for a win\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n    \n    # if there are no empty spaces, it's a draw\n    if all(all(cell != '' for cell in row) for row in grid):\n        return 'Draw'\n    \n    # if no one has won and there are still empty spaces, the game is ongoing\n    return 'Ongoing'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell in the grid with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each line, check if all the cells are occupied by the same player's color.\n7. If a winner is found, return the corresponding color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j+1]] == board[COLUMNS[i+2]][ROWS[j+2]] == board[COLUMNS[i+3]][ROWS[j+3]] for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)):\n            return board[col][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j-1]] == board[COLUMNS[i+2]][ROWS[j-2]] == board[COLUMNS[i+3]][ROWS[j-3]] for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))):\n            return board[col][row]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 6 for _ in range(7)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = COLUMNS.index(column)\n        row_idx = next((i for i in range(6) if board[col_idx][i] is None), None)\n        if row_idx is not None:\n            board[col_idx][row_idx] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column] = board.get(column, '') + color[0]\n\n        for line in LINES:\n            if all(board.get(cell, '') == color[0] for cell in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_idx = COLUMNS.index(column)\n        for row_idx in range(len(ROWS)-1, -1, -1):\n            if board[column_idx][row_idx] is None:\n                board[column_idx][row_idx] = color\n                break\n    \n    for line in LINES:\n        colors = [board[column_idx][row_idx] for column_idx, row_idx in line]\n        if all(color == \"Red\" for color in colors):\n            return \"Red\"\n        elif all(color == \"Yellow\" for color in colors):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the game grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    player_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the moves\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the column index\n        column_index = ord(column) - ord('A')\n        \n        # Find the row index\n        row_index = 5 - grid[::-1][column_index].count('')\n        \n        # Place the piece in the grid\n        grid[row_index][column_index] = color\n    \n        # Check for a winner\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return player_map[color]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for i in range(len(pieces_positions)):\n        col, player = pieces_positions[i].split('_')\n        if col not in board:\n            board[col] = []\n        board[col].append(player)\n\n        if len(board[col]) == 6:\n            board[col] = []\n            \n        for line in LINES:\n            if all((col, player) in line for col, row in line):\n                return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max([row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column = COLUMNS.index(piece[0])\n        color = piece[2:]\n        \n        for row in range(len(ROWS)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = set(grid[column][row] for column, row in line)\n        \n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in reversed(range(6)):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # create grid to keep track of pieces\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # iterate over pieces positions\n    for position in pieces_positions:\n        # get column and color from position string\n        column, color = position.split('_')\n        # find first empty slot in the column\n        for i in range(len(grid[column])):\n            if grid[column][i] == '':\n                # place the piece in the slot\n                grid[column][i] = color\n                break\n\n    # check for a winning line\n    for line in LINES:\n        # count the number of consecutive pieces of the same color in the line\n        red_count = 0\n        yellow_count = 0\n        for position in line:\n            column, row = position\n            if grid[column][row] == 'Red':\n                red_count += 1\n                if red_count == 4:\n                    return 'Red'\n            elif grid[column][row] == 'Yellow':\n                yellow_count += 1\n                if yellow_count == 4:\n                    return 'Yellow'\n\n    # if no winning line found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Keep track of the current player\n    current_player = 'Red'\n    \n    # Iterate through each move in the pieces_positions list\n    for move in pieces_positions:\n        # Get the column and player color from the move\n        column, color = move.split('_')\n        \n        # Find the empty row in the column\n        row = -1\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n        \n        # Place the player's color in the grid\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check if the current player wins\n        if check_winner(grid, row, ord(column) - ord('A'), color):\n            return color\n        \n        # Switch the current player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n    \n    # If no player wins, return \"Draw\"\n    return \"Draw\"\n\ndef check_winner(grid, row, col, color):\n    # Check for horizontal win\n    count = 0\n    for i in range(max(0, col - 3), min(7, col + 4)):\n        if grid[row][i] == color:\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    \n    # Check for vertical win\n    count = 0\n    for i in range(max(0, row - 3), min(6, row + 4)):\n        if grid[i][col] == color:\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    \n    # Check for diagonal win (top-left to bottom-right)\n    count = 0\n    for i in range(max(0, row - 3), min(6, row + 4)):\n        if col + row - i >= 0 and col + row - i < 7:\n            if grid[i][col + row - i] == color:\n                count += 1\n            else:\n                count = 0\n            if count == 4:\n                return True\n    \n    # Check for diagonal win (top-right to bottom-left)\n    count = 0\n    for i in range(max(0, row - 3), min(6, row + 4)):\n        if col - row + i >= 0 and col - row + i < 7:\n            if grid[i][col - row + i] == color:\n                count += 1\n            else:\n                count = 0\n            if count == 4:\n                return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: set() for c in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].add(color)\n        for line in LINES:\n            if all(position in board[column] for position in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def check_winner(lines):\n        for line in lines:\n            red_count = 0\n            yellow_count = 0\n            for pos in line:\n                if pos in pieces_positions:\n                    color = pieces_positions[pos].split(\"_\")[1]\n                    if color == \"Red\":\n                        red_count += 1\n                        yellow_count = 0\n                    else:\n                        yellow_count += 1\n                        red_count = 0\n                    if red_count == 4:\n                        return \"Red\"\n                    elif yellow_count == 4:\n                        return \"Yellow\"\n                else:\n                    red_count = 0\n                    yellow_count = 0\n        return \"Draw\"\n    \n    return check_winner(LINES)",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_pieces = set()\n    yellow_pieces = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_pieces.add((column, len(red_pieces)))\n        else:\n            yellow_pieces.add((column, len(yellow_pieces)))\n\n        for line in LINES:\n            if line.issubset(red_pieces):\n                return 'Red'\n            elif line.issubset(yellow_pieces):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def find_winner(board):\n        for line in LINES:\n            if all(board.get(cell) == 'Red' for cell in line):\n                return 'Red'\n            elif all(board.get(cell) == 'Yellow' for cell in line):\n                return 'Yellow'\n        return 'Draw'\n\n    board = {}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            cell = (column, row)\n            if cell not in board:\n                board[cell] = color\n                break\n    return find_winner(board)",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column][grid[column].index(None)] = color\n    \n    for line in LINES:\n        pieces = [grid[column][row] for column, row in line]\n        if all(piece == 'Yellow' for piece in pieces):\n            return 'Yellow'\n        elif all(piece == 'Red' for piece in pieces):\n            return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {col: [] for col in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        for line in LINES:\n            if all(board[col] == color for col, color in line):\n                return color\n            \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column = COLUMNS.index(column)\n        row = next((r for r in range(6) if (COLUMNS[column], ROWS[r]) not in {c for line in LINES for c in line}), None)\n        if row is None:\n            continue\n        if (lines := [line for line in LINES if (COLUMNS[column], ROWS[row]) in line and len(line) == 4]) \\\n        or any(COLUMNS[column] in columns and ROWS[row] in rows for columns, rows in LINES):\n            return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {col: set() for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].add((col, len(board[col])))\n        if any(line.issubset(board[col]) for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(board):\n        for line in LINES:\n            cells = [board.get(cell) for cell in line]\n            if all(cells) and cells.count(cells[0]) == len(cells):\n                return cells[0]\n        return None\n\n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        row = next((i for i in range(5, -1, -1) if (column, i) not in board), None)\n        if row is not None:\n            board[(column, row)] = color\n\n        winner = check_winner(board)\n        if winner is not None:\n            return winner\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            for pos in pieces_positions:\n                column, _, clr = pos.partition('_')\n                if (column, int(ROWS[-1])) in line:\n                    if all((column, ROWS[k]) in line for k in range(len(ROWS))):\n                        return color\n                    break\n                row = next((j for j in range(len(ROWS)-1, -1, -1)\n                            if (column, ROWS[j]) not in {pos.partition('_')[::2]\n                                                        for pos in pieces_positions[:pieces_positions.index(pos)+1]}\n                            | line))\n                if all((column, ROWS[k]) in line for k in range(row, row-4, -1)):\n                    return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def is_winner(player):\n        for line in LINES:\n            if all(p in player for p in line):\n                return True\n        return False\n    \n    board = {}\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        if column_index not in board:\n            board[column_index] = []\n        board[column_index].append(color)\n\n        if len(board[column_index]) == 4:\n            if is_winner(board[column_index]):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to keep track of the number of pieces in each column\n    column_count = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0}\n    \n    # Create a dictionary to store the grid\n    grid = {}\n    \n    # Create a variable to keep track of the current player\n    current_player = 'Red'\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Split the piece into column and color\n        column, color = piece.split('_')\n        \n        # Check if the current column is full\n        if column_count[column] == 6:\n            continue\n        \n        # Add the piece to the grid\n        grid[(column, column_count[column])] = color\n        \n        # Increment the column count\n        column_count[column] += 1\n        \n        # Check if the current player has won\n        for line in LINES:\n            if all(grid.get(cell) == current_player for cell in line):\n                return current_player\n        \n        # Switch to the other player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[''] * 7 for _ in range(6)]\n    turn = 'Red'\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(6):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n        \n        turn = 'Yellow' if turn == 'Red' else 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        col, color = position.split(\"_\")\n        col_idx = ord(col) - ord(\"A\")\n        for row in range(5, -1, -1):\n            if board[row][col_idx] == \"\":\n                board[row][col_idx] = color\n                break\n    \n    for line in LINES:\n        pieces = set()\n        for pos in line:\n            col, row = pos\n            col_idx = ord(col) - ord(\"A\")\n            pieces.add(board[row][col_idx])\n        if \"\" not in pieces and len(pieces) == 1:\n            return list(pieces)[0]\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create empty board\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Initialize player turn\n    player = 'Red'\n    \n    # Iterate through pieces positions\n    for piece in pieces_positions:\n        # Get column and color from piece position\n        column, color = piece.split('_')\n        \n        # Convert column letter to index\n        column_index = ord(column) - ord('A')\n        \n        # Drop the piece in the column\n        for row in range(5, -1, -1):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        \n        # Check for winner\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        \n        # Switch player turn\n        player = 'Yellow' if player == 'Red' else 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def color(p):\n        return 'Yellow' if p.endswith('Yellow') else 'Red'\n    \n    board = {}\n    for move in pieces_positions:\n        column, _ = move.split('_')\n        row = board.get(column, 0)\n        board[column] = row + 1\n        if any(set(board) & line == line for line in LINES):\n            return color(move)\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column = position.split('_')[0]\n        color = position.split('_')[1]\n        \n        if color == 'Red':\n            red_positions.add((column, len(red_positions) % 6))\n        else:\n            yellow_positions.add((column, len(yellow_positions) % 6))\n        \n        for line in LINES:\n            if line <= red_positions:\n                return 'Red'\n            elif line <= yellow_positions:\n                return 'Yellow'\n        \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(color, positions):\n        for line in LINES:\n            if all(p in positions for p in line):\n                return color\n        return None\n\n    positions_red = set()\n    positions_yellow = set()\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            positions_red.add((column, ROWS[len(positions_red)]))\n            winner = check_winner('Red', positions_red)\n            if winner:\n                return winner\n        else:\n            positions_yellow.add((column, ROWS[len(positions_yellow)]))\n            winner = check_winner('Yellow', positions_yellow)\n            if winner:\n                return winner\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    else:\n        return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column = ord(move[0]) - 65\n        color = move.split(\"_\")[1]\n        for row in range(6):\n            if board[row][column] == \"\":\n                board[row][column] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column)-65] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {COLUMNS[i]:[' ' for _ in ROWS] for i in range(len(COLUMNS))}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[col][grid[col].index(' ')] = color\n        for line in LINES:\n            if all(grid[x][y] == color for (x, y) in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == ' ':\n                board[row][column_index] = players[color]\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[color] for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split('_')[1]\n        row = 0\n        while row < 6 and grid[row][column] == '':\n            row += 1\n        if row != 0:\n            row -= 1\n        grid[row][column] = color\n        \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            colors.add(grid[cell[1]][ord(cell[0]) - ord('A')])\n        if len(colors) == 1 and '' not in colors:\n            return list(colors)[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        if color == 'Red':\n            red.add((col, ROWS[len(red)]))\n        else:\n            yellow.add((col, ROWS[len(yellow)]))\n        for line in LINES:\n            if line.issubset(red):\n                return \"Red\"\n            if line.issubset(yellow):\n                return \"Yellow\"\n    if len(red) + len(yellow) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n  COLUMNS, ROWS = 'ABCDEFG', range(6)\n  LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n          + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n          + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n          + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n  grid = [['' for _ in ROWS] for _ in COLUMNS]\n  for move in pieces_positions:\n    column, color = move.split('_')\n    grid[COLUMNS.index(column)][next(i for i, v in enumerate(grid[COLUMNS.index(column)]) if v == '')] = color\n\n  for line in LINES:\n    for color in ('Red', 'Yellow'):\n      if any(all(grid[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line) for line in LINES):\n        return color\n\n  return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        else:\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n\n    for line in LINES:\n        if line.issubset(red_moves):\n            return 'Red'\n        if line.issubset(yellow_moves):\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * len(COLUMNS) for _ in ROWS]\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        for row in ROWS:\n            if grid[row][COLUMNS.index(column)] is None:\n                grid[row][COLUMNS.index(column)] = color\n                break\n        for line in LINES:\n            if all(grid[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i, value in enumerate(board[COLUMNS.index(column)]) if value is None)\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color.capitalize()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red_positions = set()\n    yellow_positions = set()\n\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n\n        if color == 'Red':\n            red_positions.add((column, len(red_positions)))\n        elif color == 'Yellow':\n            yellow_positions.add((column, len(yellow_positions)))\n\n        for line in LINES:\n            if line <= red_positions:\n                return 'Red'\n            elif line <= yellow_positions:\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i in ROWS if (column, i) not in red_moves and (column, i) not in yellow_moves)\n        \n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n        \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        if color == \"Red\":\n            red_positions.add((column, max([row for row in ROWS if (column, row) not in red_positions])))\n            if any(line <= red_positions for line in LINES):\n                return \"Red\"\n        else:\n            yellow_positions.add((column, max([row for row in ROWS if (column, row) not in yellow_positions])))\n            if any(line <= yellow_positions for line in LINES):\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create empty board\n    board = [[''] * 7 for _ in range(6)]\n    \n    # Iterate over the positions\n    for position in pieces_positions:\n        column, color = position.split('_')\n        \n        # Find the next available row in the column\n        for row in range(6):\n            if board[row][ord(column) - ord('A')] == '':\n                # Place the piece in the board\n                board[row][ord(column) - ord('A')] = color\n                break\n                \n        # Check if there is a winner\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n            \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in reversed(range(len(ROWS))) if grid[i][COLUMNS.index(column)] is None), None)\n        if row is not None:\n            grid[row][COLUMNS.index(column)] = color\n            \n            for line in LINES:\n                if all(grid[j][COLUMNS.index(i)] == color for (i, j) in line):\n                    return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            row, column = cell[1], ord(cell[0]) - ord('A')\n            colors.add(board[row][column])\n        \n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Yellow': 'Y', 'Red': 'R'}\n\n    for pos in pieces_positions:\n        col, player = pos.split('_')\n        col_index = ord(col) - ord('A')\n\n        for row in range(6):\n            if board[row][col_index] == '':\n                board[row][col_index] = players[player]\n                break\n\n        for line in LINES:\n            if all(board[row][ord(col) - ord('A')] == players[player] for col, row in line):\n                return player\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def color_to_num(color):\n        if color == 'Yellow':\n            return 0\n        elif color == 'Red':\n            return 1\n\n    board = [[-1] * 7 for _ in range(6)]\n\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] != -1:\n            row += 1\n        board[row][ord(column) - ord('A')] = color_to_num(color)\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color_to_num(color)\n                   for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {COLUMNS[i]: [None] * len(ROWS) for i in range(len(COLUMNS))}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n    for line in LINES:\n        colors = {board[column][row] for column, row in line}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column = move[0]\n        color = move[2:]\n        \n        row = -1\n        while board[row][ord(column) - ord('A')] and row > -6:\n            row -= 1\n        \n        if row == -6:\n            return \"Draw\"\n        \n        board[row][ord(column) - ord('A')] = color\n        \n        for line in LINES:\n            if all(board[r][ord(c) - ord('A')] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == ' ':\n                board[row][column_index] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = -1\n        for i in range(6):\n            if board[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n        board[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(board[i][ord(column) - ord('A')] == color for column, i in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty cells\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color of the current piece\n        column, color = piece.split('_')\n        \n        # Find the first empty cell in the column\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == '':\n                grid[i][ord(column) - ord('A')] = color\n                break\n    \n    # Check if there is a winner\n    for line in LINES:\n        cells = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # If no winner, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: {row: None for row in ROWS} for col in COLUMNS}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in ROWS:\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for line in LINES:\n        colors = {board[column][row] for column, row in line}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_index = ord(col) - 65\n        for row in range(6):\n            if grid[row][col_index] == ' ':\n                grid[row][col_index] = color\n                break\n    for line in LINES:\n        for i in range(4):\n            cells = [(col, row) for col, row in line]\n            colors = set(grid[row][ord(col) - 65] for col, row in cells)\n            if len(colors) == 1 and ' ' not in colors:\n                return colors.pop()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = ord(column) - ord('A')\n        for row in range(6):\n            if grid[row][col_idx] == '':\n                grid[row][col_idx] = color\n                break\n        for line in LINES:\n            if all(grid[row][ord(col)-ord('A')] == color for col, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create an empty board\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        col, color = position.split('_')\n        \n        # Find the lowest empty row in the column\n        row = 5\n        while row >= 0 and board[row][ord(col) - ord('A')] != '':\n            row -= 1\n        \n        # Place the color in the board\n        board[row][ord(col) - ord('A')] = color\n    \n    # Check if there is a winner\n    for line in LINES:\n        for i in range(4):\n            if all(board[row][ord(col) - ord('A')] == color for (col, row) in line):\n                return color\n    \n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Extract the column and color from the position\n        column, color = position.split('_')\n\n        # Find the first empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column)-65] != '':\n            row += 1\n\n        # Place the color in the grid\n        grid[row][ord(column)-65] = color\n\n        # Check if the current color has won\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n\n    # If no color has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = None\n        \n        for i in range(len(ROWS)):\n            if board[COLUMNS.index(column)][i] is None:\n                row = i\n                break\n        \n        if row is None:\n            return 'Draw'\n        \n        board[COLUMNS.index(column)][row] = color\n    \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    \n    # Loop through the list of pieces positions\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5\n        while grid[row_index][column_index] is not None:\n            row_index -= 1\n        \n        # Drop the piece in the slot\n        grid[row_index][column_index] = color\n    \n    # Check for a win in any of the lines\n    for line in LINES:\n        line_colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if line_colors.count('Red') == 4:\n            return 'Red'\n        if line_colors.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # If there are no wins, it is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        if row < 6:\n            grid[row][ord(column) - ord('A')] = color\n    \n    for line in LINES:\n        pieces = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if all(p == 'Red' for p in pieces):\n            return 'Red'\n        if all(p == 'Yellow' for p in pieces):\n            return 'Yellow'\n    \n    if all(grid[row][column] != '' for column in range(7) for row in range(6)):\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    player = 'Red'\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        \n        player = 'Yellow' if player == 'Red' else 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Fill in the grid with the given pieces positions\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in range(6):\n            if grid[row][column] == ' ':\n                grid[row][column] = color\n                break\n    \n    # Check if there is a winner\n    for line in LINES:\n        values = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        if all(value == 'Yellow' for value in values):\n            return 'Yellow'\n        \n        if all(value == 'Red' for value in values):\n            return 'Red'\n    \n    # If no winner, return Draw\n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    # initialize the game grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # iterate over the pieces positions\n    for piece in pieces_positions:\n        # split the piece position into column and color\n        column, color = piece.split('_')\n        \n        # find the first empty row in the column\n        row = 5\n        while row >= 0 and grid[row][ord(column)-ord('A')] != ' ':\n            row -= 1\n        \n        # place the piece in the grid\n        grid[row][ord(column)-ord('A')] = color\n    \n    # check if there is a winner\n    for line in LINES:\n        # get the colors in the line\n        colors = [grid[row][ord(column)-ord('A')] for column, row in line]\n        \n        # check if all colors are the same and not empty\n        if all(color == colors[0] and color != ' ' for color in colors):\n            return colors[0]  # return the winner\n    \n    return \"Draw\"  # no winner, return draw",
            "def who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column = ord(position[0]) - 65\n        color = position[2:]\n        for row in range(6):\n            if board[row][column] is None:\n                board[row][column] = color\n                break\n    for line in LINES:\n        colors = [board[row][ord(column) - 65] for column, row in line]\n        if colors.count('Yellow') == 4:\n            return 'Yellow'\n        elif colors.count('Red') == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red = set()\n    yellow = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position.split(\"_\")[1]\n        \n        if color == \"Red\":\n            red.add((column, len(red)))\n        elif color == \"Yellow\":\n            yellow.add((column, len(yellow)))\n            \n    for line in LINES:\n        if line.issubset(red):\n            return \"Red\"\n        elif line.issubset(yellow):\n            return \"Yellow\"\n        \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n           \ndef who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i in range(6) if board[i][ord(column) - ord('A')] is None), None)\n        if row is not None:\n            board[row][ord(column) - ord('A')] = color\n            for line in LINES:\n                if all(board[i][ord(j) - ord('A')] == color for j, i in line):\n                    return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] != '':\n            row += 1\n        if row < 6:\n            board[row][ord(column) - ord('A')] = color\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        return None\n    \n    red_winner = check_winner('Red')\n    if red_winner:\n        return red_winner\n    yellow_winner = check_winner('Yellow')\n    if yellow_winner:\n        return yellow_winner\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column_index = ord(column) - ord(\"A\")\n        \n        for i in range(6):\n            if grid[i][column_index] == None:\n                grid[i][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[j][ord(i)-65] == color for i,j in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None]*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column)-65] == '':\n            row += 1\n        if row > 0:\n            board[row-1][ord(column)-65] = players[color]\n        \n        for line in LINES:\n            if all(board[row][ord(column)-65] == players[color] for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    players = {'Yellow': 'Y', 'Red': 'R'}\n    \n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = players[position[2:]]\n        for row in range(6):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n        if check_win(board):\n            return position[2:]\n    \n    return 'Draw'\n\ndef check_win(board):\n    for line in LINES:\n        values = [board[row][ord(column) - ord('A')] for column, row in line]\n        if values[0] != ' ' and all(value == values[0] for value in values):\n            return True\n    return False",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position[2:]\n\n        for row in range(6):\n            if grid[row][column] is None:\n                grid[row][column] = color\n                break\n\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[\"\"] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        for row in range(6):\n            if grid[row][column] == \"\":\n                grid[row][column] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            row, column = cell[1], ord(cell[0]) - ord('A')\n            colors.add(grid[row][column])\n        if len(colors) == 1 and \"\" not in colors:\n            return colors.pop()\n    \n    if all(all(cell != \"\" for cell in row) for row in grid):\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [['']*7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - 65\n        for i in range(5, -1, -1):\n            if board[i][column_index] == '':\n                board[i][column_index] = color\n                break\n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == color for i,j in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(5, -1, -1) if (column, i) not in red_moves and (column, i) not in yellow_moves), None)\n        if row is None:\n            return 'Invalid move'\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        if any(line.issubset(red_moves) for line in LINES):\n            return 'Red'\n        if any(line.issubset(yellow_moves) for line in LINES):\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column)-ord('A')] == ' ':\n            row += 1\n        row -= 1\n        board[row][ord(column)-ord('A')] = color\n    \n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\""
        ]
    }
}