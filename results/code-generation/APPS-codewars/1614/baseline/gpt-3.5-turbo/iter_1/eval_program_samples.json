{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the game state\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position in the list\n    for piece in pieces_positions:\n        # Extract the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to a numerical index\n        col_index = ord(column) - ord('A')\n\n        # Find the lowest empty row in the column\n        row_index = -1\n        for row in range(5, -1, -1):\n            if grid[row][col_index] == '':\n                row_index = row\n                break\n\n        # Place the piece in the grid\n        grid[row_index][col_index] = color\n\n        # Check if the current move resulted in a win\n        for line in LINES:\n            # Get the set of positions in the line\n            positions = set([(COLUMNS.index(column) + i, int(row)) for i, row in enumerate(ROWS)])\n\n            # Check if all positions in the line have the same color\n            if all(grid[row][col] == color for col, row in positions):\n                return color\n\n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to store the count of each player's pieces\n    count = {\"Red\": 0, \"Yellow\": 0}\n    \n    # Create a grid to represent the game board\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for piece in pieces_positions:\n        # Get the column and color of the piece\n        column, color = piece.split(\"_\")\n        \n        # Convert the column letter to an index\n        column_idx = ord(column) - ord(\"A\")\n        \n        # Find the first empty row in the column\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == \"\":\n                # Place the piece in the empty spot\n                board[row][column_idx] = color\n                break\n        \n        # Check for a winning move\n        for line in LINES:\n            if all(board[row][column_idx] == color for column_idx, row in line):\n                return color\n        \n        # Update the count of the player's pieces\n        count[color] += 1\n    \n    # Check if the game is a draw\n    if count[\"Red\"] + count[\"Yellow\"] == 42:\n        return \"Draw\"\n    \n    # If there is no winner and the game is not a draw, return \"None\"\n    return \"None\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def check_winner(grid):\n        for line in LINES:\n            if all(grid[cell] == grid[next(iter(line))] for cell in line):\n                return grid[next(iter(line))]\n        return None\n\n    grid = {pos: None for pos in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column] = color\n        winner = check_winner(grid)\n        if winner:\n            return winner\n\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][COLUMNS.index(column)] == ' ':\n            row += 1\n        board[row-1][COLUMNS.index(column)] = color[0]\n\n    for line in LINES:\n        line_values = [board[ROWS.index(row)][COLUMNS.index(column)] for column, row in line]\n        if all(value == 'R' for value in line_values):\n            return 'Red'\n        if all(value == 'Y' for value in line_values):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def get_winner():\n        for line in LINES:\n            if all(pos in pieces_positions[player]\n                   for pos in line):\n                return player\n        return ''\n\n    players = ['Red', 'Yellow']\n    for piece in pieces_positions:\n        col, player = piece.split('_')\n        pieces_positions[player].add((col, min(ROWS - {pos[1]\n                                                       for pos in\n                                                       pieces_positions[col]})))\n        if get_winner():\n            return get_winner()\n        players = players[::-1]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line <= red_moves or line <= yellow_moves:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Red': set(), 'Yellow': set()}\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        pieces[color].add((column, len(pieces[color])))\n        for line in LINES:\n            if line <= pieces[color]:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {c: set() for c in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].add(color)\n        for line in LINES:\n            if all(board[col].issuperset(color) for col, color in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        board[COLUMNS.index(column)][ROWS.index(next(i for i, v in enumerate(board[COLUMNS.index(column)]) if not v)) - 1] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(all(cell != None for cell in row) for row in board):\n        return 'Draw'\n    \n    return None\n```"
        ],
        "1": [
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = COLUMNS.index(column)\n        for i in range(len(ROWS)-1, -1, -1):\n            if grid[i][column_index] == '':\n                grid[i][column_index] = color\n                break\n    for line in LINES:\n        colors = [grid[j][COLUMNS.index(i)] for i, j in line]\n        if colors == ['Yellow'] * 4:\n            return 'Yellow'\n        if colors == ['Red'] * 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if not board[i][COLUMNS.index(column)]), None)\n        if row is not None:\n            board[row][COLUMNS.index(column)] = players[color]\n\n        for line in LINES:\n            if all(board[i][COLUMNS.index(j)] == players[color] for j, i in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n   \n    # create an empty board\n    board = [['' for _ in range(7)] for _ in range(6)]\n   \n    # iterate over the pieces positions\n    for position in pieces_positions:\n        # get the column and color of the piece\n        column, color = position.split('_')\n       \n        # find the first empty row in the column\n        row = -1\n        while board[row][COLUMNS.index(column)] != '':\n            row -= 1\n       \n        # add the piece to the board\n        board[row][COLUMNS.index(column)] = color\n   \n        # check if there is a winner\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n   \n    # if no winner is found, return 'Draw'\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(5, -1, -1) if board[i][COLUMNS.index(column)] == ''), -1)\n        board[row][COLUMNS.index(column)] = color\n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == color for i, j in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in range(6):\n            if grid[row][column] is None:\n                grid[row][column] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_column(col):\n        return [piece for piece in pieces_positions if piece[0] == col]\n\n    def get_row(row):\n        return [piece for piece in pieces_positions if piece[1] == row]\n\n    def get_diagonal(start_col, start_row, direction):\n        diagonal = []\n        col, row = start_col, start_row\n        for _ in range(4):\n            piece = [piece for piece in pieces_positions if piece[0] == col and piece[1] == row]\n            if piece:\n                diagonal.append(piece[0])\n            else:\n                diagonal.append(None)\n            col += direction[0]\n            row += direction[1]\n        return diagonal\n\n    for col in COLUMNS:\n        column_pieces = get_column(col)\n        if len(column_pieces) < 4:\n            continue\n\n        for i in range(len(column_pieces) - 3):\n            if column_pieces[i:i+4] == ['A_Red', 'A_Red', 'A_Red', 'A_Red']:\n                return \"Red\"\n            elif column_pieces[i:i+4] == ['B_Yellow', 'B_Yellow', 'B_Yellow', 'B_Yellow']:\n                return \"Yellow\"\n\n    for row in ROWS:\n        row_pieces = get_row(row)\n        if len(row_pieces) < 4:\n            continue\n\n        for i in range(len(row_pieces) - 3):\n            if row_pieces[i:i+4] == ['A_Red', 'A_Red', 'A_Red', 'A_Red']:\n                return \"Red\"\n            elif row_pieces[i:i+4] == ['B_Yellow', 'B_Yellow', 'B_Yellow', 'B_Yellow']:\n                return \"Yellow\"\n\n    for line in LINES:\n        diagonal_pieces = [get_diagonal(*coords) for coords in line]\n        if len(diagonal_pieces) < 4:\n            continue\n\n        for i in range(len(diagonal_pieces) - 3):\n            if diagonal_pieces[i:i+4] == [['A_Red', 'A_Red', 'A_Red', 'A_Red']] * 4:\n                return \"Red\"\n            elif diagonal_pieces[i:i+4] == [['B_Yellow', 'B_Yellow', 'B_Yellow', 'B_Yellow']] * 4:\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * 7 for _ in range(6)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col_index = COLUMNS.index(col)\n        for row in range(5, -1, -1):\n            if board[row][col_index] is None:\n                board[row][col_index] = color\n                break\n\n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def check_win(player):\n        for line in LINES:\n            if line.issubset(pieces[player]):\n                return True\n        return False\n    \n    pieces = {'Yellow': set(), 'Red': set()}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = max((r for r in ROWS if (column, r) not in pieces['Yellow'] and (column, r) not in pieces['Red']))\n        pieces[color].add((column, row))\n        if check_win(color):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[' ' for _ in ROWS] for _ in COLUMNS]\n    player = {'R': 'Red', 'Y': 'Yellow'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(' ')] = color[0]\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color[0] for c, r in line):\n                return player[color[0]]\n    return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    turn = 'Red'\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        turn = 'Yellow' if turn == 'Red' else 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n    \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] != '':\n            row += 1\n        if row < 6:\n            board[row][ord(column) - ord('A')] = color\n    \n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max([r for c, r in yellow_positions | red_positions if c == column], default=-1) + 1\n        if color == 'Red':\n            red_positions.add((column, row))\n        elif color == 'Yellow':\n            yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line <= red_positions:\n                return 'Red'\n            if line <= yellow_positions:\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    colors = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(5, -1, -1) if grid[i][ord(column)-65] == ''), None)\n        if row is not None:\n            grid[row][ord(column)-65] = colors[color]\n            for line in LINES:\n                if all(grid[j][ord(i)-65] == colors[color] for i, j in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\r\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\r\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\r\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\r\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\r\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\r\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\r\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\r\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\r\n\r\ndef who_is_winner(pieces_positions):\r\n    red_positions = set()\r\n    yellow_positions = set()\r\n    for piece in pieces_positions:\r\n        column, color = piece.split('_')\r\n        row = max([i for i in range(6) if (column, i) not in red_positions and (column, i) not in yellow_positions])\r\n        if color == 'Red':\r\n            red_positions.add((column, row))\r\n        else:\r\n            yellow_positions.add((column, row))\r\n        for line in LINES:\r\n            if line <= red_positions:\r\n                return 'Red'\r\n            elif line <= yellow_positions:\r\n                return 'Yellow'\r\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # loop through the pieces positions\n    for position in pieces_positions:\n        # get the column and color of the piece\n        column, color = position.split('_')\n        \n        # find the first empty row in the column\n        for i in range(5, -1, -1):\n            if grid[i][ord(column)-65] == ' ':\n                # place the piece in the empty row\n                grid[i][ord(column)-65] = color\n                break\n    \n    # check for a winner\n    for line in LINES:\n        colors = set()\n        for position in line:\n            colors.add(grid[position[1]][ord(position[0])-65])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    # if no winner, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[' '] * len(COLUMNS) for _ in range(len(ROWS))]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = COLUMNS.index(column)\n        color = players[color]\n        \n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column] == ' ':\n                grid[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][COLUMNS.index(column)] == color for column, row in line):\n                return 'Yellow' if color == 'Y' else 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [' '] * len(ROWS) for column in COLUMNS}\n    players = {'Red': 'R', 'Yellow': 'Y'}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column][board[column].index(' ')] = players[color]\n\n        for line in LINES:\n            if all(board[col][row] == players[color] for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    # Define the players and their colors\n    players = {\"Red\": \"R\", \"Yellow\": \"Y\"}\n\n    # Create an empty board\n    board = [[\".\" for _ in range(7)] for _ in range(6)]\n\n    # Iterate through the pieces positions\n    for position in pieces_positions:\n\n        # Get the column and color from the position\n        column = ord(position[0]) - ord(\"A\")\n        color = players[position[2:]]\n\n        # Place the color in the lowest empty row in the column\n        for row in range(5, -1, -1):\n            if board[row][column] == \".\":\n                board[row][column] = color\n                break\n\n        # Check if there is a winner\n        for line in LINES:\n            if all(board[row][ord(column)-ord(\"A\")] == color for column, row in line):\n                return position[2:]\n\n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        col_index = ord(col) - ord('A')\n        for row in range(6):\n            if board[row][col_index] == '':\n                board[row][col_index] = color\n                break\n        \n        # check for winner\n        for line in LINES:\n            colors = [board[row][ord(col) - ord('A')] for col, row in line]\n            if colors.count(color) >= 4:\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        for row in range(len(ROWS)):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        values = [board[COLUMNS.index(column)][row] for column, row in line]\n        if len(set(values)) == 1 and values[0] is not None:\n            return values[0]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            continue\n        board[column_index][row_index] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = {column: [''] * len(ROWS) for column in COLUMNS}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column].append(color)\n        \n        if len(grid[column]) == len(ROWS) + 1:\n            grid[column] = grid[column][1:]\n            \n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color.capitalize()\n            \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            colors = set(board[col][-4:])\n            if len(colors) == 1 and 'Yellow' in colors:\n                return 'Yellow'\n            if len(colors) == 1 and 'Red' in colors:\n                return 'Red'\n\n        for col1, col2, col3, col4 in line:\n            if len(board[col1]) < 4 or len(board[col2]) < 3 or len(board[col3]) < 2 or len(board[col4]) < 1:\n                continue\n            colors = {board[col1][-4:][::-1], board[col2][-3:][::-1], board[col3][-2:][::-1], board[col4][-1:][::-1]}\n            if 'Yellow' in colors and len(colors) == 1:\n                return 'Yellow'\n            if 'Red' in colors and len(colors) == 1:\n                return 'Red'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the next empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check for a winning condition\n    for line in LINES:\n        # Get the colors in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all colors are the same\n        if colors[0] == colors[1] == colors[2] == colors[3] and colors[0] != '':\n            return colors[0]\n    \n    # Check for a draw condition\n    if all(grid[row][col] != '' for row in range(6) for col in range(7)):\n        return 'Draw'\n    \n    # No winner or draw, return None\n    return None",
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(COLUMNS) for _ in ROWS]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(ROWS):\n            if board[row][COLUMNS.index(column)] is None:\n                board[row][COLUMNS.index(column)] = color\n                break\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED = 'Red'\n    YELLOW = 'Yellow'\n    DRAW = 'Draw'\n    \n    board = [[None] * 7 for _ in range(6)]\n    player = RED\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    \n        player = RED if player == YELLOW else YELLOW\n    \n    return DRAW",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for i in range(6):\n            if board[i][column_index] == ' ':\n                board[i][column_index] = color\n                break\n    for line in LINES:\n        values = set()\n        for cell in line:\n            column, row = cell\n            column_index = ord(column) - ord('A')\n            row_index = row\n            values.add(board[row_index][column_index])\n        if len(values) == 1 and ' ' not in values:\n            if 'Red' in values:\n                return 'Red'\n            else:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(len(ROWS)) if board[COLUMNS.index(column)][i] == ''), None)\n        if row is None:\n            continue\n        board[COLUMNS.index(column)][row] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [None] * len(ROWS) for column in COLUMNS}\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column][board[column].index(None)] = color\n\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_player(piece):\n        return piece.split('_')[1]\n\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    for piece in pieces_positions:\n        column, player = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row_index in range(len(ROWS)-1, -1, -1):\n            if grid[column_index][row_index] == '':\n                grid[column_index][row_index] = player\n                break\n\n    def check_winner(player):\n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][row] == player for column, row in line):\n                return player\n        return None\n\n    for player in ['Yellow', 'Red']:\n        winner = check_winner(player)\n        if winner:\n            return winner\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Map the colors to their respective players\n    players = {'Red': 'Yellow', 'Yellow': 'Red'}\n    \n    # Iterate over the list of pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the first available row in the column\n        row = -1\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - 65] == '':\n                row = i\n                break\n        \n        # Update the grid with the color\n        grid[row][ord(column) - 65] = color\n        \n        # Check if there is a winner\n        for line in LINES:\n            if all(grid[j][ord(i) - 65] == color for i, j in line):\n                return color\n    \n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['']*7 for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = 0\n        while row < 6 and grid[row][ord(col)-ord('A')] != '':\n            row += 1\n        grid[row][ord(col)-ord('A')] = players[color]\n        \n        for line in LINES:\n            if all(grid[row][ord(col)-ord('A')] == players[color] for col, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Keep track of the current player\n    current_player = None\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Get the column and color of the piece\n        column, color = position.split('_')\n        \n        # Get the index of the column\n        column_index = ord(column) - ord('A')\n        \n        # Get the row where the piece should be dropped\n        row = -1\n        while row < 5 and grid[row + 1][column_index] == ' ':\n            row += 1\n        \n        # Drop the piece in the grid\n        grid[row][column_index] = color\n        \n        # Check if the current player has won\n        if check_win(grid, row, column_index, color):\n            return color\n        \n        # Switch to the other player\n        current_player = 'Red' if current_player == 'Yellow' else 'Yellow'\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"\n    \ndef check_win(grid, row, column, color):\n    # Check for horizontal win\n    for i in range(max(0, column - 3), min(4, column + 1)):\n        if grid[row][i:i+4] == [color] * 4:\n            return True\n    \n    # Check for vertical win\n    for i in range(max(0, row - 3), min(3, row + 1)):\n        if [grid[i][column] for i in range(i, i+4)] == [color] * 4:\n            return True\n    \n    # Check for diagonal win\n    for line in LINES:\n        if set(line).issubset({(column, row) for row in range(max(0, row-3), min(6, row+1))}):\n            if len([grid[row][column] for column, row in line]) == 4 and set([grid[row][column] for column, row in line]) == {color}:\n                return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    return \"Yellow\"",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the board\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    # Initialize player_turn variable\n    player_turn = 'Red'\n    \n    # Iterate through the pieces_positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the row to drop the piece in the column\n        row = 0\n        while row < 6 and board[row][ord(column)-ord('A')] is not None:\n            row += 1\n        \n        # Drop the piece in the column and row\n        board[row][ord(column)-ord('A')] = color\n        \n        # Check if the current player wins\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n        \n        # Change the player_turn\n        player_turn = 'Yellow' if player_turn == 'Red' else 'Red'\n    \n    # If no player wins, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position[2:]\n        for row in range(6):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((row for row in ROWS if (column, row) not in board), default=None)\n        if row is None:\n            return 'Draw'\n        board[(column, row)] = color\n        if any(line <= board.keys() for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][ord(col) - 65] != '':\n            row += 1\n        if row == 6:\n            return 'Draw'\n        board[row][ord(col) - 65] = color\n        for line in LINES:\n            if all(board[row][ord(col) - 65] == color for col, row in line):\n                return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in ROWS:\n            if not grid[ord(column)-65][row]:\n                grid[ord(column)-65][row] = color\n                break\n        for line in LINES:\n            if all(grid[ord(col)-65][row] == color for col, row in line):\n                return color\n    return 'Draw'"
        ],
        "4": [
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[' '] * len(COLUMNS) for _ in ROWS]\n    players = {'Red', 'Yellow'}\n    \n    for piece in pieces_positions:\n        col, player = piece.split('_')\n        row = next((i for i in range(len(ROWS)) if board[i][COLUMNS.index(col)] == ' '), None)\n        if row is not None:\n            board[row][COLUMNS.index(col)] = player\n        \n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == player for i, j in line):\n                return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = ord(column) - ord('A')\n        \n        for row in range(6):\n            if board[row][column] == '':\n                board[row][column] = players[color]\n                break\n        \n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == players[color] for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None] * 7 for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n\n        for i in range(5, -1, -1):\n            if grid[i][column_index] is None:\n                grid[i][column_index] = color\n                break\n\n        for line in LINES:\n            if all(grid[j][COLUMNS.index(i)] == color for i, j in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * 7 for _ in range(6)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col = ord(col) - 65\n        for row in range(6):\n            if board[row][col] is None:\n                board[row][col] = color\n                break\n\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if line.issubset({(COLUMNS[col], ROWS[row])\n                             for row in range(6) for col in range(7)\n                             if board[row][col] == color}):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(COLUMNS) for _ in ROWS]\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        for i in range(len(ROWS)-1, -1, -1):\n            if board[i][COLUMNS.index(column)] is None:\n                board[i][COLUMNS.index(column)] = color\n                break\n    for line in LINES:\n        for color in ('Yellow', 'Red'):\n            if any(all(board[ROWS.index(y)][COLUMNS.index(x)] == color\n                       for x, y in line) for line in LINES):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def get_column(col):\n        return [piece for piece in pieces_positions if piece[0] == col]\n\n    def get_row(row):\n        return [piece for piece in pieces_positions if piece[2:] == str(row)]\n\n    def get_diagonal(start):\n        diag = []\n        for i in range(4):\n            row = int(start[1]) + i\n            col = chr(ord(start[0]) + i)\n            diag.append(col + '_' + str(row))\n        return diag\n\n    def check_winner(pieces):\n        red_count = 0\n        yellow_count = 0\n        for piece in pieces:\n            if 'Red' in piece:\n                red_count += 1\n                yellow_count = 0\n            elif 'Yellow' in piece:\n                yellow_count += 1\n                red_count = 0\n            if red_count == 4:\n                return 'Red'\n            elif yellow_count == 4:\n                return 'Yellow'\n        return 'Draw'\n\n    for col in COLUMNS:\n        column_pieces = get_column(col)\n        result = check_winner(column_pieces)\n        if result != 'Draw':\n            return result\n\n    for row in ROWS:\n        row_pieces = get_row(row)\n        result = check_winner(row_pieces)\n        if result != 'Draw':\n            return result\n\n    for line in LINES:\n        line_pieces = [piece for piece in pieces_positions if piece[:2] in line]\n        result = check_winner(line_pieces)\n        if result != 'Draw':\n            return result\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, val in enumerate(board[column_index]) if val is None), None)\n        if row_index is not None:\n            board[column_index][row_index] = color\n        else:\n            return 'Draw'\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Loop through each move in pieces_positions\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the lowest empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column)-65] == ' ':\n            row += 1\n        \n        # Place the color in the lowest empty row of the column\n        grid[row-1][ord(column)-65] = color\n    \n    # Check for a win\n    for line in LINES:\n        cells = [grid[row][ord(column)-65] for (column, row) in line]\n        if cells.count('Yellow') == 4:\n            return 'Yellow'\n        elif cells.count('Red') == 4:\n            return 'Red'\n    \n    # If no win, it's a draw\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_idx = COLUMNS.index(col)\n        row_idx = next(i for i, c in enumerate(board[col_idx]) if c is None)\n        board[col_idx][row_idx] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the board\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    # Create a dictionary to store the mapping of players to colors\n    players = {'Yellow': 'Y', 'Red': 'R'}\n\n    # Iterate through the list of pieces positions\n    for move in pieces_positions:\n        # Split the move into column and color\n        col, color = move.split('_')\n\n        # Find the lowest empty position in the column\n        for i in range(5, -1, -1):\n            if board[i][ord(col) - ord('A')] == '':\n                # Place the piece in the board\n                board[i][ord(col) - ord('A')] = color\n                break\n\n        # Check for a win\n        for line in LINES:\n            if all(board[i][ord(col) - ord('A')] == color for col, i in line):\n                return color\n\n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[ord(column) - ord('A')][getNextEmptyRow(board, column)] = color\n    \n    for line in LINES:\n        redCount = yellowCount = 0\n        for cell in line:\n            x, y = cell\n            color = board[ord(x) - ord('A')][y]\n            if color == 'Red':\n                redCount += 1\n            elif color == 'Yellow':\n                yellowCount += 1\n        if redCount == 4:\n            return 'Red'\n        elif yellowCount == 4:\n            return 'Yellow'\n    \n    return 'Draw'\n\ndef getNextEmptyRow(board, column):\n    col = ord(column) - ord('A')\n    for row in range(len(board[col])-1, -1, -1):\n        if board[col][row] == '':\n            return row\n    return -1",
            "def who_is_winner(pieces_positions):\n    # Initialize the board as an empty grid\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to an index\n        col_index = ord(column) - ord('A')\n\n        # Iterate over the rows in the column\n        for row in range(6):\n            # If the current position is empty, place the color\n            if board[row][col_index] == '':\n                board[row][col_index] = color\n                break\n\n    # Check if there is a winner\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n\n        # Check if all the colors are the same and not empty\n        if all(color == colors[0] and color != '' for color in colors):\n            # Return the color of the winner\n            return colors[0]\n\n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_index = COLUMNS.index(col)\n        for row in ROWS:\n            if not board[row][col_index]:\n                board[row][col_index] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))] \n    return \"Yellow\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 6 for _ in range(7)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col = ord(col) - 65\n        row = board[col].index('')\n        board[col][row] = color\n\n        for line in LINES:\n            if all(board[ord(c) - 65][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split(\"_\")[1]\n    \n    board = [[\"\"] * 7 for _ in range(6)]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split(\"_\")\n        row = 0\n        \n        while row < 6 and board[row][ord(column) - ord(\"A\")]:\n            row += 1\n        \n        if row == 6:\n            return \"Draw\"\n        \n        board[row][ord(column) - ord(\"A\")] = color\n        \n        for line in LINES:\n            if all(board[row][ord(column) - ord(\"A\")] == color for column, row in line):\n                return color\n    \n    return \"Draw\""
        ]
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        board[COLUMNS.index(column)][ROWS.index(next(i for i, v in enumerate(board[COLUMNS.index(column)]) if not v)) - 1] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(all(cell != None for cell in row) for row in board):\n        return 'Draw'\n    \n    return None\n```",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a dictionary to store the number of pieces in each position\n    board = {}\n    \n    # create a dictionary to store the current player's color\n    current_player = {'Red': 0, 'Yellow': 0}\n    \n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # extract the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # check if the column is already in the board dictionary\n        if column not in board:\n            # if not, add the column to the board dictionary with an empty list\n            board[column] = []\n        \n        # append the color to the column list in the board dictionary\n        board[column].append(color)\n        \n        # check if there are four consecutive pieces of the same color in the board\n        for line in LINES:\n            # get the colors in the current line\n            line_colors = [board[column][index] for column, index in line]\n            \n            # check if there are four consecutive pieces of the same color in the current line\n            if line_colors.count(color) == 4:\n                # return the current player's color as the winner\n                return color\n        \n        # switch the current player's color\n        current_player[color] += 1\n        \n        # check if all the positions in the board are occupied\n        if all(len(board[column]) == 6 for column in board):\n            # if so, return 'Draw'\n            return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. Each element in the list represents a move, with the format `\"{column}_{color}\"`. For example, `\"A_Red\"` means that the Red player dropped a piece in column A.\n\nTo determine the winner, we can check if there are four adjacent pieces of the same color in any row, column, or diagonal. We can use the `LINES` list to represent all possible winning combinations. If we find such a combination, we can return the corresponding color.\n\nIf no winner is found after all moves have been processed, we can return \"Draw\".\n\n# Plan\n1. Create a 2D grid with a size of 6 rows and 7 columns, initialized with `None` values.\n2. Iterate over the `pieces_positions` list.\n3. Split each element in the list by \"_\".\n4. Extract the column and color from each split element.\n5. Convert the column to an index.\n6. Find the first empty row in the selected column by iterating from the bottom to the top of the grid.\n7. Update the grid with the color in the corresponding row and column.\n8. Check if there is a winner by iterating over the `LINES` list.\n   - If there is a winner, return the corresponding color.\n9. If no winner is found, return \"Draw\".\n\n# Dry Run\nLet's dry run the example `pieces_positions = [\"A_Red\", \"B_Yellow\", \"A_Red\", \"B_Yellow\", \"A_Red\", \"B_Yellow\", \"G_Red\", \"B_Yellow\"]`:\n\n## Initial grid:\n```\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\n```\n\n## Iteration 1:\n- Split element: `\"A_Red\"`\n- Column: `\"A\"`\n- Color: `\"Red\"`\n- Column index: 0\n- Empty row: 5\n- Updated grid:\n```\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\n\"Red\" None None None None None None\n```\n\n## Iteration 2:\n- Split element: `\"B_Yellow\"`\n- Column: `\"B\"`\n- Color: `\"Yellow\"`\n- Column index: 1\n- Empty row: 5\n- Updated grid:\n```\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\nNone None None None None None None\n\"Red\" \"Yellow\" None None None None None\n```\n\n## Iteration 3:\n- Split element: `\"A_Red\"`\n- Column: `\"A\"`\n- Color: `\"Red\"`\n- Column index: 0\n- Empty row: 4\n- Updated grid:\n```\nNone None None None None None None\nNone None None None None None None",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j+1]] == board[COLUMNS[i+2]][ROWS[j+2]] == board[COLUMNS[i+3]][ROWS[j+3]] for (i, j) in line):\n            return board[col][row]\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split('_')[1]\n        row = next((i for i in range(6) if board[i][column] == ''), None)\n        if row is not None:\n            board[row][column] = color\n\n            # Check for win\n            for line in LINES:\n                if all((board[j][ord(i)-ord('A')] == color for i, j in line)):\n                    return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if not board[i][COLUMNS.index(column)]), None)\n        if row is not None:\n            board[row][COLUMNS.index(column)] = players[color]\n\n        for line in LINES:\n            if all(board[i][COLUMNS.index(j)] == players[color] for j, i in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[''] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[COLUMNS.index(column)].index('')\n        board[COLUMNS.index(column)][row] = color\n\n    for line in LINES:\n        colors = {board[COLUMNS.index(column)][row] for column, row in line}\n        if '' not in colors and len(colors) == 1:\n            return colors.pop()\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n   \n    # create an empty board\n    board = [['' for _ in range(7)] for _ in range(6)]\n   \n    # iterate over the pieces positions\n    for position in pieces_positions:\n        # get the column and color of the piece\n        column, color = position.split('_')\n       \n        # find the first empty row in the column\n        row = -1\n        while row + 1 < 6 and board[row + 1][COLUMNS.index(column)] == '':\n            row += 1\n       \n        # place the piece in the board\n        board[row][COLUMNS.index(column)] = color\n       \n        # check if the current player has won\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n       \n    # if no player has won, return \"Draw\"\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(5, -1, -1) if board[i][COLUMNS.index(column)] == ''), -1)\n        board[row][COLUMNS.index(column)] = color\n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == color for i, j in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in range(6):\n            if grid[row][column] is None:\n                grid[row][column] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_column(col):\n        return [piece for piece in pieces_positions if piece[0] == col]\n\n    def get_row(row):\n        return [piece for piece in pieces_positions if piece[1] == row]\n\n    def get_diagonal(start_col, start_row, direction):\n        diagonal = []\n        col, row = start_col, start_row\n        for _ in range(4):\n            piece = [piece for piece in pieces_positions if piece[0] == col and piece[1] == row]\n            if piece:\n                diagonal.append(piece[0])\n            else:\n                diagonal.append(None)\n            col += direction[0]\n            row += direction[1]\n        return diagonal\n\n    for col in COLUMNS:\n        column_pieces = get_column(col)\n        if len(column_pieces) < 4:\n            continue\n\n        for i in range(len(column_pieces) - 3):\n            if column_pieces[i:i+4] == ['A_Red', 'A_Red', 'A_Red', 'A_Red']:\n                return \"Red\"\n            elif column_pieces[i:i+4] == ['B_Yellow', 'B_Yellow', 'B_Yellow', 'B_Yellow']:\n                return \"Yellow\"\n\n    for row in ROWS:\n        row_pieces = get_row(row)\n        if len(row_pieces) < 4:\n            continue\n\n        for i in range(len(row_pieces) - 3):\n            if row_pieces[i:i+4] == ['A_Red', 'A_Red', 'A_Red', 'A_Red']:\n                return \"Red\"\n            elif row_pieces[i:i+4] == ['B_Yellow', 'B_Yellow', 'B_Yellow', 'B_Yellow']:\n                return \"Yellow\"\n\n    for line in LINES:\n        line_pieces = [piece for piece in pieces_positions if (piece[0], int(piece[1])) in line]\n        if len(line_pieces) < 4:\n            continue\n\n        for i in range(len(line_pieces) - 3):\n            if line_pieces[i:i+4] == ['A_Red', 'A_Red', 'A_Red', 'A_Red']:\n                return \"Red\"\n            elif line_pieces[i:i+4] == ['B_Yellow', 'B_Yellow', 'B_Yellow', 'B_Yellow']:\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * 7 for _ in range(6)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col_index = COLUMNS.index(col)\n        for row in range(5, -1, -1):\n            if board[row][col_index] is None:\n                board[row][col_index] = color\n                break\n\n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def check_win(player_moves):\n        for line in LINES:\n            if line.issubset(player_moves):\n                return True\n        return False\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = max([r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves])\n        if color == 'Red':\n            red_moves.add((column, row))\n            if check_win(red_moves):\n                return 'Red'\n        else:\n            yellow_moves.add((column, row))\n            if check_win(yellow_moves):\n                return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[' ' for _ in ROWS] for _ in COLUMNS]\n    player = {'R': 'Red', 'Y': 'Yellow'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(' ')] = color[0]\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color[0] for c, r in line):\n                return player[color[0]]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[' ' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in ROWS[::-1]:\n            if board[row][column_idx] == ' ':\n                board[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        line_colors = [board[row][COLUMNS.index(column)] for column, row in line]\n        if 'RedRedRedRed' in ''.join(line_colors):\n            return 'Red'\n        elif 'YellowYellowYellowYellow' in ''.join(line_colors):\n            return 'Yellow'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_idx = COLUMNS.index(col)\n        for row in range(6):\n            if board[row][col_idx] == '':\n                board[row][col_idx] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * len(COLUMNS) for _ in ROWS]\n\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        row = next(i for i in reversed(ROWS) if not board[i][COLUMNS.index(column)])\n        board[row][COLUMNS.index(column)] = color\n\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: set() for c in COLUMNS}\n    player = 'Red'\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].add(ROWS[len(board[column])])\n        for line in LINES:\n            if all(c in board and r in board[c] for c, r in line):\n                return color.capitalize()\n\n        player = 'Yellow' if player == 'Red' else 'Red'\n\n    return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    # create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # loop through the pieces positions\n    for position in pieces_positions:\n        # get the column and color of the piece\n        column, color = position.split('_')\n        \n        # find the first empty row in the column\n        for i in range(5, -1, -1):\n            if grid[i][ord(column)-65] == ' ':\n                # place the piece in the empty row\n                grid[i][ord(column)-65] = color\n                break\n    \n    # check for a winner\n    for line in LINES:\n        colors = set()\n        for position in line:\n            colors.add(grid[position[1]][ord(position[0])-65])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    # if no winner, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position[2:]\n        \n        for row in range(6):\n            if grid[row][column] == ' ':\n                grid[row][column] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [' '] * len(ROWS) for column in COLUMNS}\n    players = {'Red': 'R', 'Yellow': 'Y'}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column][board[column].index(' ')] = players[color]\n\n        for line in LINES:\n            if all(board[col][row] == players[color] for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    # Define the players and their colors\n    players = {\"Red\": \"R\", \"Yellow\": \"Y\"}\n\n    # Create an empty board\n    board = [[\".\" for _ in range(7)] for _ in range(6)]\n\n    # Iterate through the pieces positions\n    for position in pieces_positions:\n\n        # Get the column and color from the position\n        column = ord(position[0]) - ord(\"A\")\n        color = players[position[2:]]\n\n        # Place the color in the lowest empty row in the column\n        for row in range(5, -1, -1):\n            if board[row][column] == \".\":\n                board[row][column] = color\n                break\n\n        # Check if there is a winner\n        for line in LINES:\n            if all(board[row][ord(column)-ord(\"A\")] == color for column, row in line):\n                return position[2:]\n\n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        col_index = ord(col) - ord('A')\n        for row in range(6):\n            if board[row][col_index] == '':\n                board[row][col_index] = color\n                break\n        \n        # check for winner\n        for line in LINES:\n            colors = [board[row][ord(col) - ord('A')] for col, row in line]\n            if colors.count(color) >= 4:\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        for row in range(len(ROWS)):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        values = [board[COLUMNS.index(column)][row] for column, row in line]\n        if len(set(values)) == 1 and values[0] is not None:\n            return values[0]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            continue\n        board[column_index][row_index] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            colors = set(board[col][-4:])\n            if len(colors) == 1 and 'Yellow' in colors:\n                return 'Yellow'\n            if len(colors) == 1 and 'Red' in colors:\n                return 'Red'\n\n        for col1, col2, col3, col4 in line:\n            if len(board[col1]) < 4 or len(board[col2]) < 3 or len(board[col3]) < 2 or len(board[col4]) < 1:\n                continue\n            colors = {board[col1][-4:][::-1], board[col2][-3:][::-1], board[col3][-2:][::-1], board[col4][-1:][::-1]}\n            if 'Yellow' in colors and len(colors) == 1:\n                return 'Yellow'\n            if 'Red' in colors and len(colors) == 1:\n                return 'Red'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n\n    for line in LINES:\n        colors = {board[COLUMNS.index(column)][row] for column, row in line}\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n\n    if all('' not in row for row in board):\n        return 'Draw'\n    else:\n        return None",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the next empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check for a winning condition\n    for line in LINES:\n        # Get the colors in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all colors are the same\n        if colors[0] == colors[1] == colors[2] == colors[3] and colors[0] != '':\n            return colors[0]\n    \n    # Check for a draw condition\n    if all(grid[row][col] != '' for row in range(6) for col in range(7)):\n        return 'Draw'\n    \n    # No winner or draw, return None\n    return None",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED = 'Red'\n    YELLOW = 'Yellow'\n    DRAW = 'Draw'\n    \n    board = [[None] * 7 for _ in range(6)]\n    player = RED\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    \n        player = RED if player == YELLOW else YELLOW\n    \n    return DRAW",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for i in range(6):\n            if board[i][column_index] == ' ':\n                board[i][column_index] = color\n                break\n    for line in LINES:\n        values = set()\n        for cell in line:\n            column, row = cell\n            column_index = ord(column) - ord('A')\n            row_index = row\n            values.add(board[row_index][column_index])\n        if len(values) == 1 and ' ' not in values:\n            if 'Red' in values:\n                return 'Red'\n            else:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(len(ROWS)) if board[COLUMNS.index(column)][i] == ''), None)\n        if row is None:\n            continue\n        board[COLUMNS.index(column)][row] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to store the grid\n    grid = {}\n    \n    # Iterate over the pieces_positions list\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Check if the column exists in the grid\n        if column not in grid:\n            # If not, create a new list for the column\n            grid[column] = []\n        \n        # Append the color to the column list\n        grid[column].append(color)\n        \n        # Check if there are 4 pieces of the same color in a row\n        if len(grid[column]) >= 4:\n            if grid[column][-4:] == ['Red', 'Red', 'Red', 'Red']:\n                return 'Red'\n            elif grid[column][-4:] == ['Yellow', 'Yellow', 'Yellow', 'Yellow']:\n                return 'Yellow'\n    \n    # Check if there are 4 pieces of the same color in a column\n    for column, colors in grid.items():\n        if len(colors) >= 4:\n            for i in range(len(colors) - 3):\n                if colors[i:i+4] == ['Red', 'Red', 'Red', 'Red']:\n                    return 'Red'\n                elif colors[i:i+4] == ['Yellow', 'Yellow', 'Yellow', 'Yellow']:\n                    return 'Yellow'\n    \n    # Check if there are 4 pieces of the same color in a line\n    for line in LINES:\n        colors = []\n        for column, row in line:\n            if column in grid and row < len(grid[column]):\n                colors.append(grid[column][row])\n        if len(colors) >= 4:\n            for i in range(len(colors) - 3):\n                if colors[i:i+4] == ['Red', 'Red', 'Red', 'Red']:\n                    return 'Red'\n                elif colors[i:i+4] == ['Yellow', 'Yellow', 'Yellow', 'Yellow']:\n                    return 'Yellow'\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    grid = [['']*7 for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = 0\n        while row < 6 and grid[row][ord(col)-ord('A')] != '':\n            row += 1\n        grid[row][ord(col)-ord('A')] = players[color]\n        \n        for line in LINES:\n            if all(grid[row][ord(col)-ord('A')] == players[color] for col, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    return \"Yellow\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the board\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    # Initialize player_turn variable\n    player_turn = 'Red'\n    \n    # Iterate through the pieces_positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the row to drop the piece in the column\n        row = 0\n        while row < 6 and board[row][ord(column)-ord('A')] is not None:\n            row += 1\n        \n        # Drop the piece in the column and row\n        board[row][ord(column)-ord('A')] = color\n        \n        # Check if the current player wins\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n        \n        # Change the player_turn\n        player_turn = 'Yellow' if player_turn == 'Red' else 'Red'\n    \n    # If no player wins, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position[2:]\n        for row in range(6):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((row for row in ROWS if (column, row) not in board), default=None)\n        if row is None:\n            return 'Draw'\n        board[(column, row)] = color\n        if any(line <= board.keys() for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][ord(col) - 65] != '':\n            row += 1\n        if row == 6:\n            return 'Draw'\n        board[row][ord(col) - 65] = color\n        for line in LINES:\n            if all(board[row][ord(col) - 65] == color for col, row in line):\n                return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in ROWS:\n            if not grid[ord(column)-65][row]:\n                grid[ord(column)-65][row] = color\n                break\n        for line in LINES:\n            if all(grid[ord(col)-65][row] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = max(ROWS) - sum(1 for pos in red_positions.union(yellow_positions) if pos[0] == column) - 1\n        if color == 'Red':\n            red_positions.add((column, row_index))\n        else:\n            yellow_positions.add((column, row_index))\n\n        for line in LINES:\n            if all(p in red_positions for p in line):\n                return 'Red'\n            elif all(p in yellow_positions for p in line):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_piece(row, column):\n        for piece in pieces_positions:\n            if piece[0] == column and piece[2:] == row:\n                return piece[2:]\n        return None\n\n    def check_winner(pieces):\n        for line in LINES:\n            if all(piece in pieces for piece in line):\n                return True\n        return False\n\n    red_pieces = set()\n    yellow_pieces = set()\n\n    for piece in pieces_positions:\n        column = piece[0]\n        row = piece[2:]\n        if get_piece(row, column) == \"Red\":\n            red_pieces.add((column, row))\n            if check_winner(red_pieces):\n                return \"Red\"\n        else:\n            yellow_pieces.add((column, row))\n            if check_winner(yellow_pieces):\n                return \"Yellow\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Yellow\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if not board[i][ord(column) - ord('A')]), None)\n        if row is not None:\n            board[row][ord(column) - ord('A')] = color\n    \n    for line in LINES:\n        for i in range(3):\n            if all(board[row][ord(column) - ord('A')] == 'Yellow' for column, row in line):\n                return 'Yellow'\n            elif all(board[row][ord(column) - ord('A')] == 'Red' for column, row in line):\n                return 'Red'\n    \n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n\n    grid = [[None] * 7 for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n\n        for i in range(5, -1, -1):\n            if grid[i][column_index] is None:\n                grid[i][column_index] = color\n                break\n\n        for line in LINES:\n            if all(grid[j][COLUMNS.index(i)] == color for i, j in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * 7 for _ in range(6)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col = ord(col) - 65\n        for row in range(6):\n            if board[row][col] is None:\n                board[row][col] = color\n                break\n\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if line <= {(col, row) for row in ROWS for col in COLUMNS if board[row][ord(col) - 65] == color}:\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(COLUMNS) for _ in ROWS]\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        for i in range(len(ROWS)-1, -1, -1):\n            if board[i][COLUMNS.index(column)] is None:\n                board[i][COLUMNS.index(column)] = color\n                break\n    for line in LINES:\n        for color in ('Yellow', 'Red'):\n            if all(board[i][COLUMNS.index(column)] == color for column, i in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    def drop_piece(column, color):\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                return row\n\n    def check_winner(row, column, color):\n        for line in LINES:\n            if (COLUMNS[column], ROWS[row]) in line:\n                if all(board[j][COLUMNS.index(i)] == color for i, j in line):\n                    return color\n        return None\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = drop_piece(COLUMNS.index(column), color)\n        winner = check_winner(row, COLUMNS.index(column), color)\n        if winner:\n            return winner\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[col]) if cell is None)\n        board[col][row] = color\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, val in enumerate(board[column_index]) if val is None), None)\n        if row_index is not None:\n            board[column_index][row_index] = color\n        else:\n            return 'Draw'\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Loop through each move in pieces_positions\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the lowest empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column)-65] == ' ':\n            row += 1\n        \n        # Place the color in the lowest empty row of the column\n        grid[row-1][ord(column)-65] = color\n    \n    # Check for a winner\n    for line in LINES:\n        cells = [grid[row][ord(column)-65] for column, row in line]\n        if ''.join(cells) == 'RedRedRedRed':\n            return 'Red'\n        elif ''.join(cells) == 'YellowYellowYellowYellow':\n            return 'Yellow'\n    \n    # If no winner, return Draw\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_idx = COLUMNS.index(col)\n        row_idx = next(i for i, c in enumerate(board[col_idx]) if c is None)\n        board[col_idx][row_idx] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[ord(column) - ord('A')][getNextEmptyRow(board, column)] = color\n    \n    for line in LINES:\n        redCount = yellowCount = 0\n        for cell in line:\n            x, y = cell\n            color = board[ord(x) - ord('A')][y]\n            if color == 'Red':\n                redCount += 1\n            elif color == 'Yellow':\n                yellowCount += 1\n        if redCount == 4:\n            return 'Red'\n        elif yellowCount == 4:\n            return 'Yellow'\n    \n    return 'Draw'\n\ndef getNextEmptyRow(board, column):\n    c = ord(column) - ord('A')\n    for i in range(len(board[c])-1, -1, -1):\n        if board[c][i] == '':\n            return i\n    return -1",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i in reversed(range(6)) if grid[i][COLUMNS.index(col)] is None)\n        grid[row][COLUMNS.index(col)] = color\n        for line in LINES:\n            if all(grid[j][COLUMNS.index(i)] == color for i, j in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the board as an empty grid\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to an index\n        col_index = ord(column) - ord('A')\n\n        # Iterate over the rows in the column\n        for row in range(6):\n            # If the current position is empty, place the color\n            if board[row][col_index] == '':\n                board[row][col_index] = color\n                break\n\n    # Check if there is a winner\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n\n        # Check if all the colors are the same and not empty\n        if all(color == colors[0] and color != '' for color in colors):\n            # Return the color of the winner\n            return colors[0]\n\n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_index = COLUMNS.index(col)\n        for row in ROWS:\n            if not board[row][col_index]:\n                board[row][col_index] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))] \n    return \"Yellow\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 6 for _ in range(7)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col = ord(col) - 65\n        row = board[col].index('')\n        board[col][row] = color\n\n        for line in LINES:\n            if all(board[ord(c) - 65][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split(\"_\")[1]\n    \n    board = [[\"\"] * 7 for _ in range(6)]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split(\"_\")\n        row = 0\n        \n        while row < 6 and board[row][ord(column) - ord(\"A\")]:\n            row += 1\n        \n        if row == 6:\n            return \"Draw\"\n        \n        board[row][ord(column) - ord(\"A\")] = color\n        \n        for line in LINES:\n            if all(board[row][ord(column) - ord(\"A\")] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = board[column_index].index(None)\n        board[column_index][row_index] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {c: set() for c in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].add((column, len(board[column])))\n        for line in LINES:\n            if line <= board[column]:\n                return color\n            \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    player = ''\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        \n        for row_idx in range(len(ROWS)-1, -1, -1):\n            if grid[row_idx][column_idx] == '':\n                grid[row_idx][column_idx] = color\n                break\n                \n        for line in LINES:\n            if all(grid[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n            \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None] * len(COLUMNS) for _ in ROWS]\n    players = {'Yellow': set(), 'Red': set()}\n\n    for i, move in enumerate(pieces_positions):\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((index for index, value in enumerate(grid) if value[column_index] is None), None)\n        grid[row_index][column_index] = color\n        players[color].add((column, row_index))\n\n        for line in LINES:\n            if line.issubset(players[color]):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n    \n    for line in LINES:\n        cells = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if all(cell == 'Yellow' for cell in cells):\n            return 'Yellow'\n        if all(cell == 'Red' for cell in cells):\n            return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n    for line in LINES:\n        line_colors = {board[row][ord(column) - ord('A')] for column, row in line}\n        if line_colors == {'Red'}:\n            return 'Red'\n        elif line_colors == {'Yellow'}:\n            return 'Yellow'\n    return 'Draw'"
        ]
    },
    "2": {
        "0": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in ROWS]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS[::-1]:\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n    \n    for line in LINES:\n        colors = set(grid[row][column] for column, row in line)\n        if colors == {'Red'}:\n            return 'Red'\n        elif colors == {'Yellow'}:\n            return 'Yellow'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a dictionary to store the number of pieces in each position\n    board = {}\n    \n    # create a dictionary to store the current player's color\n    current_player = {'Red': 0, 'Yellow': 0}\n    \n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # extract the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # check if the column is already in the board dictionary\n        if column not in board:\n            # if not, add the column to the board dictionary with an empty list\n            board[column] = []\n        \n        # append the color to the column list in the board dictionary\n        board[column].append(color)\n        \n        # check if there are four consecutive pieces of the same color in the board\n        for line in LINES:\n            # get the colors in the current line\n            line_colors = [board[column][index] for column, index in line]\n            \n            # check if there are four consecutive pieces of the same color in the current line\n            if line_colors.count(color) == 4:\n                # return the current player's color as the winner\n                return color\n        \n        # switch the current player's color\n        current_player[color] += 1\n        \n        # check if all the positions in the board are occupied\n        if all(len(board[column]) == 6 for column in board):\n            # if so, return 'Draw'\n            return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell in the grid with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each line, check if all the cells are occupied by the same player's color.\n7. If a winner is found, return the corresponding color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[:-3]:\n                if all(board[COLUMNS[i+k]][row+k] == board[COLUMNS[i+k+1]][row+k+1] == board[COLUMNS[i+k+2]][row+k+2] == board[COLUMNS[i+k+3]][row+k+3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row+k]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[3:]:\n                if all(board[COLUMNS[i+k]][row-k] == board[COLUMNS[i+k+1]][row-k-1] == board[COLUMNS[i+k+2]][row-k-2] == board[COLUMNS[i+k+3]][row-k-3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row-k]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 6 for _ in range(7)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = COLUMNS.index(column)\n        row_idx = next((i for i in range(6) if board[col_idx][i] is None), None)\n        if row_idx is not None:\n            board[col_idx][row_idx] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column] = board.get(column, '') + color[0]\n\n        for line in LINES:\n            if all(board.get(cell, '') == board[column] for cell in line):\n                return board[column]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_idx = COLUMNS.index(column)\n        for row_idx in range(len(ROWS)-1, -1, -1):\n            if board[column_idx][row_idx] is None:\n                board[column_idx][row_idx] = color\n                break\n    \n    for line in LINES:\n        colors = [board[column_idx][row_idx] for column_idx, row_idx in line]\n        if all(color == \"Red\" for color in colors):\n            return \"Red\"\n        elif all(color == \"Yellow\" for color in colors):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the game grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    player_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the moves\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the column index\n        column_index = ord(column) - ord('A')\n        \n        # Find the row index\n        row_index = 5 - grid[::-1][column_index].count('')\n        \n        # Place the piece in the grid\n        grid[row_index][column_index] = color\n    \n        # Check for a winner\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return player_map[color]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for i in range(len(pieces_positions)):\n        col, player = pieces_positions[i].split('_')\n        if col not in board:\n            board[col] = []\n        board[col].append(player)\n\n        if len(board[col]) == 6:\n            board[col] = []\n            \n        for line in LINES:\n            if all((col, player) in line for col, row in line):\n                return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max([row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column = COLUMNS.index(piece[0])\n        color = piece[2:]\n        \n        for row in range(len(ROWS)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = set(grid[column][row] for column, row in line)\n        \n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in reversed(range(6)):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # create grid to keep track of pieces\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # iterate over pieces positions\n    for position in pieces_positions:\n        # get column and color from position string\n        column, color = position.split('_')\n        # find first empty slot in the column\n        for i in range(len(grid[column])):\n            if grid[column][i] == '':\n                # place the piece in the slot\n                grid[column][i] = color\n                break\n\n    # check for a winning line\n    for line in LINES:\n        # count the number of consecutive pieces of the same color in the line\n        red_count = 0\n        yellow_count = 0\n        for position in line:\n            column, row = position\n            if grid[column][row] == 'Red':\n                red_count += 1\n                if red_count == 4:\n                    return 'Red'\n            elif grid[column][row] == 'Yellow':\n                yellow_count += 1\n                if yellow_count == 4:\n                    return 'Yellow'\n\n    # if no winning line found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]"
        ],
        "1": [
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(5, -1, -1) if board[i][COLUMNS.index(column)] == ''), -1)\n        board[row][COLUMNS.index(column)] = color\n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == color for i, j in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in range(6):\n            if grid[row][column] is None:\n                grid[row][column] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_column(col):\n        return [piece for piece in pieces_positions if piece[0] == col]\n\n    def get_row(row):\n        return [piece for piece in pieces_positions if piece[1] == row]\n\n    def get_diagonal(start_col, start_row, direction):\n        diagonal = []\n        col, row = start_col, start_row\n        for _ in range(4):\n            piece = [piece for piece in pieces_positions if piece[0] == col and piece[1] == row]\n            if piece:\n                diagonal.append(piece[0])\n            else:\n                diagonal.append(None)\n            col += direction[0]\n            row += direction[1]\n        return diagonal\n\n    for col in COLUMNS:\n        column_pieces = get_column(col)\n        if len(column_pieces) < 4:\n            continue\n\n        for i in range(len(column_pieces) - 3):\n            if column_pieces[i:i+4] == ['A_Red', 'A_Red', 'A_Red', 'A_Red']:\n                return \"Red\"\n            elif column_pieces[i:i+4] == ['B_Yellow', 'B_Yellow', 'B_Yellow', 'B_Yellow']:\n                return \"Yellow\"\n\n    for row in ROWS:\n        row_pieces = get_row(row)\n        if len(row_pieces) < 4:\n            continue\n\n        for i in range(len(row_pieces) - 3):\n            if row_pieces[i:i+4] == ['A_Red', 'A_Red', 'A_Red', 'A_Red']:\n                return \"Red\"\n            elif row_pieces[i:i+4] == ['B_Yellow', 'B_Yellow', 'B_Yellow', 'B_Yellow']:\n                return \"Yellow\"\n\n    for line in LINES:\n        line_pieces = [piece for piece in pieces_positions if (piece[0], int(piece[1])) in line]\n        if len(line_pieces) < 4:\n            continue\n\n        for i in range(len(line_pieces) - 3):\n            if line_pieces[i:i+4] == ['A_Red', 'A_Red', 'A_Red', 'A_Red']:\n                return \"Red\"\n            elif line_pieces[i:i+4] == ['B_Yellow', 'B_Yellow', 'B_Yellow', 'B_Yellow']:\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * 7 for _ in range(6)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col_index = COLUMNS.index(col)\n        for row in range(5, -1, -1):\n            if board[row][col_index] is None:\n                board[row][col_index] = color\n                break\n\n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(COLUMNS) for _ in ROWS]\n    players = {'Yellow', 'Red'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i, cell in enumerate(board) if cell[COLUMNS.index(column)] is None), None)\n        if row is None:\n            return 'Draw'\n        board[row][COLUMNS.index(column)] = color\n        \n        for line in LINES:\n            if all(board[r][COLUMNS.index(c)] == color for c, r in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def check_win(player_moves):\n        for line in LINES:\n            if line.issubset(player_moves):\n                return True\n        return False\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = max([r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves])\n        if color == 'Red':\n            red_moves.add((column, row))\n            if check_win(red_moves):\n                return 'Red'\n        else:\n            yellow_moves.add((column, row))\n            if check_win(yellow_moves):\n                return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[' ' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in ROWS[::-1]:\n            if board[row][column_idx] == ' ':\n                board[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        line_colors = [board[row][COLUMNS.index(column)] for column, row in line]\n        if 'RedRedRedRed' in ''.join(line_colors):\n            return 'Red'\n        elif 'YellowYellowYellowYellow' in ''.join(line_colors):\n            return 'Yellow'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_idx = COLUMNS.index(col)\n        for row in range(6):\n            if board[row][col_idx] == '':\n                board[row][col_idx] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * len(COLUMNS) for _ in ROWS]\n\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        row = next(i for i in reversed(ROWS) if not board[i][COLUMNS.index(column)])\n        board[row][COLUMNS.index(column)] = color\n\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: set() for c in COLUMNS}\n    player = 'Red'\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].add(ROWS[len(board[column])])\n        for line in LINES:\n            if all(c in board and r in board[c] for c, r in line):\n                return color.capitalize()\n\n        player = 'Yellow' if player == 'Red' else 'Red'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[COLUMNS.index(col)][grid[COLUMNS.index(col)].index('')] = color\n    \n    for line in LINES:\n        for i in range(len(line)):\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for position in pieces_positions:\n        column, player = position.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = players[player]\n                break\n        \n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[player] for column, row in line):\n                return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if (column, i) not in red_moves and (column, i) not in yellow_moves), None)\n        \n        if row is None:\n            continue\n        \n        if color == 'Red':\n            red_moves.add((column, row))\n        elif color == 'Yellow':\n            yellow_moves.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n    \n    return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n\n    # Define the players and their colors\n    players = {\"Red\": \"R\", \"Yellow\": \"Y\"}\n\n    # Create an empty board\n    board = [[\".\" for _ in range(7)] for _ in range(6)]\n\n    # Iterate through the pieces positions\n    for position in pieces_positions:\n\n        # Get the column and color from the position\n        column = ord(position[0]) - ord(\"A\")\n        color = players[position[2:]]\n\n        # Place the color in the lowest empty row in the column\n        for row in range(5, -1, -1):\n            if board[row][column] == \".\":\n                board[row][column] = color\n                break\n\n        # Check if there is a winner\n        for line in LINES:\n            if all(board[row][ord(column)-ord(\"A\")] == color for column, row in line):\n                return position[2:]\n\n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        col_index = ord(col) - ord('A')\n        for row in range(6):\n            if board[row][col_index] == '':\n                board[row][col_index] = color\n                break\n        \n        # check for winner\n        for line in LINES:\n            colors = [board[row][ord(col) - ord('A')] for col, row in line]\n            if colors.count(color) >= 4:\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        for row in range(len(ROWS)):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        values = [board[COLUMNS.index(column)][row] for column, row in line]\n        if len(set(values)) == 1 and values[0] is not None:\n            return values[0]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            continue\n        board[column_index][row_index] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            colors = set(board[col][-4:])\n            if len(colors) == 1 and 'Yellow' in colors:\n                return 'Yellow'\n            if len(colors) == 1 and 'Red' in colors:\n                return 'Red'\n\n        for col1, col2, col3, col4 in line:\n            if len(board[col1]) < 4 or len(board[col2]) < 3 or len(board[col3]) < 2 or len(board[col4]) < 1:\n                continue\n            colors = {board[col1][-4:][::-1], board[col2][-3:][::-1], board[col3][-2:][::-1], board[col4][-1:][::-1]}\n            if 'Yellow' in colors and len(colors) == 1:\n                return 'Yellow'\n            if 'Red' in colors and len(colors) == 1:\n                return 'Red'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n\n    for line in LINES:\n        colors = {board[COLUMNS.index(column)][row] for column, row in line}\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n\n    if all('' not in row for row in board):\n        return 'Draw'\n    else:\n        return None",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the next empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check for a winning condition\n    for line in LINES:\n        # Get the colors in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all colors are the same\n        if colors[0] == colors[1] == colors[2] == colors[3] and colors[0] != '':\n            return colors[0]\n    \n    # Check if the grid is full (draw)\n    if all(grid[row][column] != '' for row in range(6) for column in range(7)):\n        return 'Draw'\n    \n    # No winner or draw\n    return None",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED = 'Red'\n    YELLOW = 'Yellow'\n    DRAW = 'Draw'\n    \n    board = [[None] * 7 for _ in range(6)]\n    player = RED\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(5, -1, -1):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    \n        player = RED if player == YELLOW else YELLOW\n    \n    return DRAW",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for i in range(6):\n            if board[i][column_index] == ' ':\n                board[i][column_index] = color\n                break\n    for line in LINES:\n        values = set()\n        for cell in line:\n            column, row = cell\n            column_index = ord(column) - ord('A')\n            row_index = row\n            values.add(board[row_index][column_index])\n        if len(values) == 1 and ' ' not in values:\n            if 'Red' in values:\n                return 'Red'\n            else:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(len(ROWS)) if board[COLUMNS.index(column)][i] == ''), None)\n        if row is None:\n            continue\n        board[COLUMNS.index(column)][row] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to store the grid\n    grid = {}\n    \n    # Iterate over the pieces_positions list\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Check if the column exists in the grid\n        if column not in grid:\n            # If not, create a new list for the column\n            grid[column] = []\n        \n        # Append the color to the column list\n        grid[column].append(color)\n        \n        # Check if there are 4 pieces of the same color in a row\n        if len(grid[column]) >= 4:\n            if grid[column][-4:] == ['Red', 'Red', 'Red', 'Red']:\n                return 'Red'\n            elif grid[column][-4:] == ['Yellow', 'Yellow', 'Yellow', 'Yellow']:\n                return 'Yellow'\n    \n    # Check if there are 4 pieces of the same color in a column\n    for column, colors in grid.items():\n        if len(colors) >= 4:\n            for i in range(len(colors) - 3):\n                if colors[i:i+4] == ['Red', 'Red', 'Red', 'Red']:\n                    return 'Red'\n                elif colors[i:i+4] == ['Yellow', 'Yellow', 'Yellow', 'Yellow']:\n                    return 'Yellow'\n    \n    # Check if there are 4 pieces of the same color in a line\n    for line in LINES:\n        colors = []\n        for column, row in line:\n            if column in grid and row < len(grid[column]):\n                colors.append(grid[column][row])\n        if len(colors) >= 4:\n            for i in range(len(colors) - 3):\n                if colors[i:i+4] == ['Red', 'Red', 'Red', 'Red']:\n                    return 'Red'\n                elif colors[i:i+4] == ['Yellow', 'Yellow', 'Yellow', 'Yellow']:\n                    return 'Yellow'\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row = ROWS[-1]\n        while (column_index, row) in red_moves or (column_index, row) in yellow_moves:\n            row -= 1\n        if color == 'Red':\n            red_moves.add((column_index, row))\n        elif color == 'Yellow':\n            yellow_moves.add((column_index, row))\n\n    for line in LINES:\n        if line.issubset(red_moves):\n            return 'Red'\n        elif line.issubset(yellow_moves):\n            return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    else:\n        return 'Yellow'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Get the column and color of the piece\n        column, color = position.split('_')\n\n        # Find the first empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != ' ':\n            row -= 1\n\n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color[0]\n\n        # Check if there is a winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color[0] for column, row in line):\n                return color\n\n    # If no winner is found, it is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        for row in range(6):\n            if grid[row][ord(column)-ord('A')] == '':\n                grid[row][ord(column)-ord('A')] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = board[column_index].index(None)\n        board[column_index][row_index] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                items = [board[COLUMNS.index(c)][r] for c, r in line]\n                if all(item == items[0] for item in items) and items[0] is not None:\n                    return items[0]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[\"\"] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position[2:]\n        for row in range(6):\n            if grid[row][column] == \"\":\n                grid[row][column] = color\n                break\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\""
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    return \"Yellow\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the board\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    # Initialize player_turn variable\n    player_turn = 'Red'\n    \n    # Iterate through the pieces_positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the row to drop the piece in the column\n        row = 0\n        while row < 6 and board[row][ord(column)-ord('A')] is not None:\n            row += 1\n        \n        # Drop the piece in the column and row\n        board[row][ord(column)-ord('A')] = color\n        \n        # Check if the current player wins\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n        \n        # Change the player_turn\n        player_turn = 'Yellow' if player_turn == 'Red' else 'Red'\n    \n    # If no player wins, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position[2:]\n        for row in range(6):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((row for row in ROWS if (column, row) not in board), default=None)\n        if row is None:\n            return 'Draw'\n        board[(column, row)] = color\n        if any(line <= board.keys() for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][ord(col) - 65] != '':\n            row += 1\n        if row == 6:\n            return 'Draw'\n        board[row][ord(col) - 65] = color\n        for line in LINES:\n            if all(board[row][ord(col) - 65] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = max(ROWS) - sum(1 for pos in red_positions.union(yellow_positions) if pos[0] == column) - 1\n        if color == 'Red':\n            red_positions.add((column, row_index))\n        else:\n            yellow_positions.add((column, row_index))\n\n        for line in LINES:\n            if all(p in red_positions for p in line):\n                return 'Red'\n            elif all(p in yellow_positions for p in line):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_piece(row, column):\n        for piece in pieces_positions:\n            if piece[0] == column and piece[2:] == row:\n                return piece[2:]\n        return None\n\n    def check_winner(pieces):\n        for line in LINES:\n            if all(piece in pieces for piece in line):\n                return True\n        return False\n\n    red_pieces = set()\n    yellow_pieces = set()\n\n    for piece in pieces_positions:\n        column = piece[0]\n        row = piece[2:]\n        if get_piece(row, column) == \"Red\":\n            red_pieces.add((column, row))\n            if check_winner(red_pieces):\n                return \"Red\"\n        else:\n            yellow_pieces.add((column, row))\n            if check_winner(yellow_pieces):\n                return \"Yellow\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Yellow\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if not board[i][ord(column) - ord('A')]), None)\n        if row is not None:\n            board[row][ord(column) - ord('A')] = color\n    \n    for line in LINES:\n        for i in range(3):\n            if all(board[row][ord(column) - ord('A')] == 'Yellow' for column, row in line):\n                return 'Yellow'\n            elif all(board[row][ord(column) - ord('A')] == 'Red' for column, row in line):\n                return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid with 6 rows and 7 columns\n    grid = [[''] * 7 for _ in range(6)]\n    \n    # Iterate through the pieces_positions list\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        # Find the first empty row in the column and place the color\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - ord('A')] == '':\n                grid[row][ord(column) - ord('A')] = color\n                break\n    \n    # Check if there is a winner\n    for line in LINES:\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        elif colors.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        for i in range(5, -1, -1):\n            if board[i][column_idx] == ' ':\n                board[i][column_idx] = color\n                break\n    for line in LINES:\n        values = set()\n        for (i, j) in line:\n            values.add(board[j][ord(i) - ord('A')])\n        if len(values) == 1 and ' ' not in values:\n            return values.pop()\n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(COLUMNS) for _ in ROWS]\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        for i in range(len(ROWS)-1, -1, -1):\n            if board[i][COLUMNS.index(column)] is None:\n                board[i][COLUMNS.index(column)] = color\n                break\n    for line in LINES:\n        for color in ('Yellow', 'Red'):\n            if all(board[i][COLUMNS.index(column)] == color for column, i in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces_positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        \n        # Find the first available row in the column\n        row = -1\n        while grid[row][ord(column) - ord('A')]:\n            row -= 1\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check for a win\n    for line in LINES:\n        cells = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if all(cells) and len(set(cells)) == 1:\n            return cells[0]\n    \n    # If no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def get_column(col):\n        return [piece for piece in pieces_positions if piece[0] == col]\n\n    def get_row(row):\n        return [piece for piece in pieces_positions if piece[2:] == str(row)]\n\n    def get_diagonal(start):\n        diag = []\n        for i in range(4):\n            row = int(start[1]) + i\n            col = chr(ord(start[0]) + i)\n            diag.append(col + '_' + str(row))\n        return diag\n\n    def check_winner(pieces):\n        red_count = 0\n        yellow_count = 0\n        for piece in pieces:\n            if 'Red' in piece:\n                red_count += 1\n                yellow_count = 0\n            elif 'Yellow' in piece:\n                yellow_count += 1\n                red_count = 0\n            if red_count == 4:\n                return 'Red'\n            elif yellow_count == 4:\n                return 'Yellow'\n        return 'Draw'\n\n    for col in COLUMNS:\n        column_pieces = get_column(col)\n        result = check_winner(column_pieces)\n        if result != 'Draw':\n            return result\n\n    for row in ROWS:\n        row_pieces = get_row(row)\n        result = check_winner(row_pieces)\n        if result != 'Draw':\n            return result\n\n    for line in LINES:\n        line_pieces = [piece for piece in pieces_positions if piece[:2] in line]\n        result = check_winner(line_pieces)\n        if result != 'Draw':\n            return result\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, val in enumerate(board[column_index]) if val is None), None)\n        if row_index is not None:\n            board[column_index][row_index] = color\n        else:\n            return 'Draw'\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Loop through each move in pieces_positions\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the lowest empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column)-65] == ' ':\n            row += 1\n        \n        # Place the color in the lowest empty row of the column\n        grid[row-1][ord(column)-65] = color\n    \n    # Check for a winning condition in all possible lines\n    for line in LINES:\n        # Get the colors of the positions in the line\n        colors = [grid[row][ord(column)-65] for column, row in line]\n        \n        # Check if all colors are the same and not empty\n        if all(color != ' ' for color in colors) and len(set(colors)) == 1:\n            return colors[0]\n    \n    # If there is no winning condition, return \"Draw\"\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_idx = COLUMNS.index(col)\n        row_idx = next(i for i, c in enumerate(board[col_idx]) if c is None)\n        board[col_idx][row_idx] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((col, ROWS[len([1 for x in red_moves if x[0] == col])]))\n        else:\n            yellow_moves.add((col, ROWS[len([1 for x in yellow_moves if x[0] == col])]))\n            \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n                \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i in reversed(range(6)) if grid[i][COLUMNS.index(col)] is None)\n        grid[row][COLUMNS.index(col)] = color\n        for line in LINES:\n            if all(grid[i][COLUMNS.index(j)] == color for j, i in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the board as an empty grid\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to an index\n        col_index = ord(column) - ord('A')\n\n        # Iterate over the rows in the column\n        for row in range(6):\n            # If the current position is empty, place the color\n            if board[row][col_index] == '':\n                board[row][col_index] = color\n                break\n\n    # Check if there is a winner\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n\n        # Check if all the colors are the same and not empty\n        if all(color == colors[0] and color != '' for color in colors):\n            # Return the color of the winner\n            return colors[0]\n\n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_index = COLUMNS.index(col)\n        for row in ROWS:\n            if not board[row][col_index]:\n                board[row][col_index] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))] \n    return \"Yellow\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 6 for _ in range(7)]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col = ord(col) - 65\n        row = board[col].index('')\n        board[col][row] = color\n\n        for line in LINES:\n            if all(board[ord(c) - 65][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split(\"_\")[1]\n    \n    board = [[\"\"] * 7 for _ in range(6)]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split(\"_\")\n        row = 0\n        \n        while row < 6 and board[row][ord(column) - ord(\"A\")]:\n            row += 1\n        \n        if row == 6:\n            return \"Draw\"\n        \n        board[row][ord(column) - ord(\"A\")] = color\n        \n        for line in LINES:\n            if all(board[row][ord(column) - ord(\"A\")] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = board[column_index].index(None)\n        board[column_index][row_index] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    player = ''\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        \n        for row_idx in range(len(ROWS)-1, -1, -1):\n            if grid[row_idx][column_idx] == '':\n                grid[row_idx][column_idx] = color\n                break\n                \n        for line in LINES:\n            if all(grid[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n            \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    player = \"Red\"\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] is not None:\n            row += 1\n        grid[row][ord(column) - ord('A')] = color\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        player = \"Yellow\" if player == \"Red\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Loop through the list of pieces positions\n    for piece_position in pieces_positions:\n        # Get the column and color from the piece position\n        column, color = piece_position.split('_')\n        \n        # Find the lowest empty row in the column\n        row = -1\n        for i in range(6):\n            if grid[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check for a winning combination\n    for line in LINES:\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if colors.count('Yellow') == 4:\n            return 'Yellow'\n        elif colors.count('Red') == 4:\n            return 'Red'\n    \n    # If no winning combination, return \"Draw\" if grid is full, else \"None\"\n    if all(all(cell != '' for cell in row) for row in grid):\n        return 'Draw'\n    else:\n        return None",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    turn = 1\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] == '':\n            row += 1\n        row -= 1\n        board[row][ord(column) - ord('A')] = color\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        turn *= -1\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'"
        ]
    }
}