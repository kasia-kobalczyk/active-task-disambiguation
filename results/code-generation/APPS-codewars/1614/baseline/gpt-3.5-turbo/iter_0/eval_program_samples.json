{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the game state\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position in the list\n    for piece in pieces_positions:\n        # Extract the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to a numerical index\n        col_index = ord(column) - ord('A')\n\n        # Find the lowest empty row in the selected column\n        row_index = 0\n        while row_index < 6 and grid[row_index][col_index] != '':\n            row_index += 1\n\n        # Place the color in the selected position on the grid\n        grid[row_index][col_index] = color\n\n        # Check if the current move has resulted in a winning position\n        for line in LINES:\n            if all(grid[i][j] == color for j, i in line):\n                return color\n\n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to represent the game board\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Extract the column and color from each piece\n        col, color = piece.split('_')\n        \n        # Find the first available row in the chosen column\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - ord('A')] == '':\n                grid[row][ord(col) - ord('A')] = color\n                break\n    \n    # Check for a win in each line\n    for line in LINES:\n        for row, col in line:\n            if grid[row][ord(col) - ord('A')] == grid[row + 1][ord(col) - ord('A')] == \\\n               grid[row + 2][ord(col) - ord('A')] == grid[row + 3][ord(col) - ord('A')]:\n                return grid[row][ord(col) - ord('A')]\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in reversed(ROWS) if (column, r) not in red_positions and (column, r) not in yellow_positions), None)\n        if row is None:\n            return \"Draw\"\n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n        \n        if any(line.issubset(red_positions) for line in LINES):\n            return \"Red\"\n        if any(line.issubset(yellow_positions) for line in LINES):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][COLUMNS.index(column)] != '':\n            row += 1\n        board[row][COLUMNS.index(column)] = color\n    \n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def get_winner():\n        for line in LINES:\n            if all(pos in pieces_positions[player]\n                   for pos in line):\n                return player\n        return ''\n\n    players = ['Red', 'Yellow']\n    for piece in pieces_positions:\n        col, player = piece.split('_')\n        pieces_positions[player].add((col, min(ROWS - {pos[1]\n                                                       for pos in\n                                                       pieces_positions[col]})))\n        if get_winner():\n            return get_winner()\n        players = players[::-1]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line <= red_moves or line <= yellow_moves:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Red': set(), 'Yellow': set()}\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        pieces[color].add((column, len(pieces[color])))\n        for line in LINES:\n            if line <= pieces[color]:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {c: set() for c in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].add(color)\n        for line in LINES:\n            if all(board[col].issuperset(color) for col, color in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all(piece in pieces_positions for piece in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in reversed(ROWS):\n            if board[column_index][row] == '':\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[column_index][row] == color for column_index, row in line):\n                return color\n    \n    return 'Draw'",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(all(cell != None for cell in row) for row in board):\n        return 'Draw'\n    \n    return None\n```"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i, val in enumerate(board[COLUMNS.index(column)]) if val is None), -1)\n        if row < 0:\n            return 'Draw'\n        board[COLUMNS.index(column)][row] = color\n    \n    for line in LINES:\n        line_vals = {board[COLUMNS.index(column)][row] for column, row in line}\n        if len(line_vals) == 1 and None not in line_vals:\n            return 'Red' if 'Red' in line_vals else 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {c: [None]*len(ROWS) for c in COLUMNS}\n\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        grid[column][grid[column].index(None)] = color\n\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    player_turn = {'Red': 'Yellow', 'Yellow': 'Red'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[COLUMNS.index(column)][grid[COLUMNS.index(column)].index('')] = color\n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n        if all(grid[i][j] for i in range(len(COLUMNS)) for j in range(len(ROWS))):\n            return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    for color in ['Red', 'Yellow']:\n        pieces = [piece.split('_') for piece in pieces_positions if color == piece.split('_')[1]]\n        for line in LINES:\n            if all(position in pieces for position in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n           \n    board = {}\n    for play in pieces_positions:\n        c, color = play.split('_')\n        row = len(board.get(c, []))\n        board.setdefault(c, []).append(color)\n        if any(line.issubset(board.get(c, [])) for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((r for r in range(6) if (column, r) not in board), None)\n        if row is not None:\n            board[(column, row)] = color\n    \n    for line in LINES:\n        colors = set([board.get(pos) for pos in line])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in COLUMNS]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = ord(column) - ord('A')\n        color = color.lower()\n        board[column][next(i for i, x in enumerate(board[column]) if x is None)] = color\n        if any(set(line).issubset(board[column]) for line in LINES):\n            return color.capitalize()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [['']*len(ROWS) for _ in range(len(COLUMNS))]\n    color = {'Yellow': 'Y', 'Red': 'R'}\n\n    for move in pieces_positions:\n        col, col_color = move.split('_')\n        row = next(i for i in range(len(ROWS)) if grid[COLUMNS.index(col)][i] == '')\n\n        grid[COLUMNS.index(col)][row] = col_color[0]\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == color[col_color] for c, r in line):\n                return col_color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create a dictionary to store the number of pieces for each position\n    board = {}\n    for column in COLUMNS:\n        for row in ROWS:\n            board[(column, row)] = \"\"\n\n    # Loop through the pieces positions and update the board\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = 0\n        while board[(column, row)] != \"\":\n            row += 1\n        board[(column, row)] = color\n\n    # Check if there is a winner\n    for line in LINES:\n        colors = set()\n        for position in line:\n            colors.add(board[position])\n        if len(colors) == 1 and \"\" not in colors:\n            return colors.pop()\n\n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def check_winner(grid):\n        for line in LINES:\n            for color in {'Red', 'Yellow'}:\n                if all(grid[column][row] == color for column, row in line):\n                    return color\n        return 'Draw'\n\n    grid = {column: [''] * len(ROWS) for column in COLUMNS}\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index('')\n        grid[column][row] = color\n\n        winner = check_winner(grid)\n        if winner:\n            return winner\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = len(board.get(col, []))\n        if row >= len(ROWS):\n            return 'Draw'\n        board.setdefault(col, []).append(color)\n        for line in LINES:\n            if all((col, row) in line for row in range(row-3, row+1)):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = ord(column) - ord(\"A\")\n        for row in range(5, -1, -1):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(grid[row][ord(column) - ord(\"A\")] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while board[row][COLUMNS.index(column)] != ' ':\n            row += 1\n        board[row][COLUMNS.index(column)] = color\n    \n    for line in LINES:\n        cells = [board[ROWS.index(row)][COLUMNS.index(column)] for column, row in line]\n        if ''.join(cells) == 'Yellow' * 4:\n            return 'Yellow'\n        elif ''.join(cells) == 'Red' * 4:\n            return 'Red'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col][board[col].index(None)] = color\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {c: set() for c in COLUMNS}\n    for move in pieces_positions:\n        c, color = move.split('_')\n        grid[c].add(ROWS[len(grid[c])])\n        if any(line <= grid[c] for line in LINES):\n            return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the board with all empty spaces\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # iterate through the pieces_positions\n    for move in pieces_positions:\n        # get the column and color from the move\n        column, color = move.split('_')\n        \n        # find the next empty row in the column\n        row = -1\n        while row >= -6 and board[row][ord(column)-65] != '':\n            row -= 1\n        \n        # check if the column is full\n        if row < -6:\n            return 'Draw'\n        \n        # update the board with the move\n        board[row][ord(column)-65] = color\n    \n    # check if any player has won\n    for line in LINES:\n        # check for Red win\n        if all(board[row][ord(column)-65] == 'Red' for column, row in line):\n            return 'Red'\n        # check for Yellow win\n        elif all(board[row][ord(column)-65] == 'Yellow' for column, row in line):\n            return 'Yellow'\n    \n    # if no player has won, return 'Draw'\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = board[column_index].index(None)\n        board[column_index][row_index] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {col: [None] * len(ROWS) for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next(i for i, piece in enumerate(board[col]) if piece is None)\n        board[col][row] = color\n    \n    for line in LINES:\n        if all(board[col][row] == color for col, row in line):\n            return color\n        \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a grid to track the positions of the pieces\n    grid = [[\"\" for _ in range(7)] for _ in range(6)]\n\n    # iterate over the pieces positions\n    for piece in pieces_positions:\n        # extract the column and color from the piece string\n        column, color = piece.split(\"_\")\n\n        # find the next empty row in the column\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - ord('A')] == \"\":\n                # place the piece in the grid\n                grid[row][ord(column) - ord('A')] = color\n                break\n\n        # check if the current player has won\n        for line in LINES:\n            # check if all the positions in the line are filled with the same color\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # if no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][next(i for i, cell in enumerate(grid[COLUMNS.index(column)][::-1]) if cell is None)] = color\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][ROW] == color for column, ROW in line):\n                return color\n    return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column = ord(move[0]) - ord('A')\n        color = move.split('_')[1]\n        row = 0\n        while row < 6 and board[row][column] != \"\":\n            row += 1\n        board[row][column] = color\n        \n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: {r: None for r in ROWS} for c in COLUMNS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col][next(r for r in ROWS if board[col][r] is None)] = color\n\n    for color in 'Yellow', 'Red':\n        if any(all(board[col][row] == color for col, row in line)\n               for line in LINES):\n            return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col][board[col].index(None)] = color\n\n    for line in LINES:\n        line_colors = [board[col][row] for col, row in line]\n        if line_colors.count('Red') >= 4:\n            return 'Red'\n        elif line_colors.count('Yellow') >= 4:\n            return 'Yellow'\n\n    if all(board[c][r] is not None for c in COLUMNS for r in ROWS):\n        return 'Draw'\n\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\ndef who_is_winner(pieces_positions):\n    board = {col: [' '] * len(ROWS) for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col][board[col].index(' ')] = color\n        for line in LINES:\n            if all(board[piece[0]][piece[1]] == color for piece in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the board\n    board = [[''] * 7 for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Convert the column letter to index\n        column_index = ord(column) - ord('A')\n        \n        # Iterate over the rows in the column\n        for row in range(6):\n            # If the cell is empty, place the piece\n            if not board[row][column_index]:\n                board[row][column_index] = color\n                break\n        \n        # Check for win conditions\n        for line in LINES:\n            # Check if all cells in the line have the same color\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no win condition is met, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves))\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n\n        if any(line <= red_moves for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_moves for line in LINES):\n            return 'Yellow'\n\n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for move in pieces_positions:\n        c, color = move.split('_')\n        board[c][board[c].index(None)] = color\n        for line in LINES:\n            if all(board[i][j] == color for i, j in line):\n                return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {c: [None]*6 for c in COLUMNS}\n    players = ('Yellow', 'Red')\n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column][board[column].index(None)] = player\n        for line in LINES:\n            if all(board[c][r] == player for c, r in line):\n                return player\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        column_index = COLUMNS.index(column)\n        for row in range(len(ROWS)):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for column, row in line:\n            colors.add(board[COLUMNS.index(column)][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def is_winner(player):\n        for line in LINES:\n            if line <= player:\n                return True\n        return False\n\n    grid = {col: [] for col in COLUMNS}\n    players = {'Yellow': set(), 'Red': set()}\n\n    for piece in pieces_positions:\n        col, player = piece.split('_')\n        grid[col].append(player)\n        players[player].add((col, len(grid[col]) - 1))\n\n        if is_winner(players[player]):\n            return player\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def check_winner(board):\n        for line in LINES:\n            if all(board[cell] == 'R' for cell in line):\n                return 'Red'\n            elif all(board[cell] == 'Y' for cell in line):\n                return 'Yellow'\n        return None\n    \n    board = {cell: '.' for cell in {(column, row) for column in COLUMNS for row in ROWS}}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in ROWS if board[column, row] == '.')\n        board[column, row] = color[0].upper()\n        winner = check_winner(board)\n        if winner:\n            return winner\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_idx] is None:\n                board[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for i in range(4):\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {COLUMNS[i]: {ROWS[j]: None for j in ROWS}\n            for i in range(len(COLUMNS))}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in ROWS if grid[column][row] is None)\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split(\"_\")[1]\n        for row in range(6):\n            if board[row][column] == \"\":\n                board[row][column] = color\n                break\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - 65\n        color = position[2:]\n\n        for i in range(6):\n            if board[i][column] == \"\":\n                board[i][column] = color\n                break\n\n        for line in LINES:\n            if all(board[i][ord(column)-65] == color for column, i in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in ROWS:\n            if board[COLUMNS.index(column)][row] == '':\n                board[COLUMNS.index(column)][row] = color\n                break\n    for line in LINES:\n        colors = set()\n        for position in line:\n            column, row = position\n            colors.add(board[COLUMNS.index(column)][row])\n        if len(colors) == 1 and '' not in colors:\n            return list(colors)[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    def get_color(piece):\n        return piece.split('_')[1]\n\n    def get_column(piece):\n        return piece.split('_')[0]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n\n        for row in range(6):\n            if board[row][ord(column) - ord('A')] == '':\n                board[row][ord(column) - ord('A')] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    player = \"\"\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split(\"_\")[1]\n        \n        for row in range(6):\n            if board[row][column] is None:\n                board[row][column] = color\n                break\n        \n        if check_winner(board):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board):\n    for line in LINES:\n        colors = set()\n        for cell in line:\n            row, col = cell[1], ord(cell[0]) - ord('A')\n            colors.add(board[row][col])\n        \n        if len(colors) == 1 and None not in colors:\n            return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    # Create a board with empty cells\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        \n        # Find the lowest empty row in the column\n        row = 5\n        while board[row][column_idx] != ' ':\n            row -= 1\n        \n        # Place the color in the cell\n        board[row][column_idx] = color\n    \n    # Check for a winner in each line\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] and color != ' ' for color in colors):\n            return colors[0]\n    \n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i in range(len(ROWS)) if grid[column][i] is None), None)\n        if row is None:\n            continue\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    winner = ''\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = ord(column) - ord('A')\n\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = players[color]\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[color] for column, row in line):\n                winner = color\n                break\n\n        if winner != '':\n            break\n\n    if winner == '':\n        winner = 'Draw'\n\n    return winner",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_idx][row] is None:\n                board[column_idx][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red_pieces = set()\n    yellow_pieces = set()\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_pieces.add((column, len(red_pieces)))\n        elif color == 'Yellow':\n            yellow_pieces.add((column, len(yellow_pieces)))\n            \n    for line in LINES:\n        if line.issubset(red_pieces):\n            return 'Red'\n        elif line.issubset(yellow_pieces):\n            return 'Yellow'\n        \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        col, color = piece.split(\"_\")\n        col_index = COLUMNS.index(col)\n        \n        for row in reversed(range(len(ROWS))):\n            if board[row][col_index] == \"\":\n                board[row][col_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.append((column, len(red_moves)))\n        else:\n            yellow_moves.append((column, len(yellow_moves)))\n    \n    for line in LINES:\n        red_count = 0\n        yellow_count = 0\n        \n        for move in red_moves:\n            if move in line:\n                red_count += 1\n                if red_count >= 4:\n                    return 'Red'\n        \n        for move in yellow_moves:\n            if move in line:\n                yellow_count += 1\n                if yellow_count >= 4:\n                    return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position.split('_')[1]\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        column_index = COLUMNS.index(column)\n        for row in range(len(ROWS)):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for column, row in line:\n            colors.add(board[COLUMNS.index(column)][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def is_winner(player):\n        for line in LINES:\n            if line <= player:\n                return True\n        return False\n\n    grid = {col: [] for col in COLUMNS}\n    players = {'Yellow': set(), 'Red': set()}\n\n    for piece in pieces_positions:\n        col, player = piece.split('_')\n        grid[col].append(player)\n        players[player].add((col, len(grid[col]) - 1))\n\n        if is_winner(players[player]):\n            return player\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def check_winner(board):\n        for line in LINES:\n            if all(board[cell] == 'R' for cell in line):\n                return 'Red'\n            elif all(board[cell] == 'Y' for cell in line):\n                return 'Yellow'\n        return None\n    \n    board = {cell: '.' for cell in {(column, row) for column in COLUMNS for row in ROWS}}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in ROWS if board[column, row] == '.')\n        board[column, row] = color[0].upper()\n        winner = check_winner(board)\n        if winner:\n            return winner\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_idx] is None:\n                board[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for i in range(4):\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {COLUMNS[i]: {ROWS[j]: None for j in ROWS}\n            for i in range(len(COLUMNS))}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in ROWS if grid[column][row] is None)\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split(\"_\")[1]\n        for row in range(6):\n            if board[row][column] == \"\":\n                board[row][column] = color\n                break\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - 65\n        color = position[2:]\n\n        for i in range(6):\n            if board[i][column] == \"\":\n                board[i][column] = color\n                break\n\n        for line in LINES:\n            if all(board[i][ord(column)-65] == color for column, i in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in ROWS:\n            if board[COLUMNS.index(column)][row] == '':\n                board[COLUMNS.index(column)][row] = color\n                break\n    for line in LINES:\n        colors = set()\n        for position in line:\n            column, row = position\n            colors.add(board[COLUMNS.index(column)][row])\n        if len(colors) == 1 and '' not in colors:\n            return list(colors)[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    def get_color(piece):\n        return piece.split('_')[1]\n\n    def get_column(piece):\n        return piece.split('_')[0]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n\n        for row in range(6):\n            if board[row][ord(column) - ord('A')] == '':\n                board[row][ord(column) - ord('A')] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    player = \"\"\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split(\"_\")[1]\n        \n        for row in range(6):\n            if board[row][column] is None:\n                board[row][column] = color\n                break\n        \n        if check_winner(board):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board):\n    for line in LINES:\n        colors = set()\n        for cell in line:\n            row, col = cell[1], ord(cell[0]) - ord('A')\n            colors.add(board[row][col])\n        \n        if len(colors) == 1 and None not in colors:\n            return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    # Create a board with empty cells\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        \n        # Find the lowest empty row in the column\n        row = 5\n        while board[row][column_idx] != ' ':\n            row -= 1\n        \n        # Place the piece in the board\n        board[row][column_idx] = color\n    \n    # Check for a winner in each line\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] and color != ' ' for color in colors):\n            return colors[0]\n    \n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i in range(len(ROWS)) if grid[column][i] is None), None)\n        if row is None:\n            continue\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    winner = ''\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = ord(column) - ord('A')\n\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = players[color]\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[color] for column, row in line):\n                winner = color\n                break\n\n        if winner != '':\n            break\n\n    if winner == '':\n        winner = 'Draw'\n\n    return winner",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_idx][row] is None:\n                board[column_idx][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red_pieces = set()\n    yellow_pieces = set()\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_pieces.add((column, len(red_pieces)))\n        elif color == 'Yellow':\n            yellow_pieces.add((column, len(yellow_pieces)))\n            \n    for line in LINES:\n        if line.issubset(red_pieces):\n            return 'Red'\n        elif line.issubset(yellow_pieces):\n            return 'Yellow'\n        \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        col, color = piece.split(\"_\")\n        col_index = COLUMNS.index(col)\n        \n        for row in reversed(range(len(ROWS))):\n            if board[row][col_index] == \"\":\n                board[row][col_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.append((column, len(red_moves)))\n        else:\n            yellow_moves.append((column, len(yellow_moves)))\n    \n    for line in LINES:\n        red_count = 0\n        yellow_count = 0\n        \n        for move in red_moves:\n            if move in line:\n                red_count += 1\n                if red_count >= 4:\n                    return 'Red'\n        \n        for move in yellow_moves:\n            if move in line:\n                yellow_count += 1\n                if yellow_count >= 4:\n                    return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position.split('_')[1]\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'"
        ]
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all(piece in pieces_positions for piece in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in reversed(ROWS):\n            if board[column_index][row] == '':\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[column_index][row] == color for column_index, row in line):\n                return color\n    \n    return 'Draw'",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(all(cell != None for cell in row) for row in board):\n        return 'Draw'\n    \n    return None\n```",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in ROWS]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS[::-1]:\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n    \n    for line in LINES:\n        colors = set(grid[row][column] for column, row in line)\n        if colors == {'Red'}:\n            return 'Red'\n        elif colors == {'Yellow'}:\n            return 'Yellow'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a dictionary to store the number of pieces in each position\n    board = {}\n    \n    # create a dictionary to store the current player's color\n    current_player = {'Red': 0, 'Yellow': 0}\n    \n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # extract the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # check if the column is already in the board dictionary\n        if column not in board:\n            # if not, add the column to the board dictionary with an empty list\n            board[column] = []\n        \n        # append the color to the column list in the board dictionary\n        board[column].append(color)\n        \n        # check if there are four consecutive pieces of the same color in the board\n        for line in LINES:\n            # get the colors in the current line\n            line_colors = [board[column][index] for column, index in line]\n            \n            # check if there are four consecutive pieces of the same color in the current line\n            if line_colors.count(color) == 4:\n                # return the current player's color as the winner\n                return color\n        \n        # switch the current player's color\n        current_player[color] += 1\n        \n        # check if all the positions in the board are occupied\n        if all(len(board[column]) == 6 for column in board):\n            # if so, return 'Draw'\n            return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell in the grid with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each line, check if all the cells are occupied by the same player's color.\n7. If a winner is found, return the corresponding color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[:-3]:\n                if all(board[COLUMNS[i+k]][row+k] == board[COLUMNS[i+k+1]][row+k+1] == board[COLUMNS[i+k+2]][row+k+2] == board[COLUMNS[i+k+3]][row+k+3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row+k]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[3:]:\n                if all(board[COLUMNS[i+k]][row-k] == board[COLUMNS[i+k+1]][row-k-1] == board[COLUMNS[i+k+2]][row-k-2] == board[COLUMNS[i+k+3]][row-k-3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row-k]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in COLUMNS]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = ord(column) - ord('A')\n        color = color.lower()\n        board[column][next(i for i, x in enumerate(board[column]) if x is None)] = color\n        if any(set(line).issubset(board[column]) for line in LINES):\n            return color.capitalize()\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create a dictionary to store the number of pieces for each position\n    board = {}\n    for column in COLUMNS:\n        for row in ROWS:\n            board[(column, row)] = \"\"\n\n    # Loop through the pieces positions and update the board\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = 0\n        while board[(column, row)] != \"\":\n            row += 1\n        board[(column, row)] = color\n\n    # Check if there is a winner\n    for line in LINES:\n        colors = set()\n        for position in line:\n            colors.add(board[position])\n        if len(colors) == 1 and \"\" not in colors:\n            return colors.pop()\n\n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def check_winner(grid):\n        for line in LINES:\n            for color in {'Red', 'Yellow'}:\n                if all(grid[column][row] == color for column, row in line):\n                    return color\n        return 'Draw'\n\n    grid = {column: [''] * len(ROWS) for column in COLUMNS}\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index('')\n        grid[column][row] = color\n\n        winner = check_winner(grid)\n        if winner:\n            return winner\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        if col not in board:\n            board[col] = []\n        board[col].append(color)\n        if len(board[col]) == 6:\n            board[col].pop(0)\n        if len(board[col]) >= 4:\n            for line in LINES:\n                if all((col, color) in line for col, color in board.items() if col in line):\n                    return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[COLUMNS.index(column)][grid[COLUMNS.index(column)].index('')] = color\n    \n    for line in LINES:\n        colors = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        elif colors.count('Yellow') == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while board[row][COLUMNS.index(column)] != ' ':\n            row += 1\n        board[row][COLUMNS.index(column)] = color\n    \n    for line in LINES:\n        cells = [board[ROWS.index(row)][COLUMNS.index(column)] for column, row in line]\n        if len(set(cells)) == 1 and ' ' not in cells:\n            return cells[0]\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col][board[col].index(None)] = color\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {c: set() for c in COLUMNS}\n    for move in pieces_positions:\n        c, color = move.split('_')\n        grid[c].add(ROWS[len(grid[c])])\n        if any(line <= grid[c] for line in LINES):\n            return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # initialize the board with all empty spaces\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # iterate through the pieces_positions\n    for move in pieces_positions:\n        # get the column and color from the move\n        column, color = move.split('_')\n        \n        # find the next empty row in the column\n        row = -1\n        while row >= -6 and board[row][ord(column)-65] != '':\n            row -= 1\n        \n        # check if the column is full\n        if row < -6:\n            continue\n        \n        # place the piece in the board\n        board[row][ord(column)-65] = color\n    \n        # check if there is a winning move\n        for line in LINES:\n            if all(board[row][ord(column)-65] == color for column, row in line):\n                return color\n    \n    # if no winning move, return 'Draw'\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = board[column_index].index(None)\n        board[column_index][row_index] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {col: [None] * len(ROWS) for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next(i for i, piece in enumerate(board[col]) if piece is None)\n        board[col][row] = color\n    \n    for line in LINES:\n        if all(board[col][row] == color for col, row in line):\n            return color\n        \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a grid to track the positions of the pieces\n    grid = [[\"\" for _ in range(7)] for _ in range(6)]\n\n    # iterate over the pieces positions\n    for piece in pieces_positions:\n        # extract the column and color from the piece string\n        column, color = piece.split(\"_\")\n\n        # find the next empty row in the column\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - ord('A')] == \"\":\n                # place the piece in the grid\n                grid[row][ord(column) - ord('A')] = color\n                break\n\n        # check if the current player has won\n        for line in LINES:\n            # check if all the positions in the line are filled with the same color\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # if no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][next(i for i, cell in enumerate(grid[COLUMNS.index(column)][::-1]) if cell is None)] = color\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][ROW] == color for column, ROW in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(player):\n        for line in LINES:\n            if all(piece in pieces[player] for piece in line):\n                return player\n        return None\n\n    pieces = {\"Red\": set(), \"Yellow\": set()}\n    for piece in pieces_positions:\n        column, player = piece.split(\"_\")\n        row = str(len(pieces[player]))\n        pieces[player].add((column, row))\n        winner = check_winner(player)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = []\n    yellow_positions = []\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_positions.append((COLUMNS.index(column), ROWS.count(column)))\n        elif color == 'Yellow':\n            yellow_positions.append((COLUMNS.index(column), ROWS.count(column)))\n\n    for line in LINES:\n        if all(position in red_positions for position in line):\n            return 'Red'\n        elif all(position in yellow_positions for position in line):\n            return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    else:\n        return 'Draw'"
        ],
        "2": [
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\ndef who_is_winner(pieces_positions):\n    board = {col: [' '] * len(ROWS) for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col][board[col].index(' ')] = color\n        for line in LINES:\n            if all(board[piece[0]][piece[1]] == color for piece in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the board\n    board = [[''] * 7 for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Convert the column letter to index\n        column_index = ord(column) - ord('A')\n        \n        # Iterate over the rows in the column\n        for row in range(6):\n            # If the cell is empty, place the piece\n            if not board[row][column_index]:\n                board[row][column_index] = color\n                break\n        \n        # Check for win conditions\n        for line in LINES:\n            # Check if all cells in the line have the same color\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no win condition is met, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions))\n        if color == 'Red':\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n\n        if any(line.issubset(red_positions) for line in LINES):\n            return 'Red'\n        if any(line.issubset(yellow_positions) for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for move in pieces_positions:\n        c, color = move.split('_')\n        board[c][board[c].index(None)] = color\n        for line in LINES:\n            if all(board[i][j] == color for i, j in line):\n                return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {c: [None]*6 for c in COLUMNS}\n    players = ('Yellow', 'Red')\n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column][board[column].index(None)] = player\n        for line in LINES:\n            if all(board[c][r] == player for c, r in line):\n                return player\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][next(i for i, cell in enumerate(grid[COLUMNS.index(column)]) if cell is None)] = color\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if any(all(grid[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line) for line in LINES):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {}\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        row = next((i for i in reversed(range(6)) if (column, i) not in grid), None)\n        if row is not None:\n            grid[(column, row)] = color\n\n    for line in LINES:\n        if all(grid.get(cell) == 'Red' for cell in line):\n            return 'Red'\n        if all(grid.get(cell) == 'Yellow' for cell in line):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * 7 for _ in range(6)]\n    for pos in pieces_positions:\n        col = ord(pos[0]) - ord('A')\n        color = pos[2:]\n        for row in range(6):\n            if grid[row][col] == '':\n                grid[row][col] = color\n                break\n\n    for line in LINES:\n        values = [grid[row][ord(col) - ord('A')] for col, row in line]\n        if all(val == 'Yellow' for val in values):\n            return 'Yellow'\n        elif all(val == 'Red' for val in values):\n            return 'Red'\n\n    if all(grid[row][col] != '' for row in range(6) for col in range(7)):\n        return 'Draw'\n    else:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid to track the positions of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over each position in the pieces_positions list\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Find the column index in the grid\n        column_index = ord(column) - ord('A')\n        \n        # Find the row index in the grid by finding the first empty spot from the bottom\n        for row in range(5, -1, -1):\n            if grid[row][column_index] == '':\n                # Place the color in the grid\n                grid[row][column_index] = color\n                break\n                \n    # Iterate over all possible lines in the grid\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # If all colors in the line are the same and not empty, return the color as the winner\n        if all(color == colors[0] and color != '' for color in colors):\n            return colors[0]\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\""
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_idx] is None:\n                board[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for i in range(4):\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {COLUMNS[i]: {ROWS[j]: None for j in ROWS}\n            for i in range(len(COLUMNS))}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in ROWS if grid[column][row] is None)\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - 65\n        color = position[2:]\n\n        for i in range(6):\n            if board[i][column] == \"\":\n                board[i][column] = color\n                break\n\n        for line in LINES:\n            if all(board[i][ord(column)-65] == color for column, i in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in ROWS:\n            if board[COLUMNS.index(column)][row] == '':\n                board[COLUMNS.index(column)][row] = color\n                break\n    for line in LINES:\n        colors = set()\n        for position in line:\n            column, row = position\n            colors.add(board[COLUMNS.index(column)][row])\n        if len(colors) == 1 and '' not in colors:\n            return list(colors)[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    def get_color(piece):\n        return piece.split('_')[1]\n\n    def get_column(piece):\n        return piece.split('_')[0]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n\n        for row in range(6):\n            if board[row][ord(column) - ord('A')] == '':\n                board[row][ord(column) - ord('A')] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    player = \"\"\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split(\"_\")[1]\n        \n        for row in range(6):\n            if board[row][column] is None:\n                board[row][column] = color\n                break\n        \n        if check_winner(board):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board):\n    for line in LINES:\n        colors = set()\n        for cell in line:\n            row, col = cell[1], ord(cell[0]) - ord('A')\n            colors.add(board[row][col])\n        \n        if len(colors) == 1 and None not in colors:\n            return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    # Create a board with empty cells\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        \n        # Find the lowest empty row in the column\n        row = 5\n        while board[row][column_idx] != ' ':\n            row -= 1\n        \n        # Place the color in the cell\n        board[row][column_idx] = color\n    \n    # Check for a winner in each line\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] and color != ' ' for color in colors):\n            return colors[0]\n    \n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i in range(len(ROWS)) if grid[column][i] is None), None)\n        if row is None:\n            continue\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    winner = ''\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = ord(column) - ord('A')\n\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = players[color]\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[color] for column, row in line):\n                winner = color\n                break\n\n        if winner != '':\n            break\n\n    if winner == '':\n        winner = 'Draw'\n\n    return winner",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_idx][row] is None:\n                board[column_idx][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red_pieces = set()\n    yellow_pieces = set()\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_pieces.add((column, len(red_pieces)))\n        elif color == 'Yellow':\n            yellow_pieces.add((column, len(yellow_pieces)))\n            \n    for line in LINES:\n        if line.issubset(red_pieces):\n            return 'Red'\n        elif line.issubset(yellow_pieces):\n            return 'Yellow'\n        \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        col, color = piece.split(\"_\")\n        col_index = COLUMNS.index(col)\n        \n        for row in reversed(range(len(ROWS))):\n            if board[row][col_index] == \"\":\n                board[row][col_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.append((column, len(red_moves)))\n        else:\n            yellow_moves.append((column, len(yellow_moves)))\n    \n    for line in LINES:\n        red_count = 0\n        yellow_count = 0\n        \n        for column, move_index in line:\n            if (column, move_index) in red_moves:\n                red_count += 1\n            elif (column, move_index) in yellow_moves:\n                yellow_count += 1\n        \n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position.split('_')[1]\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {c: [' ']*len(ROWS) for c in COLUMNS}\n    for pos in pieces_positions:\n        c, color = pos.split('_')\n        board[c][board[c].index(' ')] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_idx] is None:\n                board[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for i in range(4):\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {COLUMNS[i]: {ROWS[j]: None for j in ROWS}\n            for i in range(len(COLUMNS))}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in ROWS if grid[column][row] is None)\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    def get_color(piece):\n        return piece.split('_')[1]\n\n    def get_column(piece):\n        return piece.split('_')[0]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n        for i in range(5, -1, -1):\n            if board[i][ord(column) - ord('A')] == '':\n                board[i][ord(column) - ord('A')] = color\n                break\n\n    for line in LINES:\n        colors = [board[row][ord(column) - ord('A')] for (column, row) in line]\n        if ''.join(colors) == 'Yellow' * 4:\n            return 'Yellow'\n        elif ''.join(colors) == 'Red' * 4:\n            return 'Red'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split(\"_\")[1]\n        for row in range(6):\n            if board[row][column] == \"\":\n                board[row][column] = color\n                break\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - 65\n        color = position[2:]\n\n        for i in range(6):\n            if board[i][column] == \"\":\n                board[i][column] = color\n                break\n\n        for line in LINES:\n            if all(board[i][ord(column)-65] == color for column, i in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in ROWS:\n            if board[COLUMNS.index(column)][row] == '':\n                board[COLUMNS.index(column)][row] = color\n                break\n    for line in LINES:\n        colors = set()\n        for position in line:\n            column, row = position\n            colors.add(board[COLUMNS.index(column)][row])\n        if len(colors) == 1 and '' not in colors:\n            return list(colors)[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    def get_color(piece):\n        return piece.split('_')[1]\n\n    def get_column(piece):\n        return piece.split('_')[0]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n\n        for row in range(6):\n            if board[row][ord(column) - ord('A')] == '':\n                board[row][ord(column) - ord('A')] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    player = \"\"\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split(\"_\")[1]\n        \n        for row in range(6):\n            if board[row][column] is None:\n                board[row][column] = color\n                break\n        \n        if check_winner(board):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board):\n    for line in LINES:\n        colors = set()\n        for cell in line:\n            row, col = cell[1], ord(cell[0]) - ord('A')\n            colors.add(board[row][col])\n        \n        if len(colors) == 1 and None not in colors:\n            return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    # Create a board with empty cells\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        \n        # Find the lowest empty row in the column\n        row = 5\n        while board[row][column_idx] != ' ':\n            row -= 1\n        \n        # Place the color in the cell\n        board[row][column_idx] = color\n    \n    # Check for a winner in each line\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] and color != ' ' for color in colors):\n            return colors[0]\n    \n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i in range(len(ROWS)) if grid[column][i] is None), None)\n        if row is None:\n            continue\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    winner = ''\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = ord(column) - ord('A')\n\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = players[color]\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[color] for column, row in line):\n                winner = color\n                break\n\n        if winner != '':\n            break\n\n    if winner == '':\n        winner = 'Draw'\n\n    return winner",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_idx][row] is None:\n                board[column_idx][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red_pieces = set()\n    yellow_pieces = set()\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_pieces.add((column, len(red_pieces)))\n        elif color == 'Yellow':\n            yellow_pieces.add((column, len(yellow_pieces)))\n            \n    for line in LINES:\n        if line.issubset(red_pieces):\n            return 'Red'\n        elif line.issubset(yellow_pieces):\n            return 'Yellow'\n        \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        col, color = piece.split(\"_\")\n        col_index = COLUMNS.index(col)\n        \n        for row in reversed(range(len(ROWS))):\n            if board[row][col_index] == \"\":\n                board[row][col_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.append((column, len(red_moves)))\n        else:\n            yellow_moves.append((column, len(yellow_moves)))\n    \n    for line in LINES:\n        red_count = 0\n        yellow_count = 0\n        \n        for move in red_moves:\n            if move in line:\n                red_count += 1\n                if red_count >= 4:\n                    return 'Red'\n        \n        for move in yellow_moves:\n            if move in line:\n                yellow_count += 1\n                if yellow_count >= 4:\n                    return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position.split('_')[1]\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {c: [' ']*len(ROWS) for c in COLUMNS}\n    for pos in pieces_positions:\n        c, color = pos.split('_')\n        board[c][board[c].index(' ')] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return 'Draw'"
        ]
    },
    "2": {
        "0": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][next((i for i, x in enumerate(grid[COLUMNS.index(column)][::-1]) if x == ''), None)] = color\n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = players[color]\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != '':\n                player = board[row][column]\n                if all(board[r][c] == player for r, c in line):\n                    return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a dictionary to store the number of pieces in each position\n    board = {}\n    \n    # create a dictionary to store the current player's color\n    current_player = {'color': ''}\n    \n    # iterate through each piece in the pieces_positions list\n    for piece in pieces_positions:\n        # split the piece string into column and color\n        column, color = piece.split('_')\n        \n        # if the current player is not set, set it to the color of the first piece\n        if current_player['color'] == '':\n            current_player['color'] = color\n        \n        # if the column is not in the board dictionary, add it with an empty list as the value\n        if column not in board:\n            board[column] = []\n        \n        # append the color to the column in the board dictionary\n        board[column].append(color)\n        \n        # check if the current player has won\n        if check_winner(board, current_player['color']):\n            return current_player['color']\n        \n        # switch the current player's color\n        current_player['color'] = 'Yellow' if current_player['color'] == 'Red' else 'Red'\n    \n    # if there are no more moves and no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell in the grid with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each line, check if all the cells are occupied by the same player's color.\n7. If a winner is found, return the corresponding color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[:-3]:\n                if all(board[COLUMNS[i+k]][row+k] == board[COLUMNS[i+k+1]][row+k+1] == board[COLUMNS[i+k+2]][row+k+2] == board[COLUMNS[i+k+3]][row+k+3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row+k]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[3:]:\n                if all(board[COLUMNS[i+k]][row-k] == board[COLUMNS[i+k+1]][row-k-1] == board[COLUMNS[i+k+2]][row-k-2] == board[COLUMNS[i+k+3]][row-k-3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row-k]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 6 for _ in range(7)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = COLUMNS.index(column)\n        row_idx = next((i for i in range(6) if board[col_idx][i] is None), None)\n        if row_idx is not None:\n            board[col_idx][row_idx] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column] = board.get(column, '') + color[0]\n\n        for line in LINES:\n            if all(board.get(cell, '') == board[column] for cell in line):\n                return board[column]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_idx = COLUMNS.index(column)\n        for row_idx in range(len(ROWS)-1, -1, -1):\n            if board[column_idx][row_idx] is None:\n                board[column_idx][row_idx] = color\n                break\n    \n    for line in LINES:\n        colors = [board[column_idx][row_idx] for column_idx, row_idx in line]\n        if all(color == \"Red\" for color in colors):\n            return \"Red\"\n        elif all(color == \"Yellow\" for color in colors):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the game grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    player_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the moves\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the column index\n        column_index = ord(column) - ord('A')\n        \n        # Find the row index\n        row_index = 5 - grid[::-1][column_index].count('')\n        \n        # Place the piece in the grid\n        grid[row_index][column_index] = color\n    \n        # Check for a winner\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return player_map[color]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for i in range(len(pieces_positions)):\n        col, player = pieces_positions[i].split('_')\n        if col not in board:\n            board[col] = []\n        board[col].append(player)\n\n        if len(board[col]) == 6:\n            board[col] = []\n            \n        for line in LINES:\n            if all((col, player) in line for col, row in line):\n                return player\n    \n    return 'Draw'",
            "```python\ndef who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if board[row][column_index] == ' ':\n                board[row][column_index] = players[color]\n                break\n        \n        for line in LINES:\n            if all(board[row][column_index] == players[color] for column_index, row in line):\n                return color\n    \n    return 'Draw'\n```",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in reversed(range(6)):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # create grid to keep track of pieces\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # iterate over pieces positions\n    for position in pieces_positions:\n        # get column and color from position string\n        column, color = position.split('_')\n        # find first empty slot in the column\n        for i in range(len(grid[column])):\n            if grid[column][i] == '':\n                # place the piece in the slot\n                grid[column][i] = color\n                break\n\n    # check for a winning line\n    for line in LINES:\n        # count the number of consecutive pieces of the same color in the line\n        red_count = 0\n        yellow_count = 0\n        for position in line:\n            column, row = position\n            if grid[column][row] == 'Red':\n                red_count += 1\n                if red_count == 4:\n                    return 'Red'\n            elif grid[column][row] == 'Yellow':\n                yellow_count += 1\n                if yellow_count == 4:\n                    return 'Yellow'\n\n    # if no winning line found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create a dictionary to store the number of pieces for each position\n    board = {}\n    for column in COLUMNS:\n        for row in ROWS:\n            board[(column, row)] = \"\"\n\n    # Loop through the pieces positions and update the board\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = 0\n        while board[(column, row)] != \"\":\n            row += 1\n        board[(column, row)] = color\n\n    # Check if there is a winner\n    for line in LINES:\n        colors = set()\n        for position in line:\n            colors.add(board[position])\n        if len(colors) == 1 and \"\" not in colors:\n            return colors.pop()\n\n    # Check if the board is full\n    for column in COLUMNS:\n        if board[(column, ROWS[-1])] == \"\":\n            return \"Draw\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def check_winner(grid):\n        for line in LINES:\n            for color in {'Red', 'Yellow'}:\n                if all(grid[column][row] == color for column, row in line):\n                    return color\n        return 'Draw'\n\n    grid = {column: [''] * len(ROWS) for column in COLUMNS}\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index('')\n        grid[column][row] = color\n\n        winner = check_winner(grid)\n        if winner:\n            return winner\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        if col not in board:\n            board[col] = []\n        board[col].append(color)\n        if len(board[col]) == 6:\n            board[col].pop(0)\n        if len(board[col]) >= 4:\n            for line in LINES:\n                if all((col, color) in line for col, color in board.items() if col in line):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[COLUMNS.index(column)][grid[COLUMNS.index(column)].index('')] = color\n    \n    for line in LINES:\n        colors = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        elif colors.count('Yellow') == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while board[row][COLUMNS.index(column)] != ' ':\n            row += 1\n        board[row][COLUMNS.index(column)] = color\n    \n    for line in LINES:\n        cells = [board[ROWS.index(row)][COLUMNS.index(column)] for column, row in line]\n        if len(set(cells)) == 1 and ' ' not in cells:\n            return cells[0]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        col, color = piece.split(\"_\")\n        col_index = ord(col) - ord('A')\n        \n        for row in range(6):\n            if board[row][col_index] is None:\n                board[row][col_index] = color\n                break\n    \n    for line in LINES:\n        colors = [board[row][ord(col) - ord('A')] for col, row in line]\n        \n        if colors.count('Red') == 4:\n            return 'Red'\n        elif colors.count('Yellow') == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = board[column_index].index(None)\n        board[column_index][row_index] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        row = next((i for i, val in enumerate(board[COLUMNS.index(column)]) if val is None), None)\n        \n        if row is None:\n            return \"Invalid move\"\n        \n        board[COLUMNS.index(column)][row] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # create a grid to track the positions of the pieces\n    grid = [[\"\" for _ in range(7)] for _ in range(6)]\n\n    # iterate over the pieces positions\n    for piece in pieces_positions:\n        # extract the column and color from the piece string\n        column, color = piece.split(\"_\")\n\n        # find the next empty row in the column\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - ord('A')] == \"\":\n                # place the piece in the grid\n                grid[row][ord(column) - ord('A')] = color\n                break\n\n        # check if the current player has won\n        for line in LINES:\n            # check if all the positions in the line are filled with the same color\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # if no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][next(i for i, cell in enumerate(grid[COLUMNS.index(column)][::-1]) if cell is None)] = color\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][ROW] == color for column, ROW in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(player):\n        for line in LINES:\n            if all(piece in pieces[player] for piece in line):\n                return player\n        return None\n\n    pieces = {\"Red\": set(), \"Yellow\": set()}\n    for piece in pieces_positions:\n        column, player = piece.split(\"_\")\n        row = str(len(pieces[player]))\n        pieces[player].add((column, row))\n        winner = check_winner(player)\n        if winner:\n            return winner\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split(\"_\")\n        board[col].append(color)\n        \n        for line in LINES:\n            if all(board[col] == color for col, color in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = []\n    yellow_positions = []\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_positions.append((COLUMNS.index(column), ROWS.count(column)))\n        elif color == 'Yellow':\n            yellow_positions.append((COLUMNS.index(column), ROWS.count(column)))\n\n    for line in LINES:\n        if all(position in red_positions for position in line):\n            return 'Red'\n        elif all(position in yellow_positions for position in line):\n            return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    else:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(len(ROWS)) if board[i][COLUMNS.index(column)] == ''), None)\n        if row is None:\n            return 'Invalid move'\n        board[row][COLUMNS.index(column)] = color\n    \n        for line in LINES:\n            if all(board[ROW][COLUMNS.index(COLUMN)] == color for (COLUMN, ROW) in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_win(player):\n        for line in LINES:\n            if all(pos in positions[player] for pos in line):\n                return True\n        return False\n    \n    positions = {'Yellow': set(), 'Red': set()}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = max((i for i in ROWS if (column, i) not in positions['Yellow'] and (column, i) not in positions['Red']))\n        positions[color].add((column, row))\n        \n        if check_win(color):\n            return color\n        \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = []\n    yellow_positions = []\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_positions.append((COLUMNS.index(column), ROWS.count(column)))\n        else:\n            yellow_positions.append((COLUMNS.index(column), ROWS.count(column)))\n\n    for line in LINES:\n        if all(position in red_positions for position in line):\n            return 'Red'\n        if all(position in yellow_positions for position in line):\n            return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n\n    return 'Draw'"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions))\n        if color == 'Red':\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n\n        if any(line.issubset(red_positions) for line in LINES):\n            return 'Red'\n        if any(line.issubset(yellow_positions) for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {c: [None] * len(ROWS) for c in COLUMNS}\n    for move in pieces_positions:\n        c, color = move.split('_')\n        board[c][board[c].index(None)] = color\n        for line in LINES:\n            if all(board[i][j] == color for i, j in line):\n                return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = {c: [None]*6 for c in COLUMNS}\n    players = ('Yellow', 'Red')\n    for move in pieces_positions:\n        column, player = move.split('_')\n        grid[column][grid[column].index(None)] = player\n        for line in LINES:\n            if all(grid[c][r] == player for c, r in line):\n                return player\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {}\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        row = next((i for i in reversed(range(6)) if (column, i) not in grid), None)\n        if row is not None:\n            grid[(column, row)] = color\n\n    for line in LINES:\n        if all(grid.get(cell) == 'Red' for cell in line):\n            return 'Red'\n        if all(grid.get(cell) == 'Yellow' for cell in line):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid to track the positions of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over each position in the pieces_positions list\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Find the column index in the grid\n        column_index = ord(column) - ord('A')\n        \n        # Find the row index in the grid by finding the first empty spot from the bottom\n        for row in range(5, -1, -1):\n            if grid[row][column_index] == '':\n                # Place the color in the grid\n                grid[row][column_index] = color\n                break\n                \n    # Iterate over all possible lines in the grid\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # If all colors in the line are the same and not empty, return the color as the winner\n        if all(color == colors[0] and color != '' for color in colors):\n            return colors[0]\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if grid[i][ord(column) - ord('A')] == ''), None)\n        if row is None:\n            continue\n        grid[row][ord(column) - ord('A')] = color\n        \n        for line in LINES:\n            if all(grid[j][ord(i) - ord('A')] == color for i, j in line):\n                return color\n        \n        if all(grid[i][j] for i in range(6) for j in range(7)):\n            return \"Draw\"\n        \n    return \"Draw\""
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n\n    def get_color(piece):\n        return piece.split('_')[1]\n\n    def get_column(piece):\n        return piece.split('_')[0]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n\n        for row in range(6):\n            if board[row][ord(column) - ord('A')] == '':\n                board[row][ord(column) - ord('A')] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    player = \"\"\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split(\"_\")[1]\n        \n        for row in range(6):\n            if board[row][column] is None:\n                board[row][column] = color\n                break\n        \n        if check_winner(board):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board):\n    for line in LINES:\n        colors = set()\n        for cell in line:\n            row, col = cell[1], ord(cell[0]) - ord('A')\n            colors.add(board[row][col])\n        \n        if len(colors) == 1 and None not in colors:\n            return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    # Create a board with empty cells\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        column_idx = ord(column) - ord('A')\n        \n        # Find the lowest empty row in the column\n        row = 5\n        while board[row][column_idx] != ' ':\n            row -= 1\n        \n        # Place the piece in the board\n        board[row][column_idx] = color\n    \n    # Check for a winner in each line\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] and color != ' ' for color in colors):\n            return colors[0]\n    \n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i in range(len(ROWS)) if grid[column][i] is None), None)\n        if row is None:\n            continue\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    winner = ''\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = ord(column) - ord('A')\n\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = players[color]\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[color] for column, row in line):\n                winner = color\n                break\n\n        if winner != '':\n            break\n\n    if winner == '':\n        winner = 'Draw'\n\n    return winner",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_idx][row] is None:\n                board[column_idx][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red_pieces = set()\n    yellow_pieces = set()\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_pieces.add((column, len(red_pieces)))\n        elif color == 'Yellow':\n            yellow_pieces.add((column, len(yellow_pieces)))\n            \n    for line in LINES:\n        if line.issubset(red_pieces):\n            return 'Red'\n        elif line.issubset(yellow_pieces):\n            return 'Yellow'\n        \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        col, color = piece.split(\"_\")\n        col_index = COLUMNS.index(col)\n        \n        for row in reversed(range(len(ROWS))):\n            if board[row][col_index] == \"\":\n                board[row][col_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.append((column, len(red_moves)))\n        else:\n            yellow_moves.append((column, len(yellow_moves)))\n    \n    for line in LINES:\n        red_count = 0\n        yellow_count = 0\n        \n        for move in red_moves:\n            if move in line:\n                red_count += 1\n                if red_count >= 4:\n                    return 'Red'\n        \n        for move in yellow_moves:\n            if move in line:\n                yellow_count += 1\n                if yellow_count >= 4:\n                    return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position.split('_')[1]\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {c: [' ']*len(ROWS) for c in COLUMNS}\n    for pos in pieces_positions:\n        c, color = pos.split('_')\n        board[c][board[c].index(' ')] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column = COLUMNS.index(column)\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    for line in LINES:\n        for column, row in line:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return \"Draw\""
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n\n    def get_color(piece):\n        return piece.split('_')[1]\n\n    def get_column(piece):\n        return piece.split('_')[0]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n\n        for row in range(6):\n            if board[row][ord(column) - ord('A')] == '':\n                board[row][ord(column) - ord('A')] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    player = \"\"\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece.split(\"_\")[1]\n        \n        for row in range(6):\n            if board[row][column] is None:\n                board[row][column] = color\n                break\n        \n        if check_winner(board):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board):\n    for line in LINES:\n        colors = set()\n        for cell in line:\n            row, col = cell[1], ord(cell[0]) - ord('A')\n            colors.add(board[row][col])\n        \n        if len(colors) == 1 and None not in colors:\n            return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((i for i in range(len(ROWS)) if grid[column][i] is None), None)\n        if row is None:\n            continue\n        grid[column][row] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    winner = ''\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = ord(column) - ord('A')\n\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = players[color]\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == players[color] for column, row in line):\n                winner = color\n                break\n\n        if winner != '':\n            break\n\n    if winner == '':\n        winner = 'Draw'\n\n    return winner",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_idx][row] is None:\n                board[column_idx][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    red_pieces = set()\n    yellow_pieces = set()\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_pieces.add((column, len(red_pieces)))\n        elif color == 'Yellow':\n            yellow_pieces.add((column, len(yellow_pieces)))\n            \n    for line in LINES:\n        if line.issubset(red_pieces):\n            return 'Red'\n        elif line.issubset(yellow_pieces):\n            return 'Yellow'\n        \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(5, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        col, color = piece.split(\"_\")\n        col_index = COLUMNS.index(col)\n        \n        for row in reversed(range(len(ROWS))):\n            if board[row][col_index] == \"\":\n                board[row][col_index] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.append((column, len(red_moves)))\n        else:\n            yellow_moves.append((column, len(yellow_moves)))\n    \n    for line in LINES:\n        red_count = 0\n        yellow_count = 0\n        \n        for move in red_moves:\n            if move in line:\n                red_count += 1\n                if red_count >= 4:\n                    return 'Red'\n        \n        for move in yellow_moves:\n            if move in line:\n                yellow_count += 1\n                if yellow_count >= 4:\n                    return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n\n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position.split('_')[1]\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {c: [' ']*len(ROWS) for c in COLUMNS}\n    for pos in pieces_positions:\n        c, color = pos.split('_')\n        board[c][board[c].index(' ')] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    def check_win(pieces):\n        for line in LINES:\n            if all(pos in pieces for pos in line):\n                return True\n        return False\n    \n    red_pieces = set()\n    yellow_pieces = set()\n    \n    for piece in pieces_positions:\n        col, color = piece.split(\"_\")\n        row = max((row for row in ROWS if (col, row) not in red_pieces and (col, row) not in yellow_pieces))\n        if color == \"Red\":\n            red_pieces.add((col, row))\n            if check_win(red_pieces):\n                return \"Red\"\n        else:\n            yellow_pieces.add((col, row))\n            if check_win(yellow_pieces):\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i, val in enumerate(board[COLUMNS.index(column)]) if val is None), None)\n        \n        if row is not None:\n            board[COLUMNS.index(column)][row] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    \n    return \"Draw\""
        ]
    }
}