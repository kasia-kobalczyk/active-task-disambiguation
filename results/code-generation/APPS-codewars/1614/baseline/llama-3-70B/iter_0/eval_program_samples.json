{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for row in range(5, -1, -1):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos[1]][ord(pos[0]) - 65] == 'Yellow')\n        red_count = sum(1 for pos in line if board[pos[1]][ord(pos[0]) - 65] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in range(6):\n            if board[row][ord(column) - 65] == '':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if board[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n            elif board[row][ord(column) - 65] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for i in range(6):\n            if game_board[i][ord(column) - 65] == ' ':\n                game_board[i][ord(column) - 65] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(game_board[j][ord(i) - 65] == color for i, j in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        col_idx = ord(col) - 65\n        for row in range(5, -1, -1):\n            if board[row][col_idx] == '':\n                board[row][col_idx] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for pos in line:\n            col, row = pos\n            col_idx = ord(col) - 65\n            row_idx = 5 - row\n            if board[row_idx][col_idx] == 'Yellow':\n                yellow += 1\n            elif board[row_idx][col_idx] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return 'Yellow'\n        elif red >= 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(col) - 65] == '':\n                board[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red_count = sum(1 for pos in line if board[pos[1]][ord(pos[0]) - 65] == 'Red')\n        yellow_count = sum(1 for pos in line if board[pos[1]][ord(pos[0]) - 65] == 'Yellow')\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(col) - 65] == ' ':\n                board[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for pos in line:\n            if board[pos[1]][ord(pos[0]) - 65] == 'Yellow':\n                yellow += 1\n            elif board[pos[1]][ord(pos[0]) - 65] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return 'Yellow'\n        if red >= 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - 65\n        for row in range(5, -1, -1):\n            if grid[row][column] == '':\n                grid[row][column] = piece[2:]\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for pos in line:\n            if pos[0] < 'A' or pos[1] < 0:\n                continue\n            column = ord(pos[0]) - 65\n            row = pos[1]\n            if grid[row][column] == 'Yellow':\n                yellow += 1\n            elif grid[row][column] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return \"Yellow\"\n        if red >= 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(col, ROWS[row])] == '':\n                board[(col, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for pos in line:\n            if board[pos] == 'Yellow':\n                yellow += 1\n            elif board[pos] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        if red == 4:\n            return 'Red'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return 'Game has not finished'",
            "def who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] is None:\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            if board[cell[1]][ord(cell[0]) - 65] == 'Yellow':\n                yellow += 1\n            elif board[cell[1]][ord(cell[0]) - 65] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        if red == 4:\n            return \"Red\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_state = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_state[(column, row)] is None:\n                game_state[(column, row)] = color\n                break\n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for position in line:\n            if game_state[position] == 'Red':\n                red_count += 1\n            elif game_state[position] == 'Yellow':\n                yellow_count += 1\n            if red_count == 4:\n                return 'Red'\n            if yellow_count == 4:\n                return 'Yellow'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return None",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == '':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        colors = [board[j][i] for i, j in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - 65] == '':\n                grid[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for column, row in line:\n            if grid[row][ord(column) - 65] == 'Red':\n                red_count += 1\n            elif grid[row][ord(column) - 65] == 'Yellow':\n                yellow_count += 1\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        row = next(i for i in range(6) if board[i][ord(column) - 65] == ' ')\n        board[row][ord(column) - 65] = color\n    for line in LINES:\n        yellow = all(board[r][COLUMNS.index(c)] == 'Yellow' for c, r in line)\n        red = all(board[r][COLUMNS.index(c)] == 'Red' for c, r in line)\n        if yellow:\n            return \"Yellow\"\n        if red:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for i in range(5, -1, -1):\n            if game_board[i][ord(column) - 65] == '':\n                game_board[i][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if game_board[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n            elif game_board[row][ord(column) - 65] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return ''",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow_count, red_count = 0, 0\n        for pos in line:\n            if board[pos] == 'Yellow':\n                yellow_count += 1\n            elif board[pos] == 'Red':\n                red_count += 1\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = piece.split('_')[1]\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            column, row = ord(cell[0]) - ord('A'), cell[1]\n            if board[row][column] == 'Yellow':\n                yellow += 1\n            elif board[row][column] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return 'Yellow'\n        if red >= 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None]*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column = COLUMNS.index(piece[0])\n        for row in range(5, -1, -1):\n            if grid[row][column] is None:\n                grid[row][column] = piece[2:]\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            column, row = COLUMNS.index(cell[0]), cell[1]\n            if grid[row][column] == 'Yellow':\n                yellow += 1\n            elif grid[row][column] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return 'Yellow'\n        elif red >= 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[-4:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[row])] is None:\n                board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        if len(set(board[coord] for coord in line if board[coord] is not None)) == 1 and board[next(iter(line))] is not None:\n            return board[next(iter(line))].split(\"_\")[1]\n    if all(board[coord] is not None for coord in board):\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    game_board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        col_idx = ord(col) - 65\n        for row in range(5, -1, -1):\n            if game_board[row][col_idx] == '':\n                game_board[row][col_idx] = color\n                break\n    \n    for line in LINES:\n        yellow_count = sum(1 for col, row in line if game_board[row][ord(col) - 65] == 'Yellow')\n        red_count = sum(1 for col, row in line if game_board[row][ord(col) - 65] == 'Red')\n        \n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    else:\n        return None",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for i in range(5, -1, -1):\n            if board[i][column_index] == '':\n                board[i][column_index] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for pos in line:\n            column_index = ord(pos[0]) - 65\n            row_index = pos[1]\n            if board[row_index][column_index] == 'Red':\n                red += 1\n            elif board[row_index][column_index] == 'Yellow':\n                yellow += 1\n        if red >= 4:\n            return \"Red\"\n        elif yellow >= 4:\n            return \"Yellow\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board.get(position) for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        if len(set(grid[pos] for pos in line)) == 1 and grid[next(iter(line))] is not None:\n            return grid[next(iter(line))]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(col, ROWS[row])] == '':\n                board[(col, ROWS[row])] = color\n                break\n    for line in LINES:\n        if len(set(board[pos] for pos in line)) == 1 and board[list(line)[0]] != '':\n            return board[list(line)[0]]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(col, ROWS[row])] == '':\n                board[(col, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for pos in line:\n            if board[pos] == 'Yellow':\n                yellow += 1\n            elif board[pos] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return \"Yellow\"\n        elif red >= 4:\n            return \"Red\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"\"",
            "def who_is_winner(pieces_positions):\n    game_board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        column_index = ord(column) - 65\n        for row in range(5, -1, -1):\n            if game_board[row][column_index] == '':\n                game_board[row][column_index] = color\n                break\n    for line in LINES:\n        red_count = sum(1 for position in line if game_board[position[1]][ord(position[0]) - 65] == 'Red')\n        yellow_count = sum(1 for position in line if game_board[position[1]][ord(position[0]) - 65] == 'Yellow')\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    game_board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for i in range(5, -1, -1):\n            if game_board[i][ord(col) - 65] == '':\n                game_board[i][ord(col) - 65] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for pos in line:\n            col, row = pos\n            col, row = ord(col) - 65, row\n            if game_board[row][col] == 'Yellow':\n                yellow += 1\n            elif game_board[row][col] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        col_idx = ord(col) - 65\n        for row in range(5, -1, -1):\n            if board[row][col_idx] is None:\n                board[row][col_idx] = color\n                break\n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for col, row in line:\n            col_idx, row_idx = ord(col) - 65, 5 - row\n            if board[row_idx][col_idx] == 'Red':\n                red_count += 1\n            elif board[row_idx][col_idx] == 'Yellow':\n                yellow_count += 1\n            if red_count == 4:\n                return 'Red'\n            if yellow_count == 4:\n                return 'Yellow'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return None",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [grid.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * 6 for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], j): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[cell] for cell in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for j in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[j])] is None:\n                board[(column, ROWS[j])] = color\n                break\n    for line in LINES:\n        colors = [board[spot] for spot in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    board = {(c, r): None for c in COLUMNS for r in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for r in reversed(list(ROWS)):\n            if board[(col, r)] is None:\n                board[(col, r)] = color\n                break\n    for line in LINES:\n        colors = [board.get(cell) for cell in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(board.get(pos) == color for pos in line):\n                return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for position in line:\n            if game_board[position] == \"Red\":\n                red += 1\n            elif game_board[position] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, ROWS[row])] is None:\n                game_board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if game_board[pos] == 'Yellow')\n        red_count = sum(1 for pos in line if game_board[pos] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[row])] is None:\n                board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        colors = [board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): '' for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    grid = {col: [''] * 6 for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[col][row] == '':\n                grid[col][row] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for pos in line:\n            col, row = pos\n            if grid[col][row] == 'Red':\n                red += 1\n            elif grid[col][row] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        yellow_count, red_count = 0, 0\n        for col, row in line:\n            if board[(col, row)] == \"Yellow\":\n                yellow_count += 1\n            elif board[(col, row)] == \"Red\":\n                red_count += 1\n            if yellow_count == 4:\n                return \"Yellow\"\n            if red_count == 4:\n                return \"Red\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        for i in range(len(COLUMNS)):\n            if piece[0] == COLUMNS[i]:\n                for j in range(len(ROWS) - 1, -1, -1):\n                    if board[(COLUMNS[i], ROWS[j])] == '':\n                        board[(COLUMNS[i], ROWS[j])] = piece[2:]\n                        break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            if board[cell] == 'Yellow':\n                yellow += 1\n            elif board[cell] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return 'Yellow'\n        elif red >= 4:\n            return 'Red'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return ''",
            "def who_is_winner(pieces_positions):\n    game_board = {(COLUMNS[i], ROWS[j]): \"\" for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if game_board[(column, ROWS[row])] == \"\":\n                game_board[(column, ROWS[row])] = color\n                break\n                \n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for cell in line:\n            if game_board[cell] == \"Red\":\n                red_count += 1\n            elif game_board[cell] == \"Yellow\":\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in reversed(range(6)):\n            if grid[row][ord(col) - 65] is None:\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for col, row in line:\n            if grid[row][ord(col) - 65] == 'Red':\n                red += 1\n            elif grid[row][ord(col) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\""
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for column, row in line:\n            if board[(column, row)] == \"Red\":\n                red_count += 1\n            elif board[(column, row)] == \"Yellow\":\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for i in range(5, -1, -1):\n            if game_board[i][ord(column) - 65] == '':\n                game_board[i][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if game_board[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n            elif game_board[row][ord(column) - 65] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for row in range(5, -1, -1):\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if grid[pos[1]][ord(pos[0]) - 65] == 'Yellow')\n        red_count = sum(1 for pos in line if grid[pos[1]][ord(pos[0]) - 65] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for i in range(5, -1, -1):\n            if grid[i][ord(col) - 65] == '':\n                grid[i][ord(col) - 65] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[j][ord(i) - 65] == color for i, j in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[row][ord(column) - ord('A')] is None:\n                board[row][ord(column) - ord('A')] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for column, row in line if board[row][ord(column) - ord('A')] == 'Yellow')\n        red_count = sum(1 for column, row in line if board[row][ord(column) - ord('A')] == 'Red')\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None]*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - 65\n        for row in reversed(range(6)):\n            if board[row][column] is None:\n                board[row][column] = piece[2:]\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            column, row = ord(cell[0]) - 65, cell[1]\n            if board[row][column] == 'Yellow':\n                yellow += 1\n            elif board[row][column] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        column_index = ord(column) - 65\n        for row in range(5, -1, -1):\n            if game_board[row][column_index] == '':\n                game_board[row][column_index] = color\n                break\n    for line in LINES:\n        red_count = sum(1 for position in line if game_board[position[1]][ord(position[0]) - 65] == 'Red')\n        yellow_count = sum(1 for position in line if game_board[position[1]][ord(position[0]) - 65] == 'Yellow')\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - 65\n        for row in range(5, -1, -1):\n            if grid[row][column] == '':\n                grid[row][column] = piece[2:]\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for pos in line:\n            if pos[0] < 'A' or pos[0] > 'G' or pos[1] < 0 or pos[1] > 5:\n                continue\n            column = ord(pos[0]) - 65\n            row = pos[1]\n            if grid[row][column] == 'Red':\n                red += 1\n            elif grid[row][column] == 'Yellow':\n                yellow += 1\n        if red >= 4:\n            return \"Red\"\n        if yellow >= 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * 6 for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(board.get(pos) == color for pos in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for position in line:\n            if game_board[position] == \"Red\":\n                red += 1\n            elif game_board[position] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if grid[(column, row)] is None:\n                grid[(column, row)] = color\n                break\n    for line in LINES:\n        red_count = sum(1 for pos in line if grid[pos] == 'Red')\n        yellow_count = sum(1 for pos in line if grid[pos] == 'Yellow')\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    game_board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, ROWS[row])] is None:\n                game_board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if game_board[pos] == 'Yellow')\n        red_count = sum(1 for pos in line if game_board[pos] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if grid[(column, row)] is None:\n                grid[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [grid.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for column, row in line:\n            if board[(column, row)] == \"Red\":\n                red_count += 1\n            elif board[(column, row)] == \"Yellow\":\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for position in line if board[position] == 'Yellow')\n        red_count = sum(1 for position in line if board[position] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): '' for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for position in line if board[position] == 'Yellow')\n        red_count = sum(1 for position in line if board[position] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        for i in range(len(COLUMNS)):\n            if piece[0] == COLUMNS[i]:\n                for j in range(len(ROWS) - 1, -1, -1):\n                    if grid[(COLUMNS[i], ROWS[j])] == '':\n                        grid[(COLUMNS[i], ROWS[j])] = piece[2:]\n                        break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            if grid[cell] == 'Yellow':\n                yellow += 1\n            elif grid[cell] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        if red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(i, j): '' for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] == '':\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(game_board[pos] == color for pos in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [board[pos] for pos in line]\n        if all(color == colors[0] for color in colors) and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {col: [''] * ROWS.stop for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(ROWS.stop - 1, -1, -1):\n            if grid[col][row] == '':\n                grid[col][row] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for col, row in line:\n            if grid[col][row] == 'Yellow':\n                yellow += 1\n            elif grid[col][row] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        if red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - 65] is None:\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            col, row = ord(column) - 65, row\n            if grid[row][col] == 'Red':\n                red += 1\n            elif grid[row][col] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        if yellow == 4:\n            return 'Yellow'\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        if len(set(grid[pos] for pos in line)) == 1 and grid[next(iter(line))] is not None:\n            return grid[next(iter(line))]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for i in range(5, -1, -1):\n            if game_board[i][ord(column) - 65] == '':\n                game_board[i][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if game_board[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n            elif game_board[row][ord(column) - 65] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if grid[(col, ROWS[row])] == '':\n                grid[(col, ROWS[row])] = color\n                break\n    for line in LINES:\n        colors = [grid[pos] for pos in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[row][ord(column) - ord('A')] is None:\n                board[row][ord(column) - ord('A')] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for column, row in line if board[row][ord(column) - ord('A')] == 'Yellow')\n        red_count = sum(1 for column, row in line if board[row][ord(column) - ord('A')] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None]*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - 65\n        for row in reversed(range(6)):\n            if board[row][column] is None:\n                board[row][column] = piece[2:]\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            column, row = ord(cell[0]) - 65, cell[1]\n            if board[row][column] == 'Yellow':\n                yellow += 1\n            elif board[row][column] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return 'Yellow'\n        if red >= 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * 6 for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[(column, row)] is None:\n                grid[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [grid.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(board.get(pos) == color for pos in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for position in line:\n            if game_board[position] == \"Red\":\n                red += 1\n            elif game_board[position] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): '' for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            if board[(column, row)] == 'Red':\n                red += 1\n            elif board[(column, row)] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for j in range(len(ROWS) - 1, -1, -1):\n            if grid[(column, ROWS[j])] == '':\n                grid[(column, ROWS[j])] = color\n                break\n    for line in LINES:\n        colors = [grid[pos] for pos in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {col: [\"\"] * 6 for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[col][row] == \"\":\n                grid[col][row] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for col, row in line:\n            if grid[col][row] == \"Red\":\n                red += 1\n            elif grid[col][row] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {column: [''] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if game_board[column][row] == '':\n                game_board[column][row] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for column, row in line if game_board[column][row] == 'Yellow')\n        red_count = sum(1 for column, row in line if game_board[column][row] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - 65] is None:\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            col_index, row_index = ord(column) - 65, row\n            if grid[row_index][col_index] == 'Red':\n                red += 1\n            elif grid[row_index][col_index] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    game_board = [[None]*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - ord('A')\n        for i in range(6):\n            if game_board[i][column_index] is None:\n                game_board[i][column_index] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if game_board[row][ord(column) - ord('A')] == 'Yellow':\n                yellow += 1\n            elif game_board[row][ord(column) - ord('A')] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        if red == 4:\n            return \"Red\"\n    return \"Draw\""
        ]
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == '':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        colors = [board[j][i] for i, j in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - 65] == '':\n                grid[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for column, row in line:\n            if grid[row][ord(column) - 65] == 'Red':\n                red_count += 1\n            elif grid[row][ord(column) - 65] == 'Yellow':\n                yellow_count += 1\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    game_board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for i in range(6):\n            if game_board[i][ord(column) - 65] == '':\n                game_board[i][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            column, row = cell\n            if game_board[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n            elif game_board[row][ord(column) - 65] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        row = next(i for i in range(6) if board[i][ord(column) - 65] == ' ')\n        board[row][ord(column) - 65] = color\n    for line in LINES:\n        yellow = all(board[r][COLUMNS.index(c)] == 'Yellow' for c, r in line)\n        red = all(board[r][COLUMNS.index(c)] == 'Red' for c, r in line)\n        if yellow:\n            return \"Yellow\"\n        if red:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow_count, red_count = 0, 0\n        for pos in line:\n            if board[pos] == 'Yellow':\n                yellow_count += 1\n            elif board[pos] == 'Red':\n                red_count += 1\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = piece.split('_')[1]\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            column, row = ord(cell[0]) - ord('A'), cell[1]\n            if board[row][column] == 'Yellow':\n                yellow += 1\n            elif board[row][column] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return \"Yellow\"\n        if red >= 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None]*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column = COLUMNS.index(piece[0])\n        for row in range(5, -1, -1):\n            if grid[row][column] is None:\n                grid[row][column] = piece[2:]\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            column, row = COLUMNS.index(cell[0]), cell[1]\n            if grid[row][column] == 'Yellow':\n                yellow += 1\n            elif grid[row][column] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return \"Yellow\"\n        elif red >= 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        col_idx = ord(col) - 65\n        for row in range(5, -1, -1):\n            if game_board[row][col_idx] == '':\n                game_board[row][col_idx] = color\n                break\n    \n    for line in LINES:\n        yellow_count = sum(1 for col, row in line if game_board[row][ord(col) - 65] == 'Yellow')\n        red_count = sum(1 for col, row in line if game_board[row][ord(col) - 65] == 'Red')\n        \n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    else:\n        return None",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for i in range(5, -1, -1):\n            if board[i][column_index] == '':\n                board[i][column_index] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for pos in line:\n            column_index = ord(pos[0]) - 65\n            row_index = pos[1]\n            if board[row_index][column_index] == 'Red':\n                red += 1\n            elif board[row_index][column_index] == 'Yellow':\n                yellow += 1\n        if red >= 4:\n            return \"Red\"\n        elif yellow >= 4:\n            return \"Yellow\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): \"\" for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[-4:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[row])] == \"\":\n                board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for piece in line:\n            if board[piece] == \"Yellow\":\n                yellow += 1\n            elif board[piece] == \"Red\":\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for i in range(5, -1, -1):\n            if board[i][ord(column) - 65] == '':\n                board[i][ord(column) - 65] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[j][ord(i) - 65] == color for i, j in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * len(ROWS) for column in COLUMNS}\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in reversed(ROWS):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"\"",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * 6 for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split('_')[1]\n        for row in range(5, -1, -1):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    game_board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for row in range(5, -1, -1):\n            if game_board[row][column_index] == ' ':\n                game_board[row][column_index] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for x, y in line if game_board[y][ord(x) - 65] == 'Yellow')\n        red_count = sum(1 for x, y in line if game_board[y][ord(x) - 65] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if board[(column, row)] == 'Yellow':\n                yellow += 1\n            elif board[(column, row)] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == ' ':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for x, y in line if board[y][ord(x) - 65] == 'Yellow')\n        red_count = sum(1 for x, y in line if board[y][ord(x) - 65] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return None",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for i in range(5, -1, -1):\n            if board[i][column_index] == '':\n                board[i][column_index] = color\n                break\n    for line in LINES:\n        yellow_count, red_count = 0, 0\n        for column, row in line:\n            column_index = ord(column) - 65\n            if board[row][column_index] == 'Yellow':\n                yellow_count += 1\n            elif board[row][column_index] == 'Red':\n                red_count += 1\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return None",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - 65] == ' ':\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for col, row in line:\n            if grid[row][ord(col) - 65] == 'Red':\n                red += 1\n            elif grid[row][ord(col) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        if yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ']*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = 'ABCDEFG'.index(column)\n        for row in range(6):\n            if board[row][column_index] == ' ':\n                board[row][column_index] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[r][c] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {col: [' ' for _ in range(6)] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[col][row] == ' ':\n                grid[col][row] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[col][row] == color for col, row in line):\n                return color\n    if all(' ' not in col for col in grid.values()):\n        return \"Draw\"\n    return None"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * 6 for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [grid.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], j): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[cell] for cell in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(c, r): None for c in COLUMNS for r in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for r in reversed(list(ROWS)):\n            if board[(col, r)] is None:\n                board[(col, r)] = color\n                break\n    for line in LINES:\n        colors = [board.get(cell) for cell in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(board.get(pos) == color for pos in line):\n                return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for j in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[j])] is None:\n                board[(column, ROWS[j])] = color\n                break\n    for line in LINES:\n        colors = [board[spot] for spot in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, ROWS[row])] is None:\n                game_board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if game_board[pos] == 'Yellow')\n        red_count = sum(1 for pos in line if game_board[pos] == 'Red')\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for position in line:\n            if game_board[position] == \"Red\":\n                red += 1\n            elif game_board[position] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[row])] is None:\n                board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        colors = [board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        yellow_count, red_count = 0, 0\n        for col, row in line:\n            if board[(col, row)] == \"Yellow\":\n                yellow_count += 1\n            elif board[(col, row)] == \"Red\":\n                red_count += 1\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): '' for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    grid = {col: [''] * 6 for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[col][row] == '':\n                grid[col][row] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for pos in line:\n            col, row = pos\n            if grid[col][row] == 'Red':\n                red += 1\n            elif grid[col][row] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        for i in range(len(COLUMNS)):\n            if piece[0] == COLUMNS[i]:\n                for j in range(len(ROWS) - 1, -1, -1):\n                    if board[(COLUMNS[i], ROWS[j])] == '':\n                        board[(COLUMNS[i], ROWS[j])] = piece[2:]\n                        break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            if board[cell] == 'Yellow':\n                yellow += 1\n            elif board[cell] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return 'Yellow'\n        elif red >= 4:\n            return 'Red'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return ''",
            "def who_is_winner(pieces_positions):\n    game_board = {(COLUMNS[i], ROWS[j]): \"\" for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if game_board[(column, ROWS[row])] == \"\":\n                game_board[(column, ROWS[row])] = color\n                break\n                \n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for cell in line:\n            if game_board[cell] == \"Red\":\n                red_count += 1\n            elif game_board[cell] == \"Yellow\":\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in reversed(range(6)):\n            if grid[row][ord(col) - 65] is None:\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for col, row in line:\n            if grid[row][ord(col) - 65] == 'Red':\n                red += 1\n            elif grid[row][ord(col) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[row])] is None:\n                board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if board[(column, row)] == \"Yellow\":\n                yellow += 1\n            elif board[(column, row)] == \"Red\":\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): \"\" for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if board[(column, row)] == \"\":\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for cell in line:\n            if board[cell] == \"Red\":\n                red += 1\n            elif board[cell] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for col, row in line:\n            if grid[(col, row)] == 'Yellow':\n                yellow += 1\n            elif grid[(col, row)] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos] == \"Yellow\")\n        red_count = sum(1 for pos in line if board[pos] == \"Red\")\n        if yellow_count == 4:\n            return \"Yellow\"\n        if red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == ' ':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[j][ord(i) - 65] == color for i, j in line):\n                return color\n    return 'Draw' if len(pieces_positions) == 42 else None",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        if len({board[pos] for pos in line}) == 1 and board[next(iter(line))] is not None:\n            return board[next(iter(line))]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        for column in COLUMNS:\n            if piece[0] == column:\n                for row in reversed(list(ROWS)):\n                    if board[(column, row)] is None:\n                        board[(column, row)] = piece[2:]\n                        break\n    for line in LINES:\n        colors = [board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for position in pieces_positions:\n        column, color = position[0], position[2:]\n        for row in reversed(ROWS):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[position] for position in line]\n        if all(color == colors[0] and color is not None for color in colors):\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[coord] == color for coord in line):\n                return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        board[column].append(color)\n    \n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if row < len(board[column]):\n                if board[column][row] == 'Yellow':\n                    yellow += 1\n                elif board[column][row] == 'Red':\n                    red += 1\n        if yellow >= 4:\n            return \"Yellow\"\n        elif red >= 4:\n            return \"Red\"\n    return \"Draw\""
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * 6 for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(board.get(pos) == color for pos in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[(column, row)] is None:\n                grid[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [grid[coord] for coord in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for position in line:\n            if game_board[position] == \"Red\":\n                red += 1\n            elif game_board[position] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if grid[(column, row)] is None:\n                grid[(column, row)] = color\n                break\n    for line in LINES:\n        red_count = sum(1 for pos in line if grid[pos] == 'Red')\n        yellow_count = sum(1 for pos in line if grid[pos] == 'Yellow')\n        if red_count == 4:\n            return 'Red'\n        if yellow_count == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    game_board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, ROWS[row])] is None:\n                game_board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if game_board[pos] == 'Yellow')\n        red_count = sum(1 for pos in line if game_board[pos] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [board[pos] for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for column, row in line:\n            if board[(column, row)] == \"Red\":\n                red_count += 1\n            elif board[(column, row)] == \"Yellow\":\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): '' for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for position in line if board[position] == 'Yellow')\n        red_count = sum(1 for position in line if board[position] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for position in line if board[position] == 'Yellow')\n        red_count = sum(1 for position in line if board[position] == 'Red')\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(i, j): '' for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] == '':\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(game_board[pos] == color for pos in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - 65] == ' ':\n                grid[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for cell in line:\n            column, row = cell\n            if grid[row][ord(column) - 65] == 'Red':\n                red += 1\n            elif grid[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): \"\" for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if board[(column, row)] == \"\":\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            if board[cell] == \"Yellow\":\n                yellow += 1\n            elif board[cell] == \"Red\":\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for col, row in line:\n            if grid[(col, row)] == 'Yellow':\n                yellow += 1\n            elif grid[(col, row)] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): '' for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos] == 'Yellow')\n        red_count = sum(1 for pos in line if board[pos] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - ord('A')] == ' ':\n                board[row][ord(column) - ord('A')] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            column, row = cell\n            if board[row][ord(column) - ord('A')] == 'Yellow':\n                yellow += 1\n            elif board[row][ord(column) - ord('A')] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == '':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red_count = sum(1 for x, y in line if board[y][ord(x) - 65] == 'Red')\n        yellow_count = sum(1 for x, y in line if board[y][ord(x) - 65] == 'Yellow')\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for position in pieces_positions:\n        column, color = position[0], position[2:]\n        for row in reversed(ROWS):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[coord] == color for coord in line):\n                return color\n    return \"Draw\""
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * 6 for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for position in line:\n            if game_board[position] == \"Red\":\n                red += 1\n            elif game_board[position] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(column, row): None for column in COLUMNS for row in ROWS}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if grid[(column, row)] is None:\n                grid[(column, row)] = color\n                break\n    \n    for line in LINES:\n        colors = [grid.get(pos, None) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = [[None]*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - ord('A')\n        for i in range(5, -1, -1):\n            if game_board[i][column_index] is None:\n                game_board[i][column_index] = color\n                break\n    for line in LINES:\n        colors = [game_board[j][COLUMNS.index(i)] for i, j in line if i in COLUMNS and j in ROWS]\n        if len(colors) == 4 and len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            if board[(column, row)] == 'Red':\n                red += 1\n            elif board[(column, row)] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): '' for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for j in range(len(ROWS) - 1, -1, -1):\n            if grid[(column, ROWS[j])] == '':\n                grid[(column, ROWS[j])] = color\n                break\n    for line in LINES:\n        colors = [grid[pos] for pos in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {col: [\"\"] * 6 for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[col][row] == \"\":\n                grid[col][row] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for col, row in line:\n            if grid[col][row] == \"Red\":\n                red += 1\n            elif grid[col][row] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {column: [''] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if game_board[column][row] == '':\n                game_board[column][row] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for column, row in line if game_board[column][row] == 'Yellow')\n        red_count = sum(1 for column, row in line if game_board[column][row] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - 65] is None:\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            col_index, row_index = ord(column) - 65, row\n            if grid[row_index][col_index] == 'Red':\n                red += 1\n            elif grid[row_index][col_index] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[row])] is None:\n                board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if board[(column, row)] == \"Yellow\":\n                yellow += 1\n            elif board[(column, row)] == \"Red\":\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(piece) for piece in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [grid[pos] for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {column: [' ' for _ in range(6)] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for i in range(5, -1, -1):\n            if board[column][i] == ' ':\n                board[column][i] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != ' ':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for position in pieces_positions:\n        column, color = position[0], position[2:]\n        for row in reversed(ROWS):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == ' ':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for cell in line:\n            column, row = cell\n            if board[row][ord(column) - 65] == 'Red':\n                red += 1\n            elif board[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column] for column in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\""
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos] == 'Yellow')\n        red_count = sum(1 for pos in line if board[pos] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'"
        ]
    },
    "2": {
        "0": [
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for i in range(5, -1, -1):\n            if board[i][ord(column) - 65] == '':\n                board[i][ord(column) - 65] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[j][ord(i) - 65] == color for i, j in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for row in range(5, -1, -1):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos[1]][ord(pos[0]) - 65] == 'Yellow')\n        red_count = sum(1 for pos in line if board[pos[1]][ord(pos[0]) - 65] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == ' ':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for x, y in line if board[y][ord(x) - 65] == 'Yellow')\n        red_count = sum(1 for x, y in line if board[y][ord(x) - 65] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if board[(column, row)] == 'Yellow':\n                yellow += 1\n            elif board[(column, row)] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * len(ROWS) for column in COLUMNS}\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in reversed(ROWS):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"\"",
            "def who_is_winner(pieces_positions):\n    game_board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for row in range(5, -1, -1):\n            if game_board[row][column_index] == ' ':\n                game_board[row][column_index] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for x, y in line if game_board[y][ord(x) - 65] == 'Yellow')\n        red_count = sum(1 for x, y in line if game_board[y][ord(x) - 65] == 'Red')\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for i in range(5, -1, -1):\n            if board[i][column_index] == '':\n                board[i][column_index] = color\n                break\n    for line in LINES:\n        yellow_count, red_count = 0, 0\n        for column, row in line:\n            column_index = ord(column) - 65\n            if board[row][column_index] == 'Yellow':\n                yellow_count += 1\n            elif board[row][column_index] == 'Red':\n                red_count += 1\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {col: [' ']*6 for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for i in range(5, -1, -1):\n            if grid[col][i] == ' ':\n                grid[col][i] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for col, row in line:\n            if grid[col][row] == 'Yellow':\n                yellow += 1\n            elif grid[col][row] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - 65] == ' ':\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for col, row in line:\n            if grid[row][ord(col) - 65] == 'Red':\n                red += 1\n            elif grid[row][ord(col) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ']*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = 'ABCDEFG'.index(column)\n        for row in range(6):\n            if board[row][column_index] == ' ':\n                board[row][column_index] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[r][c] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == '':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            if board[row][ord(column) - 65] == 'Red':\n                red += 1\n            elif board[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - ord('A')] == ' ':\n                board[row][ord(column) - ord('A')] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[r][c] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for i in range(6):\n            if grid[i][ord(column) - 65] == '':\n                grid[i][ord(column) - 65] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[j][ord(i) - 65] == color for i, j in line):\n                return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"\"",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(6):\n            if board[row][ord(column) - ord('A')] == '':\n                board[row][ord(column) - ord('A')] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[r][c] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[-4:]\n        for row in range(6):\n            if board[row][ord(column) - 65] == ' ':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[r][c] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        col_index = ord(col) - 65\n        for i in range(5, -1, -1):\n            if board[i][col_index] == ' ':\n                board[i][col_index] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos[1]][ord(pos[0]) - 65] == 'Yellow')\n        red_count = sum(1 for pos in line if board[pos[1]][ord(pos[0]) - 65] == 'Red')\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[-4:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == ' ':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if board[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n            elif board[row][ord(column) - 65] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return 'Yellow'\n        elif red >= 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        if len(set(board[point] for point in line if board[point] is not None)) == 1 and board[next(iter(line))] is not None:\n            return board[next(iter(line))]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    game_board = {column: [''] * ROWS for column in COLUMNS}\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if game_board[column][row] == '':\n                game_board[column][row] = color\n                break\n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for column, row in line:\n            if game_board[column][row] == 'Red':\n                red_count += 1\n            elif game_board[column][row] == 'Yellow':\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[-4:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[point] for point in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0][:-1].capitalize()\n    if all(board[point] is not None for point in board):\n        return \"Draw\"\n    return None"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[row])] is None:\n                board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        colors = [board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    board = {column: [''] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[column][row] == '':\n                board[column][row] = color\n                break\n    for line in LINES:\n        colors = [board[column][row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): '' for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    grid = {col: [''] * 6 for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[col][row] == '':\n                grid[col][row] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for pos in line:\n            col, row = pos\n            if grid[col][row] == 'Red':\n                red += 1\n            elif grid[col][row] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        yellow_count, red_count = 0, 0\n        for col, row in line:\n            if board[(col, row)] == \"Yellow\":\n                yellow_count += 1\n            elif board[(col, row)] == \"Red\":\n                red_count += 1\n            if yellow_count == 4:\n                return \"Yellow\"\n            if red_count == 4:\n                return \"Red\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        for i in range(len(COLUMNS)):\n            if piece[0] == COLUMNS[i]:\n                for j in range(len(ROWS) - 1, -1, -1):\n                    if board[(COLUMNS[i], ROWS[j])] == '':\n                        board[(COLUMNS[i], ROWS[j])] = piece[2:]\n                        break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            if board[cell] == 'Yellow':\n                yellow += 1\n            elif board[cell] == 'Red':\n                red += 1\n        if yellow >= 4:\n            return 'Yellow'\n        elif red >= 4:\n            return 'Red'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return ''",
            "def who_is_winner(pieces_positions):\n    game_board = {(COLUMNS[i], ROWS[j]): \"\" for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if game_board[(column, ROWS[row])] == \"\":\n                game_board[(column, ROWS[row])] = color\n                break\n                \n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for cell in line:\n            if game_board[cell] == \"Red\":\n                red_count += 1\n            elif game_board[cell] == \"Yellow\":\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n            \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - 65] is None:\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            col, row = ord(column) - 65, row\n            if grid[row][col] == 'Red':\n                red += 1\n            elif grid[row][col] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, ROWS[row])] is None:\n                board[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if board[(column, row)] == \"Yellow\":\n                yellow += 1\n            elif board[(column, row)] == \"Red\":\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [grid[pos] for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == ' ':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for cell in line:\n            column, row = cell\n            if board[row][ord(column) - 65] == 'Red':\n                red += 1\n            elif board[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        for column in COLUMNS:\n            if piece[0] == column:\n                for row in reversed(list(ROWS)):\n                    if board[(column, row)] is None:\n                        board[(column, row)] = piece[2:]\n                        break\n    for line in LINES:\n        colors = [board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for position in pieces_positions:\n        column, color = position[0], position[2:]\n        for row in reversed(ROWS):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos] == \"Yellow\")\n        red_count = sum(1 for pos in line if board[pos] == \"Red\")\n        if yellow_count == 4:\n            return \"Yellow\"\n        if red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(piece) for piece in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        if len({board[pos] for pos in line}) == 1 and board[next(iter(line))] is not None:\n            return board[next(iter(line))]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        board[column].append(color)\n    \n    for line in LINES:\n        yellow, red = 0, 0\n        for column, row in line:\n            if row < len(board[column]):\n                if board[column][row] == 'Yellow':\n                    yellow += 1\n                elif board[column][row] == 'Red':\n                    red += 1\n        if yellow >= 4:\n            return \"Yellow\"\n        if red >= 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[coord] == color for coord in line):\n                return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for column, row in line:\n            if board[(column, row)] == \"Red\":\n                red_count += 1\n            elif board[(column, row)] == \"Yellow\":\n                yellow_count += 1\n        if red_count == 4:\n            return \"Red\"\n        elif yellow_count == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for position in line if board[position] == 'Yellow')\n        red_count = sum(1 for position in line if board[position] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): '' for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for position in line:\n            if board[position] == 'Yellow':\n                yellow += 1\n            elif board[position] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - 65] == ' ':\n                grid[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for cell in line if grid[cell[1]][ord(cell[0]) - 65] == 'Yellow')\n        red_count = sum(1 for cell in line if grid[cell[1]][ord(cell[0]) - 65] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    game_board = {(i, j): '' for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if game_board[(column, row)] == '':\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(game_board[pos] == color for pos in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    game_board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        column_index = ord(column) - 65\n        for row in range(5, -1, -1):\n            if game_board[row][column_index] == ' ':\n                game_board[row][column_index] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for x, y in line if game_board[y][ord(x) - 65] == 'Yellow')\n        red_count = sum(1 for x, y in line if game_board[y][ord(x) - 65] == 'Red')\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - 65] is None:\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            col, row = ord(column) - 65, row\n            if grid[row][col] == 'Red':\n                red += 1\n            elif grid[row][col] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - 65] == ' ':\n                grid[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for cell in line:\n            column, row = cell\n            if grid[row][ord(column) - 65] == 'Red':\n                red += 1\n            elif grid[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): '' for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos] == 'Yellow')\n        red_count = sum(1 for pos in line if board[pos] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        elif red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for col, row in line:\n            if grid[(col, row)] == 'Yellow':\n                yellow += 1\n            elif grid[(col, row)] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): \"\" for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if board[(column, row)] == \"\":\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            if board[cell] == \"Yellow\":\n                yellow += 1\n            elif board[cell] == \"Red\":\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - ord('A')] == ' ':\n                board[row][ord(column) - ord('A')] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            column, row = cell\n            if board[row][ord(column) - ord('A')] == 'Yellow':\n                yellow += 1\n            elif board[row][ord(column) - ord('A')] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][ord(column) - 65] == '':\n                board[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red_count = sum(1 for x, y in line if board[y][ord(x) - 65] == 'Red')\n        yellow_count = sum(1 for x, y in line if board[y][ord(x) - 65] == 'Yellow')\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos] == \"Yellow\")\n        red_count = sum(1 for pos in line if board[pos] == \"Red\")\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for position in pieces_positions:\n        column, color = position[0], position[2:]\n        for row in reversed(ROWS):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[coord] == color for coord in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            if board[cell] == 'Yellow':\n                yellow += 1\n            elif board[cell] == 'Red':\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if grid[(column, ROWS[row])] is None:\n                grid[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow_count, red_count = 0, 0\n        for cell in line:\n            if grid[cell] == \"Yellow\":\n                yellow_count += 1\n            elif grid[cell] == \"Red\":\n                red_count += 1\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        yellow, red = 0, 0\n        for point in line:\n            if board[point] == \"Yellow\":\n                yellow += 1\n            elif board[point] == \"Red\":\n                red += 1\n        if yellow == 4:\n            return \"Yellow\"\n        elif red == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): \"\" for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(col, row)] == \"\":\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for pos in line:\n            if board[pos] == \"Red\":\n                red += 1\n            elif board[pos] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for position in pieces_positions:\n        column, color = position[0], position[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(position) for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(i, j): \"\" for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for j in range(5, -1, -1):\n            if grid[(column, j)] == \"\":\n                grid[(column, j)] = color\n                break\n    for line in LINES:\n        for color in [\"Red\", \"Yellow\"]:\n            if all(grid[pos] == color for pos in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): '' for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if grid[(col, row)] == '':\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(grid[pos] == 'Yellow' for pos in line)\n        red_count = sum(grid[pos] == 'Red' for pos in line)\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        for row in reversed(list(ROWS)):\n            if grid[(piece[0], row)] is None:\n                grid[(piece[0], row)] = piece[2:]\n                break\n    for line in LINES:\n        reds, yellows = 0, 0\n        for col, row in line:\n            if grid[(col, row)] == 'Red':\n                reds += 1\n            elif grid[(col, row)] == 'Yellow':\n                yellows += 1\n        if reds == 4:\n            return 'Red'\n        elif yellows == 4:\n            return 'Yellow'\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            if board[(column, row)] == 'Red':\n                red += 1\n            elif board[(column, row)] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): '' for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(COLUMNS[i], ROWS[j]): '' for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for j in range(len(ROWS) - 1, -1, -1):\n            if grid[(column, ROWS[j])] == '':\n                grid[(column, ROWS[j])] = color\n                break\n    for line in LINES:\n        colors = [grid[pos] for pos in line]\n        if len(set(colors)) == 1 and colors[0] != '':\n            return colors[0]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {col: [\"\"] * 6 for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[col][row] == \"\":\n                grid[col][row] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for col, row in line:\n            if grid[col][row] == \"Red\":\n                red += 1\n            elif grid[col][row] == \"Yellow\":\n                yellow += 1\n        if red == 4:\n            return \"Red\"\n        elif yellow == 4:\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {column: [''] * len(ROWS) for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if game_board[column][row] == '':\n                game_board[column][row] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for column, row in line if game_board[column][row] == 'Yellow')\n        red_count = sum(1 for column, row in line if game_board[column][row] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move[0], move[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - 65] is None:\n                grid[row][ord(col) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for column, row in line:\n            col_index, row_index = ord(column) - 65, row\n            if grid[row_index][col_index] == 'Red':\n                red += 1\n            elif grid[row_index][col_index] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        elif yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if grid[(col, row)] is None:\n                grid[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [grid[pos] for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in ROWS[::-1]:\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(piece) for piece in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    game_board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for position in pieces_positions:\n        column, color = position[0], position[2:]\n        for row in reversed(ROWS):\n            if game_board[(column, row)] is None:\n                game_board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [game_board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - 65] == ' ':\n                grid[row][ord(column) - 65] = color\n                break\n    for line in LINES:\n        red, yellow = 0, 0\n        for cell in line:\n            column, row = cell\n            if grid[row][ord(column) - 65] == 'Red':\n                red += 1\n            elif grid[row][ord(column) - 65] == 'Yellow':\n                yellow += 1\n        if red == 4:\n            return 'Red'\n        if yellow == 4:\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for move in pieces_positions:\n        column, color = move[0], move[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[coord] == color for coord in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[column, row] for column, row in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in reversed(ROWS):\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(pos) for pos in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(i, j): None for i in COLUMNS for j in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board[position] for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n    for position in pieces_positions:\n        column, color = position[0], position[2:]\n        for row in reversed(list(ROWS)):\n            if board[(column, row)] is None:\n                board[(column, row)] = color\n                break\n    for line in LINES:\n        colors = [board.get(position) for position in line]\n        if len(set(colors)) == 1 and colors[0] is not None:\n            return colors[0]\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(COLUMNS[i], ROWS[j]): None for i in range(len(COLUMNS)) for j in range(len(ROWS))}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(len(ROWS) - 1, -1, -1):\n            if grid[(column, ROWS[row])] is None:\n                grid[(column, ROWS[row])] = color\n                break\n    for line in LINES:\n        yellow_count, red_count = 0, 0\n        for cell in line:\n            if grid[cell] == \"Yellow\":\n                yellow_count += 1\n            elif grid[cell] == \"Red\":\n                red_count += 1\n        if yellow_count == 4:\n            return \"Yellow\"\n        elif red_count == 4:\n            return \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        for col in COLUMNS:\n            if piece[0] == col:\n                for row in range(len(ROWS) - 1, -1, -1):\n                    if grid[(col, row)] is None:\n                        grid[(col, row)] = piece[2:]\n                        break\n    for line in LINES:\n        yellow, red = 0, 0\n        for cell in line:\n            if grid[cell] == 'Yellow':\n                yellow += 1\n            elif grid[cell] == 'Red':\n                red += 1\n        if yellow == 4:\n            return 'Yellow'\n        elif red == 4:\n            return 'Red'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = {(col, row): '' for col in COLUMNS for row in range(6)}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[(column, row)] == '':\n                grid[(column, row)] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[cell] == color for cell in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = {(column, row): \"\" for column in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[2:]\n        for row in range(5, -1, -1):\n            if grid[(column, row)] == \"\":\n                grid[(column, row)] = color\n                break\n    for line in LINES:\n        if len(set(grid[position] for position in line)) == 1 and grid[next(iter(line))] != \"\":\n            return grid[next(iter(line))]\n    return \"Draw\""
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    board = {(col, row): None for col in COLUMNS for row in ROWS}\n    for piece in pieces_positions:\n        col, color = piece[0], piece[2:]\n        for row in ROWS:\n            if board[(col, row)] is None:\n                board[(col, row)] = color\n                break\n    for line in LINES:\n        yellow_count = sum(1 for pos in line if board[pos] == 'Yellow')\n        red_count = sum(1 for pos in line if board[pos] == 'Red')\n        if yellow_count == 4:\n            return 'Yellow'\n        if red_count == 4:\n            return 'Red'\n    return 'Draw'"
        ]
    }
}