{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (\n                        c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4)) or\n                        r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4)) or\n                        c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)) or\n                        c - 3 >= 0 and r + 3 < 6 and all(board[chr(c - i + 65)][r + i] == color for i in range(4))\n                    ):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if row < 6 and board[col][row] is not None):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if row < 6 and board[col][row] is not None):\n            return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < 6 and grid[c][r] == color)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece.split('_')[1]\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if x in grid and y < 6):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x]) and board[x][y] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c][row] == color if c in board and len(board[c]) > row else False) for c in 'ABCDEFG'):\n                    return color\n\n        # Check vertical connections\n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                for r in range(len(board[col]) - 3):\n                    if all(board[col][r + k] == color for k in range(4)):\n                        return color\n\n        # Check diagonal connections\n        for c in range(len(board)):\n            for r in range(len(board['A'])):\n                if (c + 3 < 7 and r + 3 < 6) and (all(board['ABCDEFG'[c + k]][r + k] == color for k in range(4))):\n                    return color\n                if (c + 3 < 7 and r - 3 >= 0) and (all(board['ABCDEFG'[c + k]][r - k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and r >= 0):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == color and \n                (i >= 3 and all(board[column][i-j] == color for j in range(4)) or\n                 (column in 'ABCDEFG' and\n                  all(board[c][i] == color for c in board if board[c] and COLUMNS.index(c) == COLUMNS.index(column) + j) for j in range(4)) or\n                 (i >= 3 and column in 'ABCDEFG' and\n                  all(board[COLUMNS[COLUMNS.index(column) + j][i-j] == color for j in range(4) if 0 <= COLUMNS.index(column) + j < len(COLUMNS))) or\n                 (i >= 3 and column in 'ABCDEFG' and\n                  all(board[COLUMNS[COLUMNS.index(column) - j][i-j] == color for j in range(4) if 0 <= COLUMNS.index(column) - j < len(COLUMNS)))))))):\n                return color\n    \n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner after each move\n        for r in range(6):\n            for c in range(7):\n                if board[COLUMNS[c]][r] is not None:\n                    current_color = board[COLUMNS[c]][r]\n                    \n                    # Check horizontally\n                    if c <= 3 and all(board[COLUMNS[c + i]][r] == current_color for i in range(4)):\n                        return current_color\n                    \n                    # Check vertically\n                    if r <= 2 and all(board[COLUMNS[c]][r + i] == current_color for i in range(4)):\n                        return current_color\n                    \n                    # Check diagonally (down-right)\n                    if c <= 3 and r <= 2 and all(board[COLUMNS[c + i]][r + i] == current_color for i in range(4)):\n                        return current_color\n                    \n                    # Check diagonally (down-left)\n                    if c >= 3 and r <= 2 and all(board[COLUMNS[c - i]][r + i] == current_color for i in range(4)):\n                        return current_color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:\n                        # Check horizontal\n                        if col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[chr(col + 65)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] == color:\n                    if check_winner(grid, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check vertical\n            for col in 'ABCDEFG':\n                count = 0\n                for row in range(6):\n                    if board[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if board[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check diagonal \\\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(board[chr(col + ord('A') + i)][row - i] == color for i in range(4)):\n                        return color\n\n            # Check diagonal /\n            for col in range(4):\n                for row in range(6):\n                    if row + 3 < 6 and all(board[chr(col + ord('A') + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        moves[color] += 1\n        \n        # Check for a win\n        if check_winner(grid, column, row, color):\n            return color\n\n    return \"Draw\" if moves['Red'] + moves['Yellow'] == 42 else \"Draw\"\n\ndef check_winner(grid, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = chr(ord(column) + dx * step), row + dy * step\n            if 0 <= y < 6 and x in grid and grid[x][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = chr(ord(column) - dx * step), row - dy * step\n            if 0 <= y < 6 and x in grid and grid[x][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (check_win(board, col, row, board[col][row])):\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    # Check horizontal\n    count = 0\n    for c in 'ABCDEFG':\n        count = count + 1 if board[c][row] == color else 0\n        if count == 4:\n            return True\n    \n    # Check vertical\n    count = 0\n    for r in range(6):\n        count = count + 1 if board[col][r] == color else 0\n        if count == 4:\n            return True\n            \n    # Check diagonal (bottom left to top right)\n    count = 0\n    start_col = max(0, ord(col) - ord('A') - 3)\n    start_row = max(0, row - 3)\n    for offset in range(7):\n        c = chr(ord('A') + start_col + offset)\n        r = start_row + offset\n        if 0 <= start_col + offset < 7 and r < 6 and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    \n    # Check diagonal (top left to bottom right)\n    count = 0\n    start_col = max(0, ord(col) - ord('A') - 3)\n    start_row = min(row + 3, 5)\n    for offset in range(7):\n        c = chr(ord('A') + start_col + offset)\n        r = start_row - offset\n        if 0 <= start_col + offset < 7 and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board[chr(65+i)][j] == color:\n                    if (i <= 3 and all(board[chr(65+k)][j] == color for k in range(i, i+4))) or \\\n                       (j <= 2 and all(board[chr(i+65)][j+k] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(65+i+k)][j+k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(65+i+k)][j-k] == color for k in range(4))):\n                        return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (check_winner(board, col, row, color)):\n                        return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal /\n            check_direction(board, col, row, color, 1, -1)    # Diagonal \\\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + step * delta_col)\n        new_row = row + step * delta_row\n        if (new_col in board and \n            0 <= new_row < 6 and \n            board[new_col][new_row] == color):\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        if check_winner(grid, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        \n        for i in range(1, 4):\n            r = row + i * d[1]\n            c = chr(ord(col) + i * d[0])\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            r = row - i * d[1]\n            c = chr(ord(col) - i * d[0])\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in [(c, r) for c in 'ABCDEFG' for r in range(6) if board[c][r] == color]:\n                            count = 1\n                            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                                for step in range(1, 4):\n                                    c, r = chr(ord(col) + direction[0] * step), row + direction[1] * step\n                                    if 0 <= r < 6 and c in board and board[c][r] == color:\n                                        count += 1\n                                    else:\n                                        break\n                                if count >= 4:\n                                    return color\n                                count = 1  # reset count for the next direction\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner():\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(grid[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[COLUMNS[COLUMNS.index(col) + i]][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col) + i]][row + i] == color for i in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for column in grid:\n        for row in range(6):\n            if grid[column][row] == color:\n                if (check_direction(grid, column, row, 1, 0, color) or  # Horizontal\n                    check_direction(grid, column, row, 0, 1, color) or  # Vertical\n                    check_direction(grid, column, row, 1, 1, color) or  # Diagonal /\n                    check_direction(grid, column, row, 1, -1, color)):  # Diagonal \\\n                    return True\n    return False\n\ndef check_direction(grid, column, row, d_col, d_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(column) + i * d_col)\n        r = row + i * d_row\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if check_direction(board, column, row, color, 1, 0) or \\\n                   check_direction(board, column, row, color, 0, 1) or \\\n                   check_direction(board, column, row, color, 1, 1) or \\\n                   check_direction(board, column, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        col = chr(ord(column) + i * delta_col)\n        r = row + i * delta_row\n        if col in board and 0 <= r < 6 and board[col][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                player_moves[color].append((column, row))\n                break\n\n        for color, positions in player_moves.items():\n            if check_winner(positions):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(positions):\n    positions_set = set(positions)\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if all((col, row) in positions_set for col in [col, chr(ord(col) + 1), chr(ord(col) + 2), chr(ord(col) + 3)]):\n                return True\n            if all((col, row) in positions_set for row in [row, row + 1, row + 2, row + 3]):\n                return True\n            if all((col, row) in positions_set for col in [chr(ord(col) + i) for i in range(4)]):\n                return True\n            if all((col, row) in positions_set for col in [chr(ord(col) + i) for i in range(4)]):\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for player in [\"Red\", \"Yellow\"]:\n            if any(all(board[col][row] == player for col, row in line) for line in LINES):\n                return player\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            new_col = chr(ord(col) + d[0] * i)\n            new_row = row + d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        for i in range(1, 4):\n            new_col = chr(ord(col) - d[0] * i)\n            new_row = row - d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check horizontal\n                    for start_col in range(max(0, 'ABCDEFG'.index(col) - 3), min(4, 'ABCDEFG'.index(col) + 1)):\n                        if all(board['ABCDEFG'[start_col + k]][row] == color for k in range(4)):\n                            return color\n\n                    # Check diagonal /\n                    if row <= 2 and 'ABCDEFG'.index(col) >= 3:\n                        if all(board['ABCDEFG'[col_index]][row + (3 - (col_index - start_col))] == color\n                               for col_index in range(start_col, start_col + 4)):\n                            return color\n\n                    # Check diagonal \\\n                    if row >= 3 and 'ABCDEFG'.index(col) >= 3:\n                        if all(board['ABCDEFG'[col_index]][row - (col_index - start_col)] == color\n                               for col_index in range(start_col, start_col + 4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        if check_winner(board, player):\n            return player.split('_')[1]\n\n    return \"Draw\"\n\ndef check_winner(board, player):\n    positions = [(col, row) for col in board for row in ROWS if board[col][row] == player]\n    \n    for pos in positions:\n        if (check_direction(pos, 1, 0, board, player) or  # Horizontal\n            check_direction(pos, 0, 1, board, player) or  # Vertical\n            check_direction(pos, 1, 1, board, player) or  # Diagonal /\n            check_direction(pos, 1, -1, board, player)):   # Diagonal \\\n            return True\n    return False\n\ndef check_direction(pos, delta_col, delta_row, board, player):\n    count = 1\n    for direction in (1, -1):\n        for step in range(1, 4):\n            col = chr(ord(pos[0]) + delta_col * step * direction)\n            row = pos[1] + delta_row * step * direction\n            if col in board and 0 <= row < 6 and board[col][row] == player:\n                count += 1\n            else:\n                break\n            if count == 4:\n                return True\n    return False\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal\n    for row in range(6):\n        count = 0\n        for col in 'ABCDEFG':\n            if board[col][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check vertical\n    for col in 'ABCDEFG':\n        count = 0\n        for row in range(6):\n            if board[col][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check diagonal (bottom-left to top-right)\n    for col in range(4):\n        for row in range(3, 6):\n            if all(board[chr(col + i + ord('A'))][row - i] == color for i in range(4)):\n                return True\n\n    # Check diagonal (top-left to bottom-right)\n    for col in range(4):\n        for row in range(6):\n            if row <= 2 and all(board[chr(col + i + ord('A'))][row + i] == color for i in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            colors = [board[col][row] for col, row in line if row < 6 and board[col][row] is not None]\n            if len(colors) == 4 and all(c == colors[0] for c in colors):\n                return colors[0].split('_')[1]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    new_row = row + direction[0] * step * d\n                    new_col = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= new_row < 6 and 0 <= new_col < 7:\n                        if grid['ABCDEFG'[new_col]][new_row] == player:\n                            count += 1\n                        else:\n                            break\n                    else:\n                        break\n            if count >= 4:\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    else:\n        return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal for win\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # Horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # Vertical\n                    check_direction(board, col, row, 1, 1, color) or  # Diagonal \\\n                    check_direction(board, col, row, 1, -1, color)):  # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, col, row, col_delta, row_delta, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * col_delta)\n        r = row + i * row_delta\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + dx * step)\n            new_row = row + dy * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            new_col = chr(ord(col) - dx * step)\n            new_row = row - dy * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col >= 'D' and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:\n                        if col + 3 < 7 and all(board[chr(col + i + 65)][row] == color for i in range(4)):\n                            return color\n                        if row + 3 < 6 and all(board[chr(col + 65)][row + i] == color for i in range(4)):\n                            return color\n                        if col + 3 < 7 and row + 3 < 6 and all(board[chr(col + i + 65)][row + i] == color for i in range(4)):\n                            return color\n                        if col + 3 < 7 and row - 3 >= 0 and all(board[chr(col + i + 65)][row - i] == color for i in range(4)):\n                            return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == player for x, y in line):\n                    return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in LINES:\n                            for line in LINES:\n                                if all(board[c][r] == color for c, r in line if (c, r) in board):\n                                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check vertical\n            for col in COLUMNS:\n                count = sum(1 for r in ROWS if board[col][r] == color)\n                if count >= 4:\n                    return color\n            \n            # Check horizontal\n            for r in ROWS:\n                count = 0\n                for col in COLUMNS:\n                    if board[col][r] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n            \n            # Check diagonal \\\n            for col in range(len(COLUMNS) - 3):\n                for row in range(len(ROWS) - 3):\n                    if all(board[COLUMNS[col + i]][row + i] == color for i in range(4)):\n                        return color\n            \n            # Check diagonal /\n            for col in range(len(COLUMNS) - 3):\n                for row in range(3, len(ROWS)):\n                    if all(board[COLUMNS[col + i]][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in range(6) if grid[column][r] is None), None)\n        if row is not None:\n            grid[column][row] = color\n            player_moves[color].append((column, row))\n    \n    def check_winner(color):\n        positions = player_moves[color]\n        for line in LINES:\n            if len(line & set(positions)) == 4:\n                return color\n        return None\n\n    winner = check_winner('Red')\n    if winner:\n        return 'Red'\n    winner = check_winner('Yellow')\n    if winner:\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if x in grid and y < 6 and y >= 0):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for step in range(1, 4):\n                    x = ord(col) - ord('A') + step * direction[0] * d\n                    y = row + step * direction[1] * d\n                    if 0 <= x < 7 and 0 <= y < 6 and (chr(x + ord('A')), y) in player_moves[player]:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return player\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    \n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + i)][row] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                # Check diagonal (down-right)\n                if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                # Check diagonal (down-left)\n                if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n\n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:\n                        if col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4)):\n                            return color\n                        if row <= 2 and all(board[chr(col + 65)][row + k] == color for k in range(4)):\n                            return color\n                        if col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)):\n                            return color\n                        if col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all((pos in board and board[pos[0]][pos[1]] == color) for pos in line):\n                return True\n        return False\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                if check_winner(color):\n                    return color\n                break\n    \n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        for i in range(len(board[col]) - 3, len(board[col])):\n            if board[col][i:i + 4] == [color] * 4:\n                return color\n\n        for c in 'ABCDEFG':\n            if c in board and len(board[c]) >= 4:\n                for j in range(len(board[c]) - 3):\n                    if all(board[c][j + k] == color for k in range(4)):\n                        return color\n\n        for i in range(len(board[col])):\n            for j in range(len(board[col])):\n                if board[col][i:i + 4] == [color] * 4:\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    if j + 3 < 7 and all(board[COLUMNS[j+k]][i] == color for k in range(4)):\n                        return color\n                    if i + 3 < 6 and all(board[COLUMNS[j]][i+k] == color for k in range(4)):\n                        return color\n                    if j + 3 < 7 and i + 3 < 6 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4)):\n                        return color\n                    if j - 3 >= 0 and i + 3 < 6 and all(board[COLUMNS[j-k]][i+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for line in LINES:\n            if any(board[c][r] == color for c, r in line) and all(board[c][r] == color for c, r in line if (c, r) in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        for line in LINES:\n            if all((col, row) in board.items() and len(board[col]) > row and board[col][row] == color for col, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for line in LINES:\n        colors = [board[column][row] for column, row in line if board[column][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0].split('_')[1]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or  # Horizontal\n                    check_direction(board, color, col, row, 0, 1) or  # Vertical\n                    check_direction(board, color, col, row, 1, 1) or  # Diagonal \\\n                    check_direction(board, color, col, row, 1, -1)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, color, start_col, start_row, delta_col, delta_row):\n    count = 0\n    col_idx = 'ABCDEFG'.index(start_col)\n    row_idx = start_row\n\n    for _ in range(4):\n        if 0 <= col_idx < 7 and 0 <= row_idx < 6 and board['ABCDEFG'[col_idx]][row_idx] == color:\n            count += 1\n        else:\n            break\n        col_idx += delta_col\n        row_idx += delta_row\n\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        check_col = chr(ord(col) + step * delta_col)\n        check_row = row + step * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [[(0, 1), (0, -1)], [(1, 0), (-1, 0)], [(1, 1), (-1, -1)], [(1, -1), (-1, 1)]]:\n            for r in range(6):\n                for c in range(7):\n                    if board['ABCDEFG'[c]][r] == color:\n                        count = 1\n                        for d in direction:\n                            dr, dc = d\n                            nr, nc = r + dr, c + dc\n                            while 0 <= nr < 6 and 0 <= nc < 7 and board['ABCDEFG'[nc]][nr] == color:\n                                count += 1\n                                if count == 4:\n                                    return color\n                                nr += dr\n                                nc += dc\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    new_column = chr(ord(column) + direction[0] * d * step)\n                    new_row = row + direction[1] * d * step\n                    if 0 <= new_row < 6 and new_column in board and board[new_column][new_row] == player:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for direction in range(4):\n            for col in range(7):\n                for row in range(6):\n                    if direction == 0 and col + 3 < 7:  # Horizontal\n                        if grid['ABCDEFG'[col]][row] == color and \\\n                           grid['ABCDEFG'[col + 1]][row] == color and \\\n                           grid['ABCDEFG'[col + 2]][row] == color and \\\n                           grid['ABCDEFG'[col + 3]][row] == color:\n                            return color\n                    elif direction == 1 and row + 3 < 6:  # Vertical\n                        if grid['ABCDEFG'[col]][row] == color and \\\n                           grid['ABCDEFG'[col]][row + 1] == color and \\\n                           grid['ABCDEFG'[col]][row + 2] == color and \\\n                           grid['ABCDEFG'[col]][row + 3] == color:\n                            return color\n                    elif direction == 2 and col + 3 < 7 and row + 3 < 6:  # Diagonal /\n                        if grid['ABCDEFG'[col]][row] == color and \\\n                           grid['ABCDEFG'[col + 1]][row + 1] == color and \\\n                           grid['ABCDEFG'[col + 2]][row + 2] == color and \\\n                           grid['ABCDEFG'[col + 3]][row + 3] == color:\n                            return color\n                    elif direction == 3 and col + 3 < 7 and row - 3 >= 0:  # Diagonal \\\n                        if grid['ABCDEFG'[col]][row] == color and \\\n                           grid['ABCDEFG'[col + 1]][row - 1] == color and \\\n                           grid['ABCDEFG'[col + 2]][row - 2] == color and \\\n                           grid['ABCDEFG'[col + 3]][row - 3] == color:\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) > 6:\n            return \"Draw\"\n        \n        for i in range(len(board[col]) - 3, len(board[col])):\n            if board[col][i:i+4].count(color) == 4:\n                return color\n            \n            # Check vertical\n            if board[col].count(color) >= 4:\n                vertical_count = sum(1 for x in board[col][-4:] if x == color)\n                if vertical_count == 4:\n                    return color\n            \n            # Check horizontal and diagonal\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) >= 4:\n                    for j in range(len(board[c]) - 3):\n                        if board[c][j:j+4].count(color) == 4:\n                            return color\n                    # Check diagonals\n                    for j in range(len(board[c]) - 3):\n                        if (c, j) in board and all(board[c][j+k] == color for k in range(4)):\n                            return color\n                        if (c, j+3) in board and all(board[c][j+3-k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if any(board[col][row] != color for col, row in line):\n                continue\n            return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board['ABCDEFG'[i]][j] is not None:\n                    if j <= 2 and all(board['ABCDEFG'[i]][j+k] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n                    if i <= 3 and all(board['ABCDEFG'[i+k]][j] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n                    if i <= 3 and j <= 2 and all(board['ABCDEFG'[i+k]][j+k] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n                    if i <= 3 and j >= 3 and all(board['ABCDEFG'[i+k]][j-k] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n        \n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for direction in [1, -1]:\n                for step in range(1, 4):\n                    new_col = chr(ord(column) + dx * direction * step)\n                    new_row = row + dy * direction * step\n                    if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == player:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return player\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'DEFG'[ord(col)-65:ord(col)+4]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == color for (col, row) in \n                                                          [(chr(ord(col)+k), row-k) for k in range(4)]):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == color for (col, row) in \n                                                         [(chr(ord(col)+k), row+k) for k in range(4)]):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        for line in LINES:\n            if all((col, row) in board.items() and len(board[col]) > row and board[col][row] == color for col, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n\n        # Check for winning condition after each move\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        # Check in the positive direction\n        x, y = ord(col) - ord('A'), row\n        while 0 <= x + dx < 7 and 0 <= y + dy < 6 and (y + dy) in range(len(board[chr(ord('A') + x + dx)])) and board[chr(ord('A') + x + dx)].count(color) > y + dy:\n            count += 1\n            x += dx\n            y += dy\n\n        # Check in the negative direction\n        x, y = ord(col) - ord('A'), row\n        while 0 <= x - dx < 7 and 0 <= y - dy < 6 and (y - dy) in range(len(board[chr(ord('A') + x - dx)])) and board[chr(ord('A') + x - dx)].count(color) > y - dy:\n            count += 1\n            x -= dx\n            y -= dy\n\n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for line in LINES:\n        for position in line:\n            if all(grid[col][row] == 'Red' for col, row in line if (col, row) in line):\n                return 'Red'\n            if all(grid[col][row] == 'Yellow' for col, row in line if (col, row) in line):\n                return 'Yellow'\n\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        positions = [grid[x][y] for x, y in line if x in grid and y < len(grid[x]) and grid[x][y] is not None]\n        if len(positions) == 4 and len(set(positions)) == 1:\n            return positions[0].split('_')[1]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        # Check for a winning condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [1, -1]:  # Check in both directions\n                dx, dy = direction\n                x, y = grid[col].index(color), row\n                \n                while True:\n                    x += dx * d\n                    y += dy * d\n                    if 0 <= x < 7 and 0 <= y < 6 and grid['ABCDEFG'[x]][y] == color:\n                        count += 1\n                    else:\n                        break\n                \n                if count >= 4:\n                    return color\n    \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j + 3 < 7 and all(grid[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4)):\n                    return color\n                if i + 3 < 6 and all(grid[chr(j + ord('A'))][i + k] == color for k in range(4)):\n                    return color\n                if j + 3 < 7 and i + 3 < 6 and all(grid[chr(k + ord('A'))][i + k] == color for k in range(4)):\n                    return color\n                if j - 3 >= 0 and i + 3 < 6 and all(grid[chr(j - k + ord('A'))][i + k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a win condition\n        for color in ['Red', 'Yellow']:\n            # Check vertical\n            for col in board:\n                for row in range(3):\n                    if all(board[col][row+i] == color for i in range(4)):\n                        return color\n            \n            # Check horizontal\n            for row in range(6):\n                for col in range(4):\n                    if all(board[chr(ord('A') + col + i)][row] == color for i in range(4)):\n                        return color\n            \n            # Check diagonal /\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(board[chr(ord('A') + col + i)][row - i] == color for i in range(4)):\n                        return color\n            \n            # Check diagonal \\\n            for col in range(4):\n                for row in range(6):\n                    if row + 3 < 6 and all(board[chr(ord('A') + col + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in [(c, r) for line in LINES for c, r in line]:\n                            if any(all(board[c][r] == color for c, r in line) for line in LINES if (col, row) in line):\n                                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    def check_winner():\n        for col in grid:\n            for row in range(6):\n                if grid[col][row] is None:\n                    continue\n                color = grid[col][row]\n                # Check horizontal\n                if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                    return color\n                # Check vertical\n                if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                    return color\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner.split('_')[1]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for i in range(len(COLUMNS)):\n                for j in range(len(ROWS)):\n                    if (grid[COLUMNS[i]][j] == color and\n                        (i + 3 < len(COLUMNS) and all(grid[COLUMNS[i+k]][j] == color for k in range(4))) or\n                        (j + 3 < len(ROWS) and all(grid[COLUMNS[i]][j+k] == color for k in range(4))) or\n                        (i + 3 < len(COLUMNS) and j + 3 < len(ROWS) and all(grid[COLUMNS[i+k]][j+k] == color for k in range(4))) or\n                        (i + 3 < len(COLUMNS) and j - 3 >= 0 and all(grid[COLUMNS[i+k]][j-k] == color for k in range(4)))):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(7):\n            for j in range(6):\n                if board[chr(65 + i)][j] == color:\n                    # Check horizontal\n                    if i <= 3 and all(board[chr(65 + i + k)][j] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if j <= 2 and all(board[chr(65 + i)][j + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in [col, chr(ord(col) + 1), chr(ord(col) + 2), chr(ord(col) + 3)]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check for win in horizontal, vertical, diagonal /\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            x, y = ord(col) - ord('A') + step * dx, row + step * dy\n                            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == board[col][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color_check in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color_check:\n                        if (i + 3 < 7 and all(board[chr(i + k + 65)][j] == color_check for k in range(4))) or \\\n                           (j + 3 < 6 and all(board[chr(i + 65)][j + k] == color_check for k in range(4))) or \\\n                           (i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color_check for k in range(4))) or \\\n                           (i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color_check for k in range(4))):\n                            return color_check\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y in range(6)):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                x = ord(column) - ord('A') + dx * i * step\n                y = row + dy * i * step\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if (c, r) in LINES:\n                        if all(board[c][r] == board[c2][r2] for (c2, r2) in LINES[(c, r)]):\n                            return board[c][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        for direction in LINES:\n            count = sum((color in board[col] for col in direction if (col in board and len(board[col]) > 0)))\n            if count >= 4:\n                return color.split('_')[1]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and r >= 0):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(7):\n            for j in range(6):\n                if grid[chr(65 + i)][j] == color:\n                    if (i <= 3 and all(grid[chr(65 + i + k)][j] == color for k in range(4))) or \\\n                       (j <= 2 and all(grid[chr(65 + i)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(grid[chr(65 + i + k)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(grid[chr(65 + i + k)][j - k] == color for k in range(4))):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                player_moves[color].append((column, row))\n                break\n\n        for color in ['Red', 'Yellow']:\n            if check_winner(player_moves[color]):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for c, r in moves:\n        if any(all((chr(ord(c) + dx), r + dy) in moves for dx, dy in offsets) for offsets in \n               [[(0, 1), (0, 2), (0, 3)],   # vertical\n                [(1, 0), (2, 0), (3, 0)],   # horizontal\n                [(1, 1), (2, 2), (3, 3)],   # diagonal \\\n                [(1, -1), (2, -2), (3, -3)]]):  # diagonal /\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                r, c = row + step * i * d[1], ord(col) - ord('A') + step * i * d[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row]:\n                    color = grid[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is None:\n                    continue\n                # Check vertical\n                if row <= 2 and all(grid[col][row + i] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n                # Check horizontal\n                if col <= 'D' and all(grid[chr(ord(col) + i)][row] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c].count(color) > row - 3 + i for i, c in enumerate('ABCDEFG'))):\n                    return color\n\n        for col in 'ABCDEFG':\n            for row in range(len(board[col])):\n                if board[col][row] == color:\n                    # Check vertical\n                    if all(row + i < len(board[col]) and board[col][row + i] == color for i in range(4)):\n                        return color\n                    \n                    # Check horizontal\n                    if all(col_index < len(board) and board[COLUMNS[col_index]][row] == color for col_index in range(col_index, col_index + 4)):\n                        return color\n                    \n                    # Check diagonal (top-left to bottom-right)\n                    if all(row + i < len(board[COLUMNS[col]]) and board[COLUMNS[col + i]][row + i] == color for i in range(4) if col + i < len(COLUMNS)):\n                        return color\n                    \n                    # Check diagonal (bottom-left to top-right)\n                    if all(row - i >= 0 and board[COLUMNS[col + i]][row - i] == color for i in range(4) if col + i < len(COLUMNS)):\n                        return color\n                    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y >= 0 and y < 6 and x in board and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Check vertical\n    if len(board[column]) >= 4 and all(c == color for c in board[column][-4:]):\n        return True\n    \n    # Check horizontal\n    row_index = len(board[column]) - 1\n    for c in 'ABCDEFG':\n        if board[c][-1] == color and row_index < len(board[c]):\n            if sum(1 for k in range(-3, 1) if row_index < len(board[c]) and board[c][row_index] == color) == 4:\n                return True\n    \n    # Check diagonal \\\n    for c in range(max(0, ord(column) - 3), min(ord(column) + 1, 7)):\n        for r in range(max(0, row_index - 3), min(row_index + 1, 6)):\n            if all((chr(c + i), r + i) in board.items() and board[chr(c + i)][r + i] == color for i in range(4)):\n                return True\n    \n    # Check diagonal /\n    for c in range(max(0, ord(column) - 3), min(ord(column) + 1, 7)):\n        for r in range(min(row_index + 3, 6), max(row_index - 1, -1), -1):\n            if all((chr(c + i), r - i) in board.items() and board[chr(c + i)][r - i] == color for i in range(4)):\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if chr(ord(col) + i) in grid) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if chr(ord(col) + i) in grid and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if chr(ord(col) + i) in grid and row - i >= 0)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            colors = {board[col][row] for col, row in line if board[col][row] is not None}\n            if len(colors) == 1 and None not in colors:\n                return colors.pop()\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in grid and all(grid[col][row] == color for col in 'ABCDEFG'[:7][\n                                'ABCDEFG'.index(col):][:4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row - k] == color for k in range(4)\n                                                                 if 'ABCDEFG'.index(col) + k < 7):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row + k] == color for k in range(4)\n                                                                 if 'ABCDEFG'.index(col) + k < 7):\n                            return color\n    \n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(column) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        if check_winner(grid, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            r = row + i * d[1]\n            c = chr(ord(col) + i * d[0])\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            r = row - i * d[1]\n            c = chr(ord(col) - i * d[0])\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in [(c, r) for c in 'ABCDEFG' for r in range(6) if board[c][r] == color]:\n                            count = 1\n                            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                                for step in range(1, 4):\n                                    c, r = chr(ord(col) + direction[0] * step), row + direction[1] * step\n                                    if 0 <= r < 6 and c in board and board[c][r] == color:\n                                        count += 1\n                                    else:\n                                        break\n                                if count >= 4:\n                                    return color\n                                count = 1  # reset count for the next direction\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check vertical, horizontal and diagonal lines\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # Vertical\n                    check_direction(board, col, row, 0, 1, color) or  # Horizontal\n                    check_direction(board, col, row, 1, 1, color) or  # Diagonal \\\n                    check_direction(board, col, row, 1, -1, color)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, col, row, d_col, d_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    def drop_piece(column, color):\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                return True\n        return False\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if not drop_piece(column, color):\n            continue\n\n        for r in ROWS:\n            for c in range(len(COLUMNS) - 3):\n                if all(board[COLUMNS[c+i]][r] == color for i in range(4)):\n                    return color\n\n        for c in COLUMNS:\n            for r in range(len(ROWS) - 3):\n                if all(board[c][r+i] == color for i in range(4)):\n                    return color\n\n        for c in range(len(COLUMNS) - 3):\n            for r in range(len(ROWS) - 3):\n                if all(board[COLUMNS[c+i]][r+i] == color for i in range(4)):\n                    return color\n\n        for c in range(len(COLUMNS) - 3):\n            for r in range(3, len(ROWS)):\n                if all(board[COLUMNS[c+i]][r-i] == color for i in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = {'Red': [], 'Yellow': []}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        moves[color].append((col, row))\n        \n        if check_winner(moves[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for col, row in moves:\n        for dc, dr in directions:\n            count = 1\n            \n            for step in range(1, 4):\n                new_col = chr(ord(col) + dc * step)\n                new_row = row + dr * step\n                if new_col in 'ABCDEFG' and 0 <= new_row < 6 and (new_col, new_row) in moves:\n                    count += 1\n                else:\n                    break\n            \n            for step in range(1, 4):\n                new_col = chr(ord(col) - dc * step)\n                new_row = row - dr * step\n                if new_col in 'ABCDEFG' and 0 <= new_row < 6 and (new_col, new_row) in moves:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                player_moves[color].append((column, row))\n                break\n\n        for color, positions in player_moves.items():\n            for pos in positions:\n                if (check_winner(pos, color, board)):\n                    return color\n\n    return \"Draw\"\n\ndef check_winner(pos, color, board):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            r = pos[1] + d[1] * i\n            c = chr(ord(pos[0]) + d[0] * i)\n            if r < 0 or r >= 6 or c not in board or board[c][r] != color:\n                break\n            count += 1\n        for i in range(1, 4):\n            r = pos[1] - d[1] * i\n            c = chr(ord(pos[0]) - d[0] * i)\n            if r < 0 or r >= 6 or c not in board or board[c][r] != color:\n                break\n            count += 1\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for player in ['Red', 'Yellow']:\n            if any(all(board[col][row] == player for col, row in line) for line in LINES):\n                return player\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in LINES:\n            if all(board[col][row] == color for col, row in direction if row >= 0 and row < 6 and col in board):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check vertical, horizontal, and diagonal connections\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, color, 1, 0) or\n                    check_direction(board, col, row, color, 0, 1) or\n                    check_direction(board, col, row, color, 1, 1) or\n                    check_direction(board, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for d in range(1, 4):\n                            x, y = ord(col) - ord('A') + d * dx, row + d * dy\n                            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == board[col][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return board[col][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            # Check vertical, horizontal, and diagonal connections\n            if any(all(board[col][r] == color_to_check for col, r in line) for line in LINES):\n                return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        if check_winner(board, player):\n            return player.split('_')[1]\n\n    return \"Draw\"\n\ndef check_winner(board, player):\n    positions = [(col, row) for col in board for row in ROWS if board[col][row] == player]\n    \n    for pos in positions:\n        if any(check_direction(board, pos, direction, player) for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]):\n            return True\n    return False\n\ndef check_direction(board, start, direction, player):\n    count = 0\n    for step in range(4):\n        col = chr(ord(start[0]) + direction[0] * step)\n        row = start[1] + direction[1] * step\n        if 0 <= row < 6 and col in board and board[col][row] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCD'):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, 1, 0, color) or \\\n                   check_direction(board, col, row, 0, 1, color) or \\\n                   check_direction(board, col, row, 1, 1, color) or \\\n                   check_direction(board, col, row, 1, -1, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, dcol, drow, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dcol)\n        r = row + i * drow\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in COLUMNS:\n                for row in ROWS:\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in COLUMNS[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col)+k]][row+k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[COLUMNS[COLUMNS.index(col)+k]][row-k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        # Check for winning condition after each move\n        for color in ['Red', 'Yellow']:\n            # Check vertical\n            for col in board:\n                if board[col][-4:].count(color) == 4:\n                    return color\n            \n            # Check horizontal and diagonals\n            for row in range(6):\n                for col in range(4):\n                    if all((col + i < len(board) and len(board[chr(ord('A') + col + i)]) > row and board[chr(ord('A') + col + i)][row] == color) for i in range(4)):\n                        return color\n                \n                for col in range(4):\n                    if row + 3 < 6 and all((len(board[chr(ord('A') + col + i)]) > row + i and board[chr(ord('A') + col + i)][row + i] == color) for i in range(4)):\n                        return color\n                \n                for col in range(3, 7):\n                    if row + 3 < 6 and all((len(board[chr(ord('A') + col - i)]) > row + i and board[chr(ord('A') + col - i)][row + i] == color) for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        for color in [\"Red\", \"Yellow\"]:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal for win\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or\n                    check_direction(board, col, row, 0, 1, color) or\n                    check_direction(board, col, row, 1, 1, color) or\n                    check_direction(board, col, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color] += 1\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < len(board[col])):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all((col, row) in [(c, r) for c in COLUMNS for r in ROWS if grid[c][r] == color] for col, row in line):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col >= 'D' and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    if any(all(board[c][r] == color for c, r in line)\n                           for line in LINES):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in range(6) if grid[column][r] is None), None)\n        if row is not None:\n            grid[column][row] = color\n            player_moves[color].append((column, row))\n            if check_winner(player_moves[color]):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    move_set = set(moves)\n    \n    for column, row in moves:\n        for dx, dy in directions:\n            count = 1\n            for step in range(1, 4):\n                if (chr(ord(column) + dx * step), row + dy * step) in move_set:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                if (chr(ord(column) - dx * step), row - dy * step) in move_set:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if x in grid and y < 6):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for step in range(1, 4):\n                    x = ord(col) - ord('A') + step * direction[0] * d\n                    y = row + step * direction[1] * d\n                    if 0 <= x < 7 and 0 <= y < 6 and (chr(x + ord('A')), y) in player_moves[player]:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return player\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + i)][row] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                # Check diagonal (down-right)\n                if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                # Check diagonal (down-left)\n                if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n\n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:\n                        if col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4)):\n                            return color\n                        if row <= 2 and all(board[chr(col + 65)][row + k] == color for k in range(4)):\n                            return color\n                        if col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)):\n                            return color\n                        if col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all((pos in board and board[pos[0]][pos[1]] == color) for pos in line):\n                return True\n        return False\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                if check_winner(color):\n                    return color\n                break\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        for color_check in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[x][y] == color_check for x, y in line):\n                    return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            if c in board:\n                for r in range(6):\n                    if board[c][r] is not None:\n                        color = board[c][r]\n                        # Check vertical\n                        if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if c <= 'D' and r >= 3 and all(board[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if c <= 'D' and r <= 2 and all(board[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal (bottom-left to top-right)\n                    if c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal (top-left to bottom-right)\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in {(col, row) for col in board for row in range(6)}):\n                return color\n                \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {column: [None] * 6 for column in COLUMNS}\n    player_positions = { 'Red': set(), 'Yellow': set() }\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                player_positions[color].add((column, row))\n                break\n\n        for color in ['Red', 'Yellow']:\n            for pos in player_positions[color]:\n                if check_winner(pos, color, player_positions[color]):\n                    return color\n                \n    return \"Draw\"\n\ndef check_winner(start_pos, color, positions):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            new_pos = (chr(ord(start_pos[0]) + dx * step), start_pos[1] + dy * step)\n            if new_pos in positions:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            new_pos = (chr(ord(start_pos[0]) - dx * step), start_pos[1] - dy * step)\n            if new_pos in positions:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    def check_winner(color):\n        for i in range(6):\n            for j in range(7):\n                if j <= 3 and all(board[chr(j + 65)][i] == color for j in range(j, j + 4)):\n                    return True\n                if i <= 2 and all(board[chr(j + 65)][i] == color for j in range(i, i + 4)):\n                    return True\n                if i <= 2 and j <= 3 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                    return True\n                if i >= 3 and j <= 3 and all(board[chr(j + 65)][i - k] == color for k in range(4)):\n                    return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [[(0, 1), (0, -1)], [(1, 0), (-1, 0)], [(1, 1), (-1, -1)], [(1, -1), (-1, 1)]]:\n            for dx, dy in direction:\n                count = 1\n                x, y = col, row\n                for _ in range(3):\n                    x = chr(ord(x) + dx)\n                    y += dy\n                    if 0 <= y < 6 and x in board and board[x][y] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 'R', 'Yellow': 'Y'}\n    win_positions = set()\n\n    for pos in pieces_positions:\n        col, player = pos.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = player\n            win_positions.add((col, row))\n\n            if check_winner(board, player):\n                return player.split('_')[1]\n\n    return \"Draw\"\n\ndef check_winner(board, player):\n    player_char = player[0]\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if (check_direction(board, col, row, 1, 0, player) or  # Horizontal\n                    check_direction(board, col, row, 0, 1, player) or  # Vertical\n                    check_direction(board, col, row, 1, 1, player) or  # Diagonal /\n                    check_direction(board, col, row, 1, -1, player)):  # Diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, player):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in board and 0 <= r < 6 and board[c][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n                \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (col, row) in LINES:  # Check all winning lines\n                        for line in LINES:\n                            if (col, row) in line and all(board[c][r] == color for c, r in line):\n                                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j >= 3 and i <= 2 and all(board['ABCDEFG'[j-k]][i+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if row >= 3 and check_winner(board, column, row, color):\n            return color\n        if any(board[col][0] is None for col in 'ABCDEFG'):\n            continue\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    return (check_direction(board, column, row, color, 1, 0) or  # Horizontal\n            check_direction(board, column, row, color, 0, 1) or  # Vertical\n            check_direction(board, column, row, color, 1, 1) or  # Diagonal /\n            check_direction(board, column, row, color, 1, -1)    # Diagonal \\\n           )\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 1\n    for d in [1, -1]:\n        c, r = ord(column) - 65, row\n        while True:\n            c += d * delta_col\n            r += d * delta_row\n            if 0 <= c < 7 and 0 <= r < 6 and board[chr(c + 65)][r] == color:\n                count += 1\n            else:\n                break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board['ABCDEFG'[i]][j] is not None:\n                    if j <= 2 and all(board['ABCDEFG'[i]][j+k] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n                    if i <= 3 and all(board['ABCDEFG'[i+k]][j] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n                    if i <= 3 and j <= 2 and all(board['ABCDEFG'[i+k]][j+k] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n                    if i <= 3 and j >= 3 and all(board['ABCDEFG'[i+k]][j-k] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) - 61]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    else:\n        return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    if j + 3 < 7 and all(board['ABCDEFG'[j + k]][i] == color for k in range(4)):\n                        return color\n                    if i + 3 < 6 and all(board['ABCDEFG'[j]][i + k] == color for k in range(4)):\n                        return color\n                    if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j + k]][i + k] == color for k in range(4)):\n                        return color\n                    if j - 3 >= 0 and i + 3 < 6 and all(board['ABCDEFG'[j - k]][i + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        positions = [grid[x][y] for x, y in line if x in grid and y < len(grid[x]) and grid[x][y] is not None]\n        if len(positions) == 4 and len(set(positions)) == 1:\n            return positions[0].split('_')[1]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        # Check for a winning condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal right, diagonal left\n            count = 1\n            \n            # Check in both directions\n            for step in [-1, 1]:\n                r, c = row, ord(col) - ord('A')\n                while 0 <= r + step < 6 and 0 <= c + step * direction[0] < 7 and grid[chr(c + step * direction[0] + ord('A'))][r + step] == color:\n                    count += 1\n                    r += step\n            \n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if column <= 'D' and all(grid[chr(ord(column) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if column <= 'D' and row <= 2 and all(grid[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if column >= 'D' and row <= 2 and all(grid[chr(ord(column) - k)][row + k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                        return True\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4)):\n                        return True\n                    # Check diagonal (down-right)\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return True\n                    # Check diagonal (up-right)\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:  # Check horizontal\n                    if c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4)):\n                        return True\n                if board[chr(65 + c)][r] == color:  # Check vertical\n                    if r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4)):\n                        return True\n                if board[chr(65 + c)][r] == color:  # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4)):\n                        return True\n                if board[chr(65 + c)][r] == color:  # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if c + 3 < 7 and all(board['ABCDEFG'[c + k]][r] == color for k in range(4)):\n                        return color\n                    if r + 3 < 6 and all(board['ABCDEFG'[c]][r + k] == color for k in range(4)):\n                        return color\n                    if c + 3 < 7 and r + 3 < 6 and all(board['ABCDEFG'[c + k]][r + k] == color for k in range(4)):\n                        return color\n                    if c - 3 >= 0 and r + 3 < 6 and all(board['ABCDEFG'[c - k]][r + k] == color for k in range(4)):\n                        return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            if check_win(board[column][-4:], color):\n                return color\n    \n    # Check all possible win conditions\n    for col in board:\n        for row in range(len(board[col])):\n            if len(board[col]) - row >= 4:\n                if check_vertical(board[col][row:], board[col][row]):\n                    return board[col][row]\n            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                if check_direction(board, col, row, direction, board[col][row]):\n                    return board[col][row]\n    \n    return \"Draw\"\n\ndef check_win(positions, color):\n    return positions.count(color) >= 4\n\ndef check_vertical(column, color):\n    return column.count(color) >= 4\n\ndef check_direction(board, col, row, direction, color):\n    count = 0\n    x, y = col, row\n    while x in board and y < len(board[x]) and y >= 0 and board[x][y] == color:\n        count += 1\n        if count == 4:\n            return True\n        x = chr(ord(x) + direction[0])\n        y += direction[1]\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or \n                    check_direction(board, color, col, row, 0, 1) or \n                    check_direction(board, color, col, row, 1, 1) or \n                    check_direction(board, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if row < 0 or row >= 6 or col not in board or board[col][row] != color:\n            return False\n        count += 1\n        col = chr(ord(col) + delta_col)\n        row += delta_row\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] == color:\n                    if row <= 2 and all(grid[column][row + i] == color for i in range(4)):  # vertical\n                        return True\n                    if column <= 'D' and all(grid[chr(ord(column) + i)][row] == color for i in range(4)):  # horizontal\n                        return True\n                    if row <= 2 and column <= 'D' and all(grid[chr(ord(column) + i)][row + i] == color for i in range(4)):  # diagonal \\\n                        return True\n                    if row >= 3 and column <= 'D' and all(grid[chr(ord(column) + i)][row - i] == color for i in range(4)):  # diagonal /\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color_check in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color_check:\n                        if (i + 3 < 7 and all(board[chr(i + k + 65)][j] == color_check for k in range(4))) or \\\n                           (j + 3 < 6 and all(board[chr(i + 65)][j + k] == color_check for k in range(4))) or \\\n                           (i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color_check for k in range(4))) or \\\n                           (i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color_check for k in range(4))):\n                            return color_check\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y in range(6)):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                x = ord(column) - ord('A') + dx * i * step\n                y = row + dy * i * step\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    # Check vertical\n                    if r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c + 3 < 7 and r - 3 >= 0 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner.split('_')[1]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            \n            for dx in range(-1, 3):\n                for dy in range(-1, 3):\n                    if dx == 0 and dy == 0:\n                        continue\n                    count = 0\n                    for step in range(4):\n                        x = (ord(col) - ord('A')) + dx * step\n                        y = row + dy * step\n                        if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                            count += 1\n                    if count == 4:\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_col = chr(ord(col) + direction[0] * step)\n                            new_row = row + direction[1] * step\n                            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                                count += 1\n                        if count >= 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            if col in grid:\n                for row in range(6):\n                    if grid[col][row] == color:\n                        if check_win(grid, col, row, color):\n                            return color\n\n    return \"Draw\"\n\ndef check_win(grid, column, row, color):\n    count = 0\n    # Check vertical\n    for r in range(6):\n        if grid[column][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n\n    count = 0\n    # Check horizontal\n    for c in 'ABCDEFG':\n        if grid[c][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n\n    count = 0\n    # Check diagonal \\\n    for i in range(-3, 1):\n        if column in grid and (row + i) < 6 and (row + i) >= 0:\n            if grid[column][row + i] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    count = 0\n    # Check diagonal /\n    for i in range(-3, 1):\n        if column in grid and (row - i) < 6 and (row - i) >= 0:\n            if grid[column][row - i] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for c in range(7):\n            for r in range(6):\n                if (c <= 3 and all(board[chr(c + ord('A') + i)][r] == color for i in range(4))) or \\\n                   (r <= 2 and all(board[chr(c + ord('A'))][r + i] == color for i in range(4))) or \\\n                   (c <= 3 and r <= 2 and all(board[chr(c + ord('A') + i)][r + i] == color for i in range(4))) or \\\n                   (c <= 3 and r >= 3 and all(board[chr(c + ord('A') + i)][r - i] == color for i in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) > 6:\n            return \"Draw\"  # Impossible state if column exceeds 6\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            # Check in the positive direction\n            for step in range(1, 4):\n                r = len(board[col]) - 1\n                c = ord(col) - ord('A') + step * direction[0]\n                if 0 <= c < 7 and (r - step) in board[chr(c + ord('A'))] and board[chr(c + ord('A'))][r - step] == color:\n                    count += 1\n                else:\n                    break\n            # Check in the negative direction\n            for step in range(1, 4):\n                r = len(board[col]) - 1\n                c = ord(col) - ord('A') - step * direction[0]\n                if 0 <= c < 7 and (r - step) in board[chr(c + ord('A'))] and board[chr(c + ord('A'))][r - step] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row]:\n                    color = grid[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for direction in LINES:\n            count = sum(1 for pos in direction if grid[pos[0]][pos[1]] == color)\n            if count == 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for positions in LINES:\n            if all(board[col][row] == color for col, row in positions if col in board and row < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        col_index = COLUMNS.index(column)\n        \n        for row in reversed(ROWS):\n            if grid[row][col_index] is None:\n                grid[row][col_index] = color\n                break\n\n    for color in [\"Red\", \"Yellow\"]:\n        for line in LINES:\n            if all(grid[row][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    col_index = 'ABCDEFG'.index(col)\n    \n    # Check vertical\n    if len(board[col]) >= 4 and all(board[col][i] == color for i in range(len(board[col]) - 4, len(board[col]))):\n        return True\n    \n    # Check horizontal\n    for start in range(max(0, col_index - 3), min(len(board) - 3, col_index + 1)):\n        if all(board['ABCDEFG'[start + i]].count(color) > 0 for i in range(4)):\n            return True\n    \n    # Check diagonal /\n    for row in range(6):\n        for start_col in range(4):\n            if all(board['ABCDEFG'[start_col + i]].count(color) > 0 and\n                   len(board['ABCDEFG'[start_col + i]]) > row - (i - 3) for i in range(4)):\n                return True\n    \n    # Check diagonal \\\n    for row in range(6):\n        for start_col in range(3, 7):\n            if all(board['ABCDEFG'[start_col - i]].count(color) > 0 and\n                   len(board['ABCDEFG'[start_col - i]]) > row - (3 - i) for i in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS = 'ABCDEFG'\n    ROWS = range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col in COLUMNS[:-3] and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col)+4)):\n                        return color\n                    # Check vertical\n                    if row in ROWS[:-3] and all(board[col][j] == color for j in range(row, row+4)):\n                        return color\n                    # Check diagonal \\\n                    if col in COLUMNS[:-3] and row in ROWS[:-3] and all(board[COLUMNS[COLUMNS.index(col)+k]][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col in COLUMNS[:-3] and row in ROWS[3:] and all(board[COLUMNS[COLUMNS.index(col)+k]][row-k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        for d in [1, -1]:\n            r, c = row, ord(column) - ord('A')\n            while 0 <= r + dr * d < 6 and 0 <= c + dc * d < 7:\n                r += dr * d\n                c += dc * d\n                if c < 0 or c >= 7: break\n                if len(board[chr(c + ord('A'))]) > r and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in [\"Red\", \"Yellow\"]:\n        for i in range(len(COLUMNS)):\n            for j in range(len(ROWS)):\n                if board[COLUMNS[i]][j] == color:\n                    if (i + 3 < len(COLUMNS) and \n                        all(board[COLUMNS[i + k]][j] == color for k in range(4))):\n                        return color\n                    if (j + 3 < len(ROWS) and \n                        all(board[COLUMNS[i]][j + k] == color for k in range(4))):\n                        return color\n                    if (i + 3 < len(COLUMNS) and j + 3 < len(ROWS) and \n                        all(board[COLUMNS[i + k]][j + k] == color for k in range(4))):\n                        return color\n                    if (i + 3 < len(COLUMNS) and j - 3 >= 0 and \n                        all(board[COLUMNS[i + k]][j - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == color for col, row in zip('ABCDEFG'[ord(col)-65:ord(col)-65+4], range(row, row-4, -1))):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == color for col, row in zip('ABCDEFG'[ord(col)-65:ord(col)-65+4], range(row, row+4))):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if 0 <= ord(col) + i < ord('H')) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i < ord('H') and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < ord('H') and row - i >= 0)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] == color):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c].count(color) > 0 for c in line):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < len(board[x]))):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[column][row] for column, row in line if board[column][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in grid and all(grid[col][row] == color for col in 'ABCDEFG'[:7][\n                                'ABCDEFG'.index(col):][:4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) - k][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for win_positions in LINES:\n        colors = {board[col][row] for col, row in win_positions if board[col][row] is not None}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    color = board[chr(65 + c)][r]\n                    if (c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        if all(0 <= row + dy * k < 6 and \n                               0 <= ord(col) - ord('A') + dx * k < 7 and \n                               board[chr(ord('A') + (ord(col) - ord('A') + dx * k))][row + dy * k] == color \n                               for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = list(board.keys()).index(column) + direction[1] * step * d\n                    \n                    if 0 <= r < 6 and 0 <= c < 7 and (piece := board[list(board.keys())[c]][r]) == color:\n                        count += 1\n                    else:\n                        break\n                    \n                    if count == 4:\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col].count(color) > 0 and (row := board[col].index(color)) >= 0 and board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw' if len(pieces_positions) == 42 else None\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    new_col = chr(ord(col) + direction[0] * i * d)\n                    new_row = row + direction[1] * i * d\n                    if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == player:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            new_col = chr(ord(col) + d[0] * i)\n            new_row = row + d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        for i in range(1, 4):\n            new_col = chr(ord(col) - d[0] * i)\n            new_row = row - d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col_idx in range(7):\n                for row_idx in range(6):\n                    count = 0\n                    for step in range(4):\n                        c = col_idx + step * direction[0]\n                        r = row_idx + step * direction[1]\n                        if 0 <= c < 7 and 0 <= r < 6 and board[chr(65 + c)][r] == color:\n                            count += 1\n                        else:\n                            break\n                    if count == 4:\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i >= 3 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+k)][r] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[chr(ord(c)+k)][r-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c)+k)][r+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return color\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return color\n                if i + 3 < 6 and j + 3 < 7 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return color\n                if i - 3 >= 0 and j + 3 < 7 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n    def check_winner(color):\n        # Check horizontal, vertical, and diagonal connections\n        for c in range(7):\n            for r in range(6):\n                if board[COLUMNS[c]][r] == color:\n                    if c <= 3 and all(board[COLUMNS[c + i]][r] == color for i in range(4)):\n                        return True\n                    if r <= 2 and all(board[COLUMNS[c]][r + i] == color for i in range(4)):\n                        return True\n                    if c <= 3 and r <= 2 and all(board[COLUMNS[c + i]][r + i] == color for i in range(4)):\n                        return True\n                    if c <= 3 and r >= 3 and all(board[COLUMNS[c + i]][r - i] == color for i in range(4)):\n                        return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = next((r for r in range(6) if board[column][r] is None), None)\n        if row is not None:\n            board[column][row] = player\n            player_moves[player].append((column, row))\n    \n    def check_winner(player):\n        positions = player_moves[player]\n        for col, row in positions:\n            for dx, dy in [(-1, 0), (0, 1), (1, 1), (1, -1)]:\n                count = 1\n                for step in range(1, 4):\n                    x, y = chr(ord(col) + dx * step), row + dy * step\n                    if (x, y) in positions:\n                        count += 1\n                    else:\n                        break\n                for step in range(1, 4):\n                    x, y = chr(ord(col) - dx * step), row - dy * step\n                    if (x, y) in positions:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return player\n        return None\n    \n    red_winner = check_winner('Red')\n    yellow_winner = check_winner('Yellow')\n\n    if red_winner and yellow_winner:\n        return \"Draw\"\n    elif red_winner:\n        return \"Red\"\n    elif yellow_winner:\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for c in 'ABCDEFG':\n            if check_winner(board, c):\n                return board[c][row]\n    return \"Draw\"\n\ndef check_winner(board, col):\n    for row in range(6):\n        if board[col][row] is None:\n            continue\n        color = board[col][row]\n        if check_direction(board, col, row, color):\n            return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dr, dc in directions:\n        count = 0\n        for step in range(4):\n            r = row + dr * step\n            c = chr(ord(col) + dc * step)\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    def drop_piece(column, piece):\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = piece\n                return (column, row)\n        return None\n\n    def check_winner():\n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] is not None:\n                    piece = board[col][row]\n                    if any(all(board[c][r] == piece for c, r in line) for line in LINES):\n                        return piece\n        return None\n\n    for position in pieces_positions:\n        column, piece = position.split('_')\n        drop_piece(column, piece)\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = player\n        player_moves[player].append((col, row))\n        \n        # Check for a win condition\n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for col, row in moves:\n        if check_direction(moves, col, row, 1, 0) or \\\n           check_direction(moves, col, row, 0, 1) or \\\n           check_direction(moves, col, row, 1, 1) or \\\n           check_direction(moves, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(-3, 4):\n        check_col = chr(ord(col) + i * delta_col)\n        check_row = row + i * delta_row\n        if (check_col, check_row) in moves:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in board:\n            for row in range(6):\n                color = board[column][row]\n                if color is None:\n                    continue\n                \n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == board[chr(ord(column) + i)][row] for i in range(4)):\n                    return color\n                \n                # Check vertical\n                if row <= 2 and all(board[column][row] == board[column][row + i] for i in range(4)):\n                    return color\n                \n                # Check diagonal /\n                if column <= 'D' and row >= 3 and all(board[column][row] == board[chr(ord(column) + i)][row - i] for i in range(4)):\n                    return color\n                \n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board[column][row] == board[chr(ord(column) + i)][row + i] for i in range(4)):\n                    return color\n\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (row <= 2 and all(board[col][row+k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4))) or \\\n                       (col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4))) or \\\n                       (col >= 'D' and row <= 2 and all(board[chr(ord(col)-k)][row+k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    if (j < 4 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4))) or \\\n                       (i < 3 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4))) or \\\n                       (j < 4 and i < 3 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4))) or \\\n                       (j > 2 and i < 3 and all(board['ABCDEFG'[j-k]][i+k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == 'Red' for x, y in line if x in board and y < 6):\n                return \"Red\"\n            if all(board[x][y] == 'Yellow' for x, y in line if x in board and y < 6):\n                return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for color in [\"Red\", \"Yellow\"]:\n            for col in COLUMNS:\n                for row in ROWS:\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if row <= 2 and col >= 'D' and all(grid[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            if board[c].count('Red') >= 4 or board[c].count('Yellow') >= 4:\n                for start in range(3):\n                    if board[c][start] == board[c][start+1] == board[c][start+2] == board[c][start+3] and board[c][start] is not None:\n                        return board[c][start]\n\n        for r in range(6):\n            for c in range(4):\n                if board['ABCDEFG'[c]][r] == board['ABCDEFG'[c+1]][r] == board['ABCDEFG'[c+2]][r] == board['ABCDEFG'[c+3]][r] and board['ABCDEFG'[c]][r] is not None:\n                    return board['ABCDEFG'[c]][r]\n\n        for r in range(3):\n            for c in range(4):\n                if board['ABCDEFG'[c]][r] == board['ABCDEFG'[c+1]][r+1] == board['ABCDEFG'[c+2]][r+2] == board['ABCDEFG'[c+3]][r+3] and board['ABCDEFG'[c]][r] is not None:\n                    return board['ABCDEFG'[c]][r]\n\n        for r in range(3, 6):\n            for c in range(4):\n                if board['ABCDEFG'[c]][r] == board['ABCDEFG'[c+1]][r-1] == board['ABCDEFG'[c+2]][r-2] == board['ABCDEFG'[c+3]][r-3] and board['ABCDEFG'[c]][r] is not None:\n                    return board['ABCDEFG'[c]][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board[chr(65 + i)][j] == color:\n                    if i + 3 < 7 and all(board[chr(65 + i + k)][j] == color for k in range(4)):\n                        return color\n                    if j + 3 < 6 and all(board[chr(65 + i)][j + k] == color for k in range(4)):\n                        return color\n                    if i + 3 < 7 and j + 3 < 6 and all(board[chr(65 + i + k)][j + k] == color for k in range(4)):\n                        return color\n                    if i + 3 < 7 and j - 3 >= 0 and all(board[chr(65 + i + k)][j - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for sign in (1, -1):\n            for i in range(1, 4):\n                x, y = ord(column) - ord('A') + dx * sign * i, row + dy * sign * i\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    if any(all(board[c][r] == color for c, r in line)\n                           for line in LINES):\n                        return color\n                    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            if grid[col].count(color) >= 4:\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        for start in range(max(0, col_index(col) - 3), min(7, col_index(col) + 1)):\n                            if all(grid[chr(start + 65)][row] == color for start in range(start, start + 4)):\n                                return color\n                        # Check diagonal \\\n                        for start in range(max(0, col_index(col) - 3), min(7, col_index(col) + 1)):\n                            if row <= 2 and all(grid[chr(start + 65)][row + (start - col_index(col))] == color for start in range(start, start + 4)):\n                                return color\n                        # Check diagonal /\n                        for start in range(max(0, col_index(col) - 3), min(7, col_index(col) + 1)):\n                            if row >= 3 and all(grid[chr(start + 65)][row - (start - col_index(col))] == color for start in range(start, start + 4)):\n                                return color\n\n    return \"Draw\"\n\ndef col_index(col):\n    return ord(col) - 65\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            count = 0\n            for cell in line:\n                if grid[cell[0]][cell[1]] == color:\n                    count += 1\n                else:\n                    count = 0\n                if count == 4:\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    if ((all(board[c][r] == board[c][r+i] for i in range(4)) or\n                         all(r < 6 and board[c][r] == board[c][r+i] for i in range(4) if r+i < 6) or\n                         all(c in 'ABCDEFG' and r+i < 6 and board[c][r] == board[c][r+i] for i in range(4) if c in 'ABCDEFG' and r+i < 6) or\n                         all(c in 'ABCDEFG' and r-i < 6 and board[c][r] == board[c][r-i] for i in range(4) if c in 'ABCDEFG' and r-i < 6))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if x in grid and y < 6 and y >= 0):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                for i in range(1, 4):\n                    r = row + direction[0] * i * d\n                    c = list(grid.keys()).index(column) + direction[1] * i * d\n                    if 0 <= r < 6 and 0 <= c < 7 and grid[list(grid.keys())[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n\n        # Check for win condition\n        if check_winner(player_moves[player], player):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(moves, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for col, row in moves:\n        for dx, dy in directions:\n            count = 1\n            for step in range(1, 4):\n                if (chr(ord(col) + dx * step), row + dy * step) in moves:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                if (chr(ord(col) - dx * step), row - dy * step) in moves:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    \n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check for four in a row horizontally\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    \n                    # Check for four in a row vertically\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return color\n                    \n                    # Check for four in a row diagonally /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n                    \n                    # Check for four in a row diagonally \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if grid['ABCDEFG'[i]][j] == color:\n                    # Check vertical\n                    if j <= 2 and all(grid['ABCDEFG'[i]][j+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if i <= 3 and all(grid['ABCDEFG'[i+k]][j] == color for k in range(4)):\n                        return color\n                    # Check diagonal (down-right)\n                    if i <= 3 and j <= 2 and all(grid['ABCDEFG'[i+k]][j+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal (up-right)\n                    if i <= 3 and j >= 3 and all(grid['ABCDEFG'[i+k]][j-k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                    return color\n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                    return color\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        if len(board[col]) > 6:\n            continue\n        for line in LINES:\n            if all((c, r) in [(col, i) for i, c in enumerate(board[col])] for c, r in line) and \\\n               all(board[c][r] == color for c, r in line if r < len(board[c])):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal (bottom-left to top-right)\n                    if c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal (top-left to bottom-right)\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in {(col, row) for col in board for row in range(6)}):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    def check_winner(color):\n        for i in range(6):\n            for j in range(7):\n                if j < 4 and all(board[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4)):\n                    return True\n                if i < 3 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)):\n                    return True\n                if i < 3 and j < 4 and all(board[chr(j + ord('A') + k)][i + k] == color for k in range(4)):\n                    return True\n                if i > 2 and j < 4 and all(board[chr(j + ord('A') + k)][i - k] == color for k in range(4)):\n                    return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color, col, row):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color, col, row):\n    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for d in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + direction[0] * d * i)\n                new_row = row + direction[1] * d * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            r, c = row + i * d[1], ord(col) - ord('A') + i * d[0]\n            if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        for i in range(1, 4):\n            r, c = row - i * d[1], ord(col) - ord('A') - i * d[0]\n            if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            new_col = chr(ord(col) + direction[0] * step)\n                            new_row = row + direction[1] * step\n                            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == board[col][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    def check_winner():\n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == player for col, row in line):\n                    return player\n        return None\n\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player] += 1\n        \n        winner = check_winner()\n        if winner:\n            return winner\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {column: [None] * 6 for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for column in COLUMNS:\n            for row in ROWS:\n                if grid[column][row] == color:\n                    if column <= 'D' and all(grid[COLUMNS[i]][row] == color for i in range(COLUMNS.index(column), COLUMNS.index(column) + 4)):\n                        return True\n                    if row <= 2 and all(grid[column][j] == color for j in range(row, row + 4)):\n                        return True\n                    if column <= 'D' and row <= 2 and all(grid[COLUMNS[i]][row + i] == color for i in range(4)):\n                        return True\n                    if column <= 'D' and row >= 3 and all(grid[COLUMNS[i]][row - i] == color for i in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row+i] == grid[col][row] for i in range(4)):\n                        return grid[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col)+i)][row] == grid[col][row] for i in range(4)):\n                        return grid[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col)+i)][row-i] == grid[col][row] for i in range(4)):\n                        return grid[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col)+i)][row+i] == grid[col][row] for i in range(4)):\n                        return grid[col][row]\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        # Check for a win after each move\n        if check_winner(board, col, color):\n            return color.split('_')[1]\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    # Convert the board into a 2D list for easier access\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for c in board:\n        for r in range(len(board[c])):\n            grid[5 - r][ord(c) - ord('A')] = board[c][r]\n\n    # Check all directions for a win\n    for r in range(6):\n        for c in range(7):\n            if grid[r][c] == color:\n                if (c + 3 < 7 and all(grid[r][c + i] == color for i in range(4))) or \\\n                   (r + 3 < 6 and all(grid[r + i][c] == color for i in range(4))) or \\\n                   (r + 3 < 6 and c + 3 < 7 and all(grid[r + i][c + i] == color for i in range(4))) or \\\n                   (r - 3 >= 0 and c + 3 < 7 and all(grid[r - i][c + i] == color for i in range(4))):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board['ABCDEFG'[i]][j] is not None:\n                    if j <= 2 and all(board['ABCDEFG'[i]][j+k] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n                    if i <= 3 and all(board['ABCDEFG'[i+k]][j] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n                    if i <= 3 and j <= 2 and all(board['ABCDEFG'[i+k]][j+k] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n                    if i <= 3 and j >= 3 and all(board['ABCDEFG'[i+k]][j-k] == board['ABCDEFG'[i]][j] for k in range(4)):\n                        return board['ABCDEFG'[i]][j]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                    return color\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n        \n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for direction in [1, -1]:\n                for step in range(1, 4):\n                    new_x = ord(column) - ord('A') + dx * step * direction\n                    new_y = row + dy * step * direction\n                    if 0 <= new_x < 7 and 0 <= new_y < 6 and grid[chr(new_x + ord('A'))][new_y] == player:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        for line in LINES:\n            if all((col, row) in board.items() and len(board[col]) > row and board[col][row] == color for col, row in line):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if c in grid and r < 6):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        positions = [grid[x][y] for x, y in line if x in grid and y < len(grid[x]) and grid[x][y] is not None]\n        if len(positions) == 4 and len(set(positions)) == 1:\n            return positions[0].split('_')[1]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if column <= 'D' and all(grid[chr(ord(column) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if column <= 'D' and row <= 2 and all(grid[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if column >= 'D' and row <= 2 and all(grid[chr(ord(column) - k)][row + k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(7):\n        for j in range(6):\n            if board[chr(i + 65)][j] == color:\n                if i + 3 < 7 and all(board[chr(k + 65)][j] == color for k in range(i, i + 4)):\n                    return True\n                if j + 3 < 6 and all(board[chr(i + 65)][k] == color for k in range(j, j + 4)):\n                    return True\n                if i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4)):\n                    return True\n                if i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if c + 3 < 7 and all(board['ABCDEFG'[c + i]][r] == color for i in range(4)):\n                        return color\n                    if r + 3 < 6 and all(board['ABCDEFG'[c]][r + i] == color for i in range(4)):\n                        return color\n                    if c + 3 < 7 and r + 3 < 6 and all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4)):\n                        return color\n                    if c + 3 < 7 and r - 3 >= 0 and all(board['ABCDEFG'[c + i]][r - i] == color for i in range(4)):\n                        return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            if check_win(board[column][-4:], color):\n                return color\n    \n    # Check all possible winning conditions\n    for col in board:\n        for row in range(len(board[col])):\n            if len(board[col]) - row >= 4:\n                if check_vertical(board[col][row:], board[col][row]):\n                    return board[col][row]\n            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                if check_direction(board, col, row, direction, board[col][row]):\n                    return board[col][row]\n    \n    return \"Draw\"\n\ndef check_win(positions, color):\n    return positions.count(color) >= 4\n\ndef check_vertical(column, color):\n    return column.count(color) >= 4\n\ndef check_direction(board, col, row, direction, color):\n    count = 0\n    x, y = col, row\n    while x in board and y < len(board[x]) and y >= 0 and board[x][y] == color:\n        count += 1\n        if count == 4:\n            return True\n        x = chr(ord(x) + direction[0])\n        y += direction[1]\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or\n                    check_direction(board, color, col, row, 0, 1) or\n                    check_direction(board, color, col, row, 1, 1) or\n                    check_direction(board, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if row < 0 or row >= 6 or col not in board or board[col][row] != color:\n            return False\n        count += 1\n        col = chr(ord(col) + delta_col)\n        row += delta_row\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all((grid[c][r] == color for c, r in line)):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    elif len(pieces_positions) == 42:\n        return 'Draw'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if i <= 2 and j <= 3 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if i <= 2 and j >= 3 and all(board['ABCDEFG'[j-k]][i+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if (c + 3 < 7 and all(board['ABCDEFG'[c + k]][r] == color for k in range(4))) or \\\n                       (r + 3 < 6 and all(board['ABCDEFG'[c]][r + k] == color for k in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(board['ABCDEFG'[c + k]][r + k] == color for k in range(4))) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and all(board['ABCDEFG'[c + k]][r - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n\n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j < 4 and all(grid[chr(c)][i] == color for c in range(ord('A'), ord('A') + 4))) or \\\n                   (i < 3 and all(grid[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                   (i < 3 and j < 4 and all(grid[chr(j + ord('A'))][i + k] == color for k in range(4)) and \\\n                    all(grid[chr(j + k + ord('A'))][i + 3 - k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(positions):\n    for col, row in positions:\n        if any(all((chr(c) + str(r) in positions) for c, r in get_line(col, row, d))\n               for d in [(1, 0), (0, 1), (1, 1), (1, -1)]):\n            return True\n    return False\n\ndef get_line(col, row, direction):\n    return [(ord(col) + k * direction[0], row + k * direction[1]) for k in range(4)]\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is not None:\n                    color = board[column][row]\n\n                    # Check horizontal\n                    if column <= 'D' and all(board[column][row] == color for column in 'ABCDEFG'[(ord(column) - 65):(ord(column) - 61)]):\n                        return color\n\n                    # Check vertical\n                    if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal \\\n                    if column <= 'D' and row <= 2 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check diagonal /\n                    if column <= 'D' and row >= 3 and all(board[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                        return color\n\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_col = chr(ord(col) + direction[0] * step)\n                            new_row = row + direction[1] * step\n                            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                                count += 1\n                        if count >= 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(7):\n            for j in range(6):\n                if grid[chr(65 + i)][j] == color:\n                    if (i <= 3 and all(grid[chr(65 + i + k)][j] == color for k in range(4))) or \\\n                       (j <= 2 and all(grid[chr(65 + i)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(grid[chr(65 + i + k)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(grid[chr(65 + i + k)][j - k] == color for k in range(4))):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    else:\n        return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in range(6) if board[column][r] is None), None)\n        if row is not None:\n            board[column][row] = color\n            player_moves[color].append((column, row))\n            \n            for line in LINES:\n                if all(pos in player_moves[color] for pos in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is None:\n                    continue\n                # Check vertical\n                if row <= 2 and all(grid[col][row + i] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n                # Check horizontal\n                if col <= 'D' and all(grid[chr(ord(col) + i)][row] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for positions in LINES:\n                if all(board[x][y] == color for x, y in positions if x in board and y < 6):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and r >= 0):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Get the row of the last piece played\n    row = len(board[column]) - 1\n    \n    # Check all directions for a connect four\n    return (\n        check_direction(board, color, column, row, 1, 0) or  # Horizontal\n        check_direction(board, color, column, row, 0, 1) or  # Vertical\n        check_direction(board, color, column, row, 1, 1) or  # Diagonal /\n        check_direction(board, color, column, row, 1, -1)    # Diagonal \\\n    )\n\ndef check_direction(board, color, column, row, delta_col, delta_row):\n    count = 0\n    for i in range(-3, 4):  # Check in both directions\n        col = chr(ord(column) + i * delta_col)\n        r = row + i * delta_row\n        if col in board and r in range(6) and (r < len(board[col]) and board[col][r] == color):\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (row <= 2 and all(board[col][row+k] == color for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(board[chr(ord(col)+k)][row+k] == color for k in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(board[chr(ord(col)+k)][row-k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[col].append(color)\n        \n        # Check for a winning condition after each move\n        if check_winner(grid, col, color):\n            return color.split('_')[1]\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, color):\n    row = len(grid[col]) - 1\n    \n    # Check vertical\n    if row >= 3 and all(grid[col][row - i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for c in range(max(0, ord(col) - 3), min(7, ord(col) + 1)):\n        if all(grid[chr(c + i)][row] == color for i in range(4) if c + i < 7):\n            return True\n    \n    # Check diagonal \\\n    for start_col in range(max(0, ord(col) - 3), min(7, ord(col) + 1)):\n        for r in range(max(0, row - 3), min(6, row + 1)):\n            if all(0 <= start_col + i < 7 and r + i < 6 and grid[chr(start_col + i)][r + i] == color for i in range(4)):\n                return True\n    \n    # Check diagonal /\n    for start_col in range(max(0, ord(col) - 3), min(7, ord(col) + 1)):\n        for r in range(min(6, row + 1), max(-1, row - 4), -1):\n            if all(0 <= start_col + i < 7 and r - i >= 0 and grid[chr(start_col + i)][r - i] == color for i in range(4)):\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            if any(all(board[column][row] == color for column, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] == color:\n                    if (row <= 2 and all(board[column][row + k] == color for k in range(4)) or\n                        (column <= 'D' and all(board[chr(ord(column) + k)][row] == color for k in range(4))) or\n                        (column <= 'D' and row <= 2 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4))) or\n                        (column >= 'D' and row <= 2 and all(board[chr(ord(column) - k)][row + k] == color for k in range(4)))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        for color_to_check in ['Red', 'Yellow']:\n            for col in COLUMNS:\n                for row in ROWS:\n                    if grid[col][row] == color_to_check:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color_to_check for k in range(4)):\n                            return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 0\n            for d in range(-3, 4):\n                x = pieces_positions.index(position) // 7 + d * direction[0]\n                y = row + d * direction[1]\n                if 0 <= x < 7 and 0 <= y < 6 and (board[COLUMNS[x]][y] == color):\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    count = 0\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in ((1, 0), (0, 1), (1, 1), (1, -1)):\n            for r in range(6):\n                for c in range(7):\n                    if (0 <= r < 6) and (0 <= c < 7) and board[chr(65+c)][r] == color:\n                        count = 0\n                        for step in range(4):\n                            rr = r + direction[0] * step\n                            cc = c + direction[1] * step\n                            if (0 <= rr < 6) and (0 <= cc < 7) and board[chr(65+cc)][rr] == color:\n                                count += 1\n                        if count == 4:\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color, row, col):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color, row, col):\n    row, col = int(row), ord(col) - ord('A')\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        for d in [1, -1]:\n            r, c = row + dr * d, col + dc * d\n            while 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n                r += dr * d\n                c += dc * d\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(ROWS):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in [\"Red\", \"Yellow\"]:\n            for line in [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n                         for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n                        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n                         for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n                        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n                         for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n                        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n                         for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]:\n                if all(board[col][row] == color for col, row in line if row >= 0 and row < 6):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n    for line in LINES:\n        colors = [board[col].count('Red') for col, row in line]\n        if any(count >= 4 for count in colors):\n            return \"Red\"\n        colors = [board[col].count('Yellow') for col, row in line]\n        if any(count >= 4 for count in colors):\n            return \"Yellow\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board['ABCDEFG'[i]][j] is not None:\n                    current_color = board['ABCDEFG'[i]][j]\n                    \n                    # Check vertical\n                    if j <= 2 and all(board['ABCDEFG'[i]][j+k] == current_color for k in range(4)):\n                        return current_color\n                    \n                    # Check horizontal\n                    if i <= 3 and all(board['ABCDEFG'[i+k]][j] == current_color for k in range(4)):\n                        return current_color\n                    \n                    # Check diagonal /\n                    if i <= 3 and j >= 3 and all(board['ABCDEFG'[i+k]][j-k] == current_color for k in range(4)):\n                        return current_color\n                    \n                    # Check diagonal \\\n                    if i <= 3 and j <= 2 and all(board['ABCDEFG'[i+k]][j+k] == current_color for k in range(4)):\n                        return current_color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if (0 <= row < 6) and (col in board) and (board[col][row] == color):\n            count += 1\n            if count == 4:\n                return True\n        col = chr(ord(col) + delta_col)\n        row += delta_row\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [((1, 0), (0, 1)),  # horizontal, vertical\n                          ((1, 1), (1, -1))]:  # diagonal right, diagonal left\n            for j in range(7):\n                for i in range(6):\n                    if board[chr(j + 65)][i] == color:  # chr(j + 65) to get column names\n                        count = 1\n                        for (dx, dy) in direction:\n                            x, y = j, i\n                            while 0 <= x + dx < 7 and 0 <= y + dy < 6 and board[chr(x + dx + 65)][y + dy] == color:\n                                count += 1\n                                x += dx\n                                y += dy\n                        if count >= 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j < 4 and all(board[chr(ord('A') + j + k)][i] == color for k in range(4))) or \\\n                   (i < 3 and all(board[chr(ord('A') + j)][i + k] == color for k in range(4))) or \\\n                   (j < 4 and i < 3 and all(board[chr(ord('A') + j + k)][i + k] == color for k in range(4))) or \\\n                   (j < 4 and i > 2 and all(board[chr(ord('A') + j + k)][i - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (col, row) in LINES:\n                        for line in LINES:\n                            if (col, row) in line:\n                                if all(grid[c][r] == color for c, r in line):\n                                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player].append((column, row))\n                break\n\n        if check_winner(player_moves[player]):\n            return player\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(positions):\n    for (c, r) in positions:\n        if check_direction(positions, c, r, 1, 0) or check_direction(positions, c, r, 0, 1) or \\\n           check_direction(positions, c, r, 1, 1) or check_direction(positions, c, r, 1, -1):\n            return True\n    return False\n\ndef check_direction(positions, col, row, dc, dr):\n    count = 1\n    for d in [1, -1]:\n        for i in range(1, 4):\n            new_col = chr(ord(col) + dc * d * i)\n            new_row = row + dr * d * i\n            if new_col in 'ABCDEFG' and 0 <= new_row < 6 and (new_col, new_row) in positions:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```"
        ]
    }
}