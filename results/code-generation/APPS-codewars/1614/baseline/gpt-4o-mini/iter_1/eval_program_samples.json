{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c].count(color) >= 1 for c in line if c in board):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (\n                        c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4)) or\n                        r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4)) or\n                        c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)) or\n                        c - 3 >= 0 and r + 3 < 6 and all(board[chr(c - i + 65)][r + i] == color for i in range(4))\n                    ):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if colors and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and len(set(colors)) == 1:\n                return colors[0]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c, r) in grid.items() and r < 6 and grid[c][r] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line if grid[column][row] is not None):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x]) and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c][row] == color if c in board and len(board[c]) > row else False) for c in 'ABCDEFG'):\n                    return color\n\n        # Check vertical connections\n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                count = 0\n                for r in range(len(board[col])):\n                    if board[col][r] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n        \n        # Check diagonal connections\n        for c in range(len(board)):\n            for r in range(6):\n                if (c < 4 and r < 3 and \n                    all((board['ABCDEFG'[c + k]][r + k] == color if c + k < 7 and r + k < 6 else False) for k in range(4))):\n                    return color\n                if (c < 4 and r > 2 and \n                    all((board['ABCDEFG'[c + k]][r - k] == color if c + k < 7 and r - k >= 0 else False) for k in range(4))):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y >= 0 and y < 6 and x in board and board[x][y] == color):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == color and \n                (i < 3 or (board[column][i-1] == color and \n                board[column][i-2] == color and \n                board[column][i-3] == color))):\n                return color\n        \n        # Vertical check\n        if len(board[column]) >= 4:\n            if all(board[column][j] == color for j in range(len(board[column]) - 4, len(board[column]))):\n                return color\n        \n        # Horizontal and diagonal checks\n        for col in 'ABCDEFG':\n            if len(board[col]) >= 4:\n                for j in range(len(board[col]) - 3):\n                    if all(board[col][j+k] == color for k in range(4)):\n                        return color\n                \n                # Check for diagonal from bottom left to top right\n                if col in 'ABCDEFG' and (len(board[col]) - 1) >= 3:\n                    for j in range(len(board[col]) - 3):\n                        if all(board[chr(ord(col) + k)][len(board[chr(ord(col) + k)]) - 1 - j - k] == color for k in range(4)):\n                            return color\n                \n                # Check for diagonal from top left to bottom right\n                if col in 'ABCDEFG' and (len(board[col]) - 1) >= 3:\n                    for j in range(len(board[col]) - 3):\n                        if all(board[chr(ord(col) - k)][j + k] == color for k in range(4) if (ord(col) - k) >= ord('A')):\n                            return color\n\n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in range(len(board)):\n            for row in range(6):\n                if board['ABCDEFG'[col]][row] == color:\n                    if (col + 3 < 7 and all(board['ABCDEFG'[col + k]][row] == color for k in range(4)) or\n                        row + 3 < 6 and all(board['ABCDEFG'[col]][row + k] == color for k in range(4)) or\n                        col + 3 < 7 and row + 3 < 6 and all(board['ABCDEFG'[col + k]][row + k] == color for k in range(4)) or\n                        col + 3 < 7 and row - 3 >= 0 and all(board['ABCDEFG'[col + k]][row - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if (col, row) in line:\n                colors = [board[c][r] for c, r in line if board[c][r] is not None]\n                if len(colors) == 4 and len(set(colors)) == 1:\n                    return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] is not None:\n                    color = board[chr(col + 65)][row]\n                    # Check vertical\n                    if row <= 2 and all(board[chr(col + 65)][r] == color for r in range(row, row + 4)):\n                        return color\n                    # Check horizontal\n                    if col <= 3 and all(board[chr(c + 65)][row] == color for c in range(col, col + 4)):\n                        return color\n                    # Check diagonal down\n                    if col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal up\n                    if col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col)+i)][row] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == board[col][row+i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col)+i)][row+i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col)+i)][row-i] for i in range(4)):\n                        return color\n    \n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if (\n                        check_direction(board, col, row, 1, 0, color) or  # horizontal\n                        check_direction(board, col, row, 0, 1, color) or  # vertical\n                        check_direction(board, col, row, 1, 1, color) or  # diagonal \\\n                        check_direction(board, col, row, 1, -1, color)    # diagonal /\n                    ):\n                        return color\n    \n    return \"Draw\"\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        new_col = chr(ord(col) + i * delta_col)\n        new_row = row + i * delta_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (down-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (up-right)\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                if (row <= 2 and all(board[col][row + i] == board[col][row] for i in range(4))) or \\\n                   (col <= 'D' and all(board[chr(ord(col) + i)][row] == board[col][row] for i in range(4))) or \\\n                   (row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == board[col][row] for i in range(4))) or \\\n                   (row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == board[col][row] for i in range(4))):\n                    return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    # Check vertical\n    if len(board[col]) >= 4 and all(board[col][i] == color for i in range(-4, 0)):\n        return True\n    \n    # Check horizontal\n    for c in 'ABCDEFG':\n        if board[c][-1] == color:\n            count = 0\n            for i in range(-1, -len(board[c])-1, -1):\n                if board[c][i] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n    \n    # Check diagonal /\n    for i in range(4):\n        for j in range(3, -1, -1):\n            if (col, color) in board.keys() and board[col].count(color) >= 4:\n                if (board.get(chr(ord(col) + i), [])[j-i] == color and\n                    board.get(chr(ord(col) + i + 1), [])[j-i+1] == color and\n                    board.get(chr(ord(col) + i + 2), [])[j-i+2] == color and\n                    board.get(chr(ord(col) + i + 3), [])[j-i+3] == color):\n                    return True\n    \n    # Check diagonal \\\n    for i in range(4):\n        for j in range(4):\n            if (col, color) in board.keys() and board[col].count(color) >= 4:\n                if (board.get(chr(ord(col) - i), [])[j+i] == color and\n                    board.get(chr(ord(col) - i - 1), [])[j+i-1] == color and\n                    board.get(chr(ord(col) - i - 2), [])[j+i-2] == color and\n                    board.get(chr(ord(col) - i - 3), [])[j+i-3] == color):\n                    return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for direction in [\n            [(0, 1), (0, -1)],  # Vertical\n            [(1, 0), (-1, 0)],  # Horizontal\n            [(1, 1), (-1, -1)], # Diagonal /\n            [(1, -1), (-1, 1)]  # Diagonal \\\n        ]:\n            for dx, dy in direction:\n                count = 1\n                for step in range(1, 4):\n                    x = ord(column) - ord('A') + dx * step\n                    y = row + dy * step\n                    if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        if check_win(board, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    # Check vertical, horizontal, and both diagonal directions\n    return (check_direction(board, col, row, color, 1, 0) or  # Vertical\n            check_direction(board, col, row, color, 0, 1) or  # Horizontal\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal /\n            check_direction(board, col, row, color, 1, -1)    # Diagonal \\\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 1\n    \n    # Check one direction\n    for step in range(1, 4):\n        new_col = chr(ord(col) + delta_col * step)\n        new_row = row + delta_row * step\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    \n    # Check the opposite direction\n    for step in range(1, 4):\n        new_col = chr(ord(col) - delta_col * step)\n        new_row = row - delta_row * step\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    \n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n                \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if row >= 3 and all(board[column][row - i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for col in 'ABCDEFG':\n        if column == col:\n            count = 0\n            for r in range(len(board[col])):\n                if board[col][r] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n        else:\n            count = 0\n            for r in range(len(board[col])):\n                if board[col][r] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n\n    # Check diagonal (down-right)\n    start_col = ord(column) - ord('A')\n    start_row = row\n    \n    for d in range(-3, 1):\n        count = 0\n        for i in range(4):\n            c = start_col + i + d\n            r = start_row - i\n            if 0 <= c < 7 and 0 <= r < 6 and r < len(board[chr(c + ord('A'))]) and board[chr(c + ord('A'))][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                break\n\n    # Check diagonal (up-right)\n    start_col = ord(column) - ord('A')\n    start_row = row\n    \n    for d in range(-3, 1):\n        count = 0\n        for i in range(4):\n            c = start_col + i + d\n            r = start_row + i\n            if 0 <= c < 7 and 0 <= r < 6 and r < len(board[chr(c + ord('A'))]) and board[chr(c + ord('A'))][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                break\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(7):\n            for j in range(6):\n                if board[chr(i + 65)][j] == color:\n                    if (i <= 3 and all(board[chr(x + 65)][j] == color for x in range(i, i + 4))) or \\\n                       (j <= 2 and all(board[chr(i + 65)][y] == color for y in range(j, j + 4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(x + 65)][y] == color for x, y in zip(range(i, i + 4), range(j, j + 4)))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(x + 65)][y] == color for x, y in zip(range(i, i + 4), range(j, j - 4, -1)))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for c in range(7):\n            for r in range(6):\n                if (c + 3 < 7 and all(board[chr(ord('A') + c + i)][r] == color for i in range(4))) or \\\n                   (r + 3 < 6 and all(board[chr(ord('A') + c)][r + i] == color for i in range(4))) or \\\n                   (c + 3 < 7 and r + 3 < 6 and all(board[chr(ord('A') + c + i)][r + i] == color for i in range(4))) or \\\n                   (c + 3 < 7 and r - 3 >= 0 and all(board[chr(ord('A') + c + i)][r - i] == color for i in range(4))):\n                    return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if (col + 1 < 7 and board[chr(col + 1 + 65)][row] == color and\n                        col + 2 < 7 and board[chr(col + 2 + 65)][row] == color and\n                        col + 3 < 7 and board[chr(col + 3 + 65)][row] == color):\n                        return color\n                    if (row + 1 < 6 and board[chr(col + 65)][row + 1] == color and\n                        row + 2 < 6 and board[chr(col + 65)][row + 2] == color and\n                        row + 3 < 6 and board[chr(col + 65)][row + 3] == color):\n                        return color\n                    if (col + 1 < 7 and row + 1 < 6 and board[chr(col + 1 + 65)][row + 1] == color and\n                        col + 2 < 7 and row + 2 < 6 and board[chr(col + 2 + 65)][row + 2] == color and\n                        col + 3 < 7 and row + 3 < 6 and board[chr(col + 3 + 65)][row + 3] == color):\n                        return color\n                    if (col + 1 < 7 and row - 1 >= 0 and board[chr(col + 1 + 65)][row - 1] == color and\n                        col + 2 < 7 and row - 2 >= 0 and board[chr(col + 2 + 65)][row - 2] == color and\n                        col + 3 < 7 and row - 3 >= 0 and board[chr(col + 3 + 65)][row - 3] == color):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j + 3 < 7 and all(grid[chr(c)][i] == color for c in range(ord('A') + j, ord('A') + j + 4))) or \\\n                   (i + 3 < 6 and all(grid[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                   (i + 3 < 6 and j + 3 < 7 and all(grid[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                   (i - 3 >= 0 and j + 3 < 7 and all(grid[chr(j + ord('A'))][i - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # Horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # Vertical\n                    check_direction(board, col, row, 1, 1, color) or  # Diagonal \\\n                    check_direction(board, col, row, 1, -1, color)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, col, row, d_col, d_row, color):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + d_col * step)\n        r = row + d_row * step\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontally\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertically\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                   (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                   (row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                   (row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_line(board, col, row, color) or\n                    check_column(board, col, row, color) or\n                    check_diagonal(board, col, row, color)):\n                    return color\n\n    return \"Draw\"\n\ndef check_line(board, col, row, color):\n    count = 0\n    for c in 'ABCDEFG':\n        if board[c][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n\ndef check_column(board, col, row, color):\n    count = 0\n    for r in range(6):\n        if board[col][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n\ndef check_diagonal(board, col, row, color):\n    count1 = count2 = 0\n    for d in range(-3, 4):\n        if 0 <= row + d < 6:\n            if 0 <= ord(col) - ord('A') + d < 7:\n                if board[chr(ord(col) + d)][row + d] == color:\n                    count1 += 1\n                else:\n                    count1 = 0\n            if 0 <= ord(col) - ord('A') - d < 7:\n                if board[chr(ord(col) - d)][row + d] == color:\n                    count2 += 1\n                else:\n                    count2 = 0\n    return count1 >= 4 or count2 >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(col + 65)][row] == color:\n                    # Check horizontal\n                    if col < 4 and all(grid[chr(col + k + 65)][row] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if row < 3 and all(grid[chr(col + 65)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col < 4 and row < 3 and all(grid[chr(col + k + 65)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col > 2 and row < 3 and all(grid[chr(col - k + 65)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for victory\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check horizontally\n                    if col <= 'D':\n                        if all(board[c][row] == board[col][row] for c in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                            return board[col][row]\n                    # Check vertically\n                    if row <= 2:\n                        if all(board[col][r] == board[col][row] for r in range(row, row + 4)):\n                            return board[col][row]\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3:\n                        if all(board[COLUMNS[COLUMNS.index(col) + k]][row - k] == board[col][row] for k in range(4)):\n                            return board[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2:\n                        if all(board[COLUMNS[COLUMNS.index(col) + k]][row + k] == board[col][row] for k in range(4)):\n                            return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    color = board[c][r]\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal\n    for row in range(6):\n        count = 0\n        for col in 'ABCDEFG':\n            count = count + 1 if board[col][row] == color else 0\n            if count == 4:\n                return True\n\n    # Check vertical\n    for col in 'ABCDEFG':\n        count = 0\n        for row in range(6):\n            count = count + 1 if board[col][row] == color else 0\n            if count == 4:\n                return True\n\n    # Check diagonal (bottom-left to top-right)\n    for col in range(4):\n        for row in range(3, 6):\n            if (board[chr(65 + col)][row] == color and\n                board[chr(65 + col + 1)][row - 1] == color and\n                board[chr(65 + col + 2)][row - 2] == color and\n                board[chr(65 + col + 3)][row - 3] == color):\n                return True\n\n    # Check diagonal (top-left to bottom-right)\n    for col in range(4):\n        for row in range(6):\n            if (row < 3):\n                continue\n            if (board[chr(65 + col)][row] == color and\n                board[chr(65 + col + 1)][row - 1] == color and\n                board[chr(65 + col + 2)][row - 2] == color and\n                board[chr(65 + col + 3)][row - 3] == color):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and y >= 0):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            # Check for vertical win\n            if board[column][-1] == board[column][-2] == board[column][-3] == board[column][-4]:\n                return color\n        \n        # Check for horizontal and diagonal wins\n        for col_offset in range(-3, 1):\n            colors = []\n            for i in range(4):\n                col = chr(ord(column) + col_offset + i)\n                if col in board and len(board[col]) > 0:\n                    colors.append(board[col][-1] if len(board[col]) > 0 else None)\n                else:\n                    colors.append(None)\n                    \n            if colors.count(colors[0]) == 4 and colors[0] is not None:\n                return colors[0]\n        \n        for row in range(len(board[column])):\n            if row > 2:\n                # Diagonal check down-right\n                if (column in board and row < len(board[column]) and\n                        ord(column) + 3 < ord('H') and\n                        len(board[chr(ord(column) + 1)]) > row and\n                        len(board[chr(ord(column) + 2)]) > row and\n                        len(board[chr(ord(column) + 3)]) > row and\n                        board[column][row] == board[chr(ord(column) + 1)][row] == \n                        board[chr(ord(column) + 2)][row] == \n                        board[chr(ord(column) + 3)][row]):\n                    return board[column][row]\n        \n                # Diagonal check down-left\n                if (column in board and row < len(board[column]) and\n                        ord(column) - 3 >= ord('A') and\n                        len(board[chr(ord(column) - 1)]) > row and\n                        len(board[chr(ord(column) - 2)]) > row and\n                        len(board[chr(ord(column) - 3)]) > row and\n                        board[column][row] == board[chr(ord(column) - 1)][row] == \n                        board[chr(ord(column) - 2)][row] == \n                        board[chr(ord(column) - 3)][row]):\n                    return board[column][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] == color:\n                    if col in COLUMNS[:-3] and all(grid[col][row] == color for col in COLUMNS[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                        return color\n                    if row in ROWS[:-3] and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    if col in COLUMNS[:-3] and row in ROWS[:-3] and all(grid[COLUMNS[COLUMNS.index(col) + k]][ROWS[row + k]] == color for k in range(4)):\n                        return color\n                    if col in COLUMNS[:-3] and row in ROWS[3:] and all(grid[COLUMNS[COLUMNS.index(col) + k]][ROWS[row - k]] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if grid[chr(c + ord('A'))][r] == color:\n                        count = 0\n                        for step in range(4):\n                            nr = r + step * direction[0]\n                            nc = c + step * direction[1]\n                            if 0 <= nr < 6 and 0 <= nc < 7 and grid[chr(nc + ord('A'))][nr] == color:\n                                count += 1\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] == color:\n                    if j + 3 < 7 and all(board[chr(k + 65)][i] == color for k in range(j, j + 4)):\n                        return color\n                    if i + 3 < 6 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                        return color\n                    if i + 3 < 6 and j + 3 < 7 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                    if i - 3 >= 0 and j + 3 < 7 and all(board[chr(j + k + 65)][i - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [] for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        board[col].append(color)\n        if len(board[col]) > 6:\n            return \"Draw\"\n\n        for r in range(len(board[col])):\n            if board[col][r] == color:\n                if check_winner(board, color, col, r):\n                    return color\n\n    return \"Draw\"\n\ndef check_winner(board, color, col, row):\n    COLUMNS = 'ABCDEFG'\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        \n        for d in [1, -1]:\n            r, c = row, COLUMNS.index(col)\n            while 0 <= r + dr * d < 6 and 0 <= c + dc * d < 7 and \\\n                  (COLUMNS[c + dc * d] in board and \n                   len(board[COLUMNS[c + dc * d]]) > r + dr * d and \n                   board[COLUMNS[c + dc * d]][r + dr * d] == color):\n                count += 1\n                r += dr * d\n                c += dc * d\n            \n            if count >= 4:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for d in range(4):\n            c = chr(ord(col) + dc * d)\n            r = row + dr * d\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontally\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) + 4]):\n                            return color\n                        # Check vertically\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) + 4] for r in range(row, row - 4, -1)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) + 4] for r in range(row, row + 4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a win after each move\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n\n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for x in range(7):\n                for y in range(6):\n                    count = 0\n                    color = board['ABCDEFG'[x]][y] if x < 7 and y < 6 else None\n                    if color is not None:\n                        for step in range(4):\n                            nx, ny = x + step * direction[0], y + step * direction[1]\n                            if 0 <= nx < 7 and 0 <= ny < 6 and board['ABCDEFG'[nx]][ny] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    if (r <= 2 and all(board[c][r+i] == color for i in range(4))) or \\\n                       (c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4))) or \\\n                       (r <= 2 and c <= 'D' and all(board[chr(ord(c)+i)][r+i] == color for i in range(4))) or \\\n                       (r >= 3 and c <= 'D' and all(board[chr(ord(c)+i)][r-i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for r in range(6):\n            for c in range(7):\n                if board[chr(65+c)][r] is not None:\n                    player = board[chr(65+c)][r]\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(65+c+i)][r] == player for i in range(4)):\n                        return player\n                    # Check vertical\n                    if r <= 2 and all(board[chr(65+c)][r+i] == player for i in range(4)):\n                        return player\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(65+c+i)][r-i] == player for i in range(4)):\n                        return player\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(65+c+i)][r+i] == player for i in range(4)):\n                        return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if (c <= 3 and all(board['ABCDEFG'[c+i]][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board['ABCDEFG'[c]][r+i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board['ABCDEFG'[c+i]][r+i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board['ABCDEFG'[c+i]][r-i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n                \n        # Check for a winner\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal up-right\n                    if j <= 3 and i >= 3 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < 6) and (y >= 0)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            new_col = chr(ord(col) + direction[0] * step)\n                            new_row = row + direction[1] * step\n                            if (new_col in board and 0 <= new_row < 6 and \n                                    board[new_col][new_row] == board[col][row]):\n                                count += 1\n                        if count >= 4:\n                            return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for step in [1, -1]:\n                for i in range(1, 4):\n                    r = len(board[col]) - 1 + direction[0] * step * i\n                    c = 'ABCDEFG'.index(col) + direction[1] * step * i\n                    if 0 <= r < 6 and 0 <= c < 7 and (len(board['ABCDEFG'[c]]) > r and board['ABCDEFG'[c]][r] == color):\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i in range(6) if board[col][i] is None)\n        board[col][row] = color\n        \n        for dcol, drow in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for direction in [1, -1]:\n                for step in range(1, 4):\n                    ncol = chr(ord(col) + dcol * direction * step)\n                    nrow = row + drow * direction * step\n                    if 0 <= nrow < 6 and ncol in board and board[ncol][nrow] == color:\n                        count += 1\n                    else:\n                        break\n                        \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col_start in 'ABCDEFG':\n            for row_start in range(6):\n                if board[col_start][row_start] == color:\n                    if check_winner(board, col_start, row_start, color):\n                        return color\n\n    return \"Draw\"\n\ndef check_winner(board, col_start, row_start, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                col = chr(ord(col_start) + d[0] * i * step)\n                row = row_start + d[1] * i * step\n                if col in board and 0 <= row < 6 and board[col][row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and (board['ABCDEFG'[c]][r] == color):\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        player_moves[color].append((column, row))\n\n        for line in LINES:\n            if all(pos in player_moves[color] for pos in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if grid[chr(65 + j)][i] == color:\n                    if j <= 3 and all(grid[chr(65 + j + k)][i] == color for k in range(4)):\n                        return color\n                    if i <= 2 and all(grid[chr(65 + j)][i + k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i <= 2 and all(grid[chr(65 + j + k)][i + k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i >= 3 and all(grid[chr(65 + j + k)][i - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n            \n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    # Check vertical\n    if len(board[col]) >= 4 and all(c == color for c in board[col][-4:]):\n        return True\n    \n    # Check horizontal\n    row = len(board[col]) - 1\n    for c in 'ABCDEFG':\n        if color == board[c][-1] if len(board[c]) > row else None:\n            count = 0\n            for k in range(max(0, 'ABCDEFG'.index(c) - 3), min(7, 'ABCDEFG'.index(c) + 4)):\n                if board['ABCDEFG'[k]][row] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n    \n    # Check diagonals\n    for r in range(6):\n        for c in range(7):\n            if (c + 3 < 7 and r + 3 < 6 and \n                board['ABCDEFG'[c]][r] == color and \n                board['ABCDEFG'[c + 1]][r + 1] == color and \n                board['ABCDEFG'[c + 2]][r + 2] == color and \n                board['ABCDEFG'[c + 3]][r + 3] == color):\n                return True\n            if (c + 3 < 7 and r - 3 >= 0 and \n                board['ABCDEFG'[c]][r] == color and \n                board['ABCDEFG'[c + 1]][r - 1] == color and \n                board['ABCDEFG'[c + 2]][r - 2] == color and \n                board['ABCDEFG'[c + 3]][r - 3] == color):\n                return True\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        for col_check in board:\n            if len(board[col_check]) >= 4:\n                for r in range(len(board[col_check]) - 3):\n                    if all(board[col_check][r+i] == board[col_check][r] for i in range(4)):\n                        return board[col_check][r]\n\n        for r in range(len(board[col]) - 1, -1, -1):\n            if len(board[col]) >= 4:\n                for r_offset in range(4):\n                    if r_offset > r or (col_check, r_offset) not in board:\n                        continue\n                    if all((board[col_check][r - r_offset] == board[col][r] for r_offset in range(4))):\n                        return board[col][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        # Check for a win if this column now has at least 4 pieces\n        if len(board[col]) >= 4:\n            if check_win(board, col, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_win(board, col, color):\n    # Check vertical\n    if len(board[col]) >= 4 and all(board[col][-i-1] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    row = len(board[col]) - 1\n    for c in 'ABCDEFG':\n        if c in board and row < len(board[c]) and board[c][row] == color:\n            count = 1\n            for offset in range(1, 4):\n                if (c + offset) in board and row < len(board[c + offset]) and board[c + offset][row] == color:\n                    count += 1\n                else:\n                    break\n            for offset in range(1, 4):\n                if (c - offset) in board and row < len(board[c - offset]) and board[c - offset][row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n\n    # Check diagonal (down-right)\n    for offset in range(4):\n        if (col in board and len(board[col]) > row + offset and board[col][row + offset] == color) and \\\n           (chr(ord(col) + offset) in board and len(board[chr(ord(col) + offset)]) > row + offset and board[chr(ord(col) + offset)][row + offset] == color):\n            if all(chr(ord(col) + i) in board and len(board[chr(ord(col) + i)]) > row + i and board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                return True\n\n    # Check diagonal (down-left)\n    for offset in range(4):\n        if (col in board and len(board[col]) > row + offset and board[col][row + offset] == color) and \\\n           (chr(ord(col) - offset) in board and len(board[chr(ord(col) - offset)]) > row + offset and board[chr(ord(col) - offset)][row + offset] == color):\n            if all(chr(ord(col) - i) in board and len(board[chr(ord(col) - i)]) > row + i and board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                return True\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(7):\n            for j in range(6):\n                if grid[chr(65 + i)][j] == color:  # Check horizontal\n                    if i <= 3 and all(grid[chr(65 + k)][j] == color for k in range(i, i + 4)):\n                        return True\n                if grid[chr(65 + i)][j] == color:  # Check vertical\n                    if j <= 2 and all(grid[chr(65 + i)][k] == color for k in range(j, j + 4)):\n                        return True\n                if grid[chr(65 + i)][j] == color:  # Check diagonal \\\n                    if i <= 3 and j <= 2 and all(grid[chr(65 + k)][j + k] == color for k in range(4)):\n                        return True\n                if grid[chr(65 + i)][j] == color:  # Check diagonal /\n                    if i <= 3 and j >= 3 and all(grid[chr(65 + k)][j - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            # Check one direction\n            for step in range(1, 4):\n                x, y = ord(column) - ord('A') + step * dx, row + step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check the opposite direction\n            for step in range(1, 4):\n                x, y = ord(column) - ord('A') - step * dx, row - step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (0 <= r < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for direction in [[(0,1), (0,-1)], [(1,0), (-1,0)], [(1,1), (-1,-1)], [(1,-1), (-1,1)]]:\n            count = 1\n            for d in direction:\n                for step in range(1, 4):\n                    new_col = chr(ord(col) + d[0] * step)\n                    new_row = row + d[1] * step\n                    if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check for win conditions\n                    if (row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)) or\n                        col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)) or\n                        row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)) or\n                        row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4))):\n                        return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if c in board:\n                for r in range(6):\n                    if board[c][r] is not None:\n                        if (check_winner(board, c, r, board[c][r])):\n                            return board[c][r]\n    \n    return \"Draw\"\n\ndef check_winner(board, c, r, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in [1, -1]:\n            cc, rr = c, r\n            while True:\n                cc_idx = 'ABCDEFG'.index(cc) + step * dc\n                rr_idx = rr + step * dr\n                if 0 <= cc_idx < 7 and 0 <= rr_idx < 6 and board['ABCDEFG'[cc_idx]][rr_idx] == color:\n                    count += 1\n                    cc = 'ABCDEFG'[cc_idx]\n                    rr = rr_idx\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x])):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check for win condition if the column has at least 4 pieces\n        if len(board[col]) >= 4:\n            # Check vertical\n            if board[col][-4:] == [color] * 4:\n                return color\n\n            # Check horizontal and diagonals\n            for c in 'ABCDEFG':\n                if c in board:\n                    count = 0\n                    for i in range(max(0, board[c].count(color) - 3), len(board[c])):\n                        if board[c][i] == color:\n                            count += 1\n                        else:\n                            count = 0\n                        if count == 4:\n                            return color\n            \n            # Check diagonals\n            for start_col in range(len(board) - 3):\n                for start_row in range(len(board[start_col])):\n                    if all(board[chr(ord('A') + start_col + i)][start_row + i] == color for i in range(4) if start_row + i < len(board[chr(ord('A') + start_col + i)])):\n                        return color\n                    if start_row >= 3:\n                        if all(board[chr(ord('A') + start_col + i)][start_row - i] == color for i in range(4) if start_row - i >= 0):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if ((row <= 2 and all(board[col][row + k] == color for k in range(4))) or\n                                (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or\n                                (row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or\n                                (row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```"
        ]
    }
}