{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c].count(color) >= 1 for c in line if c in board):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = {board[col][row] for col, row in line if board[col][row] is not None}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            colors = {board[col][row] for col, row in line if board[col][row] is not None}\n            if len(colors) == 1 and None not in colors:\n                return colors.pop()\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < len(grid[c]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a winner after each move\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if (row <= 2 and all(grid[col][row + k] == grid[col][row] for k in range(4))) or \\\n                       (col <= 'D' and all(grid[chr(ord(col) + k)][row] == grid[col][row] for k in range(4))) or \\\n                       (row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == grid[col][row] for k in range(4))) or \\\n                       (row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == grid[col][row] for k in range(4))):\n                        return grid[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for line in LINES:\n            values = [board[x][y] for x, y in line if x in board and y < 6]\n            if values.count(\"Red\") == 4:\n                return \"Red\"\n            elif values.count(\"Yellow\") == 4:\n                return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 0 <= ord(c) + i < 7):\n                            return color\n                    # Check diagonal /\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and 0 <= ord(c) + d < 7 and all(\n                            board[chr(ord(c) + d)][r - d] == color for d in range(4)):\n                            return color\n                    # Check diagonal \\\n                    for d in range(-3, 1):\n                        if 0 <= r - d < len(board[c]) and 0 <= ord(c) - d < 7 and all(\n                            board[chr(ord(c) - d)][r - d] == color for d in range(4)):\n                            return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y >= 0 and y < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if (0 <= row < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Check vertical\n    if len(board[column]) >= 4 and all(c == color for c in board[column][-4:]):\n        return True\n    \n    # Check horizontal\n    row_index = len(board[column]) - 1\n    for c in 'ABCDEFG':\n        if board[c][-1] == color and row_index < len(board[c]):\n            count = 1\n            for offset in [1, -1]:\n                for i in range(1, 4):\n                    check_col = chr(ord(c) + offset * i)\n                    if check_col in board and row_index < len(board[check_col]) and board[check_col][row_index] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return True\n    \n    # Check diagonal \\\n    for col_offset, row_offset in zip(range(-3, 1), range(-3, 1)):\n        if all((chr(ord(column) + col_offset + i), row_index + row_offset + i) in board.items() and \n               board[chr(ord(column) + col_offset + i)][row_index + row_offset + i] == color for i in range(4)):\n            return True\n            \n    # Check diagonal /\n    for col_offset, row_offset in zip(range(-3, 1), range(3, -1, -1)):\n        if all((chr(ord(column) + col_offset + i), row_index + row_offset - i) in board.items() and \n               board[chr(ord(column) + col_offset + i)][row_index + row_offset - i] == color for i in range(4)):\n            return True\n\n    return False\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:  # A = 65, B = 66, ...\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n                    if c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == player for x, y in line if y < 6 and board[x][y] is not None):\n                    return player\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and board[c][r] is not None)):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(c + 65)][r] == color:\n                        if r + 3 < 6 and all(board[chr(c + 65)][r + k] == color for k in range(4)):\n                            return color\n                        if c + 3 < 7 and all(board[chr(c + k + 65)][r] == color for k in range(4)):\n                            return color\n                        if c + 3 < 7 and r + 3 < 6 and all(board[chr(c + k + 65)][r + k] == color for k in range(4)):\n                            return color\n                        if c - 3 >= 0 and r + 3 < 6 and all(board[chr(c - k + 65)][r + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    if (j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4))) or \\\n                       (i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4))) or \\\n                       (j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4))) or \\\n                       (j <= 3 and i >= 3 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        for x, y in player_moves[player]:\n            if any(all((c, r) in player_moves[player] for c, r in line) for line in LINES):\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in 'RGBY':\n            for i in range(6):\n                for j in range(7):\n                    if (j + 3 < 7 and all(grid[chr(ord('A') + j + k)][i] == color for k in range(4))) or \\\n                       (i + 3 < 6 and all(grid[chr(ord('A') + j)][i + k] == color for k in range(4))) or \\\n                       (i + 3 < 6 and j + 3 < 7 and all(grid[chr(ord('A') + j + k)][i + k] == color for k in range(4))) or \\\n                       (i - 3 >= 0 and j + 3 < 7 and all(grid[chr(ord('A') + j + k)][i - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        # Check for a win condition\n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check vertical\n    if sum(1 for r in range(6) if board[col][r] == color) >= 4:\n        return True\n\n    # Check horizontal\n    if sum(1 for c in board if board[c][row] == color) >= 4:\n        return True\n\n    # Check diagonal (top-left to bottom-right)\n    for start_row in range(max(0, row - 3), min(6, row + 1)):\n        if all(board[chr(ord(col) + d)][start_row + d] == color for d in range(4) if chr(ord(col) + d) in board):\n            return True\n\n    # Check diagonal (bottom-left to top-right)\n    for start_row in range(min(6, row + 1), max(-1, row - 3), -1):\n        if all(board[chr(ord(col) + d)][start_row - d] == color for d in range(4) if chr(ord(col) + d) in board):\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column].append(color)\n    \n    for color in ['Red', 'Yellow']:\n        for col in grid:\n            for row in range(len(grid[col])):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= len(grid[col]) - 4 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    for k in range(max(0, col_index(col) - 3), min(col_index(col) + 1, 4)):\n                        if all(grid[COLUMNS[k + j]][row] == color for j in range(4) if k + j < 7):\n                            return color\n                    # Check diagonal /\n                    if row >= 3 and all(grid[COLUMNS[col_index(col) - k]][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= len(grid[col]) - 4 and all(grid[COLUMNS[col_index(col) + k]][row + k] == color for k in range(4) if col_index(col) + k < 7):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n\ndef col_index(column):\n    return 'ABCDEFG'.index(column)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n\n        for dx in range(-1, 3):\n            for dy in range(-1, 2):\n                count = 0\n                for n in range(4):\n                    x = ord(col) - ord('A') + dx * n\n                    y = row + dy * n\n                    if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == player:\n                        count += 1\n                    else:\n                        break\n                if count == 4:\n                    return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for positions in LINES:\n            if all(board[column][row] == color for column, row in positions if row < 6 and board[column][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:  # 'A' is 65\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + k] == board[chr(c + 65)][r] for k in range(4)):\n                        return board[chr(c + 65)][r]\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + k + 65)][r] == board[chr(c + 65)][r] for k in range(4)):\n                        return board[chr(c + 65)][r]\n                    # Check diagonal down-right\n                    if c <= 3 and r <= 2 and all(board[chr(c + k + 65)][r + k] == board[chr(c + 65)][r] for k in range(4)):\n                        return board[chr(c + 65)][r]\n                    # Check diagonal down-left\n                    if c >= 3 and r <= 2 and all(board[chr(c - k + 65)][r + k] == board[chr(c + 65)][r] for k in range(4)):\n                        return board[chr(c + 65)][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in [col, chr(ord(col)+1), chr(ord(col)+2), chr(ord(col)+3)]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == color for (c, r) in [(col, row), (chr(ord(col)+1), row-1), (chr(ord(col)+2), row-2), (chr(ord(col)+3), row-3)]):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == color for (c, r) in [(col, row), (chr(ord(col)+1), row+1), (chr(ord(col)+2), row+2), (chr(ord(col)+3), row+3)]):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + k)][row] for k in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == board[col][row + k] for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + k)][row - k] for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + k)][row + k] for k in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = player\n                player_moves[player].append((col, row))\n                break\n\n    def check_winner(player):\n        positions = player_moves[player]\n        for (c, r) in positions:\n            for line in LINES:\n                if all((x, y) in positions for (x, y) in line):\n                    return player\n        return None\n\n    winner = check_winner('Red')\n    if winner:\n        return 'Red'\n    \n    winner = check_winner('Yellow')\n    if winner:\n        return 'Yellow'\n    \n    return 'Draw' if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check if this move created a winner\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6) and (board[c][r] is not None)):\n                return color\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = next((r for r in range(6) if grid[col][r] is None), None)\n        if row is not None:\n            grid[col][row] = color\n            \n            # Check for win\n            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal \\\n                count = 1\n                for d in (1, -1):\n                    for i in range(1, 4):\n                        r = row + direction[0] * i * d\n                        c = ord(col) - ord('A') + direction[1] * i * d\n                        if 0 <= r < 6 and 0 <= c < 7 and grid[chr(c + ord('A'))][r] == color:\n                            count += 1\n                        else:\n                            break\n                if count >= 4:\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (c < 4 and all(board[chr(c + k + 65)][r] == color for k in range(4))) or \\\n                       (r < 3 and all(board[chr(c + 65)][r + k] == color for k in range(4))) or \\\n                       (c < 4 and r < 3 and all(board[chr(c + k + 65)][r + k] == color for k in range(4))) or \\\n                       (c < 4 and r > 2 and all(board[chr(c + k + 65)][r - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for col, row in moves:\n        for dcol, drow in directions:\n            count = 1\n            for step in range(1, 4):\n                if (col, row) in moves:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                if (col, row) in moves:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n                \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        # Check for a win after the last move\n        if len(board[column]) >= 4:\n            # Get the number of pieces in the column\n            height = len(board[column]) - 1\n            \n            # Check vertical\n            if all(board[column][height - i] == color for i in range(4)):\n                return color\n            \n            # Check horizontal\n            for start in range(max(0, height - 3), min(6, height + 1)):\n                if all(board[chr(ord(column) + i)][height] == color for i in range(4) if chr(ord(column) + i) in board):\n                    return color\n            \n            # Check diagonal \\\n            for offset in range(-3, 1):\n                if all(board[chr(ord(column) + offset + i)][height - i] == color for i in range(4) \n                       if 0 <= ord(column) + offset + i < ord('G') + 1 and height - i >= 0):\n                    return color\n            \n            # Check diagonal /\n            for offset in range(-3, 1):\n                if all(board[chr(ord(column) + offset + i)][height + i] == color for i in range(4) \n                       if 0 <= ord(column) + offset + i < ord('G') + 1 and height + i < 6):\n                    return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in (1, -1):\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j <= 3 and all(board[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4)):\n                    return color\n                if i <= 2 and all(board[chr(j + ord('A'))][k] == color for k in range(i, i + 4)):\n                    return color\n                if i <= 2 and j <= 3 and all(board[chr(j + ord('A') + k)][i + k] == color for k in range(4)):\n                    return color\n                if i >= 3 and j <= 3 and all(board[chr(j + ord('A') + k)][i - k] == color for k in range(4)):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = next((r for r in range(6) if grid[col][r] is None), None)\n        if row is not None:\n            grid[col][row] = color\n            \n            # Check for a win\n            if check_winner(grid, col, row, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dr, dc in directions:\n        count = 1\n        for step in range(1, 4):\n            r, c = row + dr * step, ord(col) - 65 + dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and grid[chr(c + 65)][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            r, c = row - dr * step, ord(col) - 65 - dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and grid[chr(c + 65)][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color_check:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color_check for k in range(4)):\n                            return color_check\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color_check for k in range(4)):\n                            return color_check\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color_check for k in range(4)):\n                            return color_check\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color_check for k in range(4)):\n                            return color_check\n\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win conditions\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:\n                    if (c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i in range(6) if board[col][i] is None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        check_col = chr(ord(col) + step * delta_col)\n        check_row = row + step * delta_row\n        if check_col in board and 0 <= check_row < 6 and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[pos[0]][pos[1]] == color for pos in line if pos[0] in board and pos[1] in ROWS):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            for i in range(len(board[col]) - 3, len(board[col])):\n                if all(board[col][j] == color for j in range(i - 3, i + 1)):\n                    return color\n    \n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if board[col][row] != color:\n                continue\n            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                count = 1\n                for step in range(1, 4):\n                    new_col = col + direction[0] * step\n                    new_row = row + direction[1] * step\n                    if new_col in board and new_row < len(board[new_col]) and board[new_col][new_row] == color:\n                        count += 1\n                    if count == 4:\n                        return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) >= 4:\n            # Check for a winner in the current column\n            if board[col][-4:] == [color] * 4:\n                return color\n            # Check horizontal\n            for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n                if all(board[chr(ord('A') + c + i)][-1] == color for i in range(4)):\n                    return color\n            # Check diagonal \\\n            for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n                for r in range(3, 6):\n                    if all(r - i >= 0 and board[chr(ord('A') + c + i)][-1] == color for i in range(4)):\n                        return color\n            # Check diagonal /\n            for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n                for r in range(3, 6):\n                    if all(r - i >= 0 and board[chr(ord('A') + c + i)][-1] == color for i in range(4)):\n                        return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 1, 'Yellow': 1}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win condition\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                r, c = row, ord(col) - ord('A')\n                while 0 <= r + d * direction[0] < 6 and 0 <= c + d * direction[1] < 7:\n                    r += d * direction[0]\n                    c += d * direction[1]\n                    if board[chr(c + ord('A'))][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n                \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        if len(board[column]) > 3:\n            if check_winner(board, column, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    for col in board:\n        for row in range(len(board[col])):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + dx * step)\n            new_row = row + dy * step\n            if new_col in board and new_row < len(board[new_col]) and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            new_col = chr(ord(col) - dx * step)\n            new_row = row - dy * step\n            if new_col in board and new_row >= 0 and new_row < len(board[new_col]) and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n        \n        if check_winner(moves[color]):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(positions):\n    for start in positions:\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for step in range(1, 4):\n                next_pos = (chr(ord(start[0]) + direction[0] * step), start[1] + direction[1] * step)\n                if next_pos in positions:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column].append(color)\n        \n        if len(grid[column]) >= 4:\n            # Check for vertical connection\n            if grid[column][-4:] == [color] * 4:\n                return color\n            \n            # Check for horizontal connection\n            for c in 'ABCDEFG':\n                if grid[c][-1:] == [color] and len(grid[c]) >= 4:\n                    if sum(1 for i in range(max(0, len(grid[c]) - 4), len(grid[c])) if grid[c][i] == color) == 4:\n                        return color\n\n            # Check diagonal connections\n            for i in range(len(grid[column])):\n                if grid[column][i] == color:\n                    # Check for /\n                    if all((j < 7 and (i + j < len(grid['A']) or i + j < len(grid['B']) or i + j < len(grid['C']) or \n                                       i + j < len(grid['D']) or i + j < len(grid['E']) or \n                                       i + j < len(grid['F']) or i + j < len(grid['G']))) and \n                            grid[COLUMNS[j]][i - j] == color for j in range(4) if 0 <= i - j < 6):\n                        return color\n                    \n                    # Check for \\\n                    if all((j < 7 and (i - j >= 0)) and \n                            grid[COLUMNS[j]][i + j] == color for j in range(4) if 0 <= i + j < 6):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color] += 1\n\n        for line in LINES:\n            if any(board[c][r] == color for c, r in line):\n                return color\n\n    return \"Draw\" if player_moves['Red'] + player_moves['Yellow'] == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, player = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        \n        if check_winner(board, player):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, player, col, row, 1, 0) or \\\n                   check_direction(board, player, col, row, 0, 1) or \\\n                   check_direction(board, player, col, row, 1, 1) or \\\n                   check_direction(board, player, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, player, col, row, dcol, drow):\n    count = 0\n    for i in range(4):\n        new_col = chr(ord(col) + dcol * i)\n        new_row = row + drow * i\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if (0 <= row < 6) and (board[col][row] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(grid[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] is not None):\n                return color\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = next((r for r in range(6) if grid[col][r] is None), None)\n        if row is not None:\n            grid[col][row] = color\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row]:\n                    color = grid[col][row]\n                    # Check horizontally\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[(ord(col) - 65):(ord(col) - 65 + 4)]):\n                        return color\n                    # Check vertically\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == player for col, row in line if (row >= 0 and row < 6)):\n                    return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        if check_winner(board, player):\n            return player\n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, player, col, row, 1, 0) or \\\n                   check_direction(board, player, col, row, 0, 1) or \\\n                   check_direction(board, player, col, row, 1, 1) or \\\n                   check_direction(board, player, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, player, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if 0 <= r < 6 and c in board and board[c][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 0\n        for step in range(4):\n            new_col = chr(ord(col) + d_col * step)\n            new_row = row + d_row * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        # Check for win condition\n        for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 0\n            for step in range(-3, 4):\n                r = row + step * dr\n                c = list(board.keys()).index(column) + step * dc\n                if 0 <= r < 6 and 0 <= c < 7 and (board[list(board.keys())[c]][r] == color):\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    count = 0\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        # Check for a win condition\n        for d_row, d_col in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            # Check in one direction\n            for i in range(1, 4):\n                r, c = row + d_row * i, 'ABCDEFG'.index(col) + d_col * i\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the opposite direction\n            for i in range(1, 4):\n                r, c = row - d_row * i, 'ABCDEFG'.index(col) - d_col * i\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                winner = color\n                break\n        \n        if winner:\n            break\n    \n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win after this move\n        if check_win(board, column, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    # Check vertical\n    if count_consecutive(board[col], color) >= 4:\n        return True\n    \n    # Check horizontal\n    for c in board:\n        if row < len(board[c]) and board[c][row] == color:\n            if count_consecutive([board[c][row] for c in board], color) >= 4:\n                return True\n\n    # Check diagonal \\\n    if check_diagonal(board, col, row, color, 1, 1) or check_diagonal(board, col, row, color, 1, -1):\n        return True\n\n    return False\n\ndef count_consecutive(lst, color):\n    count = 0\n    for item in lst:\n        if item == color:\n            count += 1\n        else:\n            count = 0\n        if count >= 4:\n            return count\n    return count\n\ndef check_diagonal(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(-3, 4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n            if count >= 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1)   # Diagonal /\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + delta_col * step)\n        r = row + delta_row * step\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check horizontal\n                    if c <= 'D' and all(board[c][r] == color for c in [c, chr(ord(c)+1), chr(ord(c)+2), chr(ord(c)+3)]):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[c][r] == color for r in [r, r+1, r+2, r+3]):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c)+k)][r+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[chr(ord(c)+k)][r-k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for col_start in range(7):\n                for row_start in range(6):\n                    if board[chr(65 + col_start)][row_start] == color_check:\n                        # Check horizontal\n                        if col_start + 3 < 7 and all(board[chr(65 + c)][row_start] == color_check for c in range(col_start, col_start + 4)):\n                            return color_check\n                        # Check vertical\n                        if row_start + 3 < 6 and all(board[chr(65 + col_start)][r] == color_check for r in range(row_start, row_start + 4)):\n                            return color_check\n                        # Check diagonal \\\n                        if col_start + 3 < 7 and row_start + 3 < 6 and all(board[chr(65 + col_start + d)][row_start + d] == color_check for d in range(4)):\n                            return color_check\n                        # Check diagonal /\n                        if col_start - 3 >= 0 and row_start + 3 < 6 and all(board[chr(65 + col_start - d)][row_start + d] == color_check for d in range(4)):\n                            return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n    \n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board[chr(col + i + 65)][row] == color for i in range(4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(board[chr(col + 65)][row + i] == color for i in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 3 and row >= 3 and all(board[chr(col + i + 65)][row - i] == color for i in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(board[chr(col + i + 65)][row + i] == color for i in range(4)):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] == color:\n                    if (row <= 2 and all(board[column][row + k] == color for k in range(4))) or \\\n                       (column <= 'D' and all(board[chr(ord(column) + k)][row] == color for k in range(4))) or \\\n                       (column <= 'D' and row <= 2 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4))) or \\\n                       (column <= 'D' and row >= 3 and all(board[chr(ord(column) + k)][row - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if r >= 3 and c <= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if r <= 2 and c <= 3 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    # Check horizontal, vertical, and diagonal\n    return (check_direction(board, color, column, row, 1, 0) or  # Horizontal\n            check_direction(board, color, column, row, 0, 1) or  # Vertical\n            check_direction(board, color, column, row, 1, 1) or  # Diagonal /\n            check_direction(board, color, column, row, 1, -1))   # Diagonal \\\n\ndef check_direction(board, color, column, row, delta_x, delta_y):\n    count = 1\n    for direction in [1, -1]:  # Check both directions\n        for step in range(1, 4):\n            new_col = chr(ord(column) + delta_x * direction * step)\n            new_row = row + delta_y * direction * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a winner\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if all(board[COLUMNS[i]][row] == board[col][row] for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4) if i < 7):\n                        return board[col][row]\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[COLUMNS[COLUMNS.index(col) + k]][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[COLUMNS[COLUMNS.index(col) + k]][row - k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        # Check for a win\n        for r in range(6):\n            for c in range(7):\n                if grid['ABCDEFG'[c]][r] == color:\n                    # Check horizontal\n                    if c <= 3 and all(grid['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(grid['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(grid['ABCDEFG'[c+i]][r-i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (\n                        c + 3 < 7 and\n                        all(board[chr(c + k + 65)][r] == color for k in range(4)) or\n                        r + 3 < 6 and\n                        all(board[chr(c + 65)][r + k] == color for k in range(4)) or\n                        r + 3 < 6 and c + 3 < 7 and\n                        all(board[chr(c + k + 65)][r + k] == color for k in range(4)) or\n                        r - 3 >= 0 and c + 3 < 7 and\n                        all(board[chr(c + k + 65)][r - k] == color for k in range(4))\n                    ):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [-1, 1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + step * d[0] * i)\n                new_row = row + step * d[1] * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board[col][row], col, row, board):\n                        return board[col][row]\n    return \"Draw\"\n\ndef check_winner(color, col, row, board):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n    \n    def check_winner(color):\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] == color:\n                    # Check horizontal\n                    if column <= 'D' and all(grid[column][row] == color for column in 'ABCDE'[ord(column) - 65:ord(column) - 65 + 4]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if column <= 'D' and row <= 2 and all(grid[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if column <= 'D' and row >= 3 and all(grid[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    else:\n        return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color_to_check in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if grid[chr(65 + c)][r] == color_to_check:\n                        # Check horizontal\n                        if c <= 3 and all(grid[chr(65 + c + i)][r] == color_to_check for i in range(4)):\n                            return color_to_check\n                        # Check vertical\n                        if r <= 2 and all(grid[chr(65 + c)][r + i] == color_to_check for i in range(4)):\n                            return color_to_check\n                        # Check diagonal (bottom left to top right)\n                        if c <= 3 and r <= 2 and all(grid[chr(65 + c + i)][r + i] == color_to_check for i in range(4)):\n                            return color_to_check\n                        # Check diagonal (top left to bottom right)\n                        if c <= 3 and r >= 3 and all(grid[chr(65 + c + i)][r - i] == color_to_check for i in range(4)):\n                            return color_to_check\n    \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if row <= 2 and col >= 'D' and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for c in 'ABCDEFG':\n        for r in range(6):\n            if board[c][r] == color:\n                if check_direction(board, c, r, 1, 0, color) or \\\n                   check_direction(board, c, r, 0, 1, color) or \\\n                   check_direction(board, c, r, 1, 1, color) or \\\n                   check_direction(board, c, r, 1, -1, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, dc, dr, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dc)\n        r = row + i * dr\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontally\n                    if col < 'E' and all(grid[col][row] == grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertically\n                    if row < 3 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonally \\\n                    if col < 'E' and row < 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonally /\n                    if col < 'E' and row > 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (col in 'ABCDEFG' and \n                        grid[col][row:row+4].count(color) == 4):\n                        return color\n                    if (row <= 2 and \n                        all(grid[col][row + k] == color for k in range(4))):\n                        return color\n                    if (col in 'ABCDEFG' and \n                        row <= 2 and \n                        all(grid[chr(ord(col) + k)][row + k] == color for k in range(4) if chr(ord(col) + k) in 'ABCDEFG')):\n                        return color\n                    if (col in 'ABCDEFG' and \n                        row >= 3 and \n                        all(grid[chr(ord(col) + k)][row - k] == color for k in range(4) if chr(ord(col) + k) in 'ABCDEFG')):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in [(c, r) for c in 'ABCDEFG' for r in range(6)]:\n                            # Check horizontal\n                            if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                                return color\n                            # Check vertical\n                            if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                                return color\n                            # Check diagonal \\\n                            if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                                return color\n                            # Check diagonal /\n                            if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6)):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for r in range(6):\n                for c in range(4):\n                    if all(board[COLUMNS[c + i]][r] == color for i in range(4)):\n                        return color\n            \n            # Check vertical\n            for c in range(7):\n                for r in range(3):\n                    if all(board[COLUMNS[c]][r + i] == color for i in range(4)):\n                        return color\n            \n            # Check diagonal (down-right)\n            for c in range(4):\n                for r in range(3):\n                    if all(board[COLUMNS[c + i]][r + i] == color for i in range(4)):\n                        return color\n            \n            # Check diagonal (up-right)\n            for c in range(4):\n                for r in range(3, 6):\n                    if all(board[COLUMNS[c + i]][r - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board[chr(c + 65)][r] == color:\n                        count = 0\n                        for step in range(4):\n                            nr, nc = r + direction[0] * step, c + direction[1] * step\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board[chr(nc + 65)][nr] == color:\n                                count += 1\n                        if count >= 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if board[chr(j + 65)][i] == color:\n                        if j <= 3 and all(board[chr(j + k + 65)][i] == color for k in range(4)):\n                            return color\n                        if i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                            return color\n                        if j <= 3 and i <= 2 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                            return color\n                        if j <= 3 and i >= 3 and all(board[chr(j + k + 65)][i - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n    \n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board[chr(ord('A') + col)][row] == color:\n                    if col + 3 < 7 and all(board[chr(ord('A') + col + k)][row] == color for k in range(4)):\n                        return True\n                    if row + 3 < 6 and all(board[chr(ord('A') + col)][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row + 3 < 6 and all(board[chr(ord('A') + col + k)][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row - 3 >= 0 and all(board[chr(ord('A') + col + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] is not None:\n                    current_color = board['ABCDEFG'[j]][i]\n                    if (j <= 3 and all(board['ABCDEFG'[j + k]][i] == current_color for k in range(4))) or \\\n                       (i <= 2 and all(board['ABCDEFG'[j]][i + k] == current_color for k in range(4))) or \\\n                       (j <= 3 and i <= 2 and all(board['ABCDEFG'[j + k]][i + k] == current_color for k in range(4))) or \\\n                       (j <= 3 and i >= 3 and all(board['ABCDEFG'[j + k]][i - k] == current_color for k in range(4))):\n                        return current_color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win after each move\n        for i in range(7):\n            for j in range(6):\n                if board[chr(i + 65)][j] == color:\n                    if (i + 3 < 7 and \n                        board[chr(i + 1 + 65)][j] == color and \n                        board[chr(i + 2 + 65)][j] == color and \n                        board[chr(i + 3 + 65)][j] == color) or \\\n                       (j + 3 < 6 and \n                        board[chr(i + 65)][j + 1] == color and \n                        board[chr(i + 65)][j + 2] == color and \n                        board[chr(i + 65)][j + 3] == color) or \\\n                       (i + 3 < 7 and j + 3 < 6 and \n                        board[chr(i + 65)][j] == color and \n                        board[chr(i + 1 + 65)][j + 1] == color and \n                        board[chr(i + 2 + 65)][j + 2] == color and \n                        board[chr(i + 3 + 65)][j + 3] == color) or \\\n                       (i + 3 < 7 and j - 3 >= 0 and \n                        board[chr(i + 65)][j] == color and \n                        board[chr(i + 1 + 65)][j - 1] == color and \n                        board[chr(i + 2 + 65)][j - 2] == color and \n                        board[chr(i + 3 + 65)][j - 3] == color):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(7):\n            for j in range(6):\n                if grid['ABCDEFG'[i]][j] == color:\n                    if i + 3 < 7 and all(grid['ABCDEFG'[i + k]][j] == color for k in range(4)):\n                        return True\n                    if j + 3 < 6 and all(grid['ABCDEFG'[i]][j + k] == color for k in range(4)):\n                        return True\n                    if i + 3 < 7 and j + 3 < 6 and all(grid['ABCDEFG'[i + k]][j + k] == color for k in range(4)):\n                        return True\n                    if i + 3 < 7 and j - 3 >= 0 and all(grid['ABCDEFG'[i + k]][j - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    elif len(pieces_positions) == 42:\n        return 'Draw'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check for horizontal\n                    if c in COLUMNS and r <= 2 and all(board[COLUMNS[i]][r] == color for i in range(COLUMNS.index(c), COLUMNS.index(c) + 4)):\n                        return color\n                    # Check for vertical\n                    if r <= 2 and all(board[c][r + k] == color for k in range(4)):\n                        return color\n                    # Check for diagonal \\\n                    if c in COLUMNS and r <= 2 and all(board[COLUMNS[COLUMNS.index(c) + k]][r + k] == color for k in range(4)):\n                        return color\n                    # Check for diagonal /\n                    if c in COLUMNS and r >= 3 and all(board[COLUMNS[COLUMNS.index(c) + k]][r - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, color, 1, 0) or\n                    check_direction(board, col, row, color, 0, 1) or\n                    check_direction(board, col, row, color, 1, 1) or\n                    check_direction(board, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 'A' <= chr(ord(c) + i) <= 'G'\n                        ):\n                            return color\n                    # Check diagonal /\n                    if r <= 2:\n                        if all(\n                            board[chr(ord(c) + i)][r + i] == color for i in range(4) if 0 <= ord(c) + i - ord('A') < 7\n                        ):\n                            return color\n                    # Check diagonal \\\n                    if r >= 3:\n                        if all(\n                            board[chr(ord(c) + i)][r - i] == color for i in range(4) if 0 <= ord(c) + i - ord('A') < 7\n                        ):\n                            return color\n                        \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col in board and all(board[chr(ord(col)+k)][row] == color for k in range(4) if chr(ord(col)+k) in board):\n                        return color\n                    # Check diagonal (top-left to bottom-right)\n                    if row <= 2 and col in board and all(board[chr(ord(col)+k)][row+k] == color for k in range(4) if chr(ord(col)+k) in board):\n                        return color\n                    # Check diagonal (bottom-left to top-right)\n                    if row >= 3 and col in board and all(board[chr(ord(col)+k)][row-k] == color for k in range(4) if chr(ord(col)+k) in board):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if (0 <= row < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == color and \n                (i >= 3 and all(board[column][i-j] == color for j in range(4)) or\n                 (column in board and board[column][i-1] == color and\n                  board[column][i-2] == color and board[column][i-3] == color) or\n                 (board[column][i] == color and \n                  (len(board[column]) > i + 1 and column in board and board[column][i + 1] == color and\n                   len(board[column]) > i + 2 and column in board and board[column][i + 2] == color and\n                   len(board[column]) > i + 3 and column in board and board[column][i + 3] == color)))):\n                return color\n            \n    # Check for draw\n    if len(pieces_positions) >= 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (y < len(board[x])) and (board[x][y] is not None)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and all(color == colors[0] for color in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for positions in LINES:\n            if all(board[col][row] == color for col, row in positions if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(k + 65)][j] == color for k in range(i, i + 4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[1]\n                    c = board.keys().index(col) + d * i * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[COLUMNS[i]][row + i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[COLUMNS[i]][row - i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in range(4):\n            count = 1\n            \n            for step in [1, -1]:\n                r, c = row, col\n                while True:\n                    if direction == 0:  # Horizontal\n                        c = chr(ord(c) + step)\n                    elif direction == 1:  # Vertical\n                        r += step\n                    elif direction == 2:  # Diagonal \\\n                        r += step\n                        c = chr(ord(c) + step)\n                    else:  # Diagonal /\n                        r -= step\n                        c = chr(ord(c) + step)\n                        \n                    if c not in board or r < 0 or r >= 6 or board[c][r] != color:\n                        break\n                    count += 1\n                    \n                if count >= 4:\n                    return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in [col, chr(ord(col)+1), chr(ord(col)+2), chr(ord(col)+3)]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == color for (c, r) in [(col, row), (chr(ord(col)+1), row-1), (chr(ord(col)+2), row-2), (chr(ord(col)+3), row-3)]):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == color for (c, r) in [(col, row), (chr(ord(col)+1), row+1), (chr(ord(col)+2), row+2), (chr(ord(col)+3), row+3)]):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[COLUMNS[COLUMNS.index(col)+k]][row-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col)+k]][row+k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                player_moves[player].append((col, row))\n                break\n    \n    def check_winner(player):\n        positions = player_moves[player]\n        for col, row in positions:\n            for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                count = 1\n                for step in range(1, 4):\n                    if (col, row) in positions:\n                        count += 1\n                    if count == 4:\n                        return player\n        return None\n    \n    for player in ['Red', 'Yellow']:\n        if check_winner(player):\n            return player\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(7):\n            for j in range(6):\n                if grid[chr(65 + i)][j] == color:\n                    if i + 3 < 7 and all(grid[chr(65 + k)][j] == color for k in range(i, i + 4)):\n                        return True\n                    if j + 3 < 6 and all(grid[chr(65 + i)][j + k] == color for k in range(4)):\n                        return True\n                    if i + 3 < 7 and j + 3 < 6 and all(grid[chr(65 + i + k)][j + k] == color for k in range(4)):\n                        return True\n                    if i + 3 < 7 and j - 3 >= 0 and all(grid[chr(65 + i + k)][j - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if col + 3 < 7 and all(board[chr(col + k + 65)][row] == color for k in range(4)):\n                        return color\n                    if row + 3 < 6 and all(board[chr(col + 65)][row + k] == color for k in range(4)):\n                        return color\n                    if col + 3 < 7 and row + 3 < 6 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)):\n                        return color\n                    if col + 3 < 7 and row - 3 >= 0 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = next((r for r in range(6) if grid[col][r] is None), None)\n        if row is not None:\n            grid[col][row] = color\n            if check_winner(grid, col, row, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    return (check_direction(grid, col, row, color, 1, 0) or\n            check_direction(grid, col, row, color, 0, 1) or\n            check_direction(grid, col, row, color, 1, 1) or\n            check_direction(grid, col, row, color, 1, -1))\n\ndef check_direction(grid, col, row, color, delta_col, delta_row):\n    count = 1\n    for direction in (1, -1):\n        for step in range(1, 4):\n            c = chr(ord(col) + delta_col * step * direction)\n            r = row + delta_row * step * direction\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n            else:\n                break\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for sign in [1, -1]:\n            r, c = row, ord(col) - ord('A')\n            while 0 <= r + sign * d[1] < 6 and 0 <= c + sign * d[0] < 7:\n                r += sign * d[1]\n                c += sign * d[0]\n                if board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win after each move\n        if len(board[column]) >= 4:\n            for i in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if board[column][i] == color:\n                    # Check vertical\n                    if i >= 3 and all(board[column][i-j] == color for j in range(4)):\n                        return color\n                    \n                    # Check horizontal\n                    for j in range(-3, 1):\n                        if all((column, i-j) in board.items() and board[column][i+j] == color for j in range(4)):\n                            return color\n                    \n                    # Check diagonal down-right\n                    for j in range(-3, 1):\n                        if all((chr(ord(column) + j+k), i+k) in board.items() and board[chr(ord(column) + j+k)][i+k] == color for k in range(4)):\n                            return color\n                    \n                    # Check diagonal up-right\n                    for j in range(-3, 1):\n                        if all((chr(ord(column) + j+k), i-k) in board.items() and board[chr(ord(column) + j+k)][i-k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n                \n    def check_winner(color):\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    # Check horizontal\n                    if c <= 'D' and all(grid[c][r] == color for c in 'ABCDEFG'[grid[c].index(color):grid[c].index(color) + 4]):\n                        return True\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if r <= 2 and c <= 'D' and all(grid[chr(ord(c) + k)][r + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if r >= 3 and c <= 'D' and all(grid[chr(ord(c) + k)][r - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        # Check for a winner\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if (c + 3 < 7 and all(board['ABCDEFG'[c + i]][r] == color for i in range(4))) or \\\n                       (r + 3 < 6 and all(board['ABCDEFG'[c]][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4))) or \\\n                       (c - 3 >= 0 and r + 3 < 6 and all(board['ABCDEFG'[c - i]][r + i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        # Check for a win after the last move\n        if len(board[column]) >= 4:\n            # Check vertical\n            if all(c == color for c in board[column][-4:]):\n                return color\n            \n            # Check horizontal and diagonal wins\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) > 0:\n                    # Check horizontal\n                    if all((c in board and len(board[c]) > i and board[c][-1-i] == color) \n                           for i in range(4) if (ord(c) + i) < ord('H')):\n                        return color\n                    \n                    # Check diagonal \\\n                    if all((chr(ord(c) + i) in board and len(board[chr(ord(c) + i)]) > len(board[chr(ord(c) + i)]) - 1 - i \n                          and board[chr(ord(c) + i)][-1-i] == color) for i in range(4) \n                          if (ord(c) + i) < ord('H') and len(board[chr(ord(c) + i)]) > 0):\n                        return color\n                    \n                    # Check diagonal /\n                    if all((chr(ord(c) - i) in board and len(board[chr(ord(c) - i)]) > len(board[chr(ord(c) - i)]) - 1 - i \n                          and board[chr(ord(c) - i)][-1-i] == color) for i in range(4) \n                          if (ord(c) - i) >= ord('A') and len(board[chr(ord(c) - i)]) > 0):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j <= 3 and all(board[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4)):\n                    return color\n                if i <= 2 and all(board[chr(j + ord('A'))][k] == color for k in range(i, i + 4)):\n                    return color\n                if i <= 2 and j <= 3 and all(board[chr(j + ord('A') + k)][i + k] == color for k in range(4)):\n                    return color\n                if i >= 3 and j <= 3 and all(board[chr(j + ord('A') + k)][i - k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = next((r for r in range(6) if grid[col][r] is None), None)\n        if row is not None:\n            grid[col][row] = color\n            \n            # Check for a win\n            if check_winner(grid, col, row, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dr, dc in directions:\n        count = 1\n        for step in range(1, 4):\n            r, c = row + dr * step, col_index(col) + dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and grid['ABCDEFG'[c]][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            r, c = row - dr * step, col_index(col) - dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and grid['ABCDEFG'[c]][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n\ndef col_index(col):\n    return 'ABCDEFG'.index(col)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if check_winner(board, c, r):\n                        return board[c][r]\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dc, dr in directions:\n        count = 1\n        for d in [1, -1]:\n            for step in range(1, 4):\n                new_col = chr(ord(col) + dc * d * step)\n                new_row = row + dr * d * step\n                if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for i, (col, row) in enumerate(moves):\n        if check_direction(moves, col, row, 1, 0) or \\\n           check_direction(moves, col, row, 0, 1) or \\\n           check_direction(moves, col, row, 1, 1) or \\\n           check_direction(moves, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, col, row, delta_col, delta_row):\n    count = 1\n    for direction in [1, -1]:\n        for step in range(1, 4):\n            new_col = chr(ord(col) + delta_col * step * direction)\n            new_row = row + delta_row * step * direction\n            if (new_col, new_row) in moves:\n                count += 1\n            else:\n                break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    c = chr(ord(column) + direction[0] * d * step)\n                    r = row + direction[1] * d * step\n                    if c in board and 0 <= r < 6 and board[c][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        # Check for a win if this column has 4 or more pieces\n        if len(board[column]) >= 4:\n            count = 0\n            # Check vertical\n            for i in range(len(board[column])-1, -1, -1):\n                if board[column][i] == color:\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    count = 0\n            count = 0\n            \n            # Check horizontal\n            for c in 'ABCDEFG':\n                count = sum(1 for x in board[c] if x == color)\n                if count >= 4:\n                    return color\n            \n            count = 0\n            \n            # Check diagonal (bottom-left to top-right)\n            for start in range(-3, 4):\n                count = 0\n                for i in range(6):\n                    j = start + i\n                    if 0 <= j < 7 and i < len(board['ABCDEFG'[j]]):\n                        if board['ABCDEFG'[j]][i] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            count = 0\n                            \n            count = 0\n            \n            # Check diagonal (top-left to bottom-right)\n            for start in range(3, 10):\n                count = 0\n                for i in range(6):\n                    j = start - i\n                    if 0 <= j < 7 and i < len(board['ABCDEFG'[j]]):\n                        if board['ABCDEFG'[j]][i] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            count = 0\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            # Check for winner\n            if check_winner(board, column, color):\n                return color\n            \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    rows = '012345'  # Representing rows\n    col_index = 'ABCDEFG'.index(column)\n    \n    # Check vertical\n    if len(board[column]) >= 4 and all(board[column][-i-1] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for i in range(max(0, col_index - 3), min(len(board), col_index + 1)):\n        if all((board['ABCDEFG'[i + j]] and board['ABCDEFG'[i + j]][-1] == color) for j in range(4) if i + j < 7):\n            return True\n    \n    # Check diagonals\n    for i in range(-3, 1):\n        if all((board['ABCDEFG'[col_index + i + j]] and board['ABCDEFG'[col_index + i + j]][-1] == color) for j in range(4) if 0 <= col_index + i + j < 7):\n            return True\n    \n    for i in range(-3, 1):\n        if all((board['ABCDEFG'[col_index - i + j]] and board['ABCDEFG'[col_index - i + j]][-1] == color) for j in range(4) if 0 <= col_index - i + j < 7):\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check if this move caused a win\n        if len(board[column]) >= 4:\n            # Check vertical\n            if all(board[column][i] == color for i in range(-4, 0)):\n                return color\n            \n            # Check horizontal\n            for col_offset in range(-3, 1):\n                if all(board.get(chr(ord(column) + col_offset + i), []) and board[chr(ord(column) + col_offset + i)][-1] == color for i in range(4)):\n                    return color\n            \n            # Check diagonal \\\n            for i in range(-3, 1):\n                if all(board.get(chr(ord(column) + i + j), []) and len(board[chr(ord(column) + i + j)]) > 0 and board[chr(ord(column) + i + j)][-1] == color for j in range(4)):\n                    return color\n            \n            # Check diagonal /\n            for i in range(-3, 1):\n                if all(board.get(chr(ord(column) + i + j), []) and len(board[chr(ord(column) + i + j)]) > 0 and board[chr(ord(column) + i + j)][-1] == color for j in range(4)):\n                    return color\n                \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n                \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if (col in board) and (0 <= row < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n        \n        if check_winner(moves[color]):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(positions):\n    for start in positions:\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for step in range(1, 4):\n                next_pos = (chr(ord(start[0]) + direction[0] * step), start[1] + direction[1] * step)\n                if next_pos in positions:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if (0 <= row < 6)):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column].append(color)\n        \n        if len(grid[column]) >= 4:\n            # Check for vertical connection\n            if grid[column][-4:] == [color] * 4:\n                return color\n            \n            # Check for horizontal connection\n            for c in 'ABCDEFG':\n                if grid[c][-1:] == [color] and len(grid[c]) >= 4:\n                    if sum(1 for piece in grid[c][-4:] if piece == color) == 4:\n                        return color\n            \n            # Check for diagonal connections\n            col_index = 'ABCDEFG'.index(column)\n            row_index = len(grid[column]) - 1\n            \n            # Check positive slope diagonal\n            if col_index <= 3 and row_index >= 3:\n                if all(grid['ABCDEFG'[col_index + k]][row_index - k] == color for k in range(4)):\n                    return color\n            \n            # Check negative slope diagonal\n            if col_index <= 3 and row_index <= 2:\n                if all(grid['ABCDEFG'[col_index + k]][row_index + k] == color for k in range(4)):\n                    return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board[chr(j + 65)][i] == color:  # A=65 in ASCII\n                if j <= 3 and all(board[chr(j + k + 65)][i] == color for k in range(4)):  # Horizontal\n                    return True\n                if i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4)):  # Vertical\n                    return True\n                if j <= 3 and i <= 2 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):  # Diagonal \\\n                    return True\n                if j >= 3 and i <= 2 and all(board[chr(j - k + 65)][i + k] == color for k in range(4)):  # Diagonal /\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == 'Red' for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return \"Red\"\n            if all(board[x][y] == 'Yellow' for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n            \n    return \"Draw\"\n\ndef check_winner(moves):\n    for column, row in moves:\n        if check_direction(moves, column, row, 1, 0) or \\\n           check_direction(moves, column, row, 0, 1) or \\\n           check_direction(moves, column, row, 1, 1) or \\\n           check_direction(moves, column, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, column, row, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        c = chr(ord(column) + step * delta_col)\n        r = row + step * delta_row\n        if c in 'ABCDEFG' and 0 <= r < 6 and (c, r) in moves:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for line in LINES:\n        if all(grid[x][y] == color for x, y in line if x in grid and y < len(grid[x])):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        for line in LINES:\n            if all((pos in player_moves[color]) for pos in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check for win condition after each move\n        if len(board[col]) >= 4:\n            for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n                for start in range(len(board[col]) - 3):\n                    if all(0 <= start + direction[0] * i < len(board[col]) and\n                           board[col][start + direction[0] * i] == color for i in range(4)):\n                        return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == 'Red' for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return \"Red\"\n            if all(board[col][row] == 'Yellow' for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x, y) in board):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for win condition\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in board and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and board[c][r] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r >= 0 and r < 6 and c in board and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[pos[0]][pos[1]] == color for pos in line if pos[0] in board and pos[1] < 6 and pos[1] >= 0):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        # Check for win condition\n        for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 0\n            for step in range(-3, 4):\n                r = row + step * dr\n                c = list(board.keys()).index(column) + step * dc\n                if 0 <= r < 6 and 0 <= c < 7 and (board[list(board.keys())[c]][r] == color):\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    count = 0\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        # Check for a win condition\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:\n                    # Horizontal\n                    if c <= 3 and all(board[chr(65 + c + k)][r] == color for k in range(4)):\n                        winner = color\n                    # Vertical\n                    if r <= 2 and all(board[chr(65 + c)][r + k] == color for k in range(4)):\n                        winner = color\n                    # Diagonal down\n                    if c <= 3 and r <= 2 and all(board[chr(65 + c + k)][r + k] == color for k in range(4)):\n                        winner = color\n                    # Diagonal up\n                    if c <= 3 and r >= 3 and all(board[chr(65 + c + k)][r - k] == color for k in range(4)):\n                        winner = color\n\n        if winner:\n            return winner\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        # Check for a win after this move\n        if check_win(board, column, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    # Check vertical\n    if count_consecutive(board[col], row, color) >= 4:\n        return True\n\n    # Check horizontal\n    for c in 'ABCDEFG':\n        if board[c][row] == color:\n            if count_consecutive(board[c], row, color) >= 4:\n                return True\n\n    # Check diagonals\n    for d in [1, -1]:\n        if count_diagonal(board, col, row, color, d) >= 4:\n            return True\n\n    return False\n\ndef count_consecutive(column, row, color):\n    count = 0\n    for cell in column:\n        if cell == color:\n            count += 1\n        else:\n            count = 0\n        if count >= 4:\n            return count\n    return count\n\ndef count_diagonal(board, col, row, color, direction):\n    count = 0\n    c_idx = 'ABCDEFG'.index(col)\n    r_idx = row\n\n    while 0 <= c_idx < 7 and 0 <= r_idx < 6:\n        if board['ABCDEFG'[c_idx]][r_idx] == color:\n            count += 1\n        else:\n            break\n        c_idx += direction\n        r_idx += 1\n\n    return count\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1))   # Diagonal /\n\ndef check_direction(board, col, row, color, dcol, drow):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dcol)\n        r = row + i * drow\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            # Check vertical\n            for c in 'ABCDEFG':\n                count = 0\n                for r in range(6):\n                    if board[c][r] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n            \n            # Check horizontal\n            for r in range(6):\n                count = 0\n                for c in 'ABCDEFG':\n                    if board[c][r] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n            \n            # Check diagonal (top-left to bottom-right)\n            for c in range(4):\n                for r in range(3):\n                    if (board['A'][r] == color and \n                        board['B'][r + 1] == color and \n                        board['C'][r + 2] == color and \n                        board['D'][r + 3] == color):\n                        return color\n            \n            # Check diagonal (top-right to bottom-left)\n            for c in range(3, 7):\n                for r in range(3):\n                    if (board['D'][r] == color and \n                        board['E'][r + 1] == color and \n                        board['F'][r + 2] == color and \n                        board['G'][r + 3] == color):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal\n    for col in 'ABCDEFG':\n        count = 0\n        for cell in board[col]:\n            count = count + 1 if cell == color else 0\n            if count == 4:\n                return True\n    \n    # Check vertical\n    for col in 'ABCDEFG':\n        count = 0\n        for row in range(6):\n            count = count + 1 if board[col][row] == color else 0\n            if count == 4:\n                return True\n    \n    # Check diagonal \\\n    for col in range(4):\n        for row in range(3, 6):\n            if board['ABCDEFG'[col]][row] == color and \\\n               board['ABCDEFG'[col + 1]][row - 1] == color and \\\n               board['ABCDEFG'[col + 2]][row - 2] == color and \\\n               board['ABCDEFG'[col + 3]][row - 3] == color:\n                return True\n    \n    # Check diagonal /\n    for col in range(4):\n        for row in range(3):\n            if board['ABCDEFG'[col]][row] == color and \\\n               board['ABCDEFG'[col + 1]][row + 1] == color and \\\n               board['ABCDEFG'[col + 2]][row + 2] == color and \\\n               board['ABCDEFG'[col + 3]][row + 3] == color:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if (col in board and 0 <= row < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if check_direction(board, column, row, color):\n                    return True\n    return False\n\ndef check_direction(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            new_col = chr(ord(column) + d[0] * i)\n            new_row = row + d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        for i in range(1, 4):\n            new_col = chr(ord(column) - d[0] * i)\n            new_row = row - d[1] * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player[color]\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                r, c = row, ord(column) - ord('A')\n                while True:\n                    r += d * direction[0]\n                    c += d * direction[1]\n                    if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == player[color]:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check for vertical\n            for c in 'ABCDEFG':\n                for r in range(3):  # Check the first 4 rows only\n                    if all(grid[c][r + k] == color for k in range(4)):\n                        return color\n            \n            # Check for horizontal\n            for r in range(6):\n                for c in range(4):  # Check the first 4 columns only\n                    if all(grid[chr(c + ord('A'))][r] == color for c in range(4)):\n                        return color\n            \n            # Check for diagonal /\n            for c in range(4):\n                for r in range(3, 6):  # Start from the 4th row\n                    if all(grid[chr(c + ord('A'))][r - k] == color for k in range(4)):\n                        return color\n            \n            # Check for diagonal \\\n            for c in range(4):\n                for r in range(3):  # Check the first 4 rows\n                    if all(grid[chr(c + ord('A'))][r + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(grid[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(grid[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(grid[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, color, col, row):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + i * dcol)\n            r = row + i * drow\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                break\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n    \n    def check_winner(color):\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] == color:\n                    # Check horizontal\n                    if column <= 'D' and all(grid[column][row] == color for column in 'ABCDE'[ord(column) - 65:ord(column) - 65 + 4]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if column <= 'D' and row <= 2 and all(grid[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if column <= 'D' and row >= 3 and all(grid[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in board:\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c in 'ABCDEFG' and all(board[chr(ord(c)+i)][r] == color for i in range(4) if chr(ord(c)+i) in board):\n                        return color\n                    # Check diagonal /\n                    if r >= 3 and c in 'ABCDEFG' and all(board[chr(ord(c)-i)][r-i] == color for i in range(4) if chr(ord(c)-i) in board):\n                        return color\n                    # Check diagonal \\\n                    if r <= 2 and c in 'ABCDEFG' and all(board[chr(ord(c)+i)][r+i] == color for i in range(4) if chr(ord(c)+i) in board):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, dc, dr):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + dc * i)\n        r = row + dr * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # horizontal\n            check_direction(board, col, row, color, 0, 1) or  # vertical\n            check_direction(board, col, row, color, 1, 1) or  # diagonal \\\n            check_direction(board, col, row, color, 1, -1)    # diagonal /\n           )\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for i in range(-3, 4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if check_directions(board, column, row, color):\n                    return True\n    return False\n\ndef check_directions(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = chr(ord(column) + dx * step), row + dy * step\n            if 0 <= y < 6 and x in board and board[x][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = chr(ord(column) - dx * step), row - dy * step\n            if 0 <= y < 6 and x in board and board[x][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        for step in [1, -1]:\n            x, y = ord(col) - ord('A'), row\n            while True:\n                x += step * dx\n                y += step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] is not None:\n                    color = board[COLUMNS[j]][i]\n                    if (j + 3 < 7 and\n                        all(board[COLUMNS[j+k]][i] == color for k in range(4)) or\n                        i + 3 < 6 and\n                        all(board[COLUMNS[j]][i+k] == color for k in range(4)) or\n                        j + 3 < 7 and i + 3 < 6 and\n                        all(board[COLUMNS[j+k]][i+k] == color for k in range(4)) or\n                        j - 3 >= 0 and i + 3 < 6 and\n                        all(board[COLUMNS[j-k]][i+k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = player\n                player_moves[player] += 1\n                \n                # Check for victory\n                if check_victory(board, player):\n                    return player\n                break\n\n    return \"Draw\"\n\ndef check_victory(board, player):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                # Check horizontal\n                if all(board[col][row] == board[col][row+k] for k in range(4) if col in board and row+k < 6):\n                    return True\n                # Check vertical\n                if row <= 2 and all(board[col][row] == board[col][row+k] for k in range(4)):\n                    return True\n                # Check diagonal /\n                if col in 'DEFG' and row >= 3 and all(board[chr(ord(col)-k)][row-k] == player for k in range(4)):\n                    return True\n                # Check diagonal \\\n                if col in 'ABCD' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == player for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a win condition\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r+i] == color for i in range(4)):\n                        return color\n                    \n                    # Check horizontal\n                    if c <= 'D' and all(grid[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(grid[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(grid[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) < 42:\n        return \"Draw\"\n\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (row <= 2 and all(grid[col][row + i] == color for i in range(4))) or \\\n                       (col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4))) or \\\n                       (col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4))) or \\\n                       (col >= 'D' and row <= 2 and all(grid[chr(ord(col) - i)][row + i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in [(c, r) for c in 'ABCDEFG' for r in range(6)]:\n                            # Check horizontal\n                            if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                                return color\n                            # Check vertical\n                            if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                                return color\n                            # Check diagonal \\\n                            if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                                return color\n                            # Check diagonal /\n                            if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for r in range(6):\n                for c in range(4):\n                    if all(board[COLUMNS[c + i]][r] == color for i in range(4)):\n                        return color\n            \n            # Check vertical\n            for c in range(7):\n                for r in range(3):\n                    if all(board[COLUMNS[c]][r + i] == color for i in range(4)):\n                        return color\n            \n            # Check diagonal (down-right)\n            for c in range(4):\n                for r in range(3):\n                    if all(board[COLUMNS[c + i]][r + i] == color for i in range(4)):\n                        return color\n            \n            # Check diagonal (up-right)\n            for c in range(4):\n                for r in range(3, 6):\n                    if all(board[COLUMNS[c + i]][r - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board[chr(c + 65)][r] == color:\n                        count = 0\n                        for step in range(4):\n                            nr, nc = r + direction[0] * step, c + direction[1] * step\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board[chr(nc + 65)][nr] == color:\n                                count += 1\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if board[chr(j + 65)][i] == color:\n                        if j <= 3 and all(board[chr(j + k + 65)][i] == color for k in range(4)):\n                            return color\n                        if i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                            return color\n                        if j <= 3 and i <= 2 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                            return color\n                        if j >= 3 and i <= 2 and all(board[chr(j - k + 65)][i + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n    \n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board[chr(ord('A') + col)][row] == color:\n                    if col + 3 < 7 and all(board[chr(ord('A') + col + k)][row] == color for k in range(4)):\n                        return True\n                    if row + 3 < 6 and all(board[chr(ord('A') + col)][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row + 3 < 6 and all(board[chr(ord('A') + col + k)][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row - 3 >= 0 and all(board[chr(ord('A') + col + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] is not None:\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n                    if j <= 3 and i >= 3 and all(board['ABCDEFG'[j+k]][i-k] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if (col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4))) or \\\n                       (row <= 2 and all(board[chr(col + 65)][row + k] == color for k in range(4))) or \\\n                       (col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win after each move\n        for i in range(7):\n            for j in range(6):\n                if board[chr(i + 65)][j] == color:\n                    if (i + 3 < 7 and \n                        board[chr(i + 1 + 65)][j] == color and \n                        board[chr(i + 2 + 65)][j] == color and \n                        board[chr(i + 3 + 65)][j] == color):\n                        return color\n                    if (j + 3 < 6 and \n                        board[chr(i + 65)][j + 1] == color and \n                        board[chr(i + 65)][j + 2] == color and \n                        board[chr(i + 65)][j + 3] == color):\n                        return color\n                    if (i + 3 < 7 and j + 3 < 6 and \n                        board[chr(i + 65)][j] == color and \n                        board[chr(i + 1 + 65)][j + 1] == color and \n                        board[chr(i + 2 + 65)][j + 2] == color and \n                        board[chr(i + 3 + 65)][j + 3] == color):\n                        return color\n                    if (i + 3 < 7 and j - 3 >= 0 and \n                        board[chr(i + 65)][j] == color and \n                        board[chr(i + 1 + 65)][j - 1] == color and \n                        board[chr(i + 2 + 65)][j - 2] == color and \n                        board[chr(i + 3 + 65)][j - 3] == color):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner\n        for col in board:\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n                \n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                    return color\n                \n                # Check horizontal\n                if all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4) if i < 7):\n                    return color\n                \n                # Check diagonal (top-left to bottom-right)\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return color\n                \n                # Check diagonal (bottom-left to top-right)\n                if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for direction in [((1, 0), 4), ((0, 1), 4), ((1, 1), 4), ((1, -1), 4)]:\n            d, length = direction\n            for r in range(6):\n                for c in range(7):\n                    if grid[chr(c + ord('A'))][r] == color:\n                        count = 0\n                        for step in range(length):\n                            nr, nc = r + step * d[0], c + step * d[1]\n                            if 0 <= nr < 6 and 0 <= nc < 7 and grid[chr(nc + ord('A'))][nr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if row <= 2 and all(board[col][row+i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 0\n            for d in range(-3, 4):\n                check_col = ord(col) - ord('A') + d * direction[0]\n                check_row = row + d * direction[1]\n                if 0 <= check_col < 7 and 0 <= check_row < 6:\n                    if board[chr(ord('A') + check_col)][check_row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCDEFG'[(ord(column)-65):(ord(column)-61)]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row] == color for row in range(row, row + 4)):\n                    return color\n                # Check diagonal (bottom-left to top-right)\n                if column <= 'D' and row >= 3 and all(board[chr(ord(column) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal (top-left to bottom-right)\n                if column <= 'D' and row <= 2 and all(board[chr(ord(column) + i)][row + i] == color for i in range(4)):\n                    return color\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if 0 <= ord(col) + i < ord('A') + 7) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i < ord('A') + 7 and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < ord('A') + 7 and row - i >= 0)):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col)+i)][row] for i in range(4)):\n                        return color\n                    if row <= 2 and all(board[col][row] == board[col][row+i] for i in range(4)):\n                        return color\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col)+i)][row+i] for i in range(4)):\n                        return color\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col)+i)][row-i] for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n\n        # Check for a winner\n        for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if (0 <= r + 3 * dr < 6) and (0 <= c + 3 * dc < 7):\n                        colors = {board[ch][r + i * dr] for i, ch in enumerate('ABCDEFG' [c:c+4*dc:dc])}\n                        if len(colors) == 1 and None not in colors:\n                            return colors.pop()\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[column][row] for column, row in line if board[column][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row - 4, -1))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if (row < 6 and board[col][row] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        if all(0 <= row + dy * k < 6 and \n                               0 <= ord(col) - ord('A') + dx * k < 7 and \n                               board[chr(ord('A') + (ord(col) - ord('A') + dx * k))][row + dy * k] == color \n                               for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = {board[col][row] for col, row in line if board[col][row] is not None}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            if (column, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    moves_set = set(moves)\n    for (c, r) in moves:\n        if check_direction(moves_set, c, r):\n            return True\n    return False\n\ndef check_direction(moves_set, c, r):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for d in [1, -1]:\n            for step in range(1, 4):\n                new_c = chr(ord(c) + d * step * dc)\n                new_r = r + d * step * dr\n                if (new_c, new_r) in moves_set:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n                \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        # Check for a winner\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if (c + 3 < 7 and all(board['ABCDEFG'[c + i]][r] == color for i in range(4))) or \\\n                       (r + 3 < 6 and all(board['ABCDEFG'[c]][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and all(board['ABCDEFG'[c + i]][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal\n            for col in 'ABCDEFG':\n                if board[col][-4:] == [color] * 4 and len(board[col]) >= 4:\n                    return color\n            \n            # Check diagonal /\n            for i in range(4):\n                if (column_index := 'ABCDEFG'.index(column) - i) >= 0 and (row_index := len(board[column]) - 1 - i) >= 0:\n                    if board['ABCDEFG'[column_index]][row_index] == color and \\\n                       board['ABCDEFG'[column_index + 1]][row_index + 1] == color and \\\n                       board['ABCDEFG'[column_index + 2]][row_index + 2] == color and \\\n                       board['ABCDEFG'[column_index + 3]][row_index + 3] == color:\n                        return color\n            \n            # Check diagonal \\\n            for i in range(4):\n                if (column_index := 'ABCDEFG'.index(column) - i) >= 0 and (row_index := len(board[column]) - 1 + i) < 6:\n                    if board['ABCDEFG'[column_index]][row_index] == color and \\\n                       board['ABCDEFG'[column_index + 1]][row_index - 1] == color and \\\n                       board['ABCDEFG'[column_index + 2]][row_index - 2] == color and \\\n                       board['ABCDEFG'[column_index + 3]][row_index - 3] == color:\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in (1, -1):\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return color\n                if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return color\n                if i <= 2 and j <= 3 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return color\n                if i >= 3 and j <= 3 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = next((r for r in range(6) if grid[col][r] is None), None)\n        if row is not None:\n            grid[col][row] = color\n            \n            # Check for a win\n            if check_winner(grid, col, row, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dr, dc in directions:\n        count = 1\n        for step in range(1, 4):\n            r, c = row + dr * step, ord(col) - 65 + dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and grid[chr(c + 65)][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            r, c = row - dr * step, ord(col) - 65 - dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and grid[chr(c + 65)][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color_check:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color_check for k in range(4)):\n                            return color_check\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color_check for k in range(4)):\n                            return color_check\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color_check for k in range(4)):\n                            return color_check\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color_check for k in range(4)):\n                            return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                player_moves[color].append((column, row))\n                break\n\n    for color, positions in player_moves.items():\n        for position in positions:\n            if any(all((position[0], position[1] + i) in positions for i in range(4)) for direction in range(4)):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == player for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] == player):\n                    return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    winning_positions = set()\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                winning_positions.add((col, row, color))\n                break\n\n        for col_idx in range(len('ABCDEFG')):\n            for row_idx in range(6):\n                if board['ABCDEFG'[col_idx]][row_idx] == color:\n                    if check_winner(col_idx, row_idx, color, board):\n                        return color\n\n    return \"Draw\"\n\ndef check_winner(col_idx, row_idx, color, board):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = col_idx + d[0] * i * step\n                new_row = row_idx + d[1] * i * step\n                if 0 <= new_col < 7 and 0 <= new_row < 6 and board['ABCDEFG'[new_col]][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        # Check for a win if this column has 4 or more pieces\n        if len(board[column]) >= 4:\n            count = 0\n            # Check vertical\n            for i in range(len(board[column])-1, -1, -1):\n                if board[column][i] == color:\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    count = 0\n            count = 0\n            \n            # Check horizontal\n            for c in 'ABCDEFG':\n                count = sum(1 for x in board[c][-4:] if x == color)\n                if count == 4:\n                    return color\n            \n            count = 0\n            \n            # Check diagonals \\\n            for i in range(len(board[column])):\n                for j in range(4):\n                    if i-j >= 0 and column_index(column) + j < 7:\n                        if board[column_index(column) + j][i-j] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            count = 0\n            \n            count = 0\n            \n            # Check diagonals /\n            for i in range(len(board[column])):\n                for j in range(4):\n                    if i+j < len(board[column]) and column_index(column) - j >= 0:\n                        if board[column_index(column) - j][i+j] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            count = 0\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return None\n\ndef column_index(column):\n    return ord(column) - ord('A')\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        # Check for a win after the current move\n        if len(board[col]) >= 4:\n            # Check vertical\n            if all(board[col][i] == color for i in range(-4, 0)):\n                return color\n\n            # Check horizontal\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) > 0:\n                    count = 0\n                    for i in range(len(board[c])):\n                        if board[c][i] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            count = 0\n\n            # Check diagonal (down-right)\n            for i in range(len(board[col])):\n                if board[col][i] == color:\n                    if i < len(board[col]) - 3 and all(board[col][i + k] == color for k in range(4)):\n                        return color\n                    for j in range(1, 4):\n                        if (col_index := ord(col) - ord('A') + j) < 7 and i + j < len(board[col]) and board[chr(ord('A') + col_index)][i + j] == color:\n                            if j == 3:\n                                return color\n\n            # Check diagonal (down-left)\n            for i in range(len(board[col])):\n                if board[col][i] == color:\n                    if i < len(board[col]) - 3 and all(board[col][i + k] == color for k in range(4)):\n                        return color\n                    for j in range(1, 4):\n                        if (col_index := ord(col) - ord('A') - j) >= 0 and i + j < len(board[col]) and board[chr(ord('A') - j)][i + j] == color:\n                            if j == 3:\n                                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for win_color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == win_color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] == win_color):\n                    return win_color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col in 'ABCDEFG' and row <= 2 and\n                            all(board[col][row + k] == color for k in range(4))):\n                            return color\n                        if (row <= 5 and col in 'ABCDEFG' and\n                            col <= 'D' and \n                            all(board[chr(ord(col) + k)][row] == color for k in range(4))):\n                            return color\n                        if (col <= 'D' and row <= 2 and\n                            all(board[chr(ord(col) + k)][row + k] == color for k in range(4))):\n                            return color\n                        if (col <= 'D' and row >= 3 and\n                            all(board[chr(ord(col) + k)][row - k] == color for k in range(4))):\n                            return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for win in LINES:\n            if all(board[c][r] == color for c, r in win if (c, r) in [(col, row) for col in board for row in range(6)]):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if (0 <= r + direction[0] * 3 < 6 and \n                        0 <= c + direction[1] * 3 < 7):\n                        check_colors = [board[chr(c + ord('A'))][r + direction[0] * i + direction[1] * 0]\n                                        for i in range(4)]\n                        if all(color == check_colors[0] and color is not None for color in check_colors):\n                            return check_colors[0]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color] += 1\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in {(col, row) for col in board}):\n                return color\n\n    return \"Draw\" if player_moves['Red'] + player_moves['Yellow'] == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + d_col * step)\n            new_row = row + d_row * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            new_col = chr(ord(col) - d_col * step)\n            new_row = row - d_row * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in {(c, r) for c in board for r in range(6)}):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] == color):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for col, row in moves:\n        for d in directions:\n            count = 1\n            for step in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step)\n                new_row = row + d[1] * step\n                if new_col in 'ABCDEFG' and 0 <= new_row < 6 and (new_col, new_row) in moves:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(grid[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] is not None):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == 'Red' for col, row in line if row < 6 and board[col][row] is not None):\n                return 'Red'\n            if all(board[col][row] == 'Yellow' for col, row in line if row < 6 and board[col][row] is not None):\n                return 'Yellow'\n\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x, y) in [(c, r) for c in board for r in range(6) if board[c][r] is not None]):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for win condition\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < len(board[c])):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[pos[0]][pos[1]] == color for pos in line if pos[1] < 6 and board[pos[0]][pos[1]] is not None):\n                return color\n                \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[pos[0]][pos[1]] == color for pos in line if pos[0] in board and pos[1] < 6 and pos[1] >= 0):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = []\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                moves.append((col, row, color))\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col, row, player in moves:\n            if player == color:\n                for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                    count = 1\n                    for step in range(1, 4):\n                        x, y = ord(col) - ord('A') + step * dx, row + step * dy\n                        if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                            count += 1\n                        else:\n                            break\n                    for step in range(1, 4):\n                        x, y = ord(col) - ord('A') - step * dx, row - step * dy\n                        if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                            count += 1\n                        else:\n                            break\n                    if count >= 4:\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player] += 1\n\n        # Check for win conditions\n        for line in LINES:\n            if all(board[c][r] == player for c, r in line if (c in board) and (r < 6) and (board[c][r] is not None)):\n                return player\n\n    return \"Draw\" if player_moves['Red'] + player_moves['Yellow'] == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                player_moves[color].append((column, row))\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if check_winner(player_moves[color]):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    move_set = set(moves)\n    for line in LINES:\n        if line.issubset(move_set):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) >= 4:\n            # Check vertical\n            if all(board[col][i] == color for i in range(-4, 0)):\n                return color\n            # Check horizontal\n            for c in 'ABCDEFG':\n                if len(board[c]) >= 4 and all(board[c][i] == color for i in range(-4, 0)):\n                    return color\n            # Check diagonal /\n            for i in range(3, 6):\n                if all(board[COLUMNS[j]][i-j] == color for j in range(4) if 0 <= i-j < len(board[COLUMNS[j]])):\n                    return color\n            # Check diagonal \\\n            for i in range(3, 6):\n                if all(board[COLUMNS[j]][i+j] == color for j in range(4) if 0 <= i+j < len(board[COLUMNS[j]])):\n                    return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        # Check for a win after each move\n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                if all(board['ABCDEFG'[c+i]] and board['ABCDEFG'[c+i]][-1] == color for i in range(4)):\n                    return color\n            \n            # Check diagonal \\\n            for offset in range(-3, 1):\n                if all(len(board['ABCDEFG'[c + offset]]) > 0 and \n                       board['ABCDEFG'[c + offset]][-1] == color for c in range(4)):\n                    return color\n            \n            # Check diagonal /\n            for offset in range(-3, 1):\n                if all(len(board['ABCDEFG'[c - offset]]) > 0 and \n                       board['ABCDEFG'[c - offset]][-1] == color for c in range(3, 7)):\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] is not None:\n                    color = board[chr(j + 65)][i]\n                    # Check horizontal\n                    if j < 4 and all(board[chr(j + k + 65)][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i < 3 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j < 4 and i < 3 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j >= 3 and i < 3 and all(board[chr(j - k + 65)][i + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in LINES:\n            if any(color == board[c][r] for c, r in direction) and all(board[c][r] == color for c, r in direction):\n                return color\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if (check_direction(board, column, row, color, 1, 0) or  # Horizontal\n                    check_direction(board, column, row, color, 0, 1) or  # Vertical\n                    check_direction(board, column, row, color, 1, 1) or  # Diagonal /\n                    check_direction(board, column, row, color, 1, -1)):  # Diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, start_column, start_row, color, delta_col, delta_row):\n    count = 0\n    column_index = 'ABCDEFG'.index(start_column)\n    for step in range(4):\n        col = column_index + step * delta_col\n        row = start_row + step * delta_row\n        if 0 <= col < 7 and 0 <= row < 6 and board['ABCDEFG'[col]][row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    # Check all possible win conditions (horizontal, vertical, diagonal)\n    return (check_direction(board, color, column, row, 1, 0) or  # Horizontal\n            check_direction(board, color, column, row, 0, 1) or  # Vertical\n            check_direction(board, color, column, row, 1, 1) or  # Diagonal down-right\n            check_direction(board, color, column, row, 1, -1)    # Diagonal down-left\n           )\n\ndef check_direction(board, color, column, row, delta_col, delta_row):\n    count = 1\n    # Check in one direction\n    count += count_in_direction(board, color, column, row, delta_col, delta_row)\n    # Check in the opposite direction\n    count += count_in_direction(board, color, column, row, -delta_col, -delta_row)\n    return count >= 4\n\ndef count_in_direction(board, color, column, row, delta_col, delta_row):\n    count = 0\n    col, r = column, row\n    while True:\n        col = chr(ord(col) + delta_col)\n        r += delta_row\n        if col not in board or r < 0 or r >= 6:\n            break\n        if board[col][r] == color:\n            count += 1\n        else:\n            break\n    return count\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (check_direction(board, col, row, 1, 0) or  # horizontal\n                        check_direction(board, col, row, 0, 1) or  # vertical\n                        check_direction(board, col, row, 1, 1) or  # diagonal /\n                        check_direction(board, col, row, 1, -1)):  # diagonal \\\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_direction(board, col, row, delta_col, delta_row):\n    color = board[col][row]\n    count = 1\n    \n    for step in range(1, 4):\n        new_col = chr(ord(col) + delta_col * step)\n        new_row = row + delta_row * step\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n\n    for step in range(1, 4):\n        new_col = chr(ord(col) - delta_col * step)\n        new_row = row - delta_row * step\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n            \n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check for vertical\n            for c in 'ABCDEFG':\n                for r in range(3):  # Check the first 4 rows only\n                    if all(grid[c][r + k] == color for k in range(4)):\n                        return color\n            \n            # Check for horizontal\n            for r in range(6):\n                for c in range(4):  # Check the first 4 columns only\n                    if all(grid[chr(ord('A') + c + k)][r] == color for k in range(4)):\n                        return color\n            \n            # Check for diagonal \\\n            for c in range(4):  # Check first 4 columns\n                for r in range(3):  # Check first 3 rows\n                    if all(grid[chr(ord('A') + c + k)][r + k] == color for k in range(4)):\n                        return color\n            \n            # Check for diagonal /\n            for c in range(4):  # Check first 4 columns\n                for r in range(3, 6):  # Check from row 3 to 5\n                    if all(grid[chr(ord('A') + c + k)][r - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(grid[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(grid[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(grid[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win condition\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    # Check horizontal\n                    if c <= 3 and all(board['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board['ABCDEFG'[c+i]][r-i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n    \n    def check_winner(color):\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] == color:\n                    # Check horizontal\n                    if column <= 'D' and all(grid[column][row] == color for column in 'ABCDE'[ord(column) - 65:ord(column) - 65 + 4]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if column <= 'D' and row <= 2 and all(grid[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if column >= 'D' and row <= 2 and all(grid[chr(ord(column) - k)][row + k] == color for k in range(4)):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    else:\n        return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in [1, -1]:\n            r, c = row, ord(col) - ord('A')\n            while True:\n                r += dr * step\n                c += dc * step\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n                if count >= 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        for step in [1, -1]:\n            x, y = ord(col) - ord('A'), row\n            while True:\n                x += step * dx\n                y += step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n                if count >= 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] is not None:\n                    color = board[COLUMNS[j]][i]\n                    if (j + 3 < 7 and\n                        all(board[COLUMNS[j + k]][i] == color for k in range(4)) or\n                        i + 3 < 6 and all(board[COLUMNS[j]][i + k] == color for k in range(4)) or\n                        j + 3 < 7 and i + 3 < 6 and all(board[COLUMNS[j + k]][i + k] == color for k in range(4)) or\n                        j - 3 >= 0 and i + 3 < 6 and all(board[COLUMNS[j - k]][i + k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a win condition\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r+i] == color for i in range(4)):\n                        return color\n                    \n                    # Check horizontal\n                    if c <= 'D' and all(grid[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(grid[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(grid[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) < 42:\n        return \"Draw\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (col in grid and row < 3 and\n                        all(grid[col][row+i] == color for i in range(4))):  # vertical\n                        return True\n                    if (col in grid and col < 'E' and\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4))):  # horizontal\n                        return True\n                    if (col in grid and row < 3 and col < 'E' and\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4))):  # diagonal \\\n                        return True\n                    if (col in grid and row > 2 and col < 'E' and\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4))):  # diagonal /\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal connections\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, start_col, start_row, color, delta_col, delta_row):\n    count = 0\n    col_index = 'ABCDEFG'.index(start_col)\n    row_index = start_row\n\n    while 0 <= col_index < 7 and 0 <= row_index < 6 and board['ABCDEFG'[col_index]][row_index] == color:\n        count += 1\n        if count == 4:\n            return True\n        col_index += delta_col\n        row_index += delta_row\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if (check_direction(grid, col, row, 1, 0, color) or\n                    check_direction(grid, col, row, 0, 1, color) or\n                    check_direction(grid, col, row, 1, 1, color) or\n                    check_direction(grid, col, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, d_col, d_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + d_col * i)\n        r = row + d_row * i\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + d[0] * step)\n            r = row + d[1] * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a winner after each move\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row):\n    color = board[column][row]\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]  # right, down, diagonal right-down, diagonal right-up\n    \n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = chr(ord(column) + dx * step), row + dy * step\n            if 0 <= y < 6 and x in board and board[x][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = chr(ord(column) - dx * step), row - dy * step\n            if 0 <= y < 6 and x in board and board[x][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n    \n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board[chr(ord('A') + col)][row] == color:\n                    if col + 3 < 7 and all(board[chr(ord('A') + col + k)][row] == color for k in range(4)):\n                        return True\n                    if row + 3 < 6 and all(board[chr(ord('A') + col)][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row + 3 < 6 and all(board[chr(ord('A') + col + k)][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row - 3 >= 0 and all(board[chr(ord('A') + col + k)][row - k] == color for k in range(4)):\n                        return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(65 + col)][row] == color:\n                    if col <= 3 and all(grid[chr(65 + col + i)][row] == color for i in range(4)):\n                        return color\n                    if row <= 2 and all(grid[chr(65 + col)][row + i] == color for i in range(4)):\n                        return color\n                    if col <= 3 and row <= 2 and all(grid[chr(65 + col + i)][row + i] == color for i in range(4)):\n                        return color\n                    if col <= 3 and row >= 3 and all(grid[chr(65 + col + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal down\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal up\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal (top-left to bottom-right)\n                    if i <= 2 and j <= 3 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal (bottom-left to top-right)\n                    if i >= 3 and j <= 3 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if (col + 3 < 7 and all(board[chr(col + i + 65)][row] == color for i in range(4))) or \\\n                       (row + 3 < 6 and all(board[chr(col + 65)][row + i] == color for i in range(4))) or \\\n                       (col + 3 < 7 and row + 3 < 6 and all(board[chr(col + i + 65)][row + i] == color for i in range(4))) or \\\n                       (col + 3 < 7 and row - 3 >= 0 and all(board[chr(col + i + 65)][row - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    elif len(pieces_positions) >= 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for i in range(7):\n            for j in range(6):\n                if (i < 4 and all(board[chr(65 + k)][j] == color for k in range(i, i + 4)) or\n                    j < 3 and all(board[chr(65 + i)][j + k] == color for k in range(4)) or\n                    i < 4 and j < 3 and all(board[chr(65 + i + k)][j + k] == color for k in range(4)) or\n                    i < 4 and j > 2 and all(board[chr(65 + i + k)][j - k] == color for k in range(4))):\n                    return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for win_color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == win_color for c, r in line) for line in LINES):\n                return win_color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if (j <= 3 and all(board[chr(ord('A') + j + k)][i] == color_check for k in range(4))) or \\\n                       (i <= 2 and all(board[chr(ord('A') + j)][i + k] == color_check for k in range(4))) or \\\n                       (j <= 3 and i <= 2 and all(board[chr(ord('A') + j + k)][i + k] == color_check for k in range(4))) or \\\n                       (j <= 3 and i >= 3 and all(board[chr(ord('A') + j + k)][i - k] == color_check for k in range(4))):\n                        return color_check\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + d[0] * step)\n            r = row + d[1] * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if check_winner(board, c):\n                return board[c][0]\n    return \"Draw\"\n\ndef check_winner(board, col):\n    for r in range(6):\n        if board[col][r] is not None:\n            color = board[col][r]\n            if check_direction(board, col, r, color):\n                return color\n    return None\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in range(7):\n            for row in range(6):\n                if board[chr(ord('A') + col)][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board[chr(ord('A') + col + k)][row] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[chr(ord('A') + col)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(board[chr(ord('A') + col + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 3 and row >= 3 and all(board[chr(ord('A') + col + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```"
        ]
    }
}