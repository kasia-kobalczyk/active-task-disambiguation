{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c].count(color) >= 1 for c in line if c in board):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if row < 6 and board[col][row] is not None):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if row < 6 and board[col][row] is not None):\n            return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n        for win_condition in LINES:\n            if all(board[x][y] == color for x, y in win_condition if x in board and y < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and len(set(colors)) == 1:\n                return colors[0]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < len(grid[c]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece.split('_')[1]\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if c in grid and r < 6 and grid[c][r] is not None):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for line in LINES:\n            values = [board[x][y] for x, y in line if x in board and y < 6]\n            if values.count(\"Red\") == 4:\n                return \"Red\"\n            elif values.count(\"Yellow\") == 4:\n                return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 0 <= ord(c) + i < 7):\n                            return color\n                    # Check diagonal /\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and 0 <= ord(c) + d < 7 and all(\n                            board[chr(ord(c) + d)][r - d] == color for d in range(4)):\n                            return color\n                    # Check diagonal \\\n                    for d in range(-3, 1):\n                        if 0 <= r - d < len(board[c]) and 0 <= ord(c) + d < 7 and all(\n                            board[chr(ord(c) + d)][r + d] == color for d in range(4)):\n                            return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col in board and all(board[chr(ord(col)+k)][row] == color for k in range(4) if chr(ord(col)+k) in board):\n                        return color\n                    # Check diagonal down\n                    if row <= 2 and col in board and all(board[chr(ord(col)+k)][row+k] == color for k in range(4) if chr(ord(col)+k) in board):\n                        return color\n                    # Check diagonal up\n                    if row >= 3 and col in board and all(board[chr(ord(col)+k)][row-k] == color for k in range(4) if chr(ord(col)+k) in board):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y >= 0 and y < 6 and board[x][y] == color):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color.capitalize()\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if row >= 3 and all(board[column][row - i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for col in 'ABCDEFG':\n        if col in board and len(board[col]) > row and board[col][row] == color:\n            count = 0\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) > row and board[c][row] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n    \n    # Check diagonal (/)\n    for i in range(-3, 1):\n        if (column := chr(ord(column) + i)) in board and row + i >= 0 and row + i < len(board[column]) and board[column][row + i] == color:\n            count = 1\n            for j in range(1, 4):\n                if (next_col := chr(ord(column) + j)) in board and row + i + j >= 0 and row + i + j < len(board[next_col]) and board[next_col][row + i + j] == color:\n                    count += 1\n                else:\n                    break\n                if count == 4:\n                    return True\n    \n    # Check diagonal (\\)\n    for i in range(-3, 1):\n        if (column := chr(ord(column) + i)) in board and row - i >= 0 and row - i < len(board[column]) and board[column][row - i] == color:\n            count = 1\n            for j in range(1, 4):\n                if (next_col := chr(ord(column) + j)) in board and row - i - j >= 0 and row - i - j < len(board[next_col]) and board[next_col][row - i - j] == color:\n                    count += 1\n                else:\n                    break\n                if count == 4:\n                    return True\n    \n    return False\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win after this piece is added\n        if len(board[column]) >= 4:\n            # Check vertical\n            if all(c == color for c in board[column][-4:]):\n                return color\n            \n            # Check horizontal\n            for i in range(max(0, len(board[column]) - 4), len(board[column])):\n                if board[column][i] == color:\n                    if i < len(board[column]) - 3 and all(board[column][i+j] == color for j in range(4)):\n                        return color\n            \n            # Check diagonals\n            for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n                for r in range(max(0, len(board[column]) - 4), len(board[column])):\n                    if (c < 4 and r < 3 and \n                        board[chr(ord('A') + c)][r] == color and \n                        board[chr(ord('A') + c + 1)][r + 1] == color and \n                        board[chr(ord('A') + c + 2)][r + 2] == color and \n                        board[chr(ord('A') + c + 3)][r + 3] == color):\n                        return color\n                    if (c < 4 and r >= 3 and \n                        board[chr(ord('A') + c)][r] == color and \n                        board[chr(ord('A') + c + 1)][r - 1] == color and \n                        board[chr(ord('A') + c + 2)][r - 2] == color and \n                        board[chr(ord('A') + c + 3)][r - 3] == color):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col in 'ABCDEF' and all(board[chr(ord(col)+k)][row] == color for k in range(4) if ord(col)+k < ord('H')):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4) if ord(col)+k < ord('H')):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row >= 3 and all(board[chr(ord(col)+k)][row-k] == color for k in range(4) if ord(col)+k < ord('H')):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        # Check for win\n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n\n            # Check horizontal\n            for i in range(max(0, len(board[column]) - 4), len(board[column])):\n                if board[column][i:i+4] == [color] * 4:\n                    return color\n\n            # Check diagonal (bottom-left to top-right)\n            for i in range(len(board[column]) - 4, len(board[column])):\n                if i >= 3 and column in 'ABCDEFG' and column >= 'A' and (column, len(board[column]) - 1 - i) in board.keys():\n                    if all(board[chr(ord(column) + j)][len(board[column]) - 1 - (i - j)] == color for j in range(4) if chr(ord(column) + j) in board):\n                        return color\n\n            # Check diagonal (top-left to bottom-right)\n            for i in range(len(board[column]) - 4, len(board[column])):\n                if i >= 0 and column in 'ABCDEFG' and column <= 'G' and (column, len(board[column]) - 1 - i) in board.keys():\n                    if all(board[chr(ord(column) - j)][len(board[column]) - 1 - (i + j)] == color for j in range(4) if chr(ord(column) - j) in board):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if len(board[c]) >= 4:\n                    count = {color: 0 for color in ['Red', 'Yellow']}\n                    for i in range(4):\n                        if board[c][r - i] == 'Red':\n                            count['Red'] += 1\n                        else:\n                            count['Yellow'] += 1\n                    if count['Red'] == 4:\n                        return 'Red'\n                    if count['Yellow'] == 4:\n                        return 'Yellow'\n\n        for c in 'ABCDEFG':\n            if len(board[c]) >= 4:\n                count = {color: 0 for color in ['Red', 'Yellow']}\n                for i in range(len(board[c]) - 3):\n                    if board[c][i] == 'Red':\n                        count['Red'] += 1\n                    else:\n                        count['Yellow'] += 1\n                if count['Red'] == 4:\n                    return 'Red'\n                if count['Yellow'] == 4:\n                    return 'Yellow'\n\n        for col in range(len(board)):\n            for row in range(6):\n                if len(board[c]) >= 4:\n                    count = {color: 0 for color in ['Red', 'Yellow']}\n                    for i in range(4):\n                        if board[c][i] == 'Red':\n                            count['Red'] += 1\n                        else:\n                            count['Yellow'] += 1\n                    if count['Red'] == 4:\n                        return 'Red'\n                    if count['Yellow'] == 4:\n                        return 'Yellow'\n\n    return 'Draw' if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for victory after each move\n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                if all(board['ABCDEFG'[c + i]][-1] == color for i in range(4) if c + i < 7 and c + i >= 0):\n                    return color\n            \n            # Check diagonal /\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                for r in range(len(board['ABCDEFG'[c]])):\n                    if (r >= 3 and all((c + i < 7 and r - i >= 0 and board['ABCDEFG'[c + i]][r - i] == color) for i in range(4))):\n                        return color\n            \n            # Check diagonal \\\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                for r in range(len(board['ABCDEFG'[c]])):\n                    if (r <= 2 and all((c + i < 7 and r + i < 6 and board['ABCDEFG'[c + i]][r + i] == color) for i in range(4))):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j + k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j >= 3 and i <= 2 and all(board['ABCDEFG'[j - k]][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j + k]][i + k] == color for k in range(4)):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if (all(board[col][row] == board[col][r] for r in range(row, row + 4)) or\n                        all(board[c][row] == color for c in 'ABCDEFG' if c in board and c > col and row < 6 and row < len(board[c])) or\n                        all(board[c][r] == color for r in range(row) if (c := col) == (c := chr(ord(col) + (r - row))) and r < 6) or\n                        all(board[c][r] == color for r in range(row) if (c := col) == (c := chr(ord(col) - (r - row))) and r < 6)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal\n    for row in range(6):\n        count = 0\n        for col in 'ABCDEFG':\n            if board[col][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check vertical\n    for col in 'ABCDEFG':\n        count = 0\n        for row in range(6):\n            if board[col][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check diagonal \\\n    for col in range(4):\n        for row in range(3, 6):\n            if board['ABCDEFG'[col]][row] == color and \\\n               board['ABCDEFG'[col+1]][row-1] == color and \\\n               board['ABCDEFG'[col+2]][row-2] == color and \\\n               board['ABCDEFG'[col+3]][row-3] == color:\n                return True\n\n    # Check diagonal /\n    for col in range(4):\n        for row in range(3):\n            if board['ABCDEFG'[col]][row] == color and \\\n               board['ABCDEFG'[col+1]][row+1] == color and \\\n               board['ABCDEFG'[col+2]][row+2] == color and \\\n               board['ABCDEFG'[col+3]][row+3] == color:\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if (0 <= r < 6 and 0 <= c < 7 and \n                        grid[chr(c + 65)][r] == color):\n                        count = 1\n                        for step in range(1, 4):\n                            nr, nc = r + step * direction[0], c + step * direction[1]\n                            if (0 <= nr < 6 and 0 <= nc < 7 and \n                                grid[chr(nc + 65)][nr] == color):\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for win_color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == win_color for x, y in line if y < 6 and board[x][y] is not None):\n                    return win_color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for win_condition in LINES:\n            if all(board[x][y] == color for x, y in win_condition if (x, y) in board and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        # Check for win condition\n        if len(board[column]) >= 4:\n            # Vertical check\n            if all(board[column][i] == color for i in range(-4, 0)):\n                return color\n            \n            # Horizontal and diagonal checks\n            for col in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n                if all(board[chr(ord('A') + col + i)][-1] == color for i in range(4)):\n                    return color\n            \n            for d in range(-3, 1):\n                if 0 <= ord(column) - ord('A') + d < 7 and 0 <= len(board[chr(ord('A') + ord(column) - ord('A') + d)]) - 1 < 6:\n                    if all(board[chr(ord('A') + ord(column) - ord('A') + d + i)][-1 - i] == color for i in range(4)):\n                        return color\n                if 0 <= ord(column) - ord('A') + d < 7 and 0 <= len(board[chr(ord('A') + ord(column) - ord('A') - d)]) - 1 < 6:\n                    if all(board[chr(ord('A') + ord(column) - ord('A') - d + i)][-1 - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n\n        for c in 'ABCDEFG':\n            if board[c].count('Red') >= 4 or board[c].count('Yellow') >= 4:\n                for i in range(len(board[c]) - 3):\n                    if board[c][i:i+4] == ['Red'] * 4:\n                        return 'Red'\n                    if board[c][i:i+4] == ['Yellow'] * 4:\n                        return 'Yellow'\n\n        for r in range(6):\n            column_colors = [board[c][r] if r < len(board[c]) else None for c in 'ABCDEFG']\n            if column_colors.count('Red') >= 4 or column_colors.count('Yellow') >= 4:\n                for i in range(len(column_colors) - 3):\n                    if column_colors[i:i+4] == ['Red'] * 4:\n                        return 'Red'\n                    if column_colors[i:i+4] == ['Yellow'] * 4:\n                        return 'Yellow'\n\n        for i in range(4):\n            for j in range(3):\n                if i < len(board['A']) and j < len(board['A']):\n                    diagonal1 = [board['A'][i+k][j+k] if i+k < len(board['A']) and j+k < len(board['A'][0]) else None for k in range(4)]\n                    diagonal2 = [board['A'][i+k][j-k] if i+k < len(board['A']) and j-k >= 0 else None for k in range(4)]\n                    if diagonal1.count('Red') == 4 or diagonal2.count('Red') == 4:\n                        return 'Red'\n                    if diagonal1.count('Yellow') == 4 or diagonal2.count('Yellow') == 4:\n                        return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            # Check for a win in this column\n            if all(board[col][i] == color for i in range(-4, 0)):\n                return color\n\n            # Check horizontal\n            for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n                if all(board[chr(ord('A') + c + i)][-1] == color for i in range(4)):\n                    return color\n\n            # Check diagonal /\n            for r in range(len(board[col])):\n                if r >= 3:\n                    if (col in board and \n                        (chr(ord(col) - 3) in board and board[chr(ord(col) - 3)][r-3] == color) and\n                        (chr(ord(col) - 2) in board and board[chr(ord(col) - 2)][r-2] == color) and\n                        (chr(ord(col) - 1) in board and board[chr(ord(col) - 1)][r-1] == color)):\n                        return color\n\n            # Check diagonal \\\n            for r in range(len(board[col])):\n                if r >= 3:\n                    if (col in board and \n                        (chr(ord(col) + 3) in board and board[chr(ord(col) + 3)][r-3] == color) and\n                        (chr(ord(col) + 2) in board and board[chr(ord(col) + 2)][r-2] == color) and\n                        (chr(ord(col) + 1) in board and board[chr(ord(col) + 1)][r-1] == color)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] == color):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if any(board[c][r] == color for c, r in line if (c in board and r < 6 and board[c][r] is not None)):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if any(board[x][y] != color for x, y in line):\n                continue\n            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in [(c, r) for c in 'ABCDEFG' for r in range(6) if board[c][r] == color]:\n                            # Check horizontal\n                            if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                                return color\n                            # Check vertical\n                            if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                                return color\n                            # Check diagonal /\n                            if col <= 'D' and row >= 3 and all(board[COLUMNS[COLUMNS.index(col)+k]][row-k] == color for k in range(4)):\n                                return color\n                            # Check diagonal \\\n                            if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col)+k]][row+k] == color for k in range(4)):\n                                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for row in range(6):\n            for col in 'ABCDEFG':\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    # Check vertical\n    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n        return True\n    # Check horizontal\n    for start_col in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n        if all(board[chr(start_col + ord('A'))][row] == color for i in range(4)):\n            return True\n    # Check diagonal /\n    for start_col in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n        for start_row in range(3):\n            if all(board[chr(start_col + ord('A') + i)][start_row + i] == color for i in range(4)):\n                return True\n    # Check diagonal \\\n    for start_col in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n        for start_row in range(3, 6):\n            if all(board[chr(start_col + ord('A') + i)][start_row - i] == color for i in range(4)):\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a winning condition\n        if len(board[column]) >= 4:\n            # Check vertical\n            if all(board[column][i] == color for i in range(-4, 0)):\n                return color\n\n            # Check horizontal\n            for i in range(4):\n                if (all(board[COLUMNS[c]].count(color) > 0 for c in range(i, i + 4) if board[COLUMNS[c]]) and\n                        all(board[COLUMNS[c]].count(color) == 4 for c in range(i, i + 4))):\n                    return color\n            \n            # Check diagonal /\n            for i in range(3, len(ROWS)):\n                for j in range(len(COLUMNS) - 3):\n                    if (board[COLUMNS[j]].count(color) > i and \n                            board[COLUMNS[j + 1]].count(color) > i - 1 and \n                            board[COLUMNS[j + 2]].count(color) > i - 2 and \n                            board[COLUMNS[j + 3]].count(color) > i - 3):\n                        return color\n\n            # Check diagonal \\\n            for i in range(3, len(ROWS)):\n                for j in range(len(COLUMNS) - 3):\n                    if (board[COLUMNS[j]].count(color) > i and \n                            board[COLUMNS[j + 1]].count(color) > i - 1 and \n                            board[COLUMNS[j + 2]].count(color) > i - 2 and \n                            board[COLUMNS[j + 3]].count(color) > i - 3):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"None\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if (r <= 2 and all(board[c][r + i] == board[c][r] for i in range(4))) or \\\n                       (c <= 'D' and all(board[chr(ord(c) + i)][r] == board[c][r] for i in range(4))) or \\\n                       (r <= 2 and c <= 'D' and all(board[chr(ord(c) + i)][r + i] == board[c][r] for i in range(4))) or \\\n                       (r >= 3 and c <= 'D' and all(board[chr(ord(c) + i)][r - i] == board[c][r] for i in range(4))):\n                        return board[c][r]\n    \n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check for winner after each move\n        if len(board[col]) >= 4:\n            # Vertical check\n            if all(board[col][i] == color for i in range(len(board[col]) - 4, len(board[col]))):\n                return color\n\n        # Horizontal and diagonal checks\n        for c in 'ABCDEFG':\n            if len(board[c]) > 0 and (len(board[c]) >= 4 and board[c][-1] == color):\n                if c in board and len(board[c]) >= 4:\n                    # Check horizontally\n                    if all(board[c][i] == color for i in range(max(0, len(board[c]) - 4), len(board[c]))):\n                        return color\n\n        # Check diagonals\n        for row in range(6):\n            for col_index in range(7):\n                if col_index <= 3:  # Diagonal /\n                    if all(row < len(board['ABCDEFG'[c]]) and board['ABCDEFG'[c]][row] == color for c in range(col_index, col_index + 4)):\n                        return color\n                if col_index >= 3:  # Diagonal \\\n                    if all(row < len(board['ABCDEFG'[c]]) and board['ABCDEFG'[c]][row] == color for c in range(col_index, col_index - 4, -1)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column].append(color)\n        \n        # Check for victory conditions\n        if len(grid[column]) >= 4:\n            # Check vertical\n            if grid[column][-4:] == [color] * 4:\n                return color\n            \n        # Check horizontal and diagonal\n        for col in 'ABCDEFG':\n            if len(grid[col]) >= 1:\n                count = 0\n                for r in range(len(grid[col])):\n                    if grid[col][r] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n        \n        # Diagonal check\n        for col in range(len(grid)):\n            for row in range(len(grid['A'])):\n                if row + 3 < len(grid['A']):\n                    if col + 3 < len(grid) and all(grid[chr(65 + c)][row] == color for c in range(4)):\n                        return color\n                    if col - 3 >= 0 and all(grid[chr(65 + c)][row + 3 - c] == color for c in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            for i in range(len(board[col]) - 3):\n                if all(board[col][i + j] == color for j in range(4)):\n                    return color\n    \n    for col in board:\n        for row in range(len(board[col])):\n            if row + 3 < len(board[col]):\n                for i in range(4):\n                    if row + i < len(board[col]) and board[col][row + i] == color:\n                        continue\n                    break\n                else:\n                    return color\n\n    for col in range(7):\n        for row in range(6):\n            if col + 3 < 7:\n                if all(board[chr(65 + col + i)][row] == color for i in range(4)):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n            \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if len(board[column]) >= 4 and all(board[column][row-i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if all(board[chr(c + ord('A'))][row] == color for c in range(c, c + 4)):\n            return True\n\n    # Check diagonal /\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if (0 <= row - (c - (ord(column) - ord('A'))) < 6) and \\\n           (0 <= row - 1 + (c - (ord(column) - ord('A'))) < 6) and \\\n           all(board[chr(c + ord('A'))][row - (c - (ord(column) - ord('A')))] == color for c in range(c, c + 4)):\n            return True\n\n    # Check diagonal \\\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if (0 <= row + (c - (ord(column) - ord('A'))) < 6) and \\\n           (0 <= row + 1 - (c - (ord(column) - ord('A'))) < 6) and \\\n           all(board[chr(c + ord('A'))][row + (c - (ord(column) - ord('A')))] == color for c in range(c, c + 4)):\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            # Check for vertical win\n            if board[col][-4:] == [color] * 4:\n                return color\n            \n            # Check for horizontal and diagonal wins\n            for i in range(max(0, len(board[col]) - 4), len(board[col])):\n                # Check horizontal\n                for j in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n                    if all(board[chr(ord('A') + j + k)] and board[chr(ord('A') + j + k)][-1] == color for k in range(4) if 0 <= j + k < 7):\n                        return color\n                \n                # Check diagonal \\\n                for j in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n                    if all(board[chr(ord('A') + j + k)] and board[chr(ord('A') + j + k)][-1] == color for k in range(4) if 0 <= j + k < 7 and len(board[chr(ord('A') + j + k)]) > (i - k)):\n                        return color\n                \n                # Check diagonal /\n                for j in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n                    if all(board[chr(ord('A') + j - k)] and board[chr(ord('A') + j - k)][-1] == color for k in range(4) if 0 <= j - k < 7 and len(board[chr(ord('A') + j - k)]) > (i - k)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color in [\"Red\", \"Yellow\"]:\n            for i in range(7):\n                for j in range(6):\n                    if (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, player = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        \n        for direction in range(4):\n            for i in range(6):\n                for j in range(7):\n                    if direction == 0 and j <= 3:  # Horizontal\n                        if board['ABCDEFG'[j]][i] == player and board['ABCDEFG'[j+1]][i] == player and board['ABCDEFG'[j+2]][i] == player and board['ABCDEFG'[j+3]][i] == player:\n                            return player\n                    elif direction == 1 and i <= 2:  # Vertical\n                        if board['ABCDEFG'[j]][i] == player and board['ABCDEFG'[j]][i+1] == player and board['ABCDEFG'[j]][i+2] == player and board['ABCDEFG'[j]][i+3] == player:\n                            return player\n                    elif direction == 2 and i <= 2 and j <= 3:  # Diagonal down-right\n                        if board['ABCDEFG'[j]][i] == player and board['ABCDEFG'[j+1]][i+1] == player and board['ABCDEFG'[j+2]][i+2] == player and board['ABCDEFG'[j+3]][i+3] == player:\n                            return player\n                    elif direction == 3 and i >= 3 and j <= 3:  # Diagonal up-right\n                        if board['ABCDEFG'[j]][i] == player and board['ABCDEFG'[j+1]][i-1] == player and board['ABCDEFG'[j+2]][i-2] == player and board['ABCDEFG'[j+3]][i-3] == player:\n                            return player\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if (check_direction(grid, col, row, color, 1, 0) or\n                    check_direction(grid, col, row, color, 0, 1) or\n                    check_direction(grid, col, row, color, 1, 1) or\n                    check_direction(grid, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color_check for col, row in line if row < 6 and board[col][row] is not None):\n                    return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line if c in board and r < 6 and r >= 0):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c = chr(ord(col) + dc * step)\n            r = row + dr * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c = chr(ord(col) - dc * step)\n            r = row - dr * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n\n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if (check_direction(grid, col, row, 1, 0, color) or  # horizontal\n                    check_direction(grid, col, row, 0, 1, color) or  # vertical\n                    check_direction(grid, col, row, 1, 1, color) or  # diagonal \\\n                    check_direction(grid, col, row, 1, -1, color)): # diagonal /\n                    return True\n    return False\n\ndef check_direction(grid, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, dcol, drow):\n    count = 0\n    for _ in range(4):\n        if 0 <= row < 6 and board[col][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        col = chr(ord(col) + dcol)\n        row += drow\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if (x, y) in board):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win if this column has 4 or more pieces\n        if len(board[column]) >= 4:\n            # Check vertically\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontally and diagonally\n            for i in range(7):\n                if all(board[COLUMNS[i + j]] and board[COLUMNS[i + j]][-1] == color for j in range(4) if 0 <= i + j < 7):\n                    return color\n            \n            for i in range(6):\n                if all(board[COLUMNS[j]][i - j] and board[COLUMNS[j]][i - j][-1] == color for j in range(4) if 0 <= i - j < 6):\n                    return color\n            \n            for i in range(6):\n                if all(board[COLUMNS[j]][i + j] and board[COLUMNS[j]][i + j][-1] == color for j in range(4) if 0 <= i + j < 6):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[pos[0]][pos[1]] == color for pos in line if pos[1] < 6):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check for winner after each move\n        if len(board[col]) >= 4:\n            # Vertical check\n            if all(board[col][i] == color for i in range(len(board[col]) - 4, len(board[col]))):\n                return color\n\n        # Horizontal and diagonal checks\n        for c in 'ABCDEFG':\n            if len(board[c]) > 0 and (len(board[c]) >= 4 or (c >= col and len(board[c]) >= 1)):\n                # Horizontal check\n                count = 0\n                for i in range(7):\n                    if len(board[chr(65 + i)]) > 0 and board[chr(65 + i)][-1] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n                # Diagonal checks\n                for i in range(len(board[c])):\n                    if i >= 3 and len(board[c]) > 0 and all(board[c][i-j] == color for j in range(4)):\n                        return color\n                    if i + 3 < len(board[c]) and all(board[c][i+j] == color for j in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        grid[column].append(color)\n\n        # Check for a win condition\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal\n            count = 1\n            for d in (1, -1):\n                for step in range(1, 4):\n                    if len(grid[column]) >= step and grid[column][-step] == color:\n                        count += 1\n                    else:\n                        break\n                    if count >= 4:\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(board, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # vertical\n                    check_direction(board, col, row, 1, 1, color) or  # diagonal \\\n                    check_direction(board, col, row, 1, -1, color)):  # diagonal /\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + step * delta_col)\n        r = row + step * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r in range(6)):\n                return color\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, player = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        \n        for direction in range(4):\n            for i in range(6):\n                for j in range(7):\n                    if direction == 0 and j <= 3:  # Horizontal\n                        if board['ABCDEFG'[j]][i] == player and board['ABCDEFG'[j+1]][i] == player and board['ABCDEFG'[j+2]][i] == player and board['ABCDEFG'[j+3]][i] == player:\n                            return player\n                    elif direction == 1 and i <= 2:  # Vertical\n                        if board['ABCDEFG'[j]][i] == player and board['ABCDEFG'[j]][i+1] == player and board['ABCDEFG'[j]][i+2] == player and board['ABCDEFG'[j]][i+3] == player:\n                            return player\n                    elif direction == 2 and i <= 2 and j <= 3:  # Diagonal down-right\n                        if board['ABCDEFG'[j]][i] == player and board['ABCDEFG'[j+1]][i+1] == player and board['ABCDEFG'[j+2]][i+2] == player and board['ABCDEFG'[j+3]][i+3] == player:\n                            return player\n                    elif direction == 3 and i >= 3 and j <= 3:  # Diagonal up-right\n                        if board['ABCDEFG'[j]][i] == player and board['ABCDEFG'[j+1]][i-1] == player and board['ABCDEFG'[j+2]][i-2] == player and board['ABCDEFG'[j+3]][i-3] == player:\n                            return player\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if (check_direction(grid, col, row, 1, 0, color) or\n                    check_direction(grid, col, row, 0, 1, color) or\n                    check_direction(grid, col, row, 1, 1, color) or\n                    check_direction(grid, col, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(grid, start_col, start_row, delta_col, delta_row, color):\n    count = 0\n    col_idx = 'ABCDEFG'.index(start_col)\n    row_idx = start_row\n    \n    for _ in range(4):\n        if 0 <= col_idx < 7 and 0 <= row_idx < 6 and grid['ABCDEFG'[col_idx]][row_idx] == color:\n            count += 1\n        else:\n            break\n        col_idx += delta_col\n        row_idx += delta_row\n    \n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if y < len(board[x])):\n                    return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, start_col, start_row, delta_col, delta_row):\n    count = 0\n    col = start_col\n    row = start_row\n    \n    while col in board and 0 <= row < 6 and board[col][row] == color:\n        count += 1\n        if count == 4:\n            return True\n        col = chr(ord(col) + delta_col)\n        row += delta_row\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        # Check for a win after each move\n        if len(board[col]) >= 4:\n            if check_win(board, col, color):\n                return color\n\n    return \"Draw\"\n\ndef check_win(board, col, color):\n    # Check vertical\n    if len(board[col]) >= 4 and all(board[col][i] == color for i in range(-4, 0)):\n        return True\n\n    # Check horizontal\n    for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n        if all(board[chr(ord('A') + c + i)][-1] == color for i in range(4)):\n            return True\n\n    # Check diagonal /\n    for r in range(6):\n        for c in range(7):\n            if (r + 3 < 6 and c - 3 >= 0 and \n                board[chr(ord('A') + c)][r] == color and\n                board[chr(ord('A') + c - 1)][r + 1] == color and\n                board[chr(ord('A') + c - 2)][r + 2] == color and\n                board[chr(ord('A') + c - 3)][r + 3] == color):\n                return True\n\n    # Check diagonal \\\n    for r in range(6):\n        for c in range(7):\n            if (r - 3 >= 0 and c - 3 >= 0 and \n                board[chr(ord('A') + c)][r] == color and\n                board[chr(ord('A') + c - 1)][r - 1] == color and\n                board[chr(ord('A') + c - 2)][r - 2] == color and\n                board[chr(ord('A') + c - 3)][r - 3] == color):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win if this column has 4 or more pieces\n        if len(board[column]) >= 4:\n            # Check vertically\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontally and diagonally\n            for i in range(7):\n                if all(board[COLUMNS[i + j]] and board[COLUMNS[i + j]][-1] == color for j in range(4) if 0 <= i + j < 7):\n                    return color\n            \n            for i in range(4):\n                for j in range(3):\n                    if i < len(board[COLUMNS[i]]) and j < len(board[COLUMNS[j]]):\n                        if (board[COLUMNS[i]] and board[COLUMNS[j]][-1] == color and\n                                board[COLUMNS[i + 1]] and board[COLUMNS[j + 1]][-1] == color and\n                                board[COLUMNS[i + 2]] and board[COLUMNS[j + 2]][-1] == color and\n                                board[COLUMNS[i + 3]] and board[COLUMNS[j + 3]][-1] == color):\n                            return color\n            \n            for i in range(4):\n                for j in range(3, 6):\n                    if i < len(board[COLUMNS[i]]) and j < len(board[COLUMNS[j]]):\n                        if (board[COLUMNS[i]] and board[COLUMNS[j]][-1] == color and\n                                board[COLUMNS[i + 1]] and board[COLUMNS[j - 1]][-1] == color and\n                                board[COLUMNS[i + 2]] and board[COLUMNS[j - 2]][-1] == color and\n                                board[COLUMNS[i + 3]] and board[COLUMNS[j - 3]][-1] == color):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (col, row) in [(col, r) for col in 'ABCDEFG' for r in range(6) if board[col][r] == color]:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board[column], color):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n\ndef check_winner(column, color):\n    count = 0\n    for piece in column:\n        if piece == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check if this move causes a win\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if all(board[column][i] == color for i in range(max(0, row - 3), row + 1)):\n        return True\n    \n    # Check horizontal\n    for c in 'ABCDEFG':\n        if c in board and (len(board[c]) > row) and all(board[c][row] == color for c in 'ABCDEFG' if c in board and (len(board[c]) > row)):\n            return True\n    \n    # Check diagonal /\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if all(board[chr(c + ord('A') + i)][row - i] == color for i in range(4) if 0 <= row - i < 6 and 0 <= c + i < 7):\n            return True\n    \n    # Check diagonal \\\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if all(board[chr(c + ord('A') + i)][row + i] == color for i in range(4) if 0 <= row + i < 6 and 0 <= c + i < 7):\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column].append(color)\n        \n        if len(grid[column]) >= 4:\n            # Check vertical\n            if grid[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal\n            for c in 'ABCDEFG':\n                if grid[c][-1:] == [color] and sum(1 for _ in grid[c] if _ == color) >= 4:\n                    count = 0\n                    for cc in 'ABCDEFG':\n                        if grid[cc] and grid[cc][-1] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            count = 0\n            \n            # Check diagonals\n            for i in range(4):\n                for j in range(3):\n                    if (len(grid[COLUMNS[i]]) > j and grid[COLUMNS[i]][j] == color and\n                        len(grid[COLUMNS[i+1]]) > j + 1 and grid[COLUMNS[i+1]][j + 1] == color and\n                        len(grid[COLUMNS[i+2]]) > j + 2 and grid[COLUMNS[i+2]][j + 2] == color and\n                        len(grid[COLUMNS[i+3]]) > j + 3 and grid[COLUMNS[i+3]][j + 3] == color):\n                        return color\n                    if (len(grid[COLUMNS[i]]) > j + 3 and grid[COLUMNS[i]][j + 3] == color and\n                        len(grid[COLUMNS[i+1]]) > j + 2 and grid[COLUMNS[i+1]][j + 2] == color and\n                        len(grid[COLUMNS[i+2]]) > j + 1 and grid[COLUMNS[i+2]][j + 1] == color and\n                        len(grid[COLUMNS[i+3]]) > j and grid[COLUMNS[i+3]][j] == color):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            for i in range(len(board[col]) - 3):\n                if all(board[col][i+j] == color for j in range(4)):\n                    return color\n                    \n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row > 2:\n                continue\n            if col in board and row < len(board[col]) - 3:\n                if all(board[col][row] == board[col][row + j] for j in range(4)):\n                    return board[col][row]\n                \n    for i in range(6):\n        for j in range(7):\n            if j < 4 and i < 3:\n                if all((j + k, i + k) in [(j, i) for col in board for i in board[col]] for k in range(4)):\n                    return board[j][i]\n            if j < 4 and i > 2:\n                if all((j + k, i - k) in [(j, i) for col in board for i in board[col]] for k in range(4)):\n                    return board[j][i]\n                    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board['ABCDEFG'[i]][j] == color:\n                        # Check horizontal\n                        if i <= 3 and all(board['ABCDEFG'[i+k]][j] == color for k in range(4)):\n                            return color\n                        # Check vertical\n                        if j <= 2 and all(board['ABCDEFG'[i]][j+k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if i <= 3 and j <= 2 and all(board['ABCDEFG'[i+k]][j+k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if i <= 3 and j >= 3 and all(board['ABCDEFG'[i+k]][j-k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for win conditions\n        if len(board[column]) >= 4:\n            if check_winner(board[column], column, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(col_stack, col, color):\n    # Check vertical\n    if len(col_stack) >= 4 and all(c == color for c in col_stack[-4:]):\n        return True\n    \n    # Check horizontal and diagonal\n    for c in 'ABCDEFG':\n        if c in board and len(board[c]) > 0:\n            row = len(board[c]) - 1  # Last row filled in this column\n            if check_horizontal(row, color) or check_diagonal(row, c, color):\n                return True\n    \n    return False\n\ndef check_horizontal(row, color):\n    count = 0\n    for c in 'ABCDEFG':\n        if len(board[c]) > row and board[c][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n\ndef check_diagonal(row, col, color):\n    # Check for both diagonal directions\n    diagonals = [(-1, 1), (1, 1)]  # direction vectors for top-right and bottom-right\n    for dr, dc in diagonals:\n        count = 1\n        for i in range(1, 4):\n            r = row + dr * i\n            c = ord(col) - ord('A') + dc * i\n            if 0 <= r < 6 and 0 <= c < 7 and len(board[chr(c + ord('A'))]) > r and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if (j <= 3 and all(board[chr(c)][i] == color for c in range(ord('A') + j, ord('A') + j + 4))) or \\\n                       (i <= 2 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                       (i <= 2 and j <= 3 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)) and \\\n                       all(board[chr(ord('A') + j + k)][i + k] == color for k in range(4))) or \\\n                       (i >= 3 and j <= 3 and all(board[chr(j + ord('A'))][i - k] == color for k in range(4)) and \\\n                       all(board[chr(ord('A') + j + k)][i - k] == color for k in range(4))):\n                        return color\n                    \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for win condition\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in board[col]:  # Check horizontal\n                            if all(board[col][row] == color for col in [col, chr(ord(col)+1), chr(ord(col)+2), chr(ord(col)+3)] if col in board):\n                                return color\n                        if row <= 2:  # Check vertical\n                            if all(board[col][row] == color for row in range(row, row + 4) if col in board):\n                                return color\n                        if col in 'ABCDEFG' and row <= 2:  # Check diagonal down\n                            if all(board[col][row] == color for col, row in [(chr(ord(col)+k), row+k) for k in range(4)] if col in board):\n                                return color\n                        if col in 'ABCDEFG' and row >= 3:  # Check diagonal up\n                            if all(board[col][row] == color for col, row in [(chr(ord(col)+k), row-k) for k in range(4)] if col in board):\n                                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    \n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    \n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal (down-right)\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    \n                    # Check diagonal (up-right)\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    if (j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)) or\n                        i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)) or\n                        j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)) or\n                        j - 3 >= 0 and i + 3 < 6 and all(board['ABCDEFG'[j-k]][i+k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if x in grid and y < len(grid[x])):\n                return color\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        # Check for win condition after every move\n        for i in range(len(board[col]) - 3, len(board[col])):\n            if len(board[col]) >= 4 and all(board[col][j] == color for j in range(i - 3, i + 1)):\n                return color\n        \n        for c in board.keys():\n            if len(board[c]) > 0:\n                for j in range(len(board[c]) - 3):\n                    if all(board[c][j + k] == color for k in range(4)):\n                        return color\n\n        # Check vertical wins\n        for c in board.keys():\n            for j in range(len(board[c])):\n                if len(board[c]) >= 4 and all(board[c][j] == color for j in range(j, min(j + 4, len(board[c])))):\n                    return color\n                \n        # Check diagonal wins\n        for c in board.keys():\n            for j in range(len(board[c])):\n                for k in range(4):\n                    if (c, j) in board.items() and (COLUMNS[COLUMNS.index(c) + k], j + k) in board.items() and \\\n                       all(board[COLUMNS[COLUMNS.index(c) + m]][j + m] == color for m in range(4)):\n                        return color\n                for k in range(4):\n                    if (c, j) in board.items() and (COLUMNS[COLUMNS.index(c) - k], j + k) in board.items() and \\\n                       all(board[COLUMNS[COLUMNS.index(c) - m]][j + m] == color for m in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, color, col, row):\n                        return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            r, c = row, ord(col) - ord('A')\n            while True:\n                r += step * d[1]\n                c += step * d[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player].append((column, row))\n                break\n        \n        for player in ['Red', 'Yellow']:\n            if check_winner(player_moves[player]):\n                return player\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    if len(moves) < 4:\n        return False\n\n    moves_set = set(moves)\n    \n    for (col, row) in moves:\n        if all((col, row) in moves_set for col, row in get_line(col, row, 1, 0)):  # Horizontal\n            return True\n        if all((col, row) in moves_set for col, row in get_line(col, row, 0, 1)):  # Vertical\n            return True\n        if all((col, row) in moves_set for col, row in get_line(col, row, 1, 1)):  # Diagonal \\\n            return True\n        if all((col, row) in moves_set for col, row in get_line(col, row, 1, -1)):  # Diagonal /\n            return True\n            \n    return False\n\ndef get_line(col, row, delta_col, delta_row):\n    return [(chr(ord(col) + delta_col * i), row + delta_row * i) for i in range(4)]\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal lines for a win\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[column][row] == color for column, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                if check_winner(grid, column, row, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(grid, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                c = chr(ord(column) + d[0] * step * i)\n                r = row + d[1] * step * i\n                if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or\n                    check_direction(board, col, row, 0, 1, color) or\n                    check_direction(board, col, row, 1, 1, color) or\n                    check_direction(board, col, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, start_col, start_row, delta_col, delta_row, color):\n    count = 0\n    col = start_col\n    row = start_row\n\n    while 0 <= row < 6 and col in board and board[col][row] == color:\n        count += 1\n        if count == 4:\n            return True\n        row += delta_row\n        col = chr(ord(col) + delta_col)\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) > 3:  # only check if there are enough pieces to connect\n            # Check vertical\n            if board[col][-1] == board[col][-2] == board[col][-3] == board[col][-4]:\n                return board[col][-1].capitalize()\n        \n        # Check horizontal and diagonal connections\n        for c in 'ABCDEFG':\n            if c in board:\n                pieces = board[c]\n                if len(pieces) >= 4:\n                    # Check for horizontal connections\n                    for i in range(len(pieces) - 3):\n                        if pieces[i] == pieces[i + 1] == pieces[i + 2] == pieces[i + 3]:\n                            return pieces[i].capitalize()\n        \n        # Check diagonals (bottom-left to top-right)\n        for i in range(3, 6):\n            for j in range(4):\n                if j in board and i - j in board:\n                    if (len(board[j]) > i and len(board[i - j]) > 3 and\n                        board[j][i - j] == board[j + 1][i - j + 1] == \n                        board[j + 2][i - j + 2] == board[j + 3][i - j + 3]):\n                        return board[j][i - j].capitalize()\n        \n        # Check diagonals (top-left to bottom-right)\n        for i in range(3):\n            for j in range(4):\n                if j in board and j + i in board:\n                    if (len(board[j]) > 3 and len(board[j + 1]) > i and\n                        board[j][i] == board[j + 1][i + 1] == \n                        board[j + 2][i + 2] == board[j + 3][i + 3]):\n                        return board[j][i].capitalize()\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal for a win\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or  # Horizontal\n                    check_direction(board, color, col, row, 0, 1) or  # Vertical\n                    check_direction(board, color, col, row, 1, 1) or  # Diagonal \\\n                    check_direction(board, color, col, row, 1, -1)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if row < 0 or row >= 6 or col not in board or board[col][row] != color:\n            return False\n        count += 1\n        col = chr(ord(col) + delta_col)\n        row += delta_row\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + i * dcol)\n            r = row + i * drow\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] is not None:\n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j + k]][i] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i + k] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n                    # Check diagonal down\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j + k]][i + k] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n                    # Check diagonal up\n                    if j <= 3 and i >= 3 and all(board['ABCDEFG'[j + k]][i - k] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            for r in range(len(board[column]) - 4, len(board[column])):\n                if all(board[column][r] == board[column][r+i] for i in range(4)):\n                    return color\n    \n    for col in 'ABCDEFG':\n        for r in range(len(board[col])):\n            color = board[col][r]\n            if r + 3 < len(board[col]) and all(board[col][r] == board[col][r+i] for i in range(4)):\n                return color\n            if r + 3 < 6:\n                if col in 'ABCDEFG':\n                    for i in range(1, 4):\n                        if (col, r) in board and (chr(ord(col) + i), r) in board and (chr(ord(col) - i), r) in board:\n                            return color\n            if col in 'ABCDEFG' and r + 3 < len(board[col]):\n                for j in range(1, 4):\n                    if (chr(ord(col) + j), r + j) in board and (chr(ord(col) - j), r + j) in board:\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal up-right\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        if check_win(board, column, row, color):\n            return color\n        \n    return \"Draw\"\n\ndef check_win(board, column, row, color):\n    # Check all four directions\n    return (check_direction(board, column, row, color, 1, 0) or  # Horizontal\n            check_direction(board, column, row, color, 0, 1) or  # Vertical\n            check_direction(board, column, row, color, 1, 1) or  # Diagonal /\n            check_direction(board, column, row, color, 1, -1)    # Diagonal \\\n           )\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        col = chr(ord(column) + step * delta_col)\n        r = row + step * delta_row\n        if col in board and 0 <= r < 6 and board[col][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n        if len(board[column]) >= 4:\n            for i in range(len(board[column]) - 3):\n                if all(board[column][i + k] == color for k in range(4)):\n                    return color\n\n    for col in 'ABCDEFG':\n        for i in range(len(board[col])):\n            if i + 3 < len(board[col]) and all(board[col][i + k] == board[col][i] for k in range(4)):\n                return board[col][i]\n\n    for i in range(6):\n        for j in range(4):\n            colors = [board[COLUMNS[j]][i] if i < len(board[COLUMNS[j]]) else None for j in range(4)]\n            if colors.count(colors[0]) == 4 and colors[0] is not None:\n                return colors[0]\n\n    for i in range(5, 2, -1):\n        for j in range(4):\n            colors = [board[COLUMNS[j + k]][i - k] if i - k >= 0 and j + k < 7 and i - k < len(board[COLUMNS[j + k]]) else None for k in range(4)]\n            if colors.count(colors[0]) == 4 and colors[0] is not None:\n                return colors[0]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    if ((c, r) in [(col, row) for col in 'ABCDEFG' for row in range(6) if grid[col][row] == color] and\n                        (c, r) in [(col, r) for col in 'ABCDEFG' for r in range(6) if grid[col][r] == color]):\n                        count = 1\n                        for dc, dr in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                            for step in range(1, 4):\n                                cc = chr(ord(c) + dc * step)\n                                rr = r + dr * step\n                                if 0 <= ord(cc) - ord('A') < 7 and 0 <= rr < 6 and grid[cc][rr] == color:\n                                    count += 1\n                                else:\n                                    break\n                            if count >= 4:\n                                return color\n                            count = 1\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_directions(grid, color, col, row):\n                    return True\n    return False\n\ndef check_directions(grid, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for step in range(-3, 4):\n            c = chr(ord(col) + step * dc)\n            r = row + step * dr\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for player in ['Red', 'Yellow']:\n            if any(all(board[c][r] == player for c, r in line) for line in LINES):\n                return player\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for d in (1, -1):\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') + step * dx * d, row + step * dy * d\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n                \n        if count >= 4:\n            return True\n            \n    return False\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c][row] == color if c in board and len(board[c]) > row else False) for c in 'ABCDEFG'):\n                    return color\n    \n    # Check vertical and diagonal wins\n    for column in 'ABCDEFG':\n        for row in range(len(board[column])):\n            if row >= 3:\n                if all(board[column][row - i] == board[column][row] for i in range(4)):\n                    return board[column][row]\n\n            if column in 'ABCDEFG' and column != 'G':\n                for i in range(1, 4):\n                    if column < 'G' and row < len(board[column]) and row < len(board[chr(ord(column) + i)]):\n                        if all(board[chr(ord(column) + j)][row] == board[column][row] for j in range(4)):\n                            return board[column][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Check vertical\n    if len(board[column]) >= 4 and all(c == color for c in board[column][-4:]):\n        return True\n    \n    # Check horizontal\n    row_index = len(board[column]) - 1\n    for c in 'ABCDEFG':\n        if board[c][-1] == color and row_index < len(board[c]):\n            if sum(1 for k in range(-3, 1) if row_index < len(board[c]) and board[c][row_index] == color) == 4:\n                return True\n    \n    # Check diagonal \\\n    for c in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        for r in range(3, 7):\n            if all(board[chr(c + i)][r - i] == color for i in range(4) if 0 <= c + i < 7 and r - i >= 0):\n                return True\n    \n    # Check diagonal /\n    for c in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        for r in range(0, 4):\n            if all(board[chr(c + i)][r + i] == color for i in range(4) if 0 <= c + i < 7 and r + i < 6):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if chr(ord(col) + i) in grid) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if chr(ord(col) + i) in grid and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if chr(ord(col) + i) in grid and row - i >= 0)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            colors = {board[col][row] for col, row in line if board[col][row] is not None}\n            if len(colors) == 1 and None not in colors:\n                return colors.pop()\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in grid and all(grid[col][row] == color for col in 'ABCDEFG'[:7][\n                                'ABCDEFG'.index(col):][:4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row - k] == color for k in range(4)\n                                                                 if 'ABCDEFG'.index(col) + k < 7):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row + k] == color for k in range(4)\n                                                                 if 'ABCDEFG'.index(col) + k < 7):\n                            return color\n    \n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for _ in range(4):\n        if 0 <= row < 6 and 0 <= ord(col) - ord('A') < 7 and board[col][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        col = chr(ord(col) + d_col)\n        row += d_row\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        # Check for win condition\n        if len(board[column]) >= 4:\n            # Vertical check\n            if all(board[column][i] == color for i in range(-4, 0)):\n                return color\n            \n            # Horizontal and diagonal checks\n            for col in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n                if all(board[chr(ord('A') + col + i)][-1] == color for i in range(4)):\n                    return color\n            \n            for d in range(-3, 1):\n                if 0 <= ord(column) - ord('A') + d < 7 and 0 <= len(board[chr(ord('A') + ord(column) - ord('A') + d)]) - 1 < 6:\n                    if all(board[chr(ord('A') + ord(column) - ord('A') + d + i)][-1 - i] == color for i in range(4)):\n                        return color\n                if 0 <= ord(column) - ord('A') + d < 7 and 0 <= len(board[chr(ord('A') + ord(column) - ord('A') + d)]) - 1 < 6:\n                    if all(board[chr(ord('A') + ord(column) - ord('A') + d - i)][-1 - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n\n        for c in 'ABCDEFG':\n            if board[c].count('Red') >= 4 or board[c].count('Yellow') >= 4:\n                for i in range(len(board[c]) - 3):\n                    if board[c][i:i+4] == ['Red'] * 4:\n                        return 'Red'\n                    if board[c][i:i+4] == ['Yellow'] * 4:\n                        return 'Yellow'\n\n        for r in range(6):\n            column_colors = [board[c][r] if r < len(board[c]) else None for c in 'ABCDEFG']\n            if column_colors.count('Red') >= 4 or column_colors.count('Yellow') >= 4:\n                for i in range(len(column_colors) - 3):\n                    if column_colors[i:i+4] == ['Red'] * 4:\n                        return 'Red'\n                    if column_colors[i:i+4] == ['Yellow'] * 4:\n                        return 'Yellow'\n\n        for i in range(4):\n            for j in range(3):\n                if i < len(board['A']) and j < len(board['A']):\n                    diagonal1 = [board['A'][i + k][j + k] if i + k < len(board['A']) and j + k < len(board['A']) else None for k in range(4)]\n                    diagonal2 = [board['A'][i + k][j - k] if i + k < len(board['A']) and j - k >= 0 else None for k in range(4)]\n                    if diagonal1.count('Red') == 4 or diagonal2.count('Red') == 4:\n                        return 'Red'\n                    if diagonal1.count('Yellow') == 4 or diagonal2.count('Yellow') == 4:\n                        return 'Yellow'\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            # Check for a win in this column\n            if all(c == color for c in board[col][-4:]):\n                return color\n        \n        # Check for horizontal, vertical and diagonal wins\n        for c in range(len(board)):\n            for r in range(len(board[col])):\n                if board[chr(65 + c)][r:r + 4].count(color) == 4:\n                    return color\n                if r + 3 < len(board[col]) and all(board[chr(65 + c)][r + k] == color for k in range(4)):\n                    return color\n                if r + 3 < len(board[col]) and c + 3 < len(board) and all(board[chr(65 + c + k)][r + k] == color for k in range(4)):\n                    return color\n                if r - 3 >= 0 and c + 3 < len(board) and all(board[chr(65 + c + k)][r - k] == color for k in range(4)):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] == color):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for sign in (1, -1):\n            for step in range(1, 4):\n                new_col = chr(ord(col) + d[0] * sign * step)\n                new_row = row + d[1] * sign * step\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column = 'ABCDEFG'.index(position[0])\n        color = position[2:]\n        for row in range(5, -1, -1):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for row in range(6):\n        for col in range(7):\n            if board[row][col] == color:\n                if col + 3 < 7 and all(board[row][col + i] == color for i in range(4)):\n                    return True\n                if row + 3 < 6 and all(board[row + i][col] == color for i in range(4)):\n                    return True\n                if row + 3 < 6 and col + 3 < 7 and all(board[row + i][col + i] == color for i in range(4)):\n                    return True\n                if row - 3 >= 0 and col + 3 < 7 and all(board[row - i][col + i] == color for i in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if board[column][i] is None), None)\n        if row is not None:\n            board[column][row] = color\n            moves[color] += 1\n            \n            # Check for winning condition\n            for dx in [0, 1, 1, 1]:\n                for dy in [1, 0, 1, -1]:\n                    count = 1\n                    for step in range(1, 4):\n                        nx, ny = column, row\n                        if dx == 1:  # increment column\n                            nx = 'ABCDEFG'['ABCDEFG'.index(column) + step]\n                        if dy == 1:  # increment row\n                            ny = row + step\n                        elif dy == -1:  # decrement row\n                            ny = row - step\n                        if 0 <= 'ABCDEFG'.index(nx) < 7 and 0 <= ny < 6 and board[nx][ny] == color:\n                            count += 1\n                        else:\n                            break\n                    if count >= 4:\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check horizontal\n                    if c <= 'D' and all(board[c][r] == color for c in 'ABCDEFG'[COLUMNS.index(c):COLUMNS.index(c)+4]):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[c][r] == color for r in range(r, r+4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[COLUMNS[COLUMNS.index(c)+k]][r-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[COLUMNS[COLUMNS.index(c)+k]][r+k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    if (c, r) in [(c, r) for c in 'ABCDEFG' for r in range(6)]:\n                        # Check vertical\n                        if r <= 2 and all(board[c][r + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if all(board[chr(ord(c) + i)][r] == color for i in range(4) if ord(c) + i < ord('H')):\n                            return color\n                        # Check diagonal /\n                        if r >= 3 and all(board[chr(ord(c) + i)][r - i] == color for i in range(4) if ord(c) + i < ord('H')):\n                            return color\n                        # Check diagonal \\\n                        if r <= 2 and all(board[chr(ord(c) + i)][r + i] == color for i in range(4) if ord(c) + i < ord('H')):\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        for i in range(len(board[col]) - 3, len(board[col])):\n            if board[col][i:i + 4] == [color] * 4:\n                return color\n\n        for c in board:\n            if len(board[c]) >= 4:\n                for i in range(len(board[c]) - 3):\n                    if all(board[c][i + j] == color for j in range(4)):\n                        return color\n\n        for r in range(6):\n            for c in range(4):\n                if all((c + j, r) in [(board[col][len(board[col]) - 1 - i], i) for col in 'ABCDEFG' if len(board[col]) > i] for j in range(4)) and all((board[col][i] if i < len(board[col]) else None) == color for col in 'ABCDEFG' for i in range(4)):\n                    return color\n\n        for r in range(3, 6):\n            for c in range(4):\n                if all((c + j, r - j) in [(board[col][len(board[col]) - 1 - i], i) for col in 'ABCDEFG' if len(board[col]) > i] for j in range(4)) and all((board[col][i] if i < len(board[col]) else None) == color for col in 'ABCDEFG' for i in range(4)):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if grid[chr(65 + c)][r] == color:\n                    if (c + 3 < 7 and all(grid[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r + 3 < 6 and all(grid[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(grid[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and all(grid[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for row in range(6):\n            if grid[col][row] == color:\n                if any(all(grid[col][row] == grid[c][r] for c, r in line)\n                       for line in LINES):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if (r <= 2 and all(board[c][r + i] == board[c][r] for i in range(4))) or \\\n                       (c <= 'D' and all(board[chr(ord(c) + i)][r] == board[c][r] for i in range(4))) or \\\n                       (r <= 2 and c <= 'D' and all(board[chr(ord(c) + i)][r + i] == board[c][r] for i in range(4))) or \\\n                       (r >= 3 and c <= 'D' and all(board[chr(ord(c) + i)][r - i] == board[c][r] for i in range(4))):\n                        return board[c][r]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row >= 3 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row - k] == color for k in range(4)):\n                        return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n                    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1))   # Diagonal /\n\ndef check_direction(board, col, row, color, dc, dr):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dc)\n        r = row + i * dr\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal\n    for row in range(6):\n        count = 0\n        for col in 'ABCDEFG':\n            if board[col][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check vertical\n    for col in 'ABCDEFG':\n        count = 0\n        for row in range(6):\n            if board[col][row] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check diagonal \\\n    for col in range(4):\n        for row in range(3, 6):\n            if (board['A'][row] == color and board['B'][row-1] == color and \n                board['C'][row-2] == color and board['D'][row-3] == color):\n                return True\n\n    # Check diagonal /\n    for col in range(4):\n        for row in range(3, 6):\n            if (board['D'][row] == color and board['E'][row-1] == color and \n                board['F'][row-2] == color and board['G'][row-3] == color):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        # Check for a win\n        if len(board[col]) >= 4:\n            # Check vertical\n            if all(c == color for c in board[col][-4:]):\n                return color\n            \n            # Check horizontal\n            for c in 'ABCDEFG':\n                if len(board[c]) >= 4 and all(board[c][len(board[c]) - 4 + i] == color for i in range(4)):\n                    return color\n            \n            # Check diagonal /\n            for i in range(3, 6):\n                for j in range(4):\n                    if all((COLUMNS[j+k], i-k) in board.items() and board[COLUMNS[j+k]][-1] == color for k in range(4)):\n                        return color\n            \n            # Check diagonal \\\n            for i in range(3):\n                for j in range(4):\n                    if all((COLUMNS[j+k], i+k) in board.items() and board[COLUMNS[j+k]][-1] == color for k in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                if board[col].count(color) >= 4:\n                    # Check vertical\n                    for r in range(3):\n                        if all(board[col][r+i] == color for i in range(4)):\n                            return color\n                    \n                    # Check horizontal\n                    for c in range(4):\n                        if all(board[COLUMNS[c+i]][row] == color for i in range(4)):\n                            return color\n                    \n                    # Check diagonal /\n                    for r in range(3):\n                        for c in range(4):\n                            if all(board[COLUMNS[c+i]][row+r-i] == color for i in range(4)):\n                                return color\n                    \n                    # Check diagonal \\\n                    for r in range(3):\n                        for c in range(4):\n                            if all(board[COLUMNS[c+i]][row+r+i] == color for i in range(4)):\n                                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for player in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == player for col, row in line if row < 6 and board[col][row] is not None):\n                    return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (col in 'ABCDEFG' and\n                        (row + 3 < 6 and all(board[col][row + k] == color for k in range(4))) or\n                        (col in 'ABCDEFG' and\n                        (sum(board[c][row] == color for c in 'ABCDEFG') >= 4)) or\n                        (col in 'ABCDEFG' and\n                        (row - 3 >= 0 and all(board[col][row - k] == color for k in range(4))) or\n                        (row + 3 < 6 and\n                        sum(board[col][row + k] == color for k in range(4)) >= 4)) or\n                        (row + 3 < 6 and col in 'ABCDEFG' and\n                        all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or\n                        (row - 3 >= 0 and col in 'ABCDEFG' and\n                        all(board[chr(ord(col) + k)][row - k] == color for k in range(4)))):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color_check:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color_check for col in 'ABCD'):\n                            return color_check\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color_check for row in range(row, row + 4)):\n                            return color_check\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[COLUMNS[i]][row + i] == color_check for i in range(4)):\n                            return color_check\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[COLUMNS[i]][row - i] == color_check for i in range(4)):\n                            return color_check\n                            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for column in board:\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check horizontal\n                        if all(board[c][row] == color for c in 'ABCDEFG'[COLUMNS.index(column):COLUMNS.index(column) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if column <= 'D' and row <= 2 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if column <= 'D' and row >= 3 and all(board[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n\n        if check_winner(grid, column, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    # Check vertical\n    if all(grid[col][r] == color for r in range(row, min(row + 4, 6))):\n        return True\n    # Check horizontal\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        if all(grid[chr(c + ord('A'))][row] == color for c in range(c, c + 4)):\n            return True\n    # Check diagonal down-right\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        if all(grid[chr(c + ord('A'))][row + (c - ord(col) + ord('A'))] == color \n               for c in range(c, c + 4) if 0 <= row + (c - ord(col) + ord('A')) < 6):\n            return True\n    # Check diagonal down-left\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        if all(grid[chr(c + ord('A'))][row - (c - ord(col) + ord('A'))] == color \n               for c in range(c, c + 4) if 0 <= row - (c - ord(col) + ord('A')) < 6):\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, dcol, drow):\n    count = 0\n    for _ in range(4):\n        if 0 <= row < 6 and 0 <= 'ABCDEFG'.index(col) < 7 and board[col][row] == color:\n            count += 1\n        else:\n            break\n        col = 'ABCDEFG'[('ABCDEFG'.index(col) + dcol) % 7]\n        row += drow\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if (x, y) in board.items() and board[x][y] is not None):\n                    return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column].append(color)\n        \n        # Check for a win if this column has 4 or more pieces\n        if len(grid[column]) >= 4:\n            # Check vertically\n            if all(color == grid[column][-1] for color in grid[column][-4:]):\n                return grid[column][-1]\n            \n            # Check horizontally\n            for c in 'ABCDEFG':\n                count = 0\n                for row_color in grid[c]:\n                    if row_color == grid[column][-1]:\n                        count += 1\n                        if count == 4:\n                            return grid[column][-1]\n                    else:\n                        count = 0\n            \n            # Check diagonally (top-left to bottom-right)\n            for i in range(3):\n                for j in range(3):\n                    if (COLUMNS[i] in grid and COLUMNS[i+1] in grid and\n                        COLUMNS[i+2] in grid and COLUMNS[i+3] in grid):\n                        if (grid[COLUMNS[i]][-1] == grid[COLUMNS[i+1]][-1] == \n                            grid[COLUMNS[i+2]][-1] == grid[COLUMNS[i+3]][-1]):\n                            return grid[COLUMNS[i]][-1]\n\n            # Check diagonally (top-right to bottom-left)\n            for i in range(3, 7):\n                for j in range(3):\n                    if (COLUMNS[i] in grid and COLUMNS[i-1] in grid and\n                        COLUMNS[i-2] in grid and COLUMNS[i-3] in grid):\n                        if (grid[COLUMNS[i]][-1] == grid[COLUMNS[i-1]][-1] == \n                            grid[COLUMNS[i-2]][-1] == grid[COLUMNS[i-3]][-1]):\n                            return grid[COLUMNS[i]][-1]\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board[column][-4:], color):\n                return color\n    \n    for column in board:\n        for j in range(len(board[column])):\n            if j >= 3 and board[column][j] == board[column][j-1] == board[column][j-2] == board[column][j-3]:\n                return board[column][j]\n    \n    for col in range(len(board)):\n        for row in range(len(board[list(board.keys())[0]])):\n            if row >= 3:\n                if len(board[list(board.keys())[col]]) > row and len(board[list(board.keys())[col]]) > row-1 and len(board[list(board.keys())[col]]) > row-2 and len(board[list(board.keys())[col]]) > row-3:\n                    if board[list(board.keys())[col]][row] == board[list(board.keys())[col]][row-1] == board[list(board.keys())[col]][row-2] == board[list(board.keys())[col]][row-3]:\n                        return board[list(board.keys())[col]][row]\n\n            if col < len(board) - 3:\n                if len(board[list(board.keys())[col]]) > row and len(board[list(board.keys())[col+1]]) > row and len(board[list(board.keys())[col+2]]) > row and len(board[list(board.keys())[col+3]]) > row:\n                    if board[list(board.keys())[col]][row] == board[list(board.keys())[col+1]][row] == board[list(board.keys())[col+2]][row] == board[list(board.keys())[col+3]][row]:\n                        return board[list(board.keys())[col]][row]\n\n            if col < len(board) - 3 and row < len(board[list(board.keys())[0]]) - 3:\n                if len(board[list(board.keys())[col]]) > row and len(board[list(board.keys())[col+1]]) > row + 1 and len(board[list(board.keys())[col+2]]) > row + 2 and len(board[list(board.keys())[col+3]]) > row + 3:\n                    if board[list(board.keys())[col]][row] == board[list(board.keys())[col+1]][row + 1] == board[list(board.keys())[col+2]][row + 2] == board[list(board.keys())[col+3]][row + 3]:\n                        return board[list(board.keys())[col]][row]\n\n            if col < len(board) - 3 and row >= 3:\n                if len(board[list(board.keys())[col]]) > row and len(board[list(board.keys())[col+1]]) > row - 1 and len(board[list(board.keys())[col+2]]) > row - 2 and len(board[list(board.keys())[col+3]]) > row - 3:\n                    if board[list(board.keys())[col]][row] == board[list(board.keys())[col+1]][row - 1] == board[list(board.keys())[col+2]][row - 2] == board[list(board.keys())[col+3]][row - 3]:\n                        return board[list(board.keys())[col]][row]\n    \n    return \"Draw\"\n\ndef check_winner(positions, color):\n    return all(pos == color for pos in positions)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[pos[0]][pos[1]] == color for pos in line if pos[1] < 6):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color_to_check:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color_to_check for k in range(4)):\n                            return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check all directions for a win\n                    if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) >= 4:\n            for i in range(len(board[col]) - 3, len(board[col])):\n                if board[col][i] == board[col][i - 1] == board[col][i - 2] == board[col][i - 3]:\n                    return color\n    \n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row <= len(board[col]) - 4:\n                if board[col][row] == board[col][row + 1] == board[col][row + 2] == board[col][row + 3]:\n                    return board[col][row]\n\n    for col in range(7):\n        for row in range(6):\n            if col <= 3 and row <= 2:  # diagonal /\n                if (board[chr(65 + col)][row] == board[chr(65 + col + 1)][row + 1] ==\n                    board[chr(65 + col + 2)][row + 2] == board[chr(65 + col + 3)][row + 3]):\n                    return board[chr(65 + col)][row]\n            if col <= 3 and row >= 3:  # diagonal \\\n                if (board[chr(65 + col)][row] == board[chr(65 + col + 1)][row - 1] ==\n                    board[chr(65 + col + 2)][row - 2] == board[chr(65 + col + 3)][row - 3]):\n                    return board[chr(65 + col)][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in range(4):\n            for i in range(6):\n                for j in range(7):\n                    if direction == 0 and j <= 3:  # Horizontal\n                        if board['ABCDEFG'[j]][i] == color and board['ABCDEFG'[j+1]][i] == color and board['ABCDEFG'[j+2]][i] == color and board['ABCDEFG'[j+3]][i] == color:\n                            return color\n                    elif direction == 1 and i <= 2:  # Vertical\n                        if board['ABCDEFG'[j]][i] == color and board['ABCDEFG'[j]][i+1] == color and board['ABCDEFG'[j]][i+2] == color and board['ABCDEFG'[j]][i+3] == color:\n                            return color\n                    elif direction == 2 and i <= 2 and j <= 3:  # Diagonal down-right\n                        if board['ABCDEFG'[j]][i] == color and board['ABCDEFG'[j+1]][i+1] == color and board['ABCDEFG'[j+2]][i+2] == color and board['ABCDEFG'[j+3]][i+3] == color:\n                            return color\n                    elif direction == 3 and i >= 3 and j <= 3:  # Diagonal up-right\n                        if board['ABCDEFG'[j]][i] == color and board['ABCDEFG'[j+1]][i-1] == color and board['ABCDEFG'[j+2]][i-2] == color and board['ABCDEFG'[j+3]][i-3] == color:\n                            return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if (check_direction(grid, col, row, color, 1, 0) or\n                    check_direction(grid, col, row, color, 0, 1) or\n                    check_direction(grid, col, row, color, 1, 1) or\n                    check_direction(grid, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(grid, start_col, start_row, color, delta_col, delta_row):\n    count = 0\n    col_idx = 'ABCDEFG'.index(start_col)\n    row_idx = start_row\n    \n    for _ in range(4):\n        if 0 <= col_idx < 7 and 0 <= row_idx < 6 and grid['ABCDEFG'[col_idx]][row_idx] == color:\n            count += 1\n        else:\n            break\n        col_idx += delta_col\n        row_idx += delta_row\n    \n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if (0 <= row < 6)):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in board:\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check horizontal\n                        if all(board[column][row] == color for column in 'ABCDEFG'[(list(board.keys()).index(column)):(list(board.keys()).index(column) + 4)]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (down-right)\n                        if row <= 2 and (list(board.keys()).index(column) <= 3) and all(board[list(board.keys())[list(board.keys()).index(column) + k]][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (down-left)\n                        if row <= 2 and (list(board.keys()).index(column) >= 3) and all(board[list(board.keys())[list(board.keys()).index(column) - k]][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        # Check for a win after each move\n        if len(board[col]) >= 4:\n            if check_win(board, col, color):\n                return color\n\n    return \"Draw\"\n\ndef check_win(board, col, color):\n    # Check vertical\n    if len(board[col]) >= 4 and all(board[col][i] == color for i in range(-4, 0)):\n        return True\n\n    # Check horizontal\n    for c in 'ABCDEFG':\n        if c in board and len(board[c]) > 0:\n            if sum(1 for i in range(len(board[c])) if board[c][i] == color) >= 4:\n                consecutive = 0\n                for i in range(len(board[c])):\n                    if board[c][i] == color:\n                        consecutive += 1\n                        if consecutive == 4:\n                            return True\n                    else:\n                        consecutive = 0\n\n    # Check diagonal \\\n    for i in range(3):\n        for j in range(3):\n            if all(board[chr(65 + i + k)][j + k] == color for k in range(4) if chr(65 + i + k) in board):\n                return True\n\n    # Check diagonal /\n    for i in range(3):\n        for j in range(3, 6):\n            if all(board[chr(65 + i + k)][j - k] == color for k in range(4) if chr(65 + i + k) in board):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win if this column has 4 or more pieces\n        if len(board[column]) >= 4:\n            # Check vertically\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontally and diagonally\n            for i in range(7):\n                if all(board[COLUMNS[i + j]] and board[COLUMNS[i + j]][-1] == color for j in range(4) if 0 <= i + j < 7):\n                    return color\n            \n            for i in range(4):\n                for j in range(3):\n                    if i < len(board[COLUMNS[i]]) and j < len(board[COLUMNS[j]]):\n                        if (board[COLUMNS[i]] and board[COLUMNS[j]][-1] == color and\n                                board[COLUMNS[i + 1]] and board[COLUMNS[j + 1]][-1] == color and\n                                board[COLUMNS[i + 2]] and board[COLUMNS[j + 2]][-1] == color and\n                                board[COLUMNS[i + 3]] and board[COLUMNS[j + 3]][-1] == color):\n                            return color\n            \n            for i in range(4):\n                for j in range(3, 6):\n                    if i < len(board[COLUMNS[i]]) and j < len(board[COLUMNS[j]]):\n                        if (board[COLUMNS[i]] and board[COLUMNS[j]][-1] == color and\n                                board[COLUMNS[i + 1]] and board[COLUMNS[j - 1]][-1] == color and\n                                board[COLUMNS[i + 2]] and board[COLUMNS[j - 2]][-1] == color and\n                                board[COLUMNS[i + 3]] and board[COLUMNS[j - 3]][-1] == color):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in {(col, r) for col in board for r in range(6)}):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner after each move\n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board[column], color):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n\ndef check_winner(column, color):\n    count = 0\n    for piece in column:\n        if piece == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check if this move causes a win\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Get the row of the last move\n    row = len(board[column]) - 1\n\n    # Check all possible directions\n    directions = [\n        [(0, 1), (0, -1)], # Vertical\n        [(1, 0), (-1, 0)], # Horizontal\n        [(1, 1), (-1, -1)], # Diagonal \\\n        [(1, -1), (-1, 1)] # Diagonal /\n    ]\n    \n    for direction in directions:\n        count = 1\n        \n        for d in direction:\n            r, c = row, ord(column) - ord('A') # row, column index\n            dr, dc = d\n            \n            while True:\n                r += dr\n                c += dc\n                \n                if 0 <= r < 6 and 0 <= c < 7 and len(board[chr(c + ord('A'))]) > r and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column].append(color)\n        \n        if len(grid[column]) >= 4:\n            # Check vertical\n            if grid[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal\n            for c in 'ABCDEFG':\n                if grid[c][-len(grid[c]):] == [color] * len(grid[c]) and len(grid[c]) >= 4:\n                    for i in range(len(grid[c]) - 3):\n                        if grid[c][i:i+4] == [color] * 4:\n                            return color\n            \n            # Check diagonals\n            for i in range(6):\n                for j in range(7):\n                    if (i < 3 and j < 4 and \n                        all((grid[chr(j + ord('A'))][i + k] == color for k in range(4)))):\n                        return color\n                    if (i >= 3 and j < 4 and \n                        all((grid[chr(j + ord('A'))][i - k] == color for k in range(4)))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            for i in range(len(board[col]) - 3):\n                if all(board[col][i+j] == color for j in range(4)):\n                    return color\n                    \n        for c in 'ABCDEFG':\n            if board[c]:\n                for i in range(len(board[c])):\n                    if i >= 3 and all(board[c][i-j] == color for j in range(4)):\n                        return color\n\n        for c in range(len(board)):\n            for r in range(len(board['A'])):\n                if r >= 3 and c >= 3:\n                    if all(board['ABCDEFG'][r-j][c-j] == color for j in range(4)):\n                        return color\n                    \n                if r >= 3 and c <= 3:\n                    if all(board['ABCDEFG'][r-j][c+j] == color for j in range(4)):\n                        return color\n                        \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board['ABCDEFG'[i % 7]][j] == color:\n                        if (i + 3 < 7 and \n                            all(board['ABCDEFG'[(i + k) % 7]][j] == color for k in range(4))):\n                            return color\n                        if (j + 3 < 6 and \n                            all(board['ABCDEFG'[i % 7]][j + k] == color for k in range(4))):\n                            return color\n                        if (i + 3 < 7 and j + 3 < 6 and \n                            all(board['ABCDEFG'[(i + k) % 7]][j + k] == color for k in range(4))):\n                            return color\n                        if (i + 3 < 7 and j - 3 >= 0 and \n                            all(board['ABCDEFG'[(i + k) % 7]][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for win conditions\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    # Check vertical\n    if sum(1 for r in board[column] if r == color) >= 4:\n        return True\n\n    # Check horizontal\n    for col in 'ABCDEFG':\n        if board[col] and board[col][-1] == color:\n            count = 0\n            for c in 'ABCDEFG':\n                if board[c] and board[c][-1] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n\n    # Check diagonal \\\n    for c in range(4):\n        for r in range(3, 6):\n            if all(board['ABCDEFG'[c + i]] and board['ABCDEFG'[c + i]][r - i] == color for i in range(4) if c + i < 7):\n                return True\n\n    # Check diagonal /\n    for c in range(4):\n        for r in range(3):\n            if all(board['ABCDEFG'[c + i]] and board['ABCDEFG'[c + i]][r + i] == color for i in range(4) if c + i < 7):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        # Check for win condition\n        if len(board[column]) >= 4:\n            # Check vertical\n            if all(c == color for c in board[column][-4:]):\n                return color\n            \n            # Check horizontal and diagonal lines\n            for c in range(len(board)):\n                if all(board[chr(c + ord('A'))][len(board[chr(c + ord('A'))]) - 1] == color for r in range(4) \n                       if len(board[chr(c + ord('A'))]) > r):\n                    return color\n            \n            for i in range(4):\n                if column in board and (len(board[column]) > 3 and\n                    (len(board[column]) - 1 >= i and len(board[chr(ord(column) + i)]) > 0 and\n                     board[column][-1] == board[chr(ord(column) + i)][-1] == color)):\n                    return color\n            \n            for i in range(4):\n                if column in board and (len(board[column]) > 3 and\n                    (len(board[column]) - 1 >= i and len(board[chr(ord(column) - i)]) > 0 and\n                     board[column][-1] == board[chr(ord(column) - i)][-1] == color)):\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) >= 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            # Vertical check\n            if all(board[column][i] == color for i in range(-4, 0)):\n                return color\n            \n            # Horizontal and diagonal checks\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                if (all((board['ABCDEFG'[c+i]].count(color) > 0 and \n                          (board['ABCDEFG'[c+i]].index(color) >= len(board['ABCDEFG'[c+i]]) - j) \n                          for j in range(4) for i in range(4)))):\n                    return color\n            \n                # Diagonal /\n                if (all((board['ABCDEFG'[c+i]].count(color) > 0 and \n                          (board['ABCDEFG'[c+i]].index(color) >= len(board['ABCDEFG'[c+i]]) - (3 - j)) \n                          for j in range(4) for i in range(4)))):\n                    return color\n            \n                # Diagonal \\\n                if (all((board['ABCDEFG'[c+i]].count(color) > 0 and \n                          (board['ABCDEFG'[c+i]].index(color) >= len(board['ABCDEFG'[c+i]]) - (j)) \n                          for j in range(4) for i in range(4)))):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i in range(6) if board[col][i] is None)\n        board[col][row] = color\n        \n        if check_winner(board, row, col, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, row, col, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dr, dc in directions:\n        count = 1\n        for i in range(1, 4):\n            r, c = row + dr * i, ord(col) - ord('A') + dc * i\n            if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            r, c = row - dr * i, ord(col) - ord('A') - dc * i\n            if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win if that column has at least 4 pieces\n        if len(board[column]) >= 4:\n            count = 0\n            for row in reversed(board[column]):\n                if row == color:\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    break\n    \n    for col in board:\n        for i in range(len(board[col])):\n            if board[col][i] == color:\n                count = 1\n                # Check vertical\n                for j in range(i + 1, len(board[col])):\n                    if board[col][j] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        break\n                count = 1\n                # Check horizontal\n                for k in range(len(board)):\n                    if k != COLUMNS.index(col):\n                        if len(board[COLUMNS[k]]) > i and board[COLUMNS[k]][i] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            break\n                # Check diagonals\n                for j in range(-3, 1):\n                    count = 0\n                    for d in range(4):\n                        r, c = i + d, COLUMNS.index(col) + j + d\n                        if 0 <= r < 6 and 0 <= c < 7 and (COLUMNS[c] in board) and (len(board[COLUMNS[c]]) > r) and (board[COLUMNS[c]][r] == color):\n                            count += 1\n                    if count == 4:\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for winner after each move\n        if len(board[column]) >= 4:\n            # Check vertical\n            if all(board[column][-i] == color for i in range(1, 5)):\n                return color\n            \n            # Check horizontal\n            for i in range(max(0, len(board[column]) - 4), len(board[column])):\n                if all(board[chr(c)][:len(board[chr(c)])-1][-1] == color for c in range(ord(column) - 3, ord(column) + 1)):\n                    return color\n            \n            # Check diagonal \\\n            for i in range(max(0, len(board[column]) - 4), len(board[column])):\n                if all(board[chr(ord(column) - k)][-1] == color for k in range(4) if ord(column) - k >= ord('A')):\n                    return color\n\n            # Check diagonal /\n            for i in range(max(0, len(board[column]) - 4), len(board[column])):\n                if all(board[chr(ord(column) + k)][-1] == color for k in range(4) if ord(column) + k <= ord('G')):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        for d in [1, -1]:\n            r, c = row, ord(col) - ord('A')\n            while 0 <= r + d * dr < 6 and 0 <= c + d * dc < 7:\n                r += d * dr\n                c += d * dc\n                if r < len(board[chr(c + ord('A'))]) and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n\n            if count >= 4:\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(grid[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(grid[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(grid[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal lines for a win\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                # Check horizontal\n                if col_check(board, color, col, row, 1, 0):\n                    return True\n                # Check vertical\n                if col_check(board, color, col, row, 0, 1):\n                    return True\n                # Check diagonal \\\n                if col_check(board, color, col, row, 1, 1):\n                    return True\n                # Check diagonal /\n                if col_check(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef col_check(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n        \n        # Check for a win\n        if len(board[column]) >= 4:\n            if check_winner(board[column], color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(column, color):\n    # Check vertical win\n    if len(column) >= 4 and all(c == color for c in column[-4:]):\n        return True\n    \n    # Check horizontal and diagonal (not implemented here for brevity)\n    # Additional checks would be needed based on the full board state\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal for a win\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or  # Horizontal\n                    check_direction(board, color, col, row, 0, 1) or  # Vertical\n                    check_direction(board, color, col, row, 1, 1) or  # Diagonal \\\n                    check_direction(board, color, col, row, 1, -1)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for _ in range(4):\n        if row < 0 or row >= 6 or col not in board or board[col][row] != color:\n            return False\n        count += 1\n        col = chr(ord(col) + d_col)\n        row += d_row\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            new_col = chr(ord(col) + i * dcol)\n            new_row = row + i * drow\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] is not None:\n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j + k]][i] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i + k] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n                    # Check diagonal down-right\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j + k]][i + k] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n                    # Check diagonal down-left\n                    if j >= 3 and i <= 2 and all(board['ABCDEFG'[j - k]][i + k] == board['ABCDEFG'[j]][i] for k in range(4)):\n                        return board['ABCDEFG'[j]][i]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            for r in range(len(board[column]) - 4, len(board[column])):\n                if all(board[column][r] == board[column][r+i] for i in range(4)):\n                    return color\n    \n    for col in 'ABCDEFG':\n        for r in range(len(board[col])):\n            color = board[col][r]\n            if r + 3 < len(board[col]) and all(board[col][r] == board[col][r+i] for i in range(4)):\n                return color\n            if r + 3 < 6:\n                if col in 'ABCDEFG':\n                    for i in range(1, 4):\n                        if (col, r) in board and (chr(ord(col) + i), r) in board and (chr(ord(col) - i), r) in board:\n                            if color == board[chr(ord(col) + i)][r] == board[chr(ord(col) - i)][r]:\n                                return color\n    \n    for col in 'ABCDEFG':\n        for r in range(len(board[col])):\n            color = board[col][r]\n            if r + 3 < len(board[col]) and all(board[col][r] == board[col][r+i] for i in range(4)):\n                return color\n            if r + 3 < 6:\n                if col in 'ABCDEFG':\n                    for i in range(1, 4):\n                        if (col, r) in board and (chr(ord(col) + i), r + i) in board and (chr(ord(col) - i), r + i) in board:\n                            if color == board[chr(ord(col) + i)][r + i] == board[chr(ord(col) - i)][r + i]:\n                                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal up-right\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    new_row = row + direction[0] * step * d\n                    new_col = 'ABCDEFG'[ 'ABCDEFG'.index(column) + direction[1] * step * d ]\n                    if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < len(board[c]))):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    color = grid[c][r]\n\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r+i] == color for i in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if c <= 'D' and all(grid[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal (bottom-left to top-right)\n                    if c <= 'D' and r >= 3 and all(grid[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal (top-left to bottom-right)\n                    if c <= 'D' and r <= 2 and all(grid[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check for vertical win\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check for horizontal win\n                    for start in range(max(0, col_index(col) - 3), min(7, col_index(col) + 1)):\n                        if all(board[COLUMNS[start + i]][row] == color for i in range(4)):\n                            return color\n                    # Check for diagonal wins\n                    for d in [1, -1]:\n                        for i in range(-3, 1):\n                            if all(0 <= row + i * d < 6 and 0 <= col_index(col) + i < 7 and board[COLUMNS[col_index(col) + i]][row + i * d] == color for i in range(4)):\n                                return color\n    \n    return \"Draw\"\n\ndef col_index(col):\n    return 'ABCDEFG'.index(col)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == 'Red' for x, y in line if x in board and y < 6):\n                return \"Red\"\n            if all(board[x][y] == 'Yellow' for x, y in line if x in board and y < 6):\n                return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for column in board:\n            for row in range(6):\n                if board[column][row] == color:\n                    if check_winner(board, column, row, color):\n                        return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for i in range(1, 4):\n            c, r = chr(ord(col) + d[0] * i), row + d[1] * i\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            c, r = chr(ord(col) - d[0] * i), row - d[1] * i\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for victory\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] is not None:\n                    if (j <= 3 and all(board['ABCDEFG'[j+k]][i] == board['ABCDEFG'[j]][i] for k in range(4))) or \\\n                       (i <= 2 and all(board['ABCDEFG'[j]][i+k] == board['ABCDEFG'[j]][i] for k in range(4))) or \\\n                       (j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == board['ABCDEFG'[j]][i] for k in range(4))) or \\\n                       (j <= 3 and i >= 3 and all(board['ABCDEFG'[j+k]][i-k] == board['ABCDEFG'[j]][i] for k in range(4))):\n                        return board['ABCDEFG'[j]][i]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[board[col].index(board[col][row]):board[col].index(board[col][row])+4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[col][row-k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 0\n            for d in range(-3, 4):\n                c = chr(ord(col) + d * direction[0])\n                r = row + d * direction[1]\n                if 0 <= r < 6 and c in board and board[c][r] == color:\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    count = 0\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and all(color == colors[0] for color in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        all(grid[c][row] == color for c in 'ABCDEFG' if grid[c][row] is not None) or\n                        all(grid[COLUMNS[i][j]][row + j] == color for j in range(4) \n                            if row + j < 6 and i < len(COLUMNS)) or\n                        all(grid[COLUMNS[i][3 - j]][row + j] == color for j in range(4) \n                            if row + j < 6 and 3 - j >= 0)):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i + 3 < 7 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j + 3 < 6 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n\n        # Check for a winner\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    color = board[c][r]\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == 'Red' for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return 'Red'\n            if all(board[x][y] == 'Yellow' for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[COLUMNS[i]][row + i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[COLUMNS[i]][row - i] == color for i in range(4) if 0 <= 'ABCDEFG'.index(col) + i < len('ABCDEFG'))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for win_positions in LINES:\n        colors = {color: 0 for color in ['Red', 'Yellow']}\n        for position in win_positions:\n            col, row = position\n            if board[col][row] is not None:\n                colors[board[col][row]] += 1\n        if colors['Red'] == 4:\n            return 'Red'\n        if colors['Yellow'] == 4:\n            return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    color = board[chr(65 + c)][r]\n                    if all(board[chr(65 + c)][r] == color for c in range(c, c + 4) if 0 <= c < 7) or \\\n                       all(board[chr(65 + c)][r] == color for r in range(r, r + 4) if 0 <= r < 6) or \\\n                       all(board[chr(65 + c)][r] == color for d in range(4) if 0 <= c + d < 7 and 0 <= r + d < 6) or \\\n                       all(board[chr(65 + c)][r] == color for d in range(4) if 0 <= c + d < 7 and 0 <= r - d < 6):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = list(board.keys()).index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and (color == board[list(board.keys())[c]][r]):\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col].count(color) > 0 and (row := board[col].index(color)) >= 0 and board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw' if len(pieces_positions) == 42 else None\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column = 'ABCDEFG'.index(position[0])\n        color = position[2:]\n        for row in range(5, -1, -1):\n            if grid[row][column] == '':\n                grid[row][column] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j + 3 < 7 and all(grid[i][j+k] == color for k in range(4)):\n                    return color\n                if i + 3 < 6 and all(grid[i+k][j] == color for k in range(4)):\n                    return color\n                if i + 3 < 6 and j + 3 < 7 and all(grid[i+k][j+k] == color for k in range(4)):\n                    return color\n                if i - 3 >= 0 and j + 3 < 7 and all(grid[i-k][j+k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check vertical, horizontal, and diagonal connections\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or\n                    check_direction(board, color, col, row, 0, 1) or\n                    check_direction(board, color, col, row, 1, 1) or\n                    check_direction(board, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + d_col * i)\n        r = row + d_row * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if r <= 2 and c >= 'D' and all(board[chr(ord(c)-i)][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if r <= 2 and c <= 'D' and all(board[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    if (all(board[c][r] == color for c in 'ABCDEFG' if board[c][r] is not None) or\n                        all(board[c][r] == color for c in 'ABCDEFG' if r + i < 6 and board[c][r + i] == color for i in range(4)) or\n                        all(board[c][r] == color for c in 'ABCDEFG' if c_index + i < 7 and r + i < 6 and board[c][r + i] == color for i in range(4)) or\n                        all(board[c][r] == color for c in 'ABCDEFG' if c_index - i >= 0 and r + i < 6 and board[c][r + i] == color for i in range(4))):\n                        return color\n    return \"Draw\" if len(pieces_positions) >= 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        for i in range(len(board[col]) - 3, len(board[col])):\n            if board[col][i:i+4] == [color] * 4:\n                return color\n\n    for col in board:\n        for row in range(len(board[col])):\n            if row < len(board[col]) - 3:\n                if all(board[col][row + r] == board[col][row] for r in range(4)):\n                    return board[col][row]\n\n            if col in 'ABCDE' and row < len(board[col]) - 3:\n                if all(board[chr(ord(col) + r)][row] == board[col][row] for r in range(4)):\n                    return board[col][row]\n\n            if col in 'ABCDE' and row < len(board[col]) - 3 and row < len(board[chr(ord(col) + 3)]):\n                if all(board[chr(ord(col) + r)][row + r] == board[col][row] for r in range(4)):\n                    return board[col][row]\n\n            if col in 'ABCDE' and row < len(board[col]) - 3 and row >= 3:\n                if all(board[chr(ord(col) + r)][row - r] == board[col][row] for r in range(4)):\n                    return board[col][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [[(0, 1), (0, -1)], [(1, 0), (-1, 0)], [(1, 1), (-1, -1)], [(1, -1), (-1, 1)]]:\n            count = 1\n            \n            for d in direction:\n                x, y = row, board[column].index(color)\n                while 0 <= x + d[0] < 6 and 0 <= y + d[1] < 7 and board[column][x + d[0]] == color:\n                    count += 1\n                    x += d[0]\n                    y += d[1]\n                if count >= 4:\n                    return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    color = grid[c][r]\n                    if (c, r) in [(col, row) for col in grid for row in range(6)]:\n                        # Check horizontal\n                        if all(grid[c][r] == grid[c][r + k] for k in range(4) if r + k < 6):\n                            return color\n                        # Check vertical\n                        if all(grid[c][r] == grid[c][r - k] for k in range(4) if r - k >= 0):\n                            return color\n                        # Check diagonal /\n                        if all(grid[chr(ord(c) + k)][r - k] == color for k in range(4) if 0 <= ord(c) + k < 7 and r - k >= 0):\n                            return color\n                        # Check diagonal \\\n                        if all(grid[chr(ord(c) + k)][r + k] == color for k in range(4) if 0 <= ord(c) + k < 7 and r + k < 6):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for row in range(6):\n            if grid[col][row] == color:\n                if any(all(grid[col][row] == grid[c][r] for c, r in line)\n                       for line in LINES):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row - k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                        return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n                    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((r for r in range(6) if board[column][r] is None), None)\n        if row is not None:\n            board[column][row] = color\n            if check_winner(board, column, row, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                x = ord(column) - ord('A') + step * i * dx\n                y = row + step * i * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                player_moves[player] += 1\n                \n                if check_winner(grid, player):\n                    return player\n                \n                break\n    \n    return \"Draw\"\n\ndef check_winner(grid, player):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == player:\n                if check_direction(grid, col, row, player):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + dcol * i)\n            r = row + drow * i\n            if 0 <= r < 6 and c in grid and grid[c][r] == player:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1))   # Diagonal /\n\ndef check_direction(board, col, row, color, dc, dr):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dc)\n        r = row + i * dr\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (board[col][row] == board[col][row-1] == board[col][row-2] == board[col][row-3] if row >= 3 else False or\n                        (col != 'A' and board[col][row] == board[chr(ord(col) - 1)][row] == board[chr(ord(col) - 2)][row] == board[chr(ord(col) - 3)][row]) if col >= 'D' else False or\n                        (row >= 3 and col != 'A' and col != 'B' and board[col][row] == board[chr(ord(col) - 1)][row - 1] == board[chr(ord(col) - 2)][row - 2] == board[chr(ord(col) - 3)][row - 3]) or\n                        (row <= 2 and col != 'A' and col != 'B' and board[col][row] == board[chr(ord(col) - 1)][row + 1] == board[chr(ord(col) - 2)][row + 2] == board[chr(ord(col) - 3)][row + 3])):\n                        return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if grid[chr(65 + c)][r] == color:\n                    if (c + 3 < 7 and all(grid[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r + 3 < 6 and all(grid[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(grid[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and all(grid[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal for a win\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # Horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # Vertical\n                    check_direction(board, col, row, 1, 1, color) or  # Diagonal /\n                    check_direction(board, col, row, 1, -1, color)):  # Diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + step * delta_col)\n        new_row = row + step * delta_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] == color:\n                    # Check horizontal\n                    if column <= 'D' and all(board[column][row] == color for column in 'DEFG'[0:4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[column][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if column <= 'D' and row >= 3 and all(board['ABCDEFG'[i]][row - i + 3] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if column <= 'D' and row <= 2 and all(board['ABCDEFG'[i]][row + i] == color for i in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i in range(6) if board[col][i] is None)\n        board[col][row] = color\n\n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in (1, -1):\n            x, y = ord(col) - ord('A'), row\n            while 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n                x += dx * step\n                y += dy * step\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                if grid[col].count(color) >= 4:\n                    for row in range(6):\n                        if grid[col][row] == color:\n                            if (row <= 2 and \n                                grid[col][row] == color and \n                                grid[col][row + 1] == color and \n                                grid[col][row + 2] == color and \n                                grid[col][row + 3] == color):\n                                return color\n\n                            if (col_idx := 'ABCDEFG'.index(col) <= 3 and \n                                grid[col][row] == color and \n                                grid[chr(ord(col) + 1)][row] == color and \n                                grid[chr(ord(col) + 2)][row] == color and \n                                grid[chr(ord(col) + 3)][row] == color):\n                                return color\n\n                            if (row <= 2 and col_idx <= 3 and \n                                grid[col][row] == color and \n                                grid[chr(ord(col) + 1)][row + 1] == color and \n                                grid[chr(ord(col) + 2)][row + 2] == color and \n                                grid[chr(ord(col) + 3)][row + 3] == color):\n                                return color\n\n                            if (row >= 3 and col_idx <= 3 and \n                                grid[col][row] == color and \n                                grid[chr(ord(col) + 1)][row - 1] == color and \n                                grid[chr(ord(col) + 2)][row - 2] == color and \n                                grid[chr(ord(col) + 3)][row - 3] == color):\n                                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if c + 3 < 7 and all(board['ABCDEFG'[c + i]][r] == color for i in range(4)):\n                        return color\n                    if r + 3 < 6 and all(board['ABCDEFG'[c]][r + i] == color for i in range(4)):\n                        return color\n                    if c + 3 < 7 and r + 3 < 6 and all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4)):\n                        return color\n                    if c - 3 >= 0 and r + 3 < 6 and all(board['ABCDEFG'[c - i]][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if (c <= 3 and all(board['ABCDEFG'[c+i]][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board['ABCDEFG'[c]][r+i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board['ABCDEFG'[c+i]][r+i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board['ABCDEFG'[c+i]][r-i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board['ABCDEFG'[c]][r] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            rr = r + direction[0] * step\n                            cc = c + direction[1] * step\n                            if 0 <= rr < 6 and 0 <= cc < 7 and board['ABCDEFG'[cc]][rr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for column in board:\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check horizontal\n                        if all(board[c][row] == color for c in 'ABCDEFG'[COLUMNS.index(column):COLUMNS.index(column) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if column <= 'D' and row <= 2 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if column <= 'D' and row >= 3 and all(board[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, dcol, drow):\n    count = 0\n    for _ in range(4):\n        if 0 <= row < 6 and board[col][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        col = chr(ord(col) + dcol)\n        row += drow\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if (x in board) and (y < 6)):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win if this column has 4 or more pieces\n        if len(board[column]) >= 4:\n            # Check vertically\n            if board[column][-1] == color and board[column][-2] == color and board[column][-3] == color and board[column][-4] == color:\n                return color\n        \n            # Check horizontally\n            for i in range(max(0, len(board[column]) - 4), len(board[column])):\n                if board[column][i:i + 4].count(color) == 4:\n                    return color\n            \n            # Check diagonally (bottom-left to top-right)\n            for i in range(len(board[column])):\n                if (i + 3 < len(board[column]) and\n                    board[column][i] == color and\n                    board.get(chr(ord(column) - 1), [])[i + 1:i + 4].count(color) == 3):\n                    return color\n            \n            # Check diagonally (top-left to bottom-right)\n            for i in range(len(board[column])):\n                if (i - 3 >= 0 and\n                    board[column][i] == color and\n                    board.get(chr(ord(column) + 1), [])[i - 1:i - 4].count(color) == 3):\n                    return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board[column][-4:], color):\n                return color\n    \n    for col in board:\n        for row in range(len(board[col])):\n            if board[col][row] == 'Red':\n                if check_winner_vertical(board, col, row, 'Red') or check_winner_horizontal(board, col, row, 'Red') or check_winner_diagonal(board, col, row, 'Red'):\n                    return 'Red'\n            elif board[col][row] == 'Yellow':\n                if check_winner_vertical(board, col, row, 'Yellow') or check_winner_horizontal(board, col, row, 'Yellow') or check_winner_diagonal(board, col, row, 'Yellow'):\n                    return 'Yellow'\n    \n    return 'Draw'\n\ndef check_winner(column, color):\n    return column.count(color) == 4\n\ndef check_winner_vertical(board, col, row, color):\n    return all(board[col][i] == color for i in range(row, min(row + 4, len(board[col]))))\n\ndef check_winner_horizontal(board, col, row, color):\n    count = 0\n    for c in 'ABCDEFG':\n        if board[c][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n\ndef check_winner_diagonal(board, col, row, color):\n    count1 = count2 = 0\n    for d in range(-3, 4):\n        if 0 <= row + d < 6 and 0 <= 'ABCDEFG'.index(col) + d < 7:\n            if board['ABCDEFG'[ord(col) - ord('A') + d]][row + d] == color:\n                count1 += 1\n            else:\n                count1 = 0\n        if 0 <= row - d < 6 and 0 <= 'ABCDEFG'.index(col) + d < 7:\n            if board['ABCDEFG'[ord(col) - ord('A') + d]][row - d] == color:\n                count2 += 1\n            else:\n                count2 = 0\n    return count1 >= 4 or count2 >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if all(board[col][row] == board[c][row] for c in 'ABCDEFG' if c in board and row < len(board[c])):\n                        return color\n                    if row <= 2 and all(board[col][row] == board[col][row + k] for k in range(4)):\n                        return color\n                    if row <= 2 and col <= 'D' and all(board[col][row] == board[chr(ord(col) + k)][row + k] for k in range(4)):\n                        return color\n                    if row >= 3 and col <= 'D' and all(board[col][row] == board[chr(ord(col) + k)][row - k] for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color_to_check for x, y in line if (y < 6 and board[x][y] == color_to_check)):\n                    return color_to_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 3:  # Only check for a winner if there are at least 4 pieces in the column\n            for i in range(len(board[column]) - 3, len(board[column])):\n                if all(color == board[column][i] for j in range(4)):\n                    return color\n\n        # Check horizontal, vertical, and diagonal connections\n        for col in 'ABCDEFG':\n            for row in range(len(board[col])):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if all(col == color for col in board[col][row:row + 4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == 'Red' for c, r in line if r < 6 and board[c][r] == 'Red'):\n                return 'Red'\n            if all(board[c][r] == 'Yellow' for c, r in line if r < 6 and board[c][r] == 'Yellow'):\n                return 'Yellow'\n\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check if this move causes a win\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Get the row of the last move\n    row = len(board[column]) - 1\n\n    # Check all four directions\n    directions = [\n        [(0, 1), (0, -1)], # Vertical\n        [(1, 0), (-1, 0)], # Horizontal\n        [(1, 1), (-1, -1)], # Diagonal \\\n        [(1, -1), (-1, 1)] # Diagonal /\n    ]\n    \n    for direction in directions:\n        count = 1\n        \n        for d in direction:\n            r, c = row, ord(column) - ord('A') # Column index\n            dr, dc = d\n            \n            while 0 <= r + dr < 6 and 0 <= c + dc < 7 and board[chr(c + dc + ord('A'))] and board[chr(c + dc + ord('A'))][-1] == color:\n                count += 1\n                r += dr\n                c += dc\n            \n            if count >= 4:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for win conditions\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    # Check vertical\n    if sum(1 for r in board[column] if r == color) >= 4:\n        return True\n\n    # Check horizontal\n    for col in 'ABCDEFG':\n        if board[col] and board[col][-1] == color:\n            count = 0\n            for c in 'ABCDEFG':\n                if board[c] and board[c][-1] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n\n    # Check diagonal \\\n    for c in range(4):\n        for r in range(3, 6):\n            if all(board['ABCDEFG'[c + i]] and board['ABCDEFG'[c + i]][r - i] == color for i in range(4) if c + i < 7):\n                return True\n\n    # Check diagonal /\n    for c in range(4):\n        for r in range(3):\n            if all(board['ABCDEFG'[c + i]] and board['ABCDEFG'[c + i]][r + i] == color for i in range(4) if c + i < 7):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if (j <= 3 and all(board[chr(c)][i] == color for c in range(ord('A') + j, ord('A') + j + 4))) or \\\n                       (i <= 2 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                       (i <= 2 and j <= 3 and all(board[chr(j + ord('A'))][i + k] == color and board[chr(j + k + ord('A'))][i + k] == color for k in range(4))) or \\\n                       (i >= 3 and j <= 3 and all(board[chr(j + ord('A'))][i - k] == color and board[chr(j + k + ord('A'))][i - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n    \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if (check_direction(grid, col, row, 1, 0, color) or  # horizontal\n                    check_direction(grid, col, row, 0, 1, color) or  # vertical\n                    check_direction(grid, col, row, 1, 1, color) or  # diagonal \\\n                    check_direction(grid, col, row, 1, -1, color)): # diagonal /\n                    return True\n    return False\n\ndef check_direction(grid, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in grid and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column].append(color)\n        \n        # Check for a win if this column has 4 or more pieces\n        if len(grid[column]) >= 4:\n            # Check vertically\n            if all(color == grid[column][-1] for color in grid[column][-4:]):\n                return grid[column][-1]\n            \n            # Check horizontally\n            for c in 'ABCDEFG':\n                if grid[c][-1:][-4:] == [grid[column][-1]] * 4:\n                    return grid[column][-1]\n                    \n            # Check diagonally /\n            for r in range(len(grid[column])):\n                if r >= 3 and grid[column][r] == grid[column][r-1] == grid[column][r-2] == grid[column][r-3]:\n                    return grid[column][r]\n                    \n            # Check diagonally \\\n            for r in range(len(grid[column])):\n                if r <= len(grid[column])-4 and grid[column][r] == grid[column][r+1] == grid[column][r+2] == grid[column][r+3]:\n                    return grid[column][r]\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + dcol * i)\n            r = row + drow * i\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check if this move causes a win\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if all(board[column][i] == color for i in range(max(0, row - 3), row + 1)):\n        return True\n    \n    # Check horizontal\n    for c in 'ABCDEFG':\n        if c in board and (len(board[c]) > row) and board[c][row] == color:\n            count = 1\n            for d in [-1, 1]:  # left and right\n                for k in range(1, 4):\n                    nc = chr(ord(c) + d * k)\n                    if nc in board and (len(board[nc]) > row) and board[nc][row] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return True\n    \n    # Check diagonal \\\n    for d in [-1, 1]:  # up and down\n        count = 1\n        for k in range(1, 4):\n            nc = chr(ord(column) + d * k)\n            nr = row - k\n            if nc in board and (0 <= nr < len(board[nc])) and board[nc][nr] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n\n    # Check diagonal /\n    for d in [-1, 1]:  # up and down\n        count = 1\n        for k in range(1, 4):\n            nc = chr(ord(column) + d * k)\n            nr = row + k\n            if nc in board and (0 <= nr < len(board[nc])) and board[nc][nr] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column].append(color)\n        \n        if len(grid[column]) >= 4:\n            # Check vertical\n            if grid[column][-4:] == [color] * 4:\n                return color\n        \n        # Check horizontal\n        for c in 'ABCDEFG':\n            if grid[c][-1:] == [color] and sum(1 for _ in grid[c] if _ == color) >= 4:\n                count = 0\n                for cc in 'ABCDEFG':\n                    if grid[cc] and grid[cc][-1] == color:\n                        count += 1\n                    else:\n                        count = 0\n                    if count == 4:\n                        return color\n        \n        # Check diagonals\n        for i in range(4):\n            for j in range(3):\n                if (len(grid[COLUMNS[i]]) > j and grid[COLUMNS[i]][j] == color and\n                    len(grid[COLUMNS[i+1]]) > j + 1 and grid[COLUMNS[i+1]][j + 1] == color and\n                    len(grid[COLUMNS[i+2]]) > j + 2 and grid[COLUMNS[i+2]][j + 2] == color and\n                    len(grid[COLUMNS[i+3]]) > j + 3 and grid[COLUMNS[i+3]][j + 3] == color):\n                    return color\n                if (len(grid[COLUMNS[i]]) > j + 3 and grid[COLUMNS[i]][j + 3] == color and\n                    len(grid[COLUMNS[i+1]]) > j + 2 and grid[COLUMNS[i+1]][j + 2] == color and\n                    len(grid[COLUMNS[i+2]]) > j + 1 and grid[COLUMNS[i+2]][j + 1] == color and\n                    len(grid[COLUMNS[i+3]]) > j and grid[COLUMNS[i+3]][j] == color):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            for i in range(len(board[col]) - 3):\n                if all(board[col][i+j] == color for j in range(4)):\n                    return color\n                    \n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row > 2:\n                continue\n            if col in board and row < len(board[col]) - 3:\n                if all(board[col][row] == board[col][row + j] for j in range(4)):\n                    return board[col][row]\n                \n    for i in range(6):\n        for j in range(7):\n            if j < 4 and i < 3:\n                if all((j + k, i + k) in [(j, i) for col in board for i in board[col]] for k in range(4)):\n                    return board[j][i]\n            if j < 4 and i > 2:\n                if all((j + k, i - k) in [(j, i) for col in board for i in board[col]] for k in range(4)):\n                    return board[j][i]\n                    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for win conditions\n        if len(board[column]) >= 4:\n            if check_winner(board[column], column, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(col_stack, col, color):\n    # Check vertical\n    if len(col_stack) >= 4 and all(c == color for c in col_stack[-4:]):\n        return True\n    \n    # Check horizontal and diagonal\n    for c in 'ABCDEFG':\n        if c in board and len(board[c]) > 0:\n            row = len(board[c]) - 1  # Last row filled in this column\n            if check_horizontal(row, color) or check_diagonal(row, c, color):\n                return True\n    \n    return False\n\ndef check_horizontal(row, color):\n    count = 0\n    for c in 'ABCDEFG':\n        if c in board and len(board[c]) > row and board[c][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n\ndef check_diagonal(row, col, color):\n    # Check for both diagonals from a given position\n    directions = [(1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 0\n        r, c = row, 'ABCDEFG'.index(col)\n        while r < 6 and 0 <= c < 7:\n            if c in board and len(board[c]) > r and board[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n            r += dr\n            c += dc\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            # Vertical check\n            if all(board[column][i] == color for i in range(-4, 0)):\n                return color\n            \n            # Horizontal and diagonal checks\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                if (board['ABCDEFG'[c]] + board['ABCDEFG'[c+1]] + \n                    board['ABCDEFG'[c+2]] + board['ABCDEFG'[c+3]]).count(color) >= 4:\n                    return color\n            \n            # Diagonal checks\n            for dr, dc in [(1, 1), (1, -1)]:\n                for r in range(6):\n                    for c in range(7):\n                        if all(0 <= r + dr * i < 6 and 0 <= c + dc * i < 7 and\n                               (board['ABCDEFG'[c + dc * i]].count(color) > 0) for i in range(4)):\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i in range(6) if board[col][i] is None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            r, c = row, col_index(col)\n            while 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                count += 1\n                r += step * d[0]\n                c += step * d[1]\n            if count >= 4:\n                return True\n    return False\n\ndef col_index(col):\n    return 'ABCDEFG'.index(col)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in grid:\n                for row in range(6):\n                    if grid[column][row] == color:\n                        # Check horizontal\n                        if column <= 'D' and all(grid[column][row] == color for column in 'ABCDEFG'[COLUMNS.index(column):COLUMNS.index(column)+4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal down right\n                        if column <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(column) + k]][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal down left\n                        if column >= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(column) - k]][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win if that column has at least 4 pieces\n        if len(board[column]) >= 4:\n            count = 0\n            for row in reversed(board[column]):\n                if row == color:\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    break\n    \n    for col in board:\n        for i in range(len(board[col])):\n            if board[col][i] == color:\n                count = 1\n                # Check vertical\n                for j in range(i + 1, len(board[col])):\n                    if board[col][j] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        break\n                count = 1\n                # Check horizontal\n                for k in range(len(board)):\n                    if k != COLUMNS.index(col):\n                        if len(board[COLUMNS[k]]) > i and board[COLUMNS[k]][i] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            break\n                count = 1\n                # Check diagonal /\n                for j in range(1, 4):\n                    if (COLUMNS.index(col) - j >= 0) and (i + j < len(board[COLUMNS[COLUMNS.index(col) - j]])) and (board[COLUMNS[COLUMNS.index(col) - j]][i + j] == color):\n                        count += 1\n                    else:\n                        break\n                if count == 4:\n                    return color\n                count = 1\n                # Check diagonal \\\n                for j in range(1, 4):\n                    if (COLUMNS.index(col) - j >= 0) and (i - j >= 0) and (board[COLUMNS[COLUMNS.index(col) - j]][i - j] == color):\n                        count += 1\n                    else:\n                        break\n                if count == 4:\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) >= 42 else \"None\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win only if the column is not empty\n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal\n            for i in range(max(0, len(board[column]) - 4), len(board[column])):\n                for j in range(-3, 1):\n                    if all(board[COLUMNS[i+j]].count(color) > 0 for i in range(j, j+4)):\n                        return color\n            \n            # Check diagonal (top-left to bottom-right)\n            for i in range(len(board[column]) - 3):\n                if all(board[COLUMNS[i+k]].count(color) > 0 for k in range(4)):\n                    return color\n            \n            # Check diagonal (bottom-left to top-right)\n            for i in range(3, len(board[column])):\n                if all(board[COLUMNS[i-k]].count(color) > 0 for k in range(4)):\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        for d in [1, -1]:\n            r, c = row, ord(col) - ord('A')\n            while 0 <= r + d * dr < 6 and 0 <= c + d * dc < 7:\n                r += d * dr\n                c += d * dc\n                if r < len(board[chr(c + ord('A'))]) and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n\n            if count >= 4:\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check for win condition only after the fourth piece is placed\n        if len(board[col]) >= 4:\n            # Check for vertical\n            if len(board[col]) >= 4 and all(c == color for c in board[col][-4:]):\n                return color\n            \n            # Check for horizontal and diagonal\n            for c in 'ABCDEFG':\n                if c in board:\n                    # Horizontal check\n                    if all(board[c][-1] == color for c in [c, chr(ord(c) + 1), chr(ord(c) + 2), chr(ord(c) + 3)]) and c in board and len(board[c]) > 0:\n                        return color\n\n                    # Diagonal check (bottom left to top right)\n                    if all(board[c][i] == color for i, c in enumerate([col, chr(ord(col) + 1), chr(ord(col) + 2), chr(ord(col) + 3)])) and c in board and len(board[c]) > 0:\n                        return color\n                    \n                    # Diagonal check (top left to bottom right)\n                    if all(board[c][3 - i] == color for i, c in enumerate([col, chr(ord(col) + 1), chr(ord(col) + 2), chr(ord(col) + 3)])) and c in board and len(board[c]) > 0:\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"None\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check if this move wins the game\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]  # vertical, horizontal, diagonal right, diagonal left\n\n    for dx, dy in directions:\n        count = 1\n\n        # Check in the positive direction\n        for step in range(1, 4):\n            new_col = chr(ord(col) + dx * step)\n            new_row = row + dy * step\n            if new_col in board and new_row in range(6) and len(board[new_col]) > new_row and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        # Check in the negative direction\n        for step in range(1, 4):\n            new_col = chr(ord(col) - dx * step)\n            new_row = row - dy * step\n            if new_col in board and new_row in range(6) and len(board[new_col]) > new_row and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[col].append(color)\n\n        # Check for a winning move\n        if len(grid[col]) >= 4:\n            for i in range(len(grid[col]) - 3, len(grid[col])):\n                if all(grid[col][i - j] == color for j in range(4)):\n                    return color\n\n        # Check vertical\n        for c in 'ABCDEFG':\n            if len(grid[c]) >= 4:\n                for i in range(len(grid[c]) - 3):\n                    if all(grid[c][i + j] == color for j in range(4)):\n                        return color\n\n        # Check diagonal /\n        for c in range(4):\n            for r in range(3, 6):\n                if all((grid[chr(c + ord('A'))][r - j] if r - j < len(grid[chr(c + ord('A'))]) else None) == color for j in range(4)):\n                    return color\n\n        # Check diagonal \\\n        for c in range(4):\n            for r in range(6):\n                if all((grid[chr(c + ord('A'))][r + j] if r + j < len(grid[chr(c + ord('A'))]) else None) == color for j in range(4)):\n                    return color\n\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    return (check_direction(board, column, row, color, 1, 0) or  # horizontal\n            check_direction(board, column, row, color, 0, 1) or  # vertical\n            check_direction(board, column, row, color, 1, 1) or  # diagonal \\\n            check_direction(board, column, row, color, 1, -1)    # diagonal /\n           )\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 1\n    for direction in (1, -1):\n        for _ in range(3):\n            new_col = chr(ord(column) + direction * delta_col)\n            new_row = row + direction * delta_row\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n            if count == 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in range(6) if board[column][r] is None), None)\n        if row is not None:\n            board[column][row] = color\n            \n            # Check for victory\n            if check_victory(board, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_victory(board, color):\n    # Check horizontal, vertical, and diagonal lines\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                # Check horizontal\n                if col_index := 'ABCDEFG'.index(col) <= 3:\n                    if all(board['ABCDEFG'[col_index + i]][row] == color for i in range(4)):\n                        return True\n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                    return True\n                # Check diagonal down-right\n                if col_index <= 3 and row <= 2:\n                    if all(board['ABCDEFG'[col_index + i]][row + i] == color for i in range(4)):\n                        return True\n                # Check diagonal down-left\n                if col_index >= 3 and row <= 2:\n                    if all(board['ABCDEFG'[col_index - i]][row + i] == color for i in range(4)):\n                        return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n\n        for line in LINES:\n            if all((pos in player_moves[player]) for pos in line):\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or\n                    check_direction(board, col, row, 0, 1, color) or\n                    check_direction(board, col, row, 1, 1, color) or\n                    check_direction(board, col, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, start_col, start_row, delta_col, delta_row, color):\n    count = 0\n    col = start_col\n    row = start_row\n\n    while 0 <= row < 6 and col in board and board[col][row] == color:\n        count += 1\n        if count == 4:\n            return True\n        col = chr(ord(col) + delta_col)\n        row += delta_row\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) > 3:  # only check if there are enough pieces to connect\n            for r in range(len(board[col]) - 1, len(board[col]) - 5, -1):\n                if r >= 0 and board[col][r] == board[col][r - 1] == board[col][r - 2] == board[col][r - 3]:\n                    return board[col][r]\n    for col in 'ABCDEFG':\n        for r in range(len(board[col])):\n            if r + 3 < len(board[col]) and all(board[col][r] == board[col][r + k] for k in range(4)):\n                return board[col][r]\n    for c in range(len(board)):\n        for r in range(6):\n            if r + 3 < len(board['ABCDEFG'[c]]) and all(board['ABCDEFG'[c]][r] == board['ABCDEFG'[c]][r + k] for k in range(4)):\n                return board['ABCDEFG'[c]][r]\n            if c + 3 < len(board) and r + 3 < len(board['ABCDEFG'[c]]):\n                if all(board['ABCDEFG'[c]][r] == board['ABCDEFG'[c + k]][r + k] for k in range(4)):\n                    return board['ABCDEFG'[c]][r]\n            if c - 3 >= 0 and r + 3 < len(board['ABCDEFG'[c]]):\n                if all(board['ABCDEFG'[c]][r] == board['ABCDEFG'[c - k]][r + k] for k in range(4)):\n                    return board['ABCDEFG'[c]][r]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for win condition\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] is not None:\n                    # Check horizontal\n                    if c <= 3 and all(board['ABCDEFG'[c+i]][r] == board['ABCDEFG'[c]][r] for i in range(4)):\n                        return board['ABCDEFG'[c]][r]\n                    # Check vertical\n                    if r <= 2 and all(board['ABCDEFG'[c]][r+i] == board['ABCDEFG'[c]][r] for i in range(4)):\n                        return board['ABCDEFG'[c]][r]\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board['ABCDEFG'[c+i]][r+i] == board['ABCDEFG'[c]][r] for i in range(4)):\n                        return board['ABCDEFG'[c]][r]\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(board['ABCDEFG'[c-i]][r+i] == board['ABCDEFG'[c]][r] for i in range(4)):\n                        return board['ABCDEFG'[c]][r]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            for r in range(len(board[column]) - 3, len(board[column])):\n                if all(board[column][r] == board[column][r-k] for k in range(4)):\n                    return color\n    \n    for col in 'ABCDEFG':\n        for r in range(len(board[col])):\n            if r + 3 < len(board[col]):\n                if all(board[col][r] == board[col][r+k] for k in range(4)):\n                    return board[col][r]\n            if col in 'ABCDEFG':\n                for k in range(1, 4):\n                    if (col, r) in board.items() and (chr(ord(col) + k), r) in board and (chr(ord(col) + k), r + 1) in board:\n                        if (r + 3 < len(board[col]) and\n                            board[col][r] == board[chr(ord(col) + k)][r + 1] and\n                            board[col][r] == board[chr(ord(col) + k)][r + 2] and\n                            board[col][r] == board[chr(ord(col) + k)][r + 3]):\n                            return board[col][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_directions(grid, color, col, row):\n                    return True\n    return False\n\ndef check_directions(grid, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for step in range(-3, 4):\n            c = chr(ord(col) + step * dc)\n            r = row + step * dr\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    color = grid[c][r]\n\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r+i] == color for i in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if c <= 'D' and all(grid[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal (bottom-left to top-right)\n                    if c <= 'D' and r >= 3 and all(grid[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal (top-left to bottom-right)\n                    if c <= 'D' and r <= 2 and all(grid[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check for vertical win\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check for horizontal win\n                    for d in range(-3, 1):\n                        if all(0 <= col_index < 7 and board[chr(ord(col) + d + i)][row] == color \n                               for i in range(4) for col_index in [ord(col) + d + i - ord('A')]):\n                            return color\n                    # Check for diagonal (bottom-left to top-right)\n                    if row <= 2 and all(0 <= ord(col) + i < 7 and board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check for diagonal (top-left to bottom-right)\n                    if row >= 3 and all(0 <= ord(col) + i < 7 and board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    for d in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            r, c = row + step * d[1], ord(col) - ord('A') + step * d[0]\n                            if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == board[col][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win if there are at least 4 pieces in the column\n        if len(board[column]) >= 4:\n            if all(x == color for x in board[column][-4:]):\n                return color\n    \n        # Check for horizontal win\n        for c in 'ABCDEFG':\n            if len(board[c]) >= 4:\n                for i in range(len(board[c]) - 3):\n                    if all(x == color for x in board[c][i:i+4]):\n                        return color\n        \n        # Check for diagonal wins\n        for i in range(6):\n            for j in range(7):\n                if (i < 3 and j < 4 and \n                    len(board['A']) > i and len(board['B']) > i and\n                    len(board['C']) > i and len(board['D']) > i):\n                    if (board['A'][i] == board['B'][i] == board['C'][i] == board['D'][i] == color):\n                        return color\n                if (i < 3 and j > 2 and \n                    len(board['D']) > i and len(board['C']) > i and\n                    len(board['B']) > i and len(board['A']) > i):\n                    if (board['D'][i] == board['C'][i] == board['B'][i] == board['A'][i] == color):\n                        return color\n\n    # If all moves are played and no winner, it's a draw\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for victory\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] is not None:\n                    color_check = board['ABCDEFG'[j]][i]\n                    \n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color_check for k in range(4)):\n                        return color_check\n                    \n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color_check for k in range(4)):\n                        return color_check\n                    \n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == color_check for k in range(4)):\n                        return color_check\n                    \n                    # Check diagonal /\n                    if j >= 3 and i <= 2 and all(board['ABCDEFG'[j-k]][i+k] == color_check for k in range(4)):\n                        return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            # Check for a win in the column\n            if all(board[col][-i-1] == color for i in range(4)):\n                return color\n                \n            # Check for a win in the rows and diagonals\n            for c in range(max(0, 'ABCDEFG'.index(col) - 3), min(7, 'ABCDEFG'.index(col) + 1)):\n                for r in range(len(board['ABCDEFG'[c]]) - 1, len(board['ABCDEFG'[c]]) - 5, -1):\n                    if r < 0:\n                        continue\n                    # Horizontal Check\n                    if all((c + i < 7 and len(board['ABCDEFG'[c + i]]) > r and board['ABCDEFG'[c + i]][r] == color) for i in range(4)):\n                        return color\n                    # Diagonal Check \\\n                    if all((c + i < 7 and r - i >= 0 and len(board['ABCDEFG'[c + i]]) > r - i and board['ABCDEFG'[c + i]][r - i] == color) for i in range(4)):\n                        return color\n                    # Diagonal Check /\n                    if all((c + i < 7 and r + i < 6 and len(board['ABCDEFG'[c + i]]) > r + i and board['ABCDEFG'[c + i]][r + i] == color) for i in range(4)):\n                        return color\n                    \n    return \"Draw\" if len(pieces_positions) == 42 else \"No winner yet\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[col][r] == color for col, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] == color:\n                    if j <= 3 and all(board[chr(j + k + 65)][i] == color for k in range(4)):\n                        return color\n                    if i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i <= 2 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i >= 3 and all(board[chr(j + k + 65)][i - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = []\n\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        moves.append((col, row, color))\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in (1, -1):\n                for _ in range(3):\n                    r, c = moves[-1][1] + d * direction[1], ord(moves[-1][0]) - ord('A') + d * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7 and (c + ord('A')) < ord('H'):\n                        if board[chr(c + ord('A'))][r] == color:\n                            count += 1\n                        else:\n                            break\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n\n    return \"Draw\" if len(moves) == 42 else None\n```"
        ]
    }
}