{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c].count(color) >= 1 for c in line if c in board):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if row < 6 and board[col][row] is not None):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if row < 6 and board[col][row] is not None):\n            return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < 6 and grid[c][r] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (0 <= r < 6)):\n                return color\n                \n    return \"Draw\" if len(pieces_positions) >= 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece.split('_')[1]\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if c in grid and r < 6 and grid[c][r] is not None):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if (all(board[col][row] == board[col][r] for r in range(row, min(row + 4, 6))) or\n                        all(board[col][row] == board[c][row] for c in 'ABCDEFG' if c in board and row < len(board[c]) and board[c][row] == color for r in range(4)) or\n                        all(board[col][row] == board[c][row + d] for d, c in zip(range(4), 'ABCDEFG')) or\n                        all(board[col][row] == board[c][row - d] for d, c in zip(range(4), 'ABCDEFG'))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= (r + col_offset) < len(board[c]) and \\\n                           all(board[c][r] == color for c in 'ABCDEFG' if c in board and r + col_offset in range(len(board[c]))):\n                            return color\n                    # Check diagonal \\\n                    for d in range(4):\n                        if 0 <= r - d < len(board[c]) and \\\n                           0 <= (r - d) < len(board[column]) and \\\n                           (c - d in board) and (r - d in board[c - d]) and board[c - d][r - d] == color:\n                            if all(board[c - i][r - i] == color for i in range(4)):\n                                return color\n                    # Check diagonal /\n                    for d in range(4):\n                        if 0 <= r + d < len(board[c]) and \\\n                           0 <= (r + d) < len(board[c + d]) and \\\n                           (c + d in board) and (r + d in board[c + d]) and board[c + d][r + d] == color:\n                            if all(board[c + i][r + i] == color for i in range(4)):\n                                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"None\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == color and \n                (board[column][i-1:i-4:-1] + board[column][i+1:i+3])[:3].count(color) == 3):\n                return color\n\n    # Check all possible connections\n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row > 2:  # Vertical check\n                if all(board[col][row - k] == board[col][row] for k in range(4)):\n                    return board[col][row]\n            if col <= 'D':  # Horizontal check\n                if all(board[c][row] == board[col][row] for c in 'ABCDEFG' if c in board and row < len(board[c])):\n                    return board[col][row]\n            if col <= 'D' and row <= 2:  # Diagonal down right check\n                if all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4) if chr(ord(col) + k) in board and row + k < 6):\n                    return board[col][row]\n            if col <= 'D' and row >= 3:  # Diagonal up right check\n                if all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4) if chr(ord(col) + k) in board and row - k >= 0):\n                    return board[col][row]\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (\n                        c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4)) or\n                        r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4)) or\n                        c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)) or\n                        c - 3 >= 0 and r + 3 < 6 and all(board[chr(c - i + 65)][r + i] == color for i in range(4))\n                    ):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if (col, row) in line):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if (col, row) in line):\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if board[x][y] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c, r) in grid.items() and grid[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line]\n        if colors.count('Red') == 4:\n            return \"Red\"\n        if colors.count('Yellow') == 4:\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a win after each move\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if check_win(grid, col, row):\n                        return grid[col][row]\n    \n    return \"Draw\"\n\ndef check_win(grid, col, row):\n    color = grid[col][row]\n    # Check vertical\n    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n        return True\n    # Check horizontal\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        if all(grid[chr(c + ord('A'))][row] == color for c in range(c, c + 4)):\n            return True\n    # Check diagonal /\n    for d in range(-3, 1):\n        if 0 <= row + d < 6 and 0 <= ord(col) - ord('A') + d < 7 and \\\n           all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < 7 and row - i >= 0):\n            return True\n    # Check diagonal \\\n    for d in range(-3, 1):\n        if 0 <= row + d < 6 and 0 <= ord(col) - ord('A') - d < 7 and \\\n           all(grid[chr(ord(col) - i)][row - i] == color for i in range(4) if 0 <= ord(col) - i >= 0 and row - i >= 0):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and y >= 0 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y >= 0 and y < 6 and x in board and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-61]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row] == color for row in range(row, row + 4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board['ABCDEFG'[i]][row + i] == color for i in range(4)):\n                    return color\n                # Check diagonal /\n                if column <= 'D' and row >= 3 and all(board['ABCDEFG'[i]][row - i] == color for i in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    \n    if winner:\n        return winner\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row - 4, -1))):\n                            return color\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Yellow', 'Red']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(col + 65)][row] == color:  # chr(col + 65) to get column letter\n                    # Check horizontal\n                    if col <= 3 and all(grid[chr(col + i + 65)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[chr(col + 65)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 3 and row >= 3 and all(grid[chr(col + i + 65)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(grid[chr(col + i + 65)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n        for c in 'ABCDEFG':\n            if board[c].count(color) >= 4:\n                for r in range(6):\n                    if board[c][r] == color:\n                        if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                            return color\n                        if c in 'ABCDEFG':\n                            for i in range(max(0, r - 3), min(6, r + 1)):\n                                if board[c][i] == color:\n                                    if (i >= 3 and all(board[c][i-j] == color for j in range(4))) or \\\n                                       (r <= 2 and all(board[c][i+j] == color for j in range(4))):\n                                        return color\n                for row in range(6):\n                    if board[c][row] == color:\n                        if c in 'ABCDEFG':\n                            for dr in range(-3, 1):\n                                if 0 <= row + dr < 6 and 0 <= (ord(c) - ord('A')) + dr < 7:\n                                    if all(board[chr(ord(c) + j)][row + j] == color for j in range(4)):\n                                        return color\n                                    if all(board[chr(ord(c) - j)][row + j] == color for j in range(4)):\n                                        return color\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for winning conditions\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n\n    # Check vertical\n    if all(len(board[column]) > r and board[column][r] == color for r in range(row, row - 4, -1)):\n        return True\n    \n    # Check horizontal\n    for col_offset in range(-3, 1):\n        if all(0 <= ord(column) - ord('A') + col_offset + i < 7 and\n               len(board[chr(ord(column) + col_offset + i)]) > row and\n               board[chr(ord(column) + col_offset + i)][row] == color for i in range(4)):\n            return True\n    \n    # Check diagonal /\n    for d in range(-3, 1):\n        if all(0 <= ord(column) - ord('A') + d + i < 7 and\n               row - d - i >= 0 and\n               len(board[chr(ord(column) + d + i)]) > row - d - i and\n               board[chr(ord(column) + d + i)][row - d - i] == color for i in range(4)):\n            return True\n\n    # Check diagonal \\\n    for d in range(-3, 1):\n        if all(0 <= ord(column) - ord('A') + d + i < 7 and\n               row + d + i < 6 and\n               len(board[chr(ord(column) + d + i)]) > row + d + i and\n               board[chr(ord(column) + d + i)][row + d + i] == color for i in range(4)):\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for i in range(7):\n            for j in range(6):\n                if board[chr(i + 65)][j] == color:\n                    if i + 3 < 7 and all(board[chr(i + k + 65)][j] == color for k in range(4)):\n                        return True\n                    if j + 3 < 6 and all(board[chr(i + 65)][j + k] == color for k in range(4)):\n                        return True\n                    if i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4)):\n                        return True\n                    if i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    elif check_winner('Red'):\n        return \"Red\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (col in grid and grid[col][row:row + 4] == [color] * 4 or\n                        row <= 2 and all(grid[col][row + k] == color for k in range(4)) or\n                        col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)) or\n                        col >= 'D' and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(7):\n            for j in range(6):\n                if (i <= 3 and all(board[chr(65 + k)][j] == color for k in range(i, i + 4))) or \\\n                   (j <= 2 and all(board[chr(65 + i)][j + k] == color for k in range(4))) or \\\n                   (i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == color for k in range(4))) or \\\n                   (i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if j + 3 < 7 and all(board[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4)):\n                        return color\n                    if i + 3 < 6 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)):\n                        return color\n                    if j + 3 < 7 and i + 3 < 6 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)):\n                        return color\n                    if j + 3 < 7 and i - 3 >= 0 and all(board[chr(j + ord('A'))][i - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (check_win(board, col, row, color)):\n                        return color\n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1)    # Diagonal /\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for d in range(-3, 4):\n        c = chr(ord(col) + d * delta_col)\n        r = row + d * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (any(grid[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        any(grid[c][row] == color for c in 'ABCDEFG' if grid[c][row] == color) or\n                        all(grid[COLUMNS[col_idx + d]][row + d] == color for d, col_idx in enumerate(range(-3, 1)) if 0 <= row + d < 6 and 0 <= col_idx + d < 7) or\n                        all(grid[COLUMNS[col_idx + d]][row - d] == color for d, col_idx in enumerate(range(-3, 1)) if 0 <= row - d < 6 and 0 <= col_idx + d < 7)):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    winner = None\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    if (j + 3 < 7 and all(board[COLUMNS[j + k]][i] == color for k in range(4))) or \\\n                       (i + 3 < 6 and all(board[COLUMNS[j]][i + k] == color for k in range(4))) or \\\n                       (j + 3 < 7 and i + 3 < 6 and all(board[COLUMNS[j + k]][i + k] == color for k in range(4))) or \\\n                       (j + 3 < 7 and i - 3 >= 0 and all(board[COLUMNS[j + k]][i - k] == color for k in range(4))):\n                        winner = color\n                        break\n            if winner:\n                break\n        if winner:\n            break\n    \n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j + 3 < 7 and \n                    board['ABCDEFG'[j]][i] == color and \n                    board['ABCDEFG'[j + 1]][i] == color and \n                    board['ABCDEFG'[j + 2]][i] == color and \n                    board['ABCDEFG'[j + 3]][i] == color):\n                    return color\n                if (i + 3 < 6 and \n                    board['ABCDEFG'[j]][i] == color and \n                    board['ABCDEFG'[j]][i + 1] == color and \n                    board['ABCDEFG'[j]][i + 2] == color and \n                    board['ABCDEFG'[j]][i + 3] == color):\n                    return color\n                if (i + 3 < 6 and j + 3 < 7 and \n                    board['ABCDEFG'[j]][i] == color and \n                    board['ABCDEFG'[j + 1]][i + 1] == color and \n                    board['ABCDEFG'[j + 2]][i + 2] == color and \n                    board['ABCDEFG'[j + 3]][i + 3] == color):\n                    return color\n                if (i - 3 >= 0 and j + 3 < 7 and \n                    board['ABCDEFG'[j]][i] == color and \n                    board['ABCDEFG'[j + 1]][i - 1] == color and \n                    board['ABCDEFG'[j + 2]][i - 2] == color and \n                    board['ABCDEFG'[j + 3]][i - 3] == color):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color, row, col):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color, row, col):\n    def check_direction(dx, dy):\n        count = 0\n        x, y = col, row\n        while x in board and y in range(6) and board[x][y] == color:\n            count += 1\n            x = chr(ord(x) + dx)\n            y += dy\n        return count\n    \n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        if check_direction(dx, dy) + check_direction(-dx, -dy) - 1 >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (\n                        (col <= 3 and all(grid[chr(col + ord('A') + i)][row] == color for i in range(4))) or\n                        (row <= 2 and all(grid[chr(col + ord('A'))][row + i] == color for i in range(4))) or\n                        (col <= 3 and row <= 2 and all(grid[chr(col + ord('A') + i)][row + i] == color for i in range(4))) or\n                        (col <= 3 and row >= 3 and all(grid[chr(col + ord('A') + i)][row - i] == color for i in range(4)))\n                    ):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for step in range(1, 4):\n            c = chr(ord(col) + d_col * step)\n            r = row + d_row * step\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c = chr(ord(col) - d_col * step)\n            r = row - d_row * step\n            if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 'R', 'Yellow': 'Y'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player_turn[color]\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for step in [1, -1]:\n                for i in range(1, 4):\n                    r = row + direction[0] * step * i\n                    c = 'ABCDEFG'.index(col) + direction[1] * step * i\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == player_turn[color]:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in {(c, row) for c in 'ABCDEFG'}):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        moves[color] += 1\n\n        # Check for a win\n        for dr, dc in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            r, c = row, ord(col) - ord('A')\n            for step in range(1, 4):\n                rr, cc = r + dr * step, c + dc * step\n                if 0 <= rr < 6 and 0 <= cc < 7 and board[chr(cc + ord('A'))][rr] == color:\n                    count += 1\n                else:\n                    break\n            \n            for step in range(1, 4):\n                rr, cc = row - dr * step, ord(col) - ord('A') - dc * step\n                if 0 <= rr < 6 and 0 <= cc < 7 and board[chr(cc + ord('A'))][rr] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n\n    return \"Draw\" if moves['Red'] + moves['Yellow'] == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if all(board[col][row] == board[col][row+i] for i in range(4) if row + i < 6):\n                            return color\n                        if col <= 'D' and all(board[col][row] == board[col+i][row] for i in range(4) if i + ord(col) < ord('H')):\n                            return color\n                        if col <= 'D' and row <= 2 and all(board[col][row] == board[col+i][row+i] for i in range(4) if i + ord(col) < ord('H') and row + i < 6):\n                            return color\n                        if col <= 'D' and row >= 3 and all(board[col][row] == board[col+i][row-i] for i in range(4) if i + ord(col) < ord('H') and row - i >= 0):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for win_condition in LINES:\n            if all(board[c][r] == color for c, r in win_condition if r >= 0 and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for win_color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == win_color for c, r in line) for line in LINES):\n                return win_color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        # Check horizontal\n                        if i <= 3 and all(board[chr(i + k + 65)][j] == color for k in range(4)):\n                            return color\n                        # Check vertical\n                        if j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        if len(board[column]) >= 4:\n            # Check for vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check for horizontal and diagonals\n            for i in range(len(board[column]) - 4 + 1):\n                # Horizontal\n                if all(board[c][i] == color for c in 'ABCDEFG' if c in board and len(board[c]) > i):\n                    return color\n                \n                # Diagonal /\n                if (column_index := 'ABCDEFG'.index(column)) >= 3 and i < len(board[column]) - 3:\n                    if all(board['ABCDEFG'[column_index - k]][i + k] == color for k in range(4)):\n                        return color\n                \n                # Diagonal \\\n                if (column_index := 'ABCDEFG'.index(column)) <= 3 and i < len(board[column]) - 3:\n                    if all(board['ABCDEFG'[column_index + k]][i + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if check_winner(board[c], color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(column, color):\n    count = 0\n    for cell in column:\n        if cell == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and board[c][r] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if (board[chr(c + 65)][r] == color and\n                        (c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or\n                        (r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or\n                        (c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or\n                        (c + 3 < 7 and r - 3 >= 0 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for line in LINES:\n            if any(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        if check_win(board, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for sign in (1, -1):\n            for step in range(1, 4):\n                new_col = chr(ord(col) + d_col * step * sign)\n                new_row = row + d_row * step * sign\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            count = sum(1 for pos in line if pos in [(column, r) for column in board for r in range(6) if board[column][r] == color])\n            if count >= 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < len(board[c]) and board[c][r] is not None)):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            # Check for vertical\n            if all(board[column][i] == color for i in range(-4, 0)):\n                return color\n            \n            # Check for horizontal\n            for c in range(max(0, ord(column) - ord('A') - 3), min(7, ord(column) - ord('A') + 1)):\n                if all(board[chr(c + ord('A'))][len(board[chr(c + ord('A'))]) - 1] == color for j in range(4) if len(board[chr(c + j + ord('A'))]) > 0):\n                    return color\n            \n            # Check for diagonal \\\n            for i in range(len(board[column]) - 1, -1, -1):\n                for j in range(4):\n                    if (i - j >= 0 and ord(column) - j >= 0 and\n                            board[column][i] == color and\n                            board[chr(ord(column) - j)][i - j] == color):\n                        return color\n            \n            # Check for diagonal /\n            for i in range(len(board[column]) - 1, -1, -1):\n                for j in range(4):\n                    if (i - j >= 0 and ord(column) + j < 7 and\n                            board[column][i] == color and\n                            board[chr(ord(column) + j)][i - j] == color):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check if current move leads to a win\n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Count the number of pieces in each direction\n    count = {d: 0 for d in ['horizontal', 'vertical', 'diagonal1', 'diagonal2']}\n    \n    # Check horizontal\n    row = len(board[column]) - 1\n    for col in 'ABCDEFG':\n        count['horizontal'] = count['horizontal'] + 1 if len(board[col]) > row and board[col][row] == color else 0\n        if count['horizontal'] >= 4:\n            return True\n    \n    # Check vertical\n    count['vertical'] = len(board[column])\n    if count['vertical'] >= 4:\n        return True\n    \n    # Check diagonal \\\n    for start_col in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        r, c = row, start_col\n        diag_count = 0\n        while r >= 0 and c < 7:\n            if c in board and len(board[chr(c + 65)]) > r and board[chr(c + 65)][r] == color:\n                diag_count += 1\n                if diag_count >= 4:\n                    return True\n            else:\n                diag_count = 0\n            r -= 1\n            c += 1\n\n    # Check diagonal /\n    for start_col in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        r, c = row, start_col\n        diag_count = 0\n        while r >= 0 and c >= 0:\n            if c in board and len(board[chr(c + 65)]) > r and board[chr(c + 65)][r] == color:\n                diag_count += 1\n                if diag_count >= 4:\n                    return True\n            else:\n                diag_count = 0\n            r -= 1\n            c -= 1\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a winner\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6) and (board[c][r] == color)):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    rows = len(board[column]) - 1\n    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(column) + direction[0] * step)\n            new_row = rows + direction[1] * step\n            \n            if new_col in board and new_row in range(6) and (new_row < len(board[new_col]) and board[new_col][new_row] == color):\n                count += 1\n            else:\n                break\n\n        for step in range(1, 4):\n            new_col = chr(ord(column) - direction[0] * step)\n            new_row = rows - direction[1] * step\n            \n            if new_col in board and new_row in range(6) and (new_row < len(board[new_col]) and board[new_col][new_row] == color):\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n\n        for line in LINES:\n            if any((col, row) in line and grid[col][row] == color for col in 'ABCDEFG' for row in range(6)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if (check_direction(board, column, row, color, 1, 0) or  # Horizontal\n                    check_direction(board, column, row, color, 0, 1) or  # Vertical\n                    check_direction(board, column, row, color, 1, 1) or  # Diagonal \\\n                    check_direction(board, column, row, color, 1, -1)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        col = chr(ord(column) + i * delta_col)\n        r = row + i * delta_row\n        if col in board and 0 <= r < 6 and board[col][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        player_moves[color].append((col, row))\n        \n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for col, row in moves:\n        if (check_direction(moves, col, row, 1, 0) or\n            check_direction(moves, col, row, 0, 1) or\n            check_direction(moves, col, row, 1, 1) or\n            check_direction(moves, col, row, 1, -1)):\n            return True\n    return False\n\ndef check_direction(moves, col, row, delta_col, delta_row):\n    count = 1\n    for direction in [1, -1]:\n        for step in range(1, 4):\n            new_col = chr(ord(col) + delta_col * step * direction)\n            new_row = row + delta_row * step\n            if new_col in 'ABCDEFG' and 0 <= new_row < 6 and (new_col, new_row) in moves:\n                count += 1\n            else:\n                break\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    if (j + 3 < 7 and all(board[COLUMNS[j + k]][i] == color for k in range(4))) or \\\n                       (i + 3 < 6 and all(board[COLUMNS[j]][i + k] == color for k in range(4))) or \\\n                       (j + 3 < 7 and i + 3 < 6 and all(board[COLUMNS[j + k]][i + k] == color for k in range(4))) or \\\n                       (j - 3 >= 0 and i + 3 < 6 and all(board[COLUMNS[j - k]][i + k] == color for k in range(4))):\n                        return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and board[x][y] == color)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ('Red', 'Yellow'):\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for direction in [1, -1]:\n                for step in range(1, 4):\n                    x = ord(column) - ord('A') + dx * direction * step\n                    y = row + dy * direction * step\n                    if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == player:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                if check_winner(board, color):\n                    return color\n                break\n                \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n\n        # Check for win condition after each move\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n\n    # Check vertical\n    if row >= 3 and all(board[col][row-i] == color for i in range(4)):\n        return True\n\n    # Check horizontal\n    for c in 'ABCDEFG':\n        if c in board and len(board[c]) > row and all(board[c][row] == color for c in range(max(0, ord(c) - 3), min(7, ord(c) + 1))):\n            return True\n\n    # Check diagonals\n    for dr, dc in [(1, 1), (1, -1)]:\n        for i in range(-3, 1):\n            if all(board.get(chr(ord(col) + dc*k), [])[row + dr*k] == color for k in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x])):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                if check_winner(board, column, row, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for step in range(1, 4):\n            x, y = ord(column) - ord('A') + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = ord(column) - ord('A') - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color, (col, row)):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color, position):\n    col, row = position\n    cols = 'ABCDEFG'\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = cols.index(col) + dcol * step\n            new_row = row + drow * step\n            if 0 <= new_col < 7 and 0 <= new_row < 6 and board[cols[new_col]][new_row] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            new_col = cols.index(col) - dcol * step\n            new_row = row - drow * step\n            if 0 <= new_col < 7 and 0 <= new_row < 6 and board[cols[new_col]][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal lines for a win\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] == color)):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    return (check_direction(board, column, row, color, 1, 0) or  # horizontal\n            check_direction(board, column, row, color, 0, 1) or  # vertical\n            check_direction(board, column, row, color, 1, 1) or  # diagonal \\\n            check_direction(board, column, row, color, 1, -1)    # diagonal /\n           )\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 1\n    for direction in (1, -1):\n        for _ in range(3):\n            new_col = chr(ord(column) + direction * delta_col)\n            new_row = row + direction * delta_row\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n            if count == 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for r in range(6):\n            for c in range(7):\n                if board[COLUMNS[c]][r] == color:\n                    if (c <= 3 and \n                        board[COLUMNS[c+1]][r] == color and \n                        board[COLUMNS[c+2]][r] == color and \n                        board[COLUMNS[c+3]][r] == color):\n                        return color\n                    if (r <= 2 and \n                        board[COLUMNS[c]][r+1] == color and \n                        board[COLUMNS[c]][r+2] == color and \n                        board[COLUMNS[c]][r+3] == color):\n                        return color\n                    if (c <= 3 and r <= 2 and \n                        board[COLUMNS[c+1]][r+1] == color and \n                        board[COLUMNS[c+2]][r+2] == color and \n                        board[COLUMNS[c+3]][r+3] == color):\n                        return color\n                    if (c <= 3 and r >= 3 and \n                        board[COLUMNS[c+1]][r-1] == color and \n                        board[COLUMNS[c+2]][r-2] == color and \n                        board[COLUMNS[c+3]][r-3] == color):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            # Vertical check\n            if board[column][-4:] == [color] * 4:\n                return color\n        \n        for c in range(max(0, ord(column) - ord('A') - 3), min(7, ord(column) - ord('A') + 1)):\n            # Horizontal check\n            if all(c in board and len(board[chr(c + ord('A'))]) > 0 and board[chr(c + ord('A'))][-1] == color for c in range(c, c + 4)):\n                return color\n        \n        # Diagonal checks\n        for start_row in range(6):\n            for start_col in range(7):\n                if (start_col + 3 < 7 and start_row + 3 < 6 and \n                    all(start_col + k < 7 and start_row + k < 6 and\n                        len(board[chr(start_col + ord('A'))]) > start_row + k and\n                        board[chr(start_col + ord('A'))][start_row + k] == color for k in range(4))):\n                    return color\n                if (start_col - 3 >= 0 and start_row + 3 < 6 and \n                    all(start_col - k >= 0 and start_row + k < 6 and\n                        len(board[chr(start_col + ord('A'))]) > start_row + k and\n                        board[chr(start_col + ord('A'))][start_row + k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"None\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1)    # Diagonal /\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 1\n    for direction in [1, -1]:\n        for step in range(1, 4):\n            new_col = chr(ord(col) + step * delta_col * direction)\n            new_row = row + step * delta_row * direction\n            \n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n    \n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                if check_winner(grid, column, row, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(grid, column, row, color):\n    # Check vertical\n    if check_direction(grid, column, row, color, 0, 1):\n        return True\n    # Check horizontal\n    if check_direction(grid, column, row, color, 1, 0):\n        return True\n    # Check diagonal \\\n    if check_direction(grid, column, row, color, 1, 1):\n        return True\n    # Check diagonal /\n    if check_direction(grid, column, row, color, 1, -1):\n        return True\n    return False\n\ndef check_direction(grid, column, row, color, delta_col, delta_row):\n    count = 0\n    for d in range(-3, 1):\n        c = chr(ord(column) + d * delta_col)\n        r = row + d * delta_row\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        \n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) >= 4:\n            for start in range(len(board[col]) - 3, len(board[col])):\n                if board[col][start:start + 4] == [color] * 4:\n                    return color\n    \n    for col in 'ABCDEFG':\n        for row in range(len(board[col]) - 3):\n            if len(board[col]) > row + 3:\n                if all(board[col][row + k] == board[col][row] for k in range(4)):\n                    return board[col][row]\n    \n    for col in range(len(board) - 3):\n        for row in range(6):\n            if all(board[chr(ord('A') + col + k)][row] == board[chr(ord('A') + col)][row] for k in range(4) if row < len(board[chr(ord('A') + col + k)])):\n                return board[chr(ord('A') + col)][row]\n    \n    for col in range(len(board) - 3):\n        for row in range(3, 6):\n            if all(board[chr(ord('A') + col + k)][row - k] == board[chr(ord('A') + col)][row] for k in range(4) if row - k >= 0):\n                return board[chr(ord('A') + col)][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if (check_direction(board, column, row, 1, 0, color) or\n                    check_direction(board, column, row, 0, 1, color) or\n                    check_direction(board, column, row, 1, 1, color) or\n                    check_direction(board, column, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, column, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        col = chr(ord(column) + delta_col * i)\n        r = row + delta_row * i\n        if col in board and 0 <= r < 6 and board[col][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6)):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x]) and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c][row] == color if c in board and len(board[c]) > row else False) for c in 'ABCDEFG'):\n                    return color\n    \n    # Check vertical and diagonal conditions\n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row >= 3:\n                if all(board[col][row - i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n\n            if col in board and row < len(board[col]) - 3:\n                if col in board and all(board[c][row] == board[col][row] for c in 'ABCDEFG' if c in board and len(board[c]) > row):\n                    return board[col][row]\n\n            # Check diagonals\n            for d_col in [-1, 0, 1]:\n                if col in board and 'ABCDEFG'[ord(col) - ord('A') + d_col] in board:\n                    if row < len(board[col]) - 3 and all((board['ABCDEFG'[ord(col) + d_col * i]][row + i] == board[col][row]) for i in range(4) if row + i < len(board['ABCDEFG'[ord(col) + d_col * i]]) and (ord(col) + d_col * i) >= 0):\n                        return board[col][row]\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y >= 0 and y < 6 and board[x][y] == color):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Check vertical\n    if len(board[column]) >= 4 and all(c == color for c in board[column][-4:]):\n        return True\n    \n    # Check horizontal\n    row_index = len(board[column]) - 1\n    for c in 'ABCDEFG':\n        if board[c][-1] == color and row_index < len(board[c]):\n            if sum(1 for k in range(-3, 1) if row_index < len(board[c]) and board[c][row_index] == color) == 4:\n                return True\n    \n    # Check diagonal \\\n    for c in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        for r in range(3, 7):\n            if all(board[chr(c + i)][r - i] == color for i in range(4) if 0 <= c + i < 7 and r - i < 6):\n                return True\n    \n    # Check diagonal /\n    for c in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        for r in range(0, 4):\n            if all(board[chr(c + i)][r + i] == color for i in range(4) if 0 <= c + i < 7 and r + i < 6):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and all(c == colors[0] for c in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if 0 <= ord(col) + i < ord('H')) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i < ord('H') and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < ord('H') and row - i >= 0)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] == color):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col)+i)][row] for i in range(4)):\n                        return color\n                    if row <= 2 and all(board[col][row] == board[col][row+i] for i in range(1, 4)):\n                        return color\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col)+i)][row+i] for i in range(4)):\n                        return color\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col)+i)][row-i] for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(k + 65)][j] == color for k in range(i, i + 4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDE' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDE' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDE' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row - 4, -1))):\n                            return color\n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6)):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x]) and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c][row] == color if c in board and row < len(board[c]) else False) for c in 'ABCDEFG'):\n                    return color\n    \n    # Check vertical and diagonal wins\n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if row >= 3:\n                if all(board[col][row - i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n\n            if col in 'ABCDEFG' and col != 'G':\n                for i in range(3):\n                    if (i < len(board.get(chr(ord(col) + 1), [])) and\n                        i < len(board.get(chr(ord(col) - 1), []))):\n                        if (all(board[chr(ord(col) + j)][row] == board[col][row] \n                                for j in range(-1, 2))):\n                            return board[col][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and r >= 0):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color_to_check for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                    return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if ord(col) + i < ord('H')) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if ord(col) + i < ord('H') and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if ord(col) + i < ord('H') and row - i >= 0)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            colors = {board[col][row] for col, row in line if board[col][row] is not None}\n            if len(colors) == 1 and None not in colors:\n                return colors.pop()\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < len(board[x]))):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for win_positions in LINES:\n        colors = {board[col][row] for col, row in win_positions if board[col][row] is not None}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row >= 0 and row < 6 and col in grid and grid[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col])):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j <= 3 and all(board[chr(k + 65)][i] == color for k in range(j, j + 4))) or \\\n                   (i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4))) or \\\n                   (j <= 3 and i <= 2 and all(board[chr(k + 65)][i + k] == color for k in range(4))) or \\\n                   (j <= 3 and i >= 3 and all(board[chr(k + 65)][i - k] == color for k in range(4))):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for color_to_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_to_check for col, row in line) for line in LINES):\n                return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j + 3 < 7 and all(board[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4)):\n                    return color\n                if i + 3 < 6 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)):\n                    return color\n                if j + 3 < 7 and i + 3 < 6 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4)):\n                    return color\n                if j + 3 < 7 and i - 3 >= 0 and all(board[chr(j + ord('A'))][i - k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (any(grid[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        any(grid[col][r] == color for r in range(max(row - 3, 0), row + 1)) or\n                        any(grid[COLUMNS[i]][row - (i - 3)] == color for i in range(max(0, col_index), min(7, col_index + 4))) or\n                        any(grid[COLUMNS[i]][row + (i - 3)] == color for i in range(max(0, col_index - 3), min(7, col_index + 1)))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] == color:\n                    if (row <= 2 and \n                        all(board[column][row + k] == color for k in range(4))) or \\\n                       (column <= 'D' and \n                        all(board[chr(ord(column) + k)][row] == color for k in range(4))) or \\\n                       (column <= 'D' and row <= 2 and \n                        all(board[chr(ord(column) + k)][row + k] == color for k in range(4))) or \\\n                       (column >= 'D' and row <= 2 and \n                        all(board[chr(ord(column) - k)][row + k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row + k] == color for k in range(4)) or\n                            (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or\n                            (col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or\n                            (col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)))):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[column][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if column <= 'D' and all(board[chr(ord(column)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row <= 2 and column <= 'D' and all(board[chr(ord(column)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row >= 3 and column <= 'D' and all(board[chr(ord(column)+i)][row-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for i in range(len(board[column]) - 3, len(board[column])):\n                if board[column][i] == board[column][i-1] == board[column][i-2] == board[column][i-3]:\n                    return board[column][i]\n        \n        # Check horizontal and diagonal wins\n        for c in range(7):\n            for r in range(6):\n                if (c, r) in {(col, len(board[col]) - 1) for col in board if len(board[col]) > 0}:\n                    color = board[chr(65 + c)][r] if r < len(board[chr(65 + c)]) else None\n                    if color:\n                        # Check horizontal\n                        if c < 4 and all(board[chr(65 + c + i)][r] == color for i in range(4) if r < len(board[chr(65 + c + i)])):\n                            return color\n                        # Check vertical\n                        if r < 3 and all(board[chr(65 + c)][r + i] == color for i in range(4) if r + i < len(board[chr(65 + c)])):\n                            return color\n                        # Check diagonal \\\n                        if c < 4 and r < 3 and all(board[chr(65 + c + i)][r + i] == color for i in range(4) if r + i < len(board[chr(65 + c + i)])):\n                            return color\n                        # Check diagonal /\n                        if c > 2 and r < 3 and all(board[chr(65 + c - i)][r + i] == color for i in range(4) if r + i < len(board[chr(65 + c - i)])):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(col + 65)][row] == color:\n                        # Check horizontal\n                        if col < 4 and all(grid[chr(col + k + 65)][row] == color for k in range(4)):\n                            return color\n                        # Check vertical\n                        if row < 3 and all(grid[chr(col + 65)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal down\n                        if col < 4 and row < 3 and all(grid[chr(col + k + 65)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal up\n                        if col < 4 and row > 2 and all(grid[chr(col + k + 65)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for dr, dc in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                r, c = row, 'ABCDEFG'.index(col)\n                while 0 <= r < 6 and 0 <= c < 7:\n                    r += dr * d\n                    c += dc * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                x, y = ord(col) - ord('A') + dx * step * i, row + dy * step * i\n                if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n                    if j <= 3 and i >= 3 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal right, diagonal left\n            count = 1\n            \n            # Check in the positive direction\n            for step in range(1, 4):\n                r = row + step * direction[1]\n                c = 'ABCDEFG'.index(col) + step * direction[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the negative direction\n            for step in range(1, 4):\n                r = row - step * direction[1]\n                c = 'ABCDEFG'.index(col) - step * direction[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] == color:  # chr(c + 65) converts 0-6 to 'A'-'G'\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(board[chr(c - i + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ('Red', 'Yellow'):\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color_check:\n                        # Check horizontal\n                        if col <= 3 and all(board[chr(col + i + 65)][row] == color_check for i in range(4)):\n                            return color_check\n                        # Check vertical\n                        if row <= 2 and all(board[chr(col + 65)][row + i] == color_check for i in range(4)):\n                            return color_check\n                        # Check diagonal \\\n                        if col <= 3 and row <= 2 and all(board[chr(col + i + 65)][row + i] == color_check for i in range(4)):\n                            return color_check\n                        # Check diagonal /\n                        if col <= 3 and row >= 3 and all(board[chr(col + i + 65)][row - i] == color_check for i in range(4)):\n                            return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                r, c = row, col\n                while count < 4:\n                    r += d * direction[0]\n                    c = chr(ord(col) + d * direction[1])\n                    if c in grid and r in range(6) and grid[c][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if board[chr(65 + col)][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board[chr(65 + col + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[chr(65 + col)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 3 and row >= 3 and all(board[chr(65 + col + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(board[chr(65 + col + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check horizontally\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                        return color\n                    # Check vertically\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col)+k]][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col)-k]][row+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(ord('A') + col)][row] == color:\n                        # Check vertical\n                        if row + 3 < 6 and all(board[chr(ord('A') + col)][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col + 3 < 7 and all(board[chr(ord('A') + col + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col + 3 < 7 and row + 3 < 6 and all(board[chr(ord('A') + col + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col + 3 < 7 and row - 3 >= 0 and all(board[chr(ord('A') + col + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for direction in LINES:\n            if (column, row) in direction:\n                if all(grid[c][r] == color for c, r in direction):\n                    return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        if len(board[col]) > 3:  # Check for win condition\n            if check_win(board[col], color):\n                return color\n        for row in range(6):\n            if len(board[col]) >= 4 and board[col][row] == color:\n                if check_vertical(board, col, row, color) or check_horizontal(board, color) or check_diagonal(board, color):\n                    return color\n    return \"Draw\"\n\ndef check_win(col, color):\n    return col[-4:].count(color) == 4\n\ndef check_vertical(board, col, row, color):\n    return all(board[col][r] == color for r in range(row, row - 4, -1))\n\ndef check_horizontal(board, color):\n    for r in range(6):\n        count = 0\n        for c in 'ABCDEFG':\n            if board[c] and board[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n    return False\n\ndef check_diagonal(board, color):\n    for c in range(4):\n        for r in range(3, 6):\n            if all((board[chr(c + i + 65)][r - i] == color) for i in range(4) if c + i < 7):\n                return True\n            if all((board[chr(c + i + 65)][r + i] == color) for i in range(4) if c + i < 7 and r + i < 6):\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        for r in range(len(board[col])):\n            if len(board[col]) >= 4:\n                for direction in [0, 1, 2, 3]:  # vertical, horizontal, diagonal right, diagonal left\n                    count = 1\n                    for d in [1, -1]:\n                        for k in range(1, 4):\n                            if direction == 0 and (r + d * k) < 6 and (len(board[col]) > r + d * k) and board[col][r + d * k] == color:\n                                count += 1\n                            elif direction == 1:\n                                if (ord(col) - 65 + d * k) in range(7) and (len(board[chr(ord(col) - d * k)]) > r) and board[chr(ord(col) - d * k)][r] == color:\n                                    count += 1\n                            elif direction == 2 and (r + d * k) < 6 and (ord(col) - 65 + d * k) in range(7) and board[chr(ord(col) + d * k)][r + d * k] == color:\n                                count += 1\n                            elif direction == 3 and (r - d * k) >= 0 and (ord(col) - 65 + d * k) in range(7) and board[chr(ord(col) + d * k)][r - d * k] == color:\n                                count += 1\n\n                    if count >= 4:\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for line in LINES:\n            if any(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        if check_win(board, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for sign in (1, -1):\n            for step in range(1, 4):\n                new_col = chr(ord(col) + d_col * step * sign)\n                new_row = row + d_row * step * sign\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            count = sum(1 for pos in line if board[pos[0]][pos[1]] == color)\n            if count == 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < len(board[c]) and board[c][r] is not None)):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in [col, chr(ord(col) + 1), chr(ord(col) + 2), chr(ord(col) + 3)]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal down-right\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for step in range(1, 4):\n                    new_row = row + d * step * direction[1]\n                    new_col = 'ABCDEFG'['ABCDEFG'.index(column) + d * step * direction[0]]\n                    if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c].count(color) > 0 and (c, r) in line for c, r in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (\n                            (col, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col, row + 1) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col, row + 2) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col, row + 3) in {(c, r) for c in 'ABCDEFG' for r in range(6)}\n                        ) or (\n                            (col, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 1, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 2, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 3, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)}\n                        ) or (\n                            (col, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 1, row + 1) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 2, row + 2) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 3, row + 3) in {(c, r) for c in 'ABCDEFG' for r in range(6)}\n                        ) or (\n                            (col, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col - 1, row + 1) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col - 2, row + 2) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col - 3, row + 3) in {(c, r) for c in 'ABCDEFG' for r in range(6)}\n                        ):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a winner\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < len(board[c])) and (board[c][r] is not None)):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    rows = len(board[column]) - 1\n    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(column) + direction[0] * step)\n            new_row = rows + direction[1] * step\n            \n            if new_col in board and new_row in range(6) and (len(board[new_col]) > new_row) and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        for step in range(1, 4):\n            new_col = chr(ord(column) - direction[0] * step)\n            new_row = rows - direction[1] * step\n            \n            if new_col in board and new_row in range(6) and (len(board[new_col]) > new_row) and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n\n        for r in range(6):\n            for c in range(7):\n                if grid['ABCDEFG'[c]][r] == color:\n                    # Check horizontal\n                    if c <= 3 and all(grid['ABCDEFG'[c + i]][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(grid['ABCDEFG'[c]][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid['ABCDEFG'[c + i]][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(grid['ABCDEFG'[c - i]][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n\n        # Check for winning conditions\n        if len(board[col]) >= 4:\n            count = 0\n            for piece in reversed(board[col]):\n                if piece == color:\n                    count += 1\n                    if count == 4:\n                        return color\n                else:\n                    break\n\n        # Check horizontal\n        for c in 'ABCDEFG':\n            if board[c]:\n                count = 0\n                for piece in board[c]:\n                    if piece == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n        # Check diagonal (down-right)\n        for col_index in range(len(board)-3):\n            for row_index in range(6):\n                if (col := list(board.keys())[col_index]) in board and (row := row_index) in board[col]:\n                    if (color in [board[c][row_index + (c-col_index)] for c in range(col_index, col_index + 4)]):\n                        return color\n\n        # Check diagonal (down-left)\n        for col_index in range(3, len(board)):\n            for row_index in range(6):\n                if (col := list(board.keys())[col_index]) in board and (row := row_index) in board[col]:\n                    if (color in [board[c][row_index + (col_index-c)] for c in range(col_index, col_index - 4, -1)]):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for win condition\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [1, -1]:\n                r, c = row, ord(col) - ord('A')\n                while 0 <= r < 6 and 0 <= c < 7:\n                    if board[chr(c + ord('A'))][r] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        break\n                    r += direction[0] * d\n                    c += direction[1] * d\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    return (check_direction(board, column, row, color, 1, 0) or  # horizontal\n            check_direction(board, column, row, color, 0, 1) or  # vertical\n            check_direction(board, column, row, color, 1, 1) or  # diagonal \\\n            check_direction(board, column, row, color, 1, -1)    # diagonal /\n           )\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 0\n    for d in range(-3, 4):\n        col = chr(ord(column) + d * delta_col)\n        r = row + d * delta_row\n        if 0 <= r < 6 and col in board and board[col][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if all(board[col][row + i] == color for i in range(4) if row + i < 6) or \\\n                           all(board[c][row] == color for c in 'ABCDEFG' if board[c][row] == color) or \\\n                           all(board['ABCDEFG'[col_idx + i]][row + i] == color for i in range(4) if col_idx + i < 7) or \\\n                           all(board['ABCDEFG'[col_idx + i]][row - i] == color for i in range(4) if row - i >= 0):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in range(6) if board[column][r] is None), None)\n        if row is not None:\n            board[column][row] = color\n            \n            # Check for victory\n            if check_victory(board, color, column, row):\n                return color\n\n    return \"Draw\"\n\ndef check_victory(board, color, column, row):\n    # Convert to coordinates\n    c_index = 'ABCDEFG'.index(column)\n    \n    # Check all directions for a win\n    directions = [\n        [(0, 1), (0, -1)], # vertical\n        [(1, 0), (-1, 0)], # horizontal\n        [(1, 1), (-1, -1)], # diagonal \\\n        [(1, -1), (-1, 1)]  # diagonal /\n    ]\n    \n    for direction in directions:\n        count = 1\n        for dir in direction:\n            for step in range(1, 4):\n                r = row + dir[0] * step\n                c = c_index + dir[1] * step\n                if 0 <= r < 6 and 0 <= c < 7 and (0 <= c < 7) and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n        \n        for line in LINES:\n            if any(p in player_moves[color] for p in line):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x, y) in board.items() and y in range(6) and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1)    # Diagonal /\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 1\n    for direction in (1, -1):\n        for step in range(1, 4):\n            new_col = chr(ord(col) + delta_col * step * direction)\n            new_row = row + delta_row * step * direction\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                if check_winner(grid, column, row, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(grid, column, row, color):\n    # Check vertical\n    if check_direction(grid, column, row, color, 0, 1): return True\n    # Check horizontal\n    if check_direction(grid, column, row, color, 1, 0): return True\n    # Check diagonal \\\n    if check_direction(grid, column, row, color, 1, 1): return True\n    # Check diagonal /\n    if check_direction(grid, column, row, color, 1, -1): return True\n    return False\n\ndef check_direction(grid, column, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(-3, 4):\n        col = chr(ord(column) + i * delta_col)\n        r = row + i * delta_row\n        if col in grid and 0 <= r < 6 and grid[col][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        \n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if len(board[col]) >= 4:\n            for start in range(len(board[col]) - 3, len(board[col])):\n                if board[col][start] == color and all(board[col][start] == board[col][start - i] for i in range(4)):\n                    return color\n                \n    for c in 'ABCDEFG':\n        for r in range(6):\n            if r + 3 < len(board[c]):\n                for dr in range(4):\n                    if board[c][r] == board[c][r + dr] and all(board[c][r] == board[c][r + dr] for dr in range(4)):\n                        return board[c][r]\n                    \n    for c in range(len(board)):\n        for r in range(6):\n            if c + 3 < len(board):\n                for dc in range(4):\n                    if board[c][r] == board[c + dc][r] and all(board[c][r] == board[c + dc][r] for dc in range(4)):\n                        return board[c][r]\n                    \n            if c + 3 < len(board) and r - 3 >= 0:\n                for d in range(4):\n                    if board[c][r] == board[c + d][r - d] and all(board[c][r] == board[c + d][r - d] for d in range(4)):\n                        return board[c][r]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if (check_direction(board, column, row, 1, 0, color) or\n                    check_direction(board, column, row, 0, 1, color) or\n                    check_direction(board, column, row, 1, 1, color) or\n                    check_direction(board, column, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, column, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        col = chr(ord(column) + delta_col * i)\n        r = row + delta_row * i\n        if col in board and 0 <= r < 6 and board[col][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal for a win\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or  # Horizontal\n                    check_direction(board, color, col, row, 0, 1) or  # Vertical\n                    check_direction(board, color, col, row, 1, 1) or  # Diagonal \\\n                    check_direction(board, color, col, row, 1, -1)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for _ in range(4):\n        if row < 0 or row >= 6 or col not in board or board[col][row] != color:\n            return False\n        count += 1\n        col = chr(ord(col) + d_col)\n        row += d_row\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color, row, col):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color, row, col):\n    col_idx = 'ABCDEFG'.index(col)\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        for d in [1, -1]:\n            r, c = row, col_idx\n            while True:\n                r += dr * d\n                c += dc * d\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6 and r >= 0) and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    color = grid[c][r]\n                    # Check horizontal\n                    if c <= 'D' and all(grid[c][r] == color for c in 'ABCDEFG'[ord(c) - 65:ord(c) - 61]):\n                        winner = color\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r] == color for r in range(r, r + 4)):\n                        winner = color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(grid[chr(ord(c) + k)][r + k] == color for k in range(4)):\n                        winner = color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(grid[chr(ord(c) + k)][r - k] == color for k in range(4)):\n                        winner = color\n\n        if winner:\n            return winner\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in board:\n            for r in range(6):\n                if board[c][r] == color:\n                    if check_winner(board, c, r, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check vertical\n    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n        return True\n    # Check horizontal\n    for start in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n        if all(board[chr(start + ord('A') + i)][row] == color for i in range(4)):\n            return True\n    # Check diagonal \\\n    for start in range(-3, 1):\n        if (0 <= row + start < 6 and\n            0 <= ord(col) - ord('A') + start < 7 and\n            all(board[chr(ord(col) - start)][row + start + i] == color for i in range(4))):\n            return True\n    # Check diagonal /\n    for start in range(-3, 1):\n        if (0 <= row - start < 6 and\n            0 <= ord(col) - ord('A') + start < 7 and\n            all(board[chr(ord(col) + start)][row - start + i] == color for i in range(4))):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        if check_win(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_win(board, column, row, color):\n    # Check all four directions\n    return (check_direction(board, column, row, color, 1, 0) or  # Horizontal\n            check_direction(board, column, row, color, 0, 1) or  # Vertical\n            check_direction(board, column, row, color, 1, 1) or  # Diagonal /\n            check_direction(board, column, row, color, 1, -1)    # Diagonal \\\n           )\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 1\n    for direction in [1, -1]:\n        for step in range(1, 4):\n            col = chr(ord(column) + step * delta_col * direction)\n            if col in board and 0 <= row + step * delta_row * direction < 6:\n                if board[col][row + step * delta_row * direction] == color:\n                    count += 1\n                else:\n                    break\n            else:\n                break\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    # Check vertical\n    if board[col][-4:].count(color) == 4:\n        return True\n    \n    # Check horizontal\n    row = len(board[col]) - 1\n    for c in 'ABCDEFG':\n        if len(board[c]) > row and board[c][row] == color:\n            count = 1\n            for dc in [-1, 1]:\n                nc = ord(c) + dc\n                while 0 <= nc < len('ABCDEFG'):\n                    if len(board[chr(nc)]) > row and board[chr(nc)][row] == color:\n                        count += 1\n                        if count == 4:\n                            return True\n                    else:\n                        break\n                    nc += dc\n    \n    # Check diagonal /\n    for dr, dc in [(1, -1), (1, 1)]:\n        count = 1\n        for d in [-1, 1]:\n            r, c = row, ord(col) + d * dc\n            while 0 <= c < len('ABCDEFG') and r >= 0 and len(board[chr(c)]) > r and board[chr(c)][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n                r -= dr\n                c += d\n    return False\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is not None:\n                    color = board[column][row]\n                    # Check horizontal\n                    if all(board[column][row] == board[column][row + i] for i in range(4) if row + i < 6):\n                        return color\n                    # Check vertical\n                    if all(board[column][row] == board[column][row + i] for i in range(4) if row + i < 6):\n                        return color\n                    # Check diagonal (bottom-left to top-right)\n                    if all(column_idx in board and row_idx < 6 and board[column_idx][row_idx] == color\n                           for column_idx, row_idx in zip(\n                               'ABCDEFG'[COLUMNS.index(column):COLUMNS.index(column) + 4],\n                               range(row, row + 4)\n                           )):\n                        return color\n                    # Check diagonal (top-left to bottom-right)\n                    if all(column_idx in board and row_idx >= 0 and board[column_idx][row_idx] == color\n                           for column_idx, row_idx in zip(\n                               'ABCDEFG'[COLUMNS.index(column):COLUMNS.index(column) + 4],\n                               range(row, row - 4, -1)\n                           )):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner is None:\n        return \"Draw\"\n    return winner\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if ord(col) + i < ord('A') + 7) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if ord(col) + i < ord('A') + 7 and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if ord(col) + i < ord('A') + 7 and row - i >= 0)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i + 3 < 7 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j + 3 < 6 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[1]\n                    c = board.keys().index(col) + d * i * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (\n                        all(grid[col][row] == grid[col][r] for r in range(row, min(row + 4, 6))) or\n                        all(grid[c][row] == color for c in 'ABCDEFG' if c in grid and (grid[c][row] == color)) and\n                        sum(1 for r in range(max(0, row - 3), min(6, row + 1)) if grid[col][r] == color) >= 4 or\n                        all(grid[c][r] == color for c in 'ABCDEFG' if c in grid and (grid[c][row - (row - r)] == color)) for r in range(4) if row - (row - r) >= 0\n                    ):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for win_positions in LINES:\n        colors = {color: 0 for color in ['Red', 'Yellow']}\n        for position in win_positions:\n            col, row = position\n            if board[col][row] is not None:\n                colors[board[col][row]] += 1\n        if colors['Red'] == 4:\n            return 'Red'\n        if colors['Yellow'] == 4:\n            return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal right, diagonal left\n            count = 1\n            \n            # Check in the positive direction\n            for i in range(1, 4):\n                r = row + i * direction[0]\n                c = 'ABCDEFG'.index(column) + i * direction[1]\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the negative direction\n            for i in range(1, 4):\n                r = row - i * direction[0]\n                c = 'ABCDEFG'.index(column) - i * direction[1]\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCD'):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[col][row] == color for k in range(4) if board[chr(ord(col) + k)][row - k] == color):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[col][row] == color for k in range(4) if board[chr(ord(col) + k)][row + k] == color):\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for positions in LINES:\n            colors = [board[col][row] for col, row in positions if board[col][row] is not None]\n            if len(colors) == 4 and all(c == colors[0] for c in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if 0 <= ord(col) + i < ord('G') + 1) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i < ord('G') + 1 and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < ord('G') + 1 and row - i >= 0)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        if all(0 <= row + dy * k < 6 and 0 <= ord(col) - ord('A') + dx * k < 7 and board[chr(ord('A') + ord(col) - ord('A') + dx * k)][row + dy * k] == color for k in range(4)):\n                            return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = {board[col][row] for col, row in line if board[col][row] is not None}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            if (column, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col_index := 'ABCDEFG'.index(col) <= 3:\n                        if all(board['ABCDEFG'[col_index + k]][row] == color for k in range(4)):\n                            return color\n                    # Check diagonal \\\n                    if col_index <= 3 and row <= 2:\n                        if all(board['ABCDEFG'[col_index + k]][row + k] == color for k in range(4)):\n                            return color\n                    # Check diagonal /\n                    if col_index >= 3 and row <= 2:\n                        if all(board['ABCDEFG'[col_index - k]][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all((col, row) in [(c, r) for c in grid for r in range(6) if grid[c][r] == color] for col, row in line):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (0 <= r < 6)):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col_start in 'ABCDEFG':\n            for row_start in range(6):\n                if board[col_start][row_start] == color:\n                    # Check for winning conditions\n                    if ((row_start <= 2 and\n                         all(board[col_start][row_start + i] == color for i in range(4))) or\n                        (col_start <= 'D' and\n                         all(board[chr(ord(col_start) + i)][row_start] == color for i in range(4))) or\n                        (col_start <= 'D' and row_start <= 2 and\n                         all(board[chr(ord(col_start) + i)][row_start + i] == color for i in range(4))) or\n                        (col_start <= 'D' and row_start >= 3 and\n                         all(board[chr(ord(col_start) + i)][row_start - i] == color for i in range(4)))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(65 + col)][row] == color:\n                        if (col <= 3 and all(board[chr(65 + col + k)][row] == color for k in range(4))) or \\\n                           (row <= 2 and all(board[chr(65 + col)][row + k] == color for k in range(4))) or \\\n                           (col <= 3 and row <= 2 and all(board[chr(65 + col + k)][row + k] == color for k in range(4))) or \\\n                           (col <= 3 and row >= 3 and all(board[chr(65 + col + k)][row - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for player in ['Red', 'Yellow']:\n            if any(all(board[col][row] == player for col, row in line) for line in LINES):\n                return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[column][row+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if column <= 'D' and all(board[chr(ord(column)+k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row <= 2 and column <= 'D' and all(board[chr(ord(column)+k)][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row >= 3 and column <= 'D' and all(board[chr(ord(column)+k)][row-k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    def count_direction(dx, dy):\n        count = 0\n        x, y = col_index[col], row\n        while 0 <= x < 7 and 0 <= y < 6 and board[COLUMNS[x]][y] == color:\n            count += 1\n            x += dx\n            y += dy\n        return count\n\n    col_index = {c: i for i, c in enumerate('ABCDEFG')}\n    COLUMNS = 'ABCDEFG'\n    \n    total = 1  # Count the piece just placed\n    total += count_direction(1, 0)  # Horizontal\n    total += count_direction(0, 1)  # Vertical\n    total += count_direction(1, 1)  # Diagonal /\n    total += count_direction(1, -1)  # Diagonal \\\n    \n    return total >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(col + 65)][row] == color:\n                        # Check horizontal\n                        if col < 4 and all(grid[chr(col + k + 65)][row] == color for k in range(4)):\n                            return color\n                        # Check vertical\n                        if row < 3 and all(grid[chr(col + 65)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col < 4 and row >= 3 and all(grid[chr(col + k + 65)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col < 4 and row < 3 and all(grid[chr(col + k + 65)][row + k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for dr, dc in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                r, c = row, 'ABCDEFG'.index(col)\n                while 0 <= r < 6 and 0 <= c < 7:\n                    r += dr * d\n                    c += dc * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                x, y = ord(col) - ord('A') + dx * i * step, row + dy * i * step\n                if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (col, row) in [(c, r) for c in 'ABCDEFG' for r in range(6) if board[c][r] == color]:\n                            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for d in [(1, 0), (0, 1), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal\n            count = 1\n            \n            # Check in one direction\n            for step in range(1, 4):\n                r, c = row + step * d[1], ord(col) - 65 + step * d[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + 65)][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the opposite direction\n            for step in range(1, 4):\n                r, c = row - step * d[1], ord(col) - 65 - step * d[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + 65)][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal right, diagonal left\n            count = 1\n            \n            # Check in the positive direction\n            for step in range(1, 4):\n                r = row + step * direction[1]\n                c = 'ABCDEFG'.index(col) + step * direction[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the negative direction\n            for step in range(1, 4):\n                r = row - step * direction[1]\n                c = 'ABCDEFG'.index(col) - step * direction[0]\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            # Check for vertical connect four\n            if board[col][-4:] == [color] * 4:\n                return color\n            \n            # Check for horizontal connect four\n            for i in range(max(0, len(board[col]) - 4), len(board[col])):\n                if i < len(board[col]) - 3:\n                    if (board[col][i:i+4] == [color] * 4):\n                        return color\n            \n            # Check for diagonal (bottom-left to top-right)\n            for i in range(len(board[col])):\n                if i < len(board[col]) - 3:\n                    if (i < len(board[col]) - 3 and\n                        board[col][i] == color and\n                        (i + 1 < len(board[col]) and board[col][i + 1] == color) and\n                        (i + 2 < len(board[col]) and board[col][i + 2] == color) and\n                        (i + 3 < len(board[col]) and board[col][i + 3] == color)):\n                        return color\n            \n            # Check for diagonal (top-left to bottom-right)\n            for i in range(len(board[col])):\n                if i >= 3:\n                    if (board[col][i] == color and\n                        (i - 1 >= 0 and board[col][i - 1] == color) and\n                        (i - 2 >= 0 and board[col][i - 2] == color) and\n                        (i - 3 >= 0 and board[col][i - 3] == color)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Game not finished\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if row >= 3 and check_vertical(grid, col, row, color):\n            return color\n        if check_horizontal(grid, color) or check_diagonal(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_vertical(grid, col, row, color):\n    return all(grid[col][r] == color for r in range(row, row - 4, -1))\n\ndef check_horizontal(grid, color):\n    for r in range(6):\n        count = 0\n        for col in 'ABCDEFG':\n            if grid[col][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n    return False\n\ndef check_diagonal(grid, color):\n    for col in range(4):\n        for row in range(6):\n            if row <= 2:\n                if all(grid[chr(ord('A') + col + i)][row + i] == color for i in range(4)):\n                    return True\n            if row >= 3:\n                if all(grid[chr(ord('A') + col + i)][row - i] == color for i in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            for i in range(len(board[col]) - 3, len(board[col])):\n                if all(board[col][i] == board[col][i - j] for j in range(4)):\n                    return color\n                    \n        for row in range(6):\n            if len(board[col]) > row:\n                if col in 'ABCDEFG' and row < len(board[col]):\n                    if any(all(board[c][row] == color for c in 'ABCDEFG' if row < len(board[c]) and c == col) for j in range(1, 4)):\n                        return color\n            \n        for i in range(len(board[col]) - 3):\n            if col in 'ABCDEFG' and row < len(board[col]) and all(board[col][i + j] == color for j in range(4)):\n                return color\n        \n        for i in range(len(board[col]) - 3):\n            if col in 'ABCDEFG' and row < len(board[col]) and all(board[col][i + j] == color for j in range(4)):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Yellow', 'Red']:\n        for i in range(6):\n            for j in range(7):\n                if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return color\n                if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return color\n                if j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return color\n                if j <= 3 and i >= 3 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n        \n        for color_check in ['Red', 'Yellow']:\n            if check_winner(moves[color_check], color_check):\n                return color_check\n    \n    return \"Draw\"\n\ndef check_winner(moves, color):\n    positions = {(column, row) for column, row in moves}\n    \n    for position in positions:\n        x, y = position\n        if all((x, y + i) in positions for i in range(4)) or \\\n           all((chr(ord(x) + i), y) in positions for i in range(4)) or \\\n           all((chr(ord(x) + i), y + i) in positions for i in range(4)) or \\\n           all((chr(ord(x) + i), y - i) in positions for i in range(4)):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for delta in [1, -1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * delta * step\n                    c = 'ABCDEFG'.index(col) + direction[1] * delta * step\n                    \n                    if 0 <= r < 6 and 0 <= c < 7 and (0 <= c < 7 and board['ABCDEFG'[c]][r] == color):\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n                        if all(board[chr(65 + c + k)][row] == color for k in range(4)):\n                            return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n        \n        if check_winner(player_moves[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for (col, row) in moves:\n        if check_direction(moves, col, row, 1, 0) or \\\n           check_direction(moves, col, row, 0, 1) or \\\n           check_direction(moves, col, row, 1, 1) or \\\n           check_direction(moves, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, col, row, delta_col, delta_row):\n    count = 1\n    for direction in (1, -1):\n        for _ in range(3):\n            new_col = chr(ord(col) + delta_col * direction)\n            new_row = row + delta_row * direction\n            if (new_col, new_row) in moves:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                break\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] == color:\n                    if (any(all(grid[c][r] == grid[c][r+i] for i in range(4) if r+i < 6) for c in 'ABCDEFG') or\n                            any(all(grid[c][r] == grid[c+i][r] for i in range(4) if c+i in 'ABCDEFG') for r in range(6)) or\n                            any(all(grid[c][r] == grid[c+i][r+i] for i in range(4) if c+i in 'ABCDEFG' and r+i < 6) for c in 'ABCDEFG') or\n                            any(all(grid[c][r] == grid[c+i][r-i] for i in range(4) if c+i in 'ABCDEFG' and r-i >= 0) for c in 'ABCDEFG')):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for victory\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n\n        for r in range(6):\n            for c in range(7):\n                if grid[COLUMNS[c]][r] == color:\n                    if c <= 3 and all(grid[COLUMNS[c + i]][r] == color for i in range(4)):\n                        return color\n                    if r <= 2 and all(grid[COLUMNS[c]][r + i] == color for i in range(4)):\n                        return color\n                    if c <= 3 and r <= 2 and all(grid[COLUMNS[c + i]][r + i] == color for i in range(4)):\n                        return color\n                    if c <= 3 and r >= 3 and all(grid[COLUMNS[c + i]][r - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    color = board[c][r]\n                    # Check horizontal\n                    if c <= 'D' and all(board[c][r] == board[chr(ord(c) + i)][r] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[c][r] == board[c][r + i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[c][r] == board[chr(ord(c) + i)][r + i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c >= 'D' and r <= 2 and all(board[c][r] == board[chr(ord(c) - i)][r + i] for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[(ord(col) - 65):(ord(col) - 61)]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for col in [col]*4):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for direction in [1, -1]:\n                x, y = 0, 0\n                while True:\n                    x += direction * dx\n                    y += direction * dy\n                    if (0 <= row + y < 6) and (0 <= ord(column) - ord('A') + x < 7):\n                        if board[chr(ord('A') + (ord(column) - ord('A') + x))][row + y] == color:\n                            count += 1\n                        else:\n                            break\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 3:  # Check if there are at least 4 pieces\n            if check_winner(board, column, color):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Check the last inserted position\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if sum(1 for r in board[column] if r == color) >= 4:\n        return True\n    \n    # Check horizontal\n    for col in 'ABCDEFG':\n        if sum(1 for r in board[col] if r == color) >= 4:\n            return True\n            \n    # Check diagonal (ascending)\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if all(board[chr(ord('A') + c + i)].count(color) >= 1 for i in range(4)):\n            return True\n    \n    # Check diagonal (descending)\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if all(board[chr(ord('A') + c + i)].count(color) >= 1 for i in range(4) if row - i >= 0):\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for line in LINES:\n            if any(board[x][y] != color for x, y in line):\n                continue\n            if all(board[x][y] == color for x, y in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            if any(all(board[column][row] == color for column, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    current_turn = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        current_turn[color] += 1\n\n        if current_turn[color] >= 4 and check_winner(board, column, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for d in [1, -1]:\n            x, y = ord(column) - ord('A') + d * dx, row + d * dy\n            while 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n                x += d * dx\n                y += d * dy\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, color, 1, 0) or\n                    check_direction(board, col, row, color, 0, 1) or\n                    check_direction(board, col, row, color, 1, 1) or\n                    check_direction(board, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][j] == color for j in range(row, row + 4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[COLUMNS[i]][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[COLUMNS[i]][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for direction in [1, -1]:\n                step = 1\n                while True:\n                    x = ord(column) - ord('A') + step * dx * direction\n                    y = row + step * dy * direction\n                    if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                        count += 1\n                        step += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col = piece[0]\n        color = piece[2:]\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for r in range(6):\n            if grid[col][r] == color:\n                for line in LINES:\n                    if (col, r) in line:\n                        if all(grid[c][r] == color for c, r in line):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c].count(color) > 0 and (c, r) in line for c, r in line):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) >= 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (\n                            (col, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col, row + 1) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col, row + 2) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col, row + 3) in {(c, r) for c in 'ABCDEFG' for r in range(6)}\n                        ) or (\n                            (col, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 1, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 2, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 3, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)}\n                        ) or (\n                            (col, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 1, row + 1) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 2, row + 2) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col + 3, row + 3) in {(c, r) for c in 'ABCDEFG' for r in range(6)}\n                        ) or (\n                            (col, row) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col - 1, row + 1) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col - 2, row + 2) in {(c, r) for c in 'ABCDEFG' for r in range(6)} and\n                            (col - 3, row + 3) in {(c, r) for c in 'ABCDEFG' for r in range(6)}\n                        ):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a winner\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6) and (board[c][r] == color)):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    rows = len(board[column]) - 1\n    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(column) + direction[0] * step)\n            new_row = rows + direction[1] * step\n            \n            if new_col in board and new_row in range(6) and (len(board[new_col]) > new_row) and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        for step in range(1, 4):\n            new_col = chr(ord(column) - direction[0] * step)\n            new_row = rows - direction[1] * step\n            \n            if new_col in board and new_row in range(6) and (len(board[new_col]) > new_row) and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n\n        for line in LINES:\n            if any((col, row) in line and grid[col][row] == color for col, row in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n\n        # Check for winning conditions\n        if len(board[col]) >= 4:\n            count = 0\n            # Check vertical\n            for row in range(len(board[col])-4, len(board[col])):\n                if board[col][row] == color:\n                    count += 1\n            if count == 4:\n                return color\n\n        # Check horizontal and diagonal\n        for c in 'ABCDEFG':\n            if len(board[c]) >= 4:\n                count = 0\n                for row in range(len(board[c])):\n                    if board[c][row] == color:\n                        count += 1\n                    else:\n                        count = 0\n                    if count == 4:\n                        return color\n\n        for c in range(4):\n            for r in range(6):\n                if (c < len(board['A']) and r < len(board['A'])) and (c < len(board['B']) and r < len(board['B'])) and (c < len(board['C']) and r < len(board['C'])) and (c < len(board['D']) and r < len(board['D'])):\n                    if (board['A'][r] == color and board['B'][r] == color and board['C'][r] == color and board['D'][r] == color) or \\\n                       (board['A'][r] == color and board['B'][r+1] == color and board['C'][r+2] == color and board['D'][r+3] == color) or \\\n                       (board['A'][r+3] == color and board['B'][r+2] == color and board['C'][r+1] == color and board['D'][r] == color):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check vertical, horizontal, and diagonal connections\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                # Check vertical\n                if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                    return True\n                # Check horizontal\n                for offset in range(-3, 1):\n                    if all(board[chr(ord(col) + offset + i)][row] == color for i in range(4) if 0 <= ord(col) + offset + i < 7):\n                        return True\n                # Check diagonal /\n                if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return True\n                # Check diagonal \\\n                if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for direction in [1, 0], [0, 1], [1, 1], [1, -1]:\n            count = 1\n            for step in [1, -1]:\n                for i in range(1, 4):\n                    r = row + direction[0] * step * i\n                    c = board[col].index(color) + direction[1] * step * i\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line if (c in board) and (r < len(board[c]))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [] for c in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board[column][-4:], color):\n                return color\n        \n        for c in 'ABCDEFG':\n            if c != column and len(board[c]) > 0:\n                if check_winner(board[c][-4:], color):\n                    return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(last_four, color):\n    return last_four == [color] * 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if any(board[c][r] == color for c, r in line):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        player_moves[color].append((col, row))\n        \n        if check_winner(player_moves[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for c, r in moves:\n        if check_direction(moves, c, r, 1, 0) or \\\n           check_direction(moves, c, r, 0, 1) or \\\n           check_direction(moves, c, r, 1, 1) or \\\n           check_direction(moves, c, r, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, col, row, dc, dr):\n    count = 0\n    for i in range(-3, 4):\n        if (chr(ord(col) + i * dc), row + i * dr) in moves:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for r in range(6):\n            for c in range(7):\n                if board[COLUMNS[c]][r] == color:\n                    if (c <= 3 and all(board[COLUMNS[c + i]][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[COLUMNS[c]][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[COLUMNS[c + i]][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[COLUMNS[c + i]][r - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) > 0:\n                    count = 0\n                    for r in board[c]:\n                        if r == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            count = 0\n            \n            # Check diagonal (bottom-left to top-right)\n            for c in range(4):\n                for r in range(3, 6):\n                    if all((f\"{chr(65 + c + i)}_{color}\" in pieces_positions) for i in range(4) if (r - i) >= 0):\n                        return color\n            \n            # Check diagonal (top-left to bottom-right)\n            for c in range(4):\n                for r in range(3):\n                    if all((f\"{chr(65 + c + i)}_{color}\" in pieces_positions) for i in range(4) if (r + i) < 6):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                if check_winner(grid, column, row, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(grid, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                c = chr(ord(column) + d[0] * step * i)\n                r = row + d[1] * step * i\n                if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or\n                    check_direction(board, col, row, 0, 1, color) or\n                    check_direction(board, col, row, 1, 1, color) or\n                    check_direction(board, col, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, start_col, start_row, delta_col, delta_row, color):\n    count = 0\n    col = start_col\n    row = start_row\n\n    while 0 <= row < 6 and col in board and board[col][row] == color:\n        count += 1\n        if count == 4:\n            return True\n        row += delta_row\n        col = chr(ord(col) + delta_col)\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if (check_direction(board, column, row, 1, 0, color) or\n                    check_direction(board, column, row, 0, 1, color) or\n                    check_direction(board, column, row, 1, 1, color) or\n                    check_direction(board, column, row, 1, -1, color)):\n                    return True\n    return False\n\ndef check_direction(board, column, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        col = chr(ord(column) + delta_col * i)\n        r = row + delta_row * i\n        if col in board and 0 <= r < 6 and board[col][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        if check_winner(board, color, row, col):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color, row, col):\n    col_idx = 'ABCDEFG'.index(col)\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        \n        for i in range(1, 4):\n            r, c = row + d[0] * i, col_idx + d[1] * i\n            if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            r, c = row - d[0] * i, col_idx - d[1] * i\n            if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if any(board[col][row] == color for col, row in line) and all(board[col][row] == color for col, row in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in board:\n            for r in range(6):\n                if board[c][r] == color:\n                    if check_winner(board, c, r, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check vertical\n    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n        return True\n    # Check horizontal\n    for start in range(max(0, 'ABCDEFG'.index(col) - 3), min(4, 'ABCDEFG'.index(col) + 1)):\n        if all(board['ABCDEFG'[start + i]][row] == color for i in range(4)):\n            return True\n    # Check diagonal /\n    for start in range(max(0, 'ABCDEFG'.index(col) - 3), min(4, 'ABCDEFG'.index(col) + 1)):\n        if row >= 3 and all(board['ABCDEFG'[start + i]][row - i] == color for i in range(4)):\n            return True\n    # Check diagonal \\\n    for start in range(max(0, 'ABCDEFG'.index(col) - 3), min(4, 'ABCDEFG'.index(col) + 1)):\n        if row <= 2 and all(board['ABCDEFG'[start + i]][row + i] == color for i in range(4)):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        if check_win(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_win(board, column, row, color):\n    # Check all four directions\n    return (check_direction(board, column, row, color, 1, 0) or  # Horizontal\n            check_direction(board, column, row, color, 0, 1) or  # Vertical\n            check_direction(board, column, row, color, 1, 1) or  # Diagonal /\n            check_direction(board, column, row, color, 1, -1)    # Diagonal \\\n           )\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 1\n    for direction in [1, -1]:\n        for step in range(1, 4):\n            col = chr(ord(column) + delta_col * direction * step)\n            r = row + delta_row * direction * step\n            if col in board and 0 <= r < 6 and board[col][r] == color:\n                count += 1\n            else:\n                break\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    # Check vertical\n    if board[col][-4:].count(color) == 4:\n        return True\n    \n    # Check horizontal\n    row = len(board[col]) - 1\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        if all(board[chr(c + ord('A'))][row] == color for i in range(4) if c + i < 7):\n            return True\n    \n    # Check diagonal /\n    for d in range(-3, 1):\n        if (0 <= ord(col) - ord('A') + d < 7 and \n                0 <= row - d < 6 and\n                all(board[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i - ord('A') < 7)):\n            return True\n    \n    # Check diagonal \\\n    for d in range(-3, 1):\n        if (0 <= ord(col) - ord('A') + d < 7 and \n                0 <= row + d < 6 and\n                all(board[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i - ord('A') < 7)):\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [1, 0, 1, -1]:  # horizontal, vertical, diagonal /\n            count = 1\n            \n            for step in range(1, 4):\n                check_row = row + direction * step\n                check_column = 'ABCDEFG'.index(column) + direction * step\n                if check_row in range(6) and 0 <= check_column < 7 and board['ABCDEFG'[check_column]][check_row] == color:\n                    count += 1\n                else:\n                    break\n            \n            for step in range(1, 4):\n                check_row = row - direction * step\n                check_column = 'ABCDEFG'.index(column) - direction * step\n                if check_row in range(6) and 0 <= check_column < 7 and board['ABCDEFG'[check_column]][check_row] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((i for i in range(6) if grid[col][i] is None), None)\n        if row is not None:\n            grid[col][row] = color\n            if check_winner(grid, col, row, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                r, c = row + step * i * d[1], ord(col) - ord('A') + step * i * d[0]\n                if 0 <= r < 6 and 0 <= c < 7 and grid[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in board and r < len(board[c]) and board[c][r] == color):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and board[c][r] is not None)):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check for vertical win\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check for horizontal win\n                    for d in range(-3, 1):\n                        if all(0 <= col_index < 7 and board[chr(ord(col) + d + i)][row] == color \n                               for i in range(4) for col_index in [ord(col) + d + i - ord('A')]):\n                            return color\n                    # Check for diagonal (bottom-left to top-right)\n                    if row <= 2 and all(0 <= col_index < 7 and board[chr(ord(col) + i)][row + i] == color \n                                       for i in range(4) if 0 <= ord(col) + i < 7):\n                        return color\n                    # Check for diagonal (top-left to bottom-right)\n                    if row >= 3 and all(0 <= col_index < 7 and board[chr(ord(col) + i)][row - i] == color \n                                       for i in range(4) if 0 <= ord(col) + i < 7):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check vertical\n    if all(board[col][r] == color for r in range(max(0, row - 3), row + 1)):\n        return True\n    # Check horizontal\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        if all(board[chr(ord('A') + c + i)][row] == color for i in range(4) if c + i < 7):\n            return True\n    # Check diagonal (top-left to bottom-right)\n    for d in range(-3, 1):\n        if 0 <= row + d < 6 and 0 <= ord(col) - ord('A') + d < 7 and \\\n           all(board[chr(ord('A') + ord(col) - ord('A') + d + i)][row + d + i] == color \n               for i in range(4) if 0 <= row + d + i < 6 and 0 <= ord(col) - ord('A') + d + i < 7):\n            return True\n    # Check diagonal (bottom-left to top-right)\n    for d in range(-3, 1):\n        if 0 <= row - d < 6 and 0 <= ord(col) - ord('A') + d < 7 and \\\n           all(board[chr(ord('A') + ord(col) - ord('A') + d + i)][row - d + i] == color \n               for i in range(4) if 0 <= row - d + i < 6 and 0 <= ord(col) - ord('A') + d + i < 7):\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n            \n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        \n        for step in (1, -1):\n            r, c = row, col_index(col)\n            while 0 <= r < 6 and 0 <= c < 7 and len(board[columns[c]]) > r and board[columns[c]][r] == color:\n                count += 1\n                r += step * dr\n                c += step * dc\n            \n            if count >= 4:\n                return True\n                \n    return False\n\ndef col_index(col):\n    return 'ABCDEFG'.index(col)\n    \ncolumns = 'ABCDEFG'\n```"
        ]
    }
}