{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if (col in board and row < len(board[col]))):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if (col in board and row < len(board[col]))):\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < 6 and grid[c][r] == color)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] == color):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece.split('_')[1]\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for line in LINES:\n        colors = [grid[column][row] for column, row in line if grid[column][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c].count(color) > row - 3 + i for i, c in enumerate('ABCDEFG'))):\n                    return color\n\n        # Check for vertical\n        for c in 'ABCDEFG':\n            if board[c][-4:] == [color] * 4:\n                return color\n        \n        # Check for diagonals\n        for r in range(6):\n            for c in range(7):\n                if r < 3:\n                    if c < 4 and all((board['ABCDEFG'[c + i]].count(color) > r - i for i in range(4))):\n                        return color\n                    if c > 2 and all((board['ABCDEFG'[c - i]].count(color) > r - i for i in range(4))):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [((0, 1), (1, 0)), ((1, 0), (0, 1)), ((1, 1), (1, -1))]:\n            count = 1\n            for (dx, dy) in direction:\n                x, y = board[column].index(color), row\n                while 0 <= x + dx < 6 and 0 <= y + dy < 7 and board['ABCDEFG'[y + dy]][x + dx] == color:\n                    count += 1\n                    x += dx\n                    y += dy\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color.capitalize()\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if row >= 3 and all(board[column][row - i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for col in 'ABCDEFG':\n        if col in board and len(board[col]) > row and board[col][row] == color:\n            count = 0\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) > row and board[c][row] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n    \n    # Check diagonal /\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if all(board[chr(ord('A') + c + i)][row - i] == color for i in range(4) if 0 <= row - i < 6 and 0 <= c + i < 7):\n            return True\n\n    # Check diagonal \\\n    for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n        if all(board[chr(ord('A') + c + i)][row + i] == color for i in range(4) if 0 <= row + i < 6 and 0 <= c + i < 7):\n            return True\n    \n    return False\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == board[col][row] for col in 'ABCD'[ord(col)-65:ord(col)+4]):\n                        return board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == board[col][row] for row in range(row, row + 4)):\n                        return board[col][row]\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[col][row] for d in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if col >= 'C' and row <= 2 and all(board[col][row] == board[col][row] for d in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board['ABCDEFG'[c]][r] == color:\n                    if (c + 3 < 7 and \n                        all(board['ABCDEFG'[c + i]][r] == color for i in range(4)) or\n                        r + 3 < 6 and \n                        all(board['ABCDEFG'[c]][r + i] == color for i in range(4)) or\n                        c + 3 < 7 and r + 3 < 6 and \n                        all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4)) or\n                        c - 3 >= 0 and r + 3 < 6 and \n                        all(board['ABCDEFG'[c - i]][r + i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                # Check horizontal\n                for r in range(6):\n                    count = 0\n                    for c in range(7):\n                        if board[COLUMNS[c]][r] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            count = 0\n\n                # Check vertical\n                for c in range(7):\n                    count = 0\n                    for r in range(6):\n                        if board[COLUMNS[c]][r] == color:\n                            count += 1\n                            if count == 4:\n                                return color\n                        else:\n                            count = 0\n\n                # Check diagonal \\\n                for r in range(3, 6):\n                    for c in range(4):\n                        if board[COLUMNS[c]][r] == color and \\\n                           board[COLUMNS[c+1]][r-1] == color and \\\n                           board[COLUMNS[c+2]][r-2] == color and \\\n                           board[COLUMNS[c+3]][r-3] == color:\n                            return color\n\n                # Check diagonal /\n                for r in range(3):\n                    for c in range(4):\n                        if board[COLUMNS[c]][r] == color and \\\n                           board[COLUMNS[c+1]][r+1] == color and \\\n                           board[COLUMNS[c+2]][r+2] == color and \\\n                           board[COLUMNS[c+3]][r+3] == color:\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if (all(board[col][row] == board[col][r] for r in range(row, row + 4)) or\n                        all(board[c][row] == color for c in 'ABCDEFG' if c in board and c > col and row < 6 and row < len(board[c])) or\n                        all(board[c][r] == color for r in range(row) if (c := col) == (col)) or\n                        all(board[c][row] == color for r in range(row, row - 4, -1) if (c := col) == (col))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check vertical\n    for col in board:\n        count = 0\n        for cell in board[col]:\n            count = count + 1 if cell == color else 0\n            if count == 4:\n                return True\n    \n    # Check horizontal\n    for row in range(6):\n        count = 0\n        for col in 'ABCDEFG':\n            cell = board[col][row]\n            count = count + 1 if cell == color else 0\n            if count == 4:\n                return True\n                \n    # Check diagonals \\\n    for col in range(4):\n        for row in range(6):\n            if row <= 2 and all(board[chr(col + i + 65)][row + i] == color for i in range(4)):\n                return True\n\n    # Check diagonals /\n    for col in range(4):\n        for row in range(3, 6):\n            if all(board[chr(col + i + 65)][row - i] == color for i in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col = \"ABCDEFG\".index(move[0])\n        color = move[2:]\n        for row in range(5, -1, -1):\n            if grid[row][col] == '':\n                grid[row][col] = color\n                break\n    \n    def check_winner():\n        for row in range(6):\n            for col in range(7):\n                if grid[row][col]:\n                    color = grid[row][col]\n                    if col + 3 < 7 and all(grid[row][col + k] == color for k in range(4)):\n                        return color\n                    if row + 3 < 6 and all(grid[row + k][col] == color for k in range(4)):\n                        return color\n                    if row + 3 < 6 and col + 3 < 7 and all(grid[row + k][col + k] == color for k in range(4)):\n                        return color\n                    if row - 3 >= 0 and col + 3 < 7 and all(grid[row - k][col + k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in 'ABCDEFG':\n        for row in range(6):\n            if board[column][row] == color:\n                if (check_direction(board, column, row, color, 1, 0) or \n                    check_direction(board, column, row, color, 0, 1) or \n                    check_direction(board, column, row, color, 1, 1) or \n                    check_direction(board, column, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if 0 <= row < 6 and board[column][row] == color:\n            count += 1\n        else:\n            break\n        column = chr(ord(column) + delta_col)\n        row += delta_row\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for _ in range(4):\n        if 0 <= row < 6 and 0 <= ord(col) - ord('A') < 7 and board[col][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        col = chr(ord(col) + d_col)\n        row += d_row\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (all(board[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        (col <= 'D' and all(board[c][row] == color for c in 'ABCDEFG'[(ord(col) - 65):(ord(col) - 61)])) or\n                        (row <= 2 and all(board[c][row + k] == color for k, c in zip(range(4), 'ABCDEFG'[(ord(col) - 65):(ord(col) - 61)]))) or\n                        (row >= 3 and col <= 'D' and all(board[c][row - k] == color for k, c in zip(range(4), 'ABCDEFG'[(ord(col) - 65):(ord(col) - 61)])))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if board[c].count(color) >= 4:\n                for r in range(6):\n                    if board[c][r] == color:\n                        if (r <= 2 and all(board[c][r + k] == color for k in range(4))) or \\\n                           (r <= 3 and c <= 'D' and all(board[chr(ord(c) + k)][r + k] == color for k in range(4))) or \\\n                           (r <= 3 and c >= 'D' and all(board[chr(ord(c) - k)][r + k] == color for k in range(4))) or \\\n                           (r <= 3 and all(board[c][r + k] == color for k in range(4) if r + k < 6)) or \\\n                           (c in 'ABCDE' and all(board[chr(ord(c) + k)][r] == color for k in range(4))):\n                            return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        # Check for win condition\n        if len(board[column]) >= 4:\n            for i in range(len(board[column]) - 3, len(board[column])):\n                if all(c == color for c in board[column][i-3:i+1]):\n                    return color\n\n        # Check vertical\n        for col in 'ABCDEFG':\n            if len(board[col]) >= 4:\n                for i in range(len(board[col]) - 3):\n                    if all(c == board[col][i] for c in board[col][i:i+4]):\n                        return board[col][i]\n\n        # Check diagonals\n        for c in range(len(board)):\n            for r in range(len(board['A'])):\n                if c + 3 < len(board) and r + 3 < len(board['A']):\n                    if (all(board[chr(65 + c + k)][r + k] == board[chr(65 + c)][r] for k in range(4)) and board[chr(65 + c)][r] != ''):\n                        return board[chr(65 + c)][r]\n                if c + 3 < len(board) and r - 3 >= 0:\n                    if (all(board[chr(65 + c + k)][r - k] == board[chr(65 + c)][r] for k in range(4)) and board[chr(65 + c)][r] != ''):\n                        return board[chr(65 + c)][r]\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (all(board[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        all(board[c][row] == color for c in 'ABCDEFG' if board[c][row] == color and c in board) or\n                        all(board[chr(ord(col) + k)][row + k] == color for k in range(4) if 0 <= row + k < 6 and ord(col) + k < 71) or\n                        all(board[chr(ord(col) + k)][row - k] == color for k in range(4) if 0 <= row - k < 6 and ord(col) + k < 71)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, start_col, start_row, color, delta_col, delta_row):\n    count = 0\n    col_idx = 'ABCDEFG'.index(start_col)\n    row_idx = start_row\n    \n    while 0 <= col_idx < 7 and 0 <= row_idx < 6 and board['ABCDEFG'[col_idx]][row_idx] == color:\n        count += 1\n        if count == 4:\n            return True\n        col_idx += delta_col\n        row_idx += delta_row\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + dcol * i)\n            r = row + drow * i\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        grid[col][row + 1:] = [color] * (5 - row)  # fill in below with the same color for easy checks\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check all possible winning combinations\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, color, col, row, 1, 0) or \\\n                   check_direction(grid, color, col, row, 0, 1) or \\\n                   check_direction(grid, color, col, row, 1, 1) or \\\n                   check_direction(grid, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(grid, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        curr_col = chr(ord(col) + delta_col * i)\n        curr_row = row + delta_row * i\n        if 0 <= curr_row < 6 and curr_col in grid and grid[curr_col][curr_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if any(board[x][y] == color for x, y in line) and all(board[x][y] == color for x, y in line):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if r <= 2 and c >= 'D' and all(board[chr(ord(c)-i)][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if r <= 2 and c <= 'D' and all(board[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if any((column, row) in line and board[col][row] == color for col, row in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal and diagonals\n            for col in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                if all((len(board['ABCDEFG'[col + i]]) > len(board['ABCDEFG'[col]]) - j and \n                        board['ABCDEFG'[col + i]][-1] == color) for i, j in zip(range(4), range(4))):\n                    return color\n                \n                if col <= 3:\n                    if all((len(board['ABCDEFG'[col + i]]) > len(board['ABCDEFG'[col]]) - i and \n                            board['ABCDEFG'[col + i]][-1] == color) for i in range(4)):\n                        return color\n                \n                if col >= 3:\n                    if all((len(board['ABCDEFG'[col - i]]) > len(board['ABCDEFG'[col]]) - i and \n                            board['ABCDEFG'[col - i]][-1] == color) for i in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (i <= 3 and all(board[chr(65 + i + k)][j] == color for k in range(4))) or \\\n                       (j <= 2 and all(board[chr(65 + i)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    if (j + 3 < 7 and \n                        board[COLUMNS[j + 1]][i] == color and \n                        board[COLUMNS[j + 2]][i] == color and \n                        board[COLUMNS[j + 3]][i] == color):\n                        return color\n                    if (i + 3 < 6 and \n                        board[COLUMNS[j]][i + 1] == color and \n                        board[COLUMNS[j]][i + 2] == color and \n                        board[COLUMNS[j]][i + 3] == color):\n                        return color\n                    if (j + 3 < 7 and i + 3 < 6 and \n                        board[COLUMNS[j + 1]][i + 1] == color and \n                        board[COLUMNS[j + 2]][i + 2] == color and \n                        board[COLUMNS[j + 3]][i + 3] == color):\n                        return color\n                    if (j + 3 < 7 and i - 3 >= 0 and \n                        board[COLUMNS[j + 1]][i - 1] == color and \n                        board[COLUMNS[j + 2]][i - 2] == color and \n                        board[COLUMNS[j + 3]][i - 3] == color):\n                        return color\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal connections\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, 1, 0, color) or \\\n                   check_direction(board, col, row, 0, 1, color) or \\\n                   check_direction(board, col, row, 1, 1, color) or \\\n                   check_direction(board, col, row, 1, -1, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, dcol, drow, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + dcol * i)\n        r = row + drow * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        if len(board[column]) >= 4:\n            # Check for a win in the current column\n            if all(board[column][i] == color for i in range(-4, 0)):\n                return color\n\n            # Check for horizontal win\n            for col in 'ABCDEFG':\n                if len(board[col]) >= 4 and all(board[col][i] == color for i in range(-4, 0) if col in board):\n                    return color\n            \n            # Check for diagonal wins\n            for col_index in range(len('ABCDEFG') - 3):\n                for row_index in range(ROWS):\n                    if all((board[chr(65 + col_index + k)][row_index + k] == color) \n                           for k in range(4) if row_index + k < 6 and chr(65 + col_index + k) in board):\n                        return color\n                    if all((board[chr(65 + col_index + k)][row_index - k] == color) \n                           for k in range(4) if row_index - k >= 0 and chr(65 + col_index + k) in board):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for win condition\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:  # Only check filled positions\n                    color = board[chr(65 + c)][r]\n                    # Check horizontal\n                    if c < 4 and all(board[chr(65 + c + i)][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r < 3 and all(board[chr(65 + c)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c < 4 and r > 2 and all(board[chr(65 + c + i)][r - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c < 4 and r < 3 and all(board[chr(65 + c + i)][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next(i for i in range(6) if board[col][i] is None)\n        board[col][row] = color\n\n        if any(all(board[c][r] == color for c, r in line) for line in LINES):\n            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for row in range(6):\n            for col in range(7):\n                if board['ABCDEFG'[col]][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board['ABCDEFG'[col + i]][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board['ABCDEFG'[col]][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 3 and row <= 2 and all(board['ABCDEFG'[col + i]][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 3 and row <= 2 and all(board['ABCDEFG'[col - i]][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                r, c = row, ord(col) - ord('A')\n                while 0 <= r < 6 and 0 <= c < 7:\n                    if (d == 1 and (r == row and c == ord(col) - ord('A'))) or \\\n                       (board[chr(c + ord('A'))][r] == color):\n                        count += 1\n                    else:\n                        break\n                    r += direction[0] * d\n                    c += direction[1] * d\n            \n            if count >= 4:\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col in 'ABCDEFG'[:-3] and all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal (down-right)\n                    if col in 'ABCDEFG'[:-3] and row <= 2 and all(board[COLUMNS[COLUMNS.index(col)+k]][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal (down-left)\n                    if col in 'ABCDEFG'[3:] and row <= 2 and all(board[COLUMNS[COLUMNS.index(col)-k]][row+k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) >= 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[col].append(color)\n        \n        if len(grid[col]) >= 4:\n            for i in range(len(grid[col]) - 3):\n                if all(x == color for x in grid[col][i:i+4]):\n                    return color\n    \n    for col in grid:\n        for row in range(len(grid[col])):\n            if row + 3 < len(grid[col]):\n                if all(grid[col][row + i] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n    \n    for i in range(7):\n        for j in range(6):\n            if all(i + k < len(grid[col]) and grid[COLUMNS[i]][j] == grid[COLUMNS[i + k]][j] for k in range(4)):\n                return grid[COLUMNS[i]][j]\n            if all(i + k < len(grid[col]) and j + k < len(grid[col]) and grid[COLUMNS[i]][j] == grid[COLUMNS[i + k]][j + k] for k in range(4)):\n                return grid[COLUMNS[i]][j]\n            if all(i + k < len(grid[col]) and j - k >= 0 and grid[COLUMNS[i]][j] == grid[COLUMNS[i + k]][j - k] for k in range(4)):\n                return grid[COLUMNS[i]][j]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color_to_check in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color_to_check:\n                        if col <= 3 and all(board[chr(col + i + 65)][row] == color_to_check for i in range(4)):\n                            return color_to_check\n                        if row <= 2 and all(board[chr(col + 65)][row + i] == color_to_check for i in range(4)):\n                            return color_to_check\n                        if col <= 3 and row <= 2 and all(board[chr(col + i + 65)][row + i] == color_to_check for i in range(4)):\n                            return color_to_check\n                        if col <= 3 and row >= 3 and all(board[chr(col + i + 65)][row - i] == color_to_check for i in range(4)):\n                            return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for column in grid:\n            for row in range(6):\n                if grid[column][row] == color:\n                    # Check for horizontal\n                    if all(grid[column][row] == grid[column][r] for r in range(row, min(row + 4, 6))):\n                        return color\n                    # Check for vertical\n                    if row <= 2 and all(grid[column][row] == grid[column][r] for r in range(row, row + 4)):\n                        return color\n                    # Check for diagonal \\\n                    if column <= 'D' and row <= 2 and all(grid[COLUMNS[i]][row + i] == color for i in range(4)):\n                        return color\n                    # Check for diagonal /\n                    if column <= 'D' and row >= 3 and all(grid[COLUMNS[i]][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if (c + 3 < 7 and all(board['ABCDEFG'[c + i]][r] == color for i in range(4))) or \\\n                       (r + 3 < 6 and all(board['ABCDEFG'[c]][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4))) or \\\n                       (c - 3 >= 0 and r + 3 < 6 and all(board['ABCDEFG'[c - i]][r + i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, dc, dr):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + dc * i)\n        r = row + dr * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for victory\n        if check_victory(board, column, row, color):\n            return color\n        \n    return \"Draw\"\n\ndef check_victory(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 3:\n            for i in range(len(board[column]) - 3):\n                if all(board[column][j] == color for j in range(i, i + 4)):\n                    return color\n    \n    for col in board:\n        for row in range(len(board[col])):\n            if row > 2:\n                if all(board[col][row - j] == board[col][row] for j in range(4)):\n                    return board[col][row]\n    \n    for i in range(7):\n        for j in range(6):\n            if j <= 2 and i <= 3:\n                if all(board[COLUMNS[i+k]][j+k] == board[COLUMNS[i]][j] for k in range(4)):\n                    return board[COLUMNS[i]][j]\n            if j >= 3 and i <= 3:\n                if all(board[COLUMNS[i+k]][j-k] == board[COLUMNS[i]][j] for k in range(4)):\n                    return board[COLUMNS[i]][j]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < len(board[c]) and board[c][r] is not None)):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if grid[COLUMNS[j]][i] == player:\n                    if j + 3 < 7 and all(grid[COLUMNS[j+k]][i] == player for k in range(4)):\n                        return player\n                    if i + 3 < 6 and all(grid[COLUMNS[j]][i+k] == player for k in range(4)):\n                        return player\n                    if j + 3 < 7 and i + 3 < 6 and all(grid[COLUMNS[j+k]][i+k] == player for k in range(4)):\n                        return player\n                    if j - 3 >= 0 and i + 3 < 6 and all(grid[COLUMNS[j-k]][i+k] == player for k in range(4)):\n                        return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + step * delta_col)\n        new_row = row + step * delta_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color, 1, 0) or \\\n                   check_direction(grid, col, row, color, 0, 1) or \\\n                   check_direction(grid, col, row, color, 1, 1) or \\\n                   check_direction(grid, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in grid and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for row in range(6):\n                for col in 'ABCDEFG':\n                    if board[col][row] == color:\n                        count = 0\n                        r, c = row, 'ABCDEFG'.index(col)\n\n                        while 0 <= r < 6 and 0 <= c < 7:\n                            if board['ABCDEFG'[c]][r] == color:\n                                count += 1\n                                if count == 4:\n                                    return color\n                            else:\n                                break\n                            r += direction[0]\n                            c += direction[1]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        if check_winner(grid, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if (check_direction(grid, col, row, 1, 0, color) or  # horizontal\n                    check_direction(grid, col, row, 0, 1, color) or  # vertical\n                    check_direction(grid, col, row, 1, 1, color) or  # diagonal /\n                    check_direction(grid, col, row, 1, -1, color)):  # diagonal \\\n                    return True\n    return False\n\ndef check_direction(grid, col, row, dcol, drow, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dcol)\n        r = row + i * drow\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for key in grid.keys():\n            for start_row in range(6):\n                if grid[key][start_row] is None:\n                    continue\n                if (start_row <= 2 and all(grid[key][start_row + k] == grid[key][start_row] for k in range(4))) or \\\n                   (start_row >= 3 and all(grid[key][start_row - k] == grid[key][start_row] for k in range(4))) or \\\n                   (key in 'ABCDEFG' and all(grid[chr(ord(key) + k)][start_row] == grid[key][start_row] for k in range(4) if ord(key) + k < ord('G') + 1)) or \\\n                   (key in 'ABCDEFG' and all(grid[chr(ord(key) - k)][start_row] == grid[key][start_row] for k in range(4) if ord(key) - k >= ord('A'))) or \\\n                   (start_row <= 2 and key in 'ABCDEFG' and all(grid[chr(ord(key) + k)][start_row + k] == grid[key][start_row] for k in range(4) if ord(key) + k < ord('G') + 1 and start_row + k < 6)) or \\\n                   (start_row <= 2 and key in 'ABCDEFG' and all(grid[chr(ord(key) - k)][start_row + k] == grid[key][start_row] for k in range(4) if ord(key) - k >= ord('A') and start_row + k < 6)):\n                    return grid[key][start_row]\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for row in range(6):\n            if grid[col][row] == color:\n                # Check vertical\n                if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                    return color\n                # Check horizontal\n                for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n                    if all(grid[chr(ord('A') + c + i)][row] == color for i in range(4) if c + i < 7):\n                        return color\n                # Check diagonal /\n                if row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < 7):\n                    return color\n                # Check diagonal \\\n                if row <= 2 and all(grid[chr(ord(col) - i)][row + i] == color for i in range(4) if 0 <= ord(col) - i < 7):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for column in board:\n            for row in range(6):\n                if board[column][row] is not None:\n                    color = board[column][row]\n\n                    # Check vertical\n                    if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(column), COLUMNS.index(column) + 4) if i < 7):\n                        return color\n\n                    # Check diagonal \\\n                    if row <= 2 and all(board[COLUMNS[COLUMNS.index(column) + k]][row + k] == color for k in range(4) if COLUMNS.index(column) + k < 7):\n                        return color\n\n                    # Check diagonal /\n                    if row >= 3 and all(board[COLUMNS[COLUMNS.index(column) + k]][row - k] == color for k in range(4) if COLUMNS.index(column) + k < 7):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        for line in LINES:\n            if any((col, row) in line for col in board for row in range(6) if board[col][row] == player):\n                return player\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # Horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # Vertical\n                    check_direction(board, col, row, 1, 1, color) or  # Diagonal /\n                    check_direction(board, col, row, 1, -1, color)):  # Diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == board[col][row] for i in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for win\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]  # horizontal, vertical, diagonal right, diagonal left\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + dcol * i)\n            r = row + drow * i\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + d[0] * step)\n            r = row + d[1] * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for victory conditions\n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Get the position of the last move\n    row = len(board[column]) - 1\n\n    # Check all directions: vertical, horizontal, diagonal /\n    directions = [\n        [(0, 1), (0, -1)],  # vertical\n        [(1, 0), (-1, 0)],  # horizontal\n        [(1, 1), (-1, -1)], # diagonal /\n        [(1, -1), (-1, 1)], # diagonal \\\n    ]\n    \n    for direction in directions:\n        count = 1  # count the last piece\n        for dx, dy in direction:\n            x, y = ord(column) - ord('A'), row  # current position\n            while True:\n                x += dx\n                y += dy\n                if 0 <= x < 7 and 0 <= y < 6 and len(board[chr(x + ord('A'))]) > y and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] == color:  # Check horizontal\n                    if j <= 3 and all(board[chr(k + 65)][i] == color for k in range(j, j + 4)):\n                        return color\n                if i <= 2 and board[chr(j + 65)][i] == color:  # Check vertical\n                    if all(board[chr(j + 65)][k] == color for k in range(i, i + 4)):\n                        return color\n                if i <= 2 and j <= 3 and board[chr(j + 65)][i] == color:  # Check diagonal /\n                    if all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                if i >= 3 and j <= 3 and board[chr(j + 65)][i] == color:  # Check diagonal \\\n                    if all(board[chr(j + k + 65)][i - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if any(all(board[c][r] == board[c][r + k] for k in range(4)) for r in range(3)):\n                        return board[c][r]\n                    if any(all(board[c][r] == board[c + k][r] for k in range(4)) for c in 'ABCD'):\n                        return board[c][r]\n                    if c in 'ABCD' and r in range(3):  # Check for diagonal (bottom-left to top-right)\n                        if all(board[c][r] == board[c + k][r + k] for k in range(4)):\n                            return board[c][r]\n                    if c in 'ABCD' and r in range(3, 6):  # Check for diagonal (top-left to bottom-right)\n                        if all(board[c][r] == board[c + k][r - k] for k in range(4)):\n                            return board[c][r]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row in range(6)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for c in 'ABCDEFG':\n        for r in range(6):\n            if board[c][r] == color:\n                if check_direction(board, color, c, r, 1, 0) or \\\n                   check_direction(board, color, c, r, 0, 1) or \\\n                   check_direction(board, color, c, r, 1, 1) or \\\n                   check_direction(board, color, c, r, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, dcol, drow):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dcol)\n        r = row + i * drow\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if j + 3 < 6 and all(board[chr(i + 65)][j + k] == color for k in range(4)):\n                        return color\n                    if i + 3 < 7 and all(board[chr(i + k + 65)][j] == color for k in range(4)):\n                        return color\n                    if i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4)):\n                        return color\n                    if i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win condition\n        if len(board[column]) >= 4:\n            if check_win(board[column][-4:], color):\n                return color\n    \n        # Check other directions\n        for c in 'ABCDEFG':\n            if board[c] and board[c][-1] == color:\n                if check_win(board[c], color):\n                    return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n\ndef check_win(column, color):\n    return column.count(color) >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if check_win(grid, col, row, color):\n                        return color\n    \n    return \"Draw\"\n\ndef check_win(grid, col, row, color):\n    return (check_direction(grid, col, row, color, 1, 0) or  # Horizontal\n            check_direction(grid, col, row, color, 0, 1) or  # Vertical\n            check_direction(grid, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(grid, col, row, color, 1, -1)    # Diagonal /\n           )\n\ndef check_direction(grid, col, row, color, delta_col, delta_row):\n    count = 0\n    for d in range(-3, 4):\n        c = chr(ord(col) + d * delta_col)\n        r = row + d * delta_row\n        if 0 <= r < 6 and c in grid and grid[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < 6 and y >= 0)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in [(col, r) for r in range(6)]):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        for line in LINES:\n            if any(pos in player_moves[player] for pos in line):\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1)    # Diagonal /\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 1\n    for direction in [1, -1]:\n        for step in range(1, 4):\n            new_col = chr(ord(col) + delta_col * direction * step)\n            new_row = row + delta_row * direction * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal and diagonals\n            for start in range(max(0, len(board[column]) - 4), len(board[column])):\n                # Check horizontal\n                row = len(board[column]) - 1\n                for i in range(max(0, start - 3), min(start + 1, 6)):\n                    if sum(1 for col in board if len(board[col]) > row and board[col][row] == color) >= 4:\n                        return color\n                \n                # Check diagonal \\\n                for i in range(-3, 1):\n                    if all((len(board[COLUMNS[c]]) > row + i) and (board[COLUMNS[c]][row + i] == color) for c in range(4)):\n                        return color\n                \n                # Check diagonal /\n                for i in range(-3, 1):\n                    if all((len(board[COLUMNS[c]]) > row - i) and (board[COLUMNS[c]][row - i] == color) for c in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c, r = chr(ord(col) + step * dc), row + step * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c, r = chr(ord(col) - step * dc), row - step * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n        \n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for column, row in moves:\n        if check_direction(moves, column, row, 1, 0) or \\\n           check_direction(moves, column, row, 0, 1) or \\\n           check_direction(moves, column, row, 1, 1) or \\\n           check_direction(moves, column, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, column, row, delta_col, delta_row):\n    count = 1\n    for direction in [1, -1]:\n        for step in range(1, 4):\n            new_col = chr(ord(column) + delta_col * step * direction)\n            new_row = row + delta_row * step * direction\n            if new_col in 'ABCDEFG' and 0 <= new_row < 6 and (new_col, new_row) in moves:\n                count += 1\n            else:\n                break\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for i, (col, row) in enumerate(moves):\n        if any(all((col, row) in moves for col, row in line) for line in get_lines(col, row)):\n            return True\n    return False\n\ndef get_lines(col, row):\n    COLUMNS = 'ABCDEFG'\n    return [\n        [(COLUMNS[i], row) for i in range(max(0, ord(col) - ord('A')), min(7, ord(col) - ord('A') + 4))],\n        [(col, j) for j in range(max(0, row - 3), min(6, row + 1))],\n        [(COLUMNS[i], row + i - (ord(col) - ord('A'))) for i in range(4) if 0 <= ord(col) - ord('A') + i < 7],\n        [(COLUMNS[i], row - i + (ord(col) - ord('A'))) for i in range(4) if 0 <= ord(col) - ord('A') - i < 7]\n    ]\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(board, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                player_moves[color].append((column, row))\n                break\n        \n        for color, positions in player_moves.items():\n            if any(all((column, row) in positions for column, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for c in ('Red', 'Yellow'):\n            for i in range(6):\n                for j in range(7):\n                    if j < 4 and all(board[chr(k + 65)][i] == c for k in range(j, j + 4)):\n                        return c\n                    if i < 3 and all(board[chr(j + 65)][i + k] == c for k in range(4)):\n                        return c\n                    if i < 3 and j < 4 and all(board[chr(j + k + 65)][i + k] == c for k in range(4)):\n                        return c\n                    if i > 2 and j < 4 and all(board[chr(j + k + 65)][i - k] == c for k in range(4)):\n                        return c\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board[chr(c + 65)][r] == color:\n                        count = 1\n                        for d in range(1, 4):\n                            nr, nc = r + direction[0] * d, c + direction[1] * d\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board[chr(nc + 65)][nr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for check_color in ['Red', 'Yellow']:\n            for col_index in range(7):\n                for row_index in range(6):\n                    if (board[chr(65 + col_index)][row_index] == check_color and\n                        (col_index <= 3 and all(board[chr(65 + col_index + k)][row_index] == check_color for k in range(4)) or\n                         row_index <= 2 and all(board[chr(65 + col_index)][row_index + k] == check_color for k in range(4)) or\n                         col_index <= 3 and row_index <= 2 and all(board[chr(65 + col_index + k)][row_index + k] == check_color for k in range(4)) or\n                         col_index <= 3 and row_index >= 3 and all(board[chr(65 + col_index + k)][row_index - k] == check_color for k in range(4)))):\n                        return check_color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(col + 65)][row] == color:\n                        if col <= 3 and all(grid[chr(col + i + 65)][row] == color for i in range(4)):\n                            return color\n                        if row <= 2 and all(grid[chr(col + 65)][row + i] == color for i in range(4)):\n                            return color\n                        if col <= 3 and row <= 2 and all(grid[chr(col + i + 65)][row + i] == color for i in range(4)):\n                            return color\n                        if col <= 3 and row >= 3 and all(grid[chr(col + i + 65)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + dcol * step)\n            new_row = row + drow * step\n            if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            new_col = chr(ord(col) - dcol * step)\n            new_row = row - drow * step\n            if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if 0 <= r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_positions = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_positions[player].append((column, row))\n                break\n\n        for player in player_positions:\n            for x, y in player_positions[player]:\n                if (x, y) in player_positions[player]:\n                    count = sum((x, y) in player_positions[player] for x, y in player_positions[player] if abs(ord(x) - ord(column)) <= 3 and abs(y - y) <= 3)\n                    if count >= 4:\n                        return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:\n                    # Horizontal\n                    if c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4)):\n                        return color\n                    # Vertical\n                    if r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4)):\n                        return color\n                    # Diagonal down-right\n                    if c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4)):\n                        return color\n                    # Diagonal down-left\n                    if c >= 3 and r <= 2 and all(board[chr(65 + c - i)][r + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + dc * step)\n            r = row + dr * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if grid[chr(j + 65)][i] is not None:\n                    color = grid[chr(j + 65)][i]\n                    # Check vertical\n                    if i <= 2 and all(grid[chr(j + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if j <= 3 and all(grid[chr(j + k + 65)][i] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if i <= 2 and j <= 3 and all(grid[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if i >= 3 and j <= 3 and all(grid[chr(j + k + 65)][i - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in LINES:\n            if (col, row) in direction:\n                if all(board[c][r] == color for c, r in direction):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') + dx * step, row + dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') - dx * step, row - dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        board[col].append(color)\n        \n        # Check for a win\n        if len(board[col]) >= 4:\n            # Vertical\n            if board[col][-4:] == [color] * 4:\n                return color\n        \n        for i in range(7):\n            if board[COLUMNS[i]].count(color) >= 4:\n                # Horizontal\n                for j in range(len(board[COLUMNS[i]]) - 3):\n                    if all(board[COLUMNS[i]][j+k] == color for k in range(4)):\n                        return color\n                \n                # Diagonal \\\n                for j in range(len(board[COLUMNS[i]]) - 3):\n                    for k in range(len(board[COLUMNS[i]]) - j - 3):\n                        if all(board[COLUMNS[i+j+k]][j+k] == color for k in range(4)):\n                            return color\n                \n                # Diagonal /\n                for j in range(3, len(board[COLUMNS[i]])):\n                    for k in range(len(board[COLUMNS[i]]) - j - 3):\n                        if all(board[COLUMNS[i+j-k]][j-k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if any(board[col][row] == color for col, row in line) and all(board[col][row] == color for col, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        # Check for a win after each move\n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if len(board[column]) >= 4 and all(board[column][r] == color for r in range(row, row - 4, -1)):\n        return True\n    \n    # Check horizontal\n    for col in range(max(0, ord(column) - ord('A') - 3), min(7, ord(column) - ord('A') + 1)):\n        if all(board[chr(col + ord('A'))][row] == color for col in range(col, col + 4) if row < len(board[chr(col + ord('A'))])):\n            return True\n    \n    # Check diagonal \\\n    for i in range(-3, 1):\n        if all((board[chr(ord(column) + j)][row + j] == color) for j in range(4) if 0 <= row + j < 6 and 0 <= ord(column) + j < 7):\n            return True\n    \n    # Check diagonal /\n    for i in range(-3, 1):\n        if all((board[chr(ord(column) + j)][row - j] == color) for j in range(4) if 0 <= row - j < 6 and 0 <= ord(column) + j < 7):\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    if (j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4))) or \\\n                       (i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4))) or \\\n                       (i <= 2 and j <= 3 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4))) or \\\n                       (i >= 3 and j <= 3 and all(board['ABCDEFG'][j+k][i-k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            # Check for a win in the vertical direction\n            if board[col][-4:] == [color] * 4:\n                return color\n            \n            # Check for horizontal, diagonal, and anti-diagonal wins\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) >= 4:\n                    row_index = len(board[c]) - 1\n                    count = 0\n                    for k in range(4):\n                        if k < len(board[c]) and board[c][row_index - k] == color:\n                            count += 1\n                        else:\n                            break\n                    if count == 4:\n                        return color\n            \n            for i in range(len(board)):\n                for j in range(len(board[board.keys()[0]])):\n                    if (j + 3 < len(board[board.keys()[0]]) and\n                        i + 3 < 7 and \n                        all(c in board for c in 'ABCDEFG'[i:i + 4]) and \n                        all(board['ABCDEFG'[k]][j] == color for k in range(i, i + 4))):\n                        return color\n                    \n                    if (j - 3 >= 0 and\n                        i + 3 < 7 and\n                        all(c in board for c in 'ABCDEFG'[i:i + 4]) and\n                        all(board['ABCDEFG'[k]][j] == color for k in range(i, i + 4))):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    move_set = set(moves)\n    \n    for column, row in moves:\n        for d in directions:\n            count = 1\n            for step in (1, -1):\n                for i in range(1, 4):\n                    new_col = chr(ord(column) + d[0] * i * step)\n                    new_row = row + d[1] * i * step\n                    if (new_col, new_row) in move_set:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check if this move wins the game\n        if check_win(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_win(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if row >= 3 and all(board[column][row - i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for col in 'ABCDEFG':\n        if column < col and column in board and color in board[col][-1:]:\n            if sum(1 for i in range(4) if i < len(board[col]) and board[col][i] == color) == 4:\n                return True\n    \n    # Check diagonal (top-left to bottom-right)\n    for i in range(-3, 1):\n        if all(board[chr(ord(column) + i + j)][row + j] == color for j in range(4) if 0 <= row + j < 6 and 0 <= ord(column) + i + j < 7):\n            return True\n    \n    # Check diagonal (bottom-left to top-right)\n    for i in range(-3, 1):\n        if all(board[chr(ord(column) + i + j)][row - j] == color for j in range(4) if 0 <= row - j < 6 and 0 <= ord(column) + i + j < 7):\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            count = 0\n            for cell in line:\n                if board[cell[0]][cell[1]] == color:\n                    count += 1\n            if count == 4:\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x]) and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c][row] == color if c in board and len(board[c]) > row else False) for c in 'ABCDEFG'):\n                    return color\n\n        # Check vertical connections\n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                count = 0\n                for r in range(len(board[col])):\n                    if board[col][r] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n        \n        # Check diagonal connections\n        for c in range(len(board)):\n            for r in range(6):\n                if (c < 4 and r < 3 and \n                    all((board['ABCDEFG'[c + k]][r + k] == color if c + k < 7 and r + k < 6 else False) for k in range(4))):\n                    return color\n                if (c < 4 and r > 2 and \n                    all((board['ABCDEFG'[c + k]][r - k] == color if c + k < 7 and r - k >= 0 else False) for k in range(4))):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [1, 0, 1, -1]:  # Right, Down, Diagonal Down, Diagonal Up\n            count = 1\n            \n            for sign in [1, -1]:\n                r, c = row, board[column].index(color)\n                while 0 <= r < 6 and 0 <= c < 7 and board[chr(c + 65)][r] == color:\n                    count += 1\n                    r += direction * sign\n                    c += (sign if direction != 0 else 0)\n                    \n                if count >= 4:\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color.capitalize()\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if row >= 3 and all(board[column][row - i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for col in 'ABCDEFG':\n        if col in board and len(board[col]) > row and board[col][row] == color:\n            count = 0\n            for c in 'ABCDEFG':\n                if c in board and len(board[c]) > row and board[c][row] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n    \n    # Check diagonal (/)\n    for i in range(-3, 1):\n        if (column := chr(ord(column) + i)) in board and row + i >= 0 and row + i < len(board[column]) and board[column][row + i] == color:\n            if (column_next := chr(ord(column) + 1)) in board and row + i + 1 < len(board[column_next]) and board[column_next][row + i + 1] == color:\n                if (column_next2 := chr(ord(column) + 2)) in board and row + i + 2 < len(board[column_next2]) and board[column_next2][row + i + 2] == color:\n                    if (column_next3 := chr(ord(column) + 3)) in board and row + i + 3 < len(board[column_next3]) and board[column_next3][row + i + 3] == color:\n                        return True\n    \n    # Check diagonal (\\)\n    for i in range(-3, 1):\n        if (column := chr(ord(column) + i)) in board and row - i >= 0 and row - i < len(board[column]) and board[column][row - i] == color:\n            if (column_next := chr(ord(column) + 1)) in board and row - i + 1 < len(board[column_next]) and board[column_next][row - i + 1] == color:\n                if (column_next2 := chr(ord(column) + 2)) in board and row - i + 2 < len(board[column_next2]) and board[column_next2][row - i + 2] == color:\n                    if (column_next3 := chr(ord(column) + 3)) in board and row - i + 3 < len(board[column_next3]) and board[column_next3][row - i + 3] == color:\n                        return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                    return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for positions in LINES:\n                if all(board[col][row] == color for col, row in positions if row < 6 and board[col][row] is not None):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < len(board[x]))):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in grid and all(grid[col][row] == color for col in 'ABCDEFG'[:7][\n                                'ABCDEFG'.index(col):][:4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row - k] == color for k in range(4)\n                                if 'ABCDEFG'.index(col) + k < 7):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row + k] == color for k in range(4)\n                                if 'ABCDEFG'.index(col) + k < 7):\n                            return color\n    \n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in 'ABCDEFG':\n        for row in range(6):\n            if board[column][row] == color:\n                if (check_direction(board, column, row, color, 1, 0) or \n                    check_direction(board, column, row, color, 0, 1) or \n                    check_direction(board, column, row, color, 1, 1) or \n                    check_direction(board, column, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if 0 <= row < 6 and board[column][row] == color:\n            count += 1\n        else:\n            break\n        column = chr(ord(column) + delta_col)\n        row += delta_row\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    for start_col in range(max(0, ord(col) - ord('A') - 3), min(7 - 3, ord(col) - ord('A') + 1)):\n                        if all(board[chr(start_col + ord('A'))][row] == color for k in range(4)):\n                            return color\n                    # Check diagonal /\n                    if row <= 2 and 0 <= ord(col) - ord('A') <= 3:\n                        if all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n                    # Check diagonal \\\n                    if row >= 3 and 0 <= ord(col) - ord('A') <= 3:\n                        if all(board[chr(ord(col) - k)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (all(board[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        (col <= 'D' and all(board[c][row] == color for c in 'ABCDEFG'[(ord(col) - 65):(ord(col) - 61)])) or\n                        (row <= 2 and all(board[c][row + k] == color for k, c in zip(range(4), 'ABCDEFG'[(ord(col) - 65):(ord(col) - 61)]))) or\n                        (row >= 3 and col <= 'D' and all(board[c][row - k] == color for k, c in zip(range(4), 'ABCDEFG'[(ord(col) - 65):(ord(col) - 61)])))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if board[c].count(color) >= 4:\n                for r in range(6):\n                    if board[c][r] == color:\n                        if (r <= 2 and all(board[c][r + k] == color for k in range(4))) or \\\n                           (r <= 3 and c <= 'D' and all(board[chr(ord(c) + k)][r + k] == color for k in range(4))) or \\\n                           (r >= 3 and c <= 'D' and all(board[chr(ord(c) + k)][r - k] == color for k in range(4))) or \\\n                           (r <= 3 and c <= 'D' and all(board[c][r + k] == color for k in range(4))) or \\\n                           (r <= 2 and all(board[chr(ord(c) + k)][r + 3 - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        # Check for win condition\n        if len(board[column]) >= 4:\n            for i in range(len(board[column]) - 3, len(board[column])):\n                if all(c == color for c in board[column][i-3:i+1]):\n                    return color\n\n        # Check vertical\n        for col in 'ABCDEFG':\n            if len(board[col]) >= 4:\n                for i in range(len(board[col]) - 3):\n                    if all(c == board[col][i] for c in board[col][i:i+4]):\n                        return board[col][i]\n\n        # Check diagonals\n        for c in range(len(board)):\n            for r in range(len(board['A'])):\n                if c + 3 < len(board) and r + 3 < len(board['A']):\n                    if (all(board[c][r + i] == board[c][r] for i in range(4)) and board[c][r] != ''):\n                        return board[c][r]\n                if c - 3 >= 0 and r + 3 < len(board['A']):\n                    if (all(board[c][r + i] == board[c][r] for i in range(4)) and board[c][r] != ''):\n                        return board[c][r]\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (all(board[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        all(board[chr(ord(col) + i)][row] == color for i in range(4) if 0 <= ord(col) + i < 7) or\n                        all(board[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i < 7 and row + i < 6) or\n                        all(board[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < 7 and row - i >= 0)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, start_col, start_row, color, delta_col, delta_row):\n    count = 0\n    col_idx = 'ABCDEFG'.index(start_col)\n    row_idx = start_row\n    \n    while 0 <= col_idx < 7 and 0 <= row_idx < 6 and board['ABCDEFG'[col_idx]][row_idx] == color:\n        count += 1\n        if count == 4:\n            return True\n        col_idx += delta_col\n        row_idx += delta_row\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dcol, drow in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + dcol * i)\n            r = row + drow * i\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for position in pieces_positions:\n        column = 'ABCDEFG'.index(position[0])\n        color = position[2:]\n        for row in range(5, -1, -1):\n            if grid[row][column] == '':\n                grid[row][column] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if j < 4 and all(grid[i][j+k] == color for k in range(4)):\n                    return color\n                if i < 3 and all(grid[i+k][j] == color for k in range(4)):\n                    return color\n                if i < 3 and j < 4 and all(grid[i+k][j+k] == color for k in range(4)):\n                    return color\n                if i >= 3 and j < 4 and all(grid[i-k][j+k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if board[column][i] is None), None)\n        if row is not None:\n            board[column][row] = color\n            moves[color] += 1\n            \n            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                count = 1\n                for d in [1, -1]:\n                    for step in range(1, 4):\n                        r = row + direction[0] * step * d\n                        c = ord(column) - ord('A') + direction[1] * step * d\n                        if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                            count += 1\n                        else:\n                            break\n                if count >= 4:\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if check_winner(board[c], color):\n                return color\n    return \"Draw\"\n\ndef check_winner(column, color):\n    count = 0\n    for cell in column:\n        if cell == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    if (c, r) in [(c, r) for c in 'ABCDEFG' for r in range(6)]:\n                        # Check vertical\n                        if r <= 2 and all(board[c][r + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if c <= 'D' and all(board[chr(ord(c) + i)][r] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if c <= 'D' and r <= 2 and all(board[chr(ord(c) + i)][r + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if c <= 'D' and r >= 3 and all(board[chr(ord(c) + i)][r - i] == color for i in range(4)):\n                            return color\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or \n                    check_direction(board, color, col, row, 0, 1) or \n                    check_direction(board, color, col, row, 1, 1) or \n                    check_direction(board, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                for r in range(6):\n                    for c in range(4):\n                        if all(board[COLUMNS[c + k]][r] == color for k in range(4)):\n                            return color\n        \n        for c in range(7):\n            for r in range(3):\n                if all(board[COLUMNS[c]][r + k] == color for k in range(4)):\n                    return color\n        \n        for c in range(4):\n            for r in range(3):\n                if all(board[COLUMNS[c + k]][r + k] == color for k in range(4)):\n                    return color\n                if all(board[COLUMNS[c + k]][r + 3 - k] == color for k in range(4)):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [[(0, 1), (0, -1)], [(1, 0), (-1, 0)], [(1, 1), (-1, -1)], [(1, -1), (-1, 1)]]:\n            count = 1\n            \n            for d in direction:\n                x, y = row, board[column].index(color)\n                while 0 <= x + d[0] < 6 and 0 <= y + d[1] < 7 and board[column][x + d[0]] == color:\n                    count += 1\n                    x += d[0]\n                    y += d[1]\n                if count >= 4:\n                    return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if grid[chr(65 + c)][r] == color:\n                    if (c + 3 < 7 and all(grid[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r + 3 < 6 and all(grid[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(grid[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and all(grid[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for row in range(6):\n            if grid[col][row] == color:\n                if any(all(grid[col][row] == grid[c][r] for c, r in line)\n                       for line in LINES):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row - k] == color for k in range(4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == grid[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == grid[col][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == grid[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == grid[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n                    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((r for r in range(6) if board[column][r] is None), None)\n        if row is not None:\n            board[column][row] = color\n            if check_winner(board, column, row, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                x, y = ord(column) - ord('A') + i * dx * step, row + i * dy * step\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                player_moves[player] += 1\n                \n                if check_winner(grid, player):\n                    return player\n                \n                break\n    \n    return \"Draw\"\n\ndef check_winner(grid, player):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == player:\n                if check_direction(grid, col, row, player):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dc, dr in directions:\n        count = 1\n        for d in (1, -1):\n            for step in range(1, 4):\n                new_col = chr(ord(col) + dc * d * step)\n                new_row = row + dr * d * step\n                \n                if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == player:\n                    count += 1\n                else:\n                    break\n                \n                if count >= 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1))   # Diagonal /\n\ndef check_direction(board, col, row, color, dc, dr):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dc)\n        r = row + i * dr\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(color):\n                    return color.replace(\"Red\", \"Red\").replace(\"Yellow\", \"Yellow\")\n                break\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (board[col][row] == board[col][row-1] == board[col][row-2] == board[col][row-3] if row >= 3 else False or\n                        (col != 'A' and board[col][row] == board[chr(ord(col) - 1)][row] == board[chr(ord(col) - 2)][row] == board[chr(ord(col) - 3)][row]) if col >= 'D' else False or\n                        (row >= 3 and col != 'A' and col != 'B' and board[col][row] == board[chr(ord(col) - 1)][row - 1] == board[chr(ord(col) - 2)][row - 2] == board[chr(ord(col) - 3)][row - 3]) or\n                        (row <= 2 and col != 'A' and col != 'B' and board[col][row] == board[chr(ord(col) - 1)][row + 1] == board[chr(ord(col) - 2)][row + 2] == board[chr(ord(col) - 3)][row + 3])):\n                        return board[col][row]\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[col].append(color)\n        \n        if len(grid[col]) >= 4:\n            for i in range(len(grid[col]) - 3):\n                if all(x == color for x in grid[col][i:i+4]):\n                    return color\n    \n    for col in grid:\n        for row in range(len(grid[col])):\n            if row + 3 < len(grid[col]):\n                if all(grid[col][row + i] == grid[col][row] for i in range(4)):\n                    return grid[col][row]\n    \n    for i in range(7):\n        for j in range(6):\n            if all(i + k < len(grid['ABCDEFG'][0]) and grid['ABCDEFG'][i + k][j] == grid['ABCDEFG'][i][j] for k in range(4)):\n                return grid['ABCDEFG'][i][j]\n            if all(i + k < len(grid['ABCDEFG'][0]) and j - k >= 0 and grid['ABCDEFG'][i + k][j - k] == grid['ABCDEFG'][i][j] for k in range(4)):\n                return grid['ABCDEFG'][i][j]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color_to_check in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color_to_check:\n                        if col <= 3 and all(board[chr(col + i + 65)][row] == color_to_check for i in range(4)):\n                            return color_to_check\n                        if row <= 2 and all(board[chr(col + 65)][row + i] == color_to_check for i in range(4)):\n                            return color_to_check\n                        if col <= 3 and row <= 2 and all(board[chr(col + i + 65)][row + i] == color_to_check for i in range(4)):\n                            return color_to_check\n                        if col <= 3 and row >= 3 and all(board[chr(col + i + 65)][row - i] == color_to_check for i in range(4)):\n                            return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[c][r] == color for c, r in line if c in grid and r < len(grid[c]) and grid[c][r] is not None):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n\n        for r in range(len(board[column]) - 3, len(board[column])):\n            if r < 0:\n                continue\n            if all(board[column][r] == board[column][r + i] for i in range(4) if r + i < len(board[column])):\n                return color\n\n        for c in 'ABCDEFG':\n            if board[c]:\n                for r in range(len(board[c]) - 3):\n                    if all(board[c][r] == board[c][r + i] for i in range(4) if r + i < len(board[c])):\n                        return board[c][r]\n\n        for i in range(len(pieces_positions)):\n            for j in range(4):\n                if all(board['ABCDEFG'[i + j]][r] == board['ABCDEFG'[i]][r + j] for r in range(len(board['ABCDEFG'[i]]) - 3)):\n                    return board['ABCDEFG'[i]][r]\n\n        for i in range(len(pieces_positions)):\n            for j in range(4):\n                if all(board['ABCDEFG'[i + j]][r] == board['ABCDEFG'[i]][r - j] for r in range(len(board['ABCDEFG'[i]]) - 3)):\n                    return board['ABCDEFG'[i]][r]\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, color, column, row):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color, column, row):\n    # Check horizontal, vertical, and diagonal connections\n    return (check_direction(board, color, column, row, 1, 0) or  # horizontal\n            check_direction(board, color, column, row, 0, 1) or  # vertical\n            check_direction(board, color, column, row, 1, 1) or  # diagonal \\\n            check_direction(board, color, column, row, 1, -1))   # diagonal /\n\ndef check_direction(board, color, column, row, delta_col, delta_row):\n    count = 0\n    for direction in [1, -1]:\n        col, r = ord(column) - ord('A'), row\n        while 0 <= col < 7 and 0 <= r < 6 and board[chr(col + ord('A'))][r] == color:\n            count += 1\n            col += direction * delta_col\n            r += direction * delta_row\n    return count >= 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 3:\n            for i in range(len(board[column]) - 3):\n                if all(board[column][j] == color for j in range(i, i + 4)):\n                    return color\n    \n    for col in board:\n        for row in range(len(board[col])):\n            if row > 2:\n                if all(board[col][row - i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n    \n    for i in range(7):\n        for j in range(6):\n            if j <= 2 and i <= 3:\n                if all(board[COLUMNS[i+k]][j] == board[COLUMNS[i]][j] for k in range(4)):\n                    return board[COLUMNS[i]][j]\n    \n            if j <= 2 and i >= 3:\n                if all(board[COLUMNS[i-k]][j] == board[COLUMNS[i]][j] for k in range(4)):\n                    return board[COLUMNS[i]][j]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if any(board[c][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n\n        for player in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(65 + col)][row] == player:\n                        if (col + 3 < 7 and all(grid[chr(65 + c)][row] == player for c in range(col, col + 4))) or \\\n                           (row + 3 < 6 and all(grid[chr(65 + col)][r] == player for r in range(row, row + 4))) or \\\n                           (col + 3 < 7 and row + 3 < 6 and all(grid[chr(65 + c)][row + c - col] == player for c in range(col, col + 4))) or \\\n                           (col + 3 < 7 and row - 3 >= 0 and all(grid[chr(65 + c)][row - (c - col)] == player for c in range(col, col + 4))):\n                            return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + step * delta_col)\n        new_row = row + step * delta_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * i * step)\n                new_row = row + d[1] * i * step\n                if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for x in range(7):\n                for y in range(6):\n                    if board[chr(65 + x)][y] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_x, new_y = x + direction[0] * step, y + direction[1] * step\n                            if 0 <= new_x < 7 and 0 <= new_y < 6 and board[chr(65 + new_x)][new_y] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                           (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4))) or \\\n                           (col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or \\\n                           (col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        if check_winner(grid, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_directions(grid, col, row, color):\n                    return True\n    return False\n\ndef check_directions(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + d_col * step)\n            r = row + d_row * step\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for key in grid.keys():\n            for start_row in range(6):\n                if grid[key][start_row] is None:\n                    continue\n                if (start_row <= 2 and all(grid[key][start_row + k] == grid[key][start_row] for k in range(4))) or \\\n                   (start_row >= 3 and all(grid[key][start_row - k] == grid[key][start_row] for k in range(4))) or \\\n                   (key in 'ABCDEFG' and all(grid[chr(ord(key) + k)][start_row] == grid[key][start_row] for k in range(4) if chr(ord(key) + k) in grid)) or \\\n                   (key in 'ABCDEFG' and start_row <= 2 and all(grid[chr(ord(key) + k)][start_row + k] == grid[key][start_row] for k in range(4) if chr(ord(key) + k) in grid)) or \\\n                   (key in 'ABCDEFG' and start_row >= 3 and all(grid[chr(ord(key) + k)][start_row - k] == grid[key][start_row] for k in range(4) if chr(ord(key) + k) in grid)):\n                    return grid[key][start_row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] == color):\n                return True\n        return False\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(color):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check for a win after each move\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n\ndef check_winner(board, col, color):\n    col_index = 'ABCDEFG'.index(col)\n    row_index = len(board[col]) - 1\n\n    # Check vertical\n    if all(board[col][r] == color for r in range(max(0, row_index - 3), row_index + 1)):\n        return True\n    \n    # Check horizontal\n    for i in range(max(0, col_index - 3), min(7, col_index + 1)):\n        if all(board['ABCDEFG'[i + j]][row_index] == color for j in range(4) if 0 <= i + j < 7):\n            return True\n\n    # Check diagonal \\\n    for i in range(-3, 1):\n        if all(0 <= col_index + i + j < 7 and 0 <= row_index + j < 6 and board['ABCDEFG'[col_index + i + j]][row_index + j] == color for j in range(4)):\n            return True\n\n    # Check diagonal /\n    for i in range(-3, 1):\n        if all(0 <= col_index + i + j < 7 and 0 <= row_index - j < 6 and board['ABCDEFG'[col_index + i + j]][row_index - j] == color for j in range(4)):\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, player = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if check_winner(grid[col][row], col, row, grid):\n                        return grid[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(player, col, row, grid):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == player:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n        \n        # Check for win condition\n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal and diagonal\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                if all((color in board['ABCDEFG'[c+i]] for i in range(4) if c+i < 7)):\n                    return color\n                \n                if c <= 3:\n                    if all((color in board['ABCDEFG'[c+i]] for i in range(4))):\n                        return color\n                    if all((color in board['ABCDEFG'[c+i]] for i in range(4) if c+i < 7 and board['ABCDEFG'[c+i]].count(color) > 0)):\n                        return color\n            \n            # Check diagonal \\\n            for r in range(6):\n                if all((color in board['ABCDEFG'[COLUMNS.index(column) + i]][r + i] for i in range(4) if 0 <= COLUMNS.index(column) + i < 7 and r + i < 6)):\n                    return color\n            \n            # Check diagonal /\n            for r in range(6):\n                if all((color in board['ABCDEFG'[COLUMNS.index(column) - i]][r + i] for i in range(4) if 0 <= COLUMNS.index(column) - i < 7 and r + i < 6)):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check for a win after the current move\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n\n    # Check vertical\n    if len(board[col]) >= 4 and all(board[col][r] == color for r in range(row, row - 4, -1)):\n        return True\n\n    # Check horizontal\n    for c in 'ABCDEFG':\n        if c in board and len(board[c]) > 0:\n            if count_consecutive(board, c, row, color) >= 4:\n                return True\n\n    # Check diagonals\n    return count_diagonal(board, col, row, color)\n\ndef count_consecutive(board, col, row, color):\n    count = 0\n    for c in 'ABCDEFG':\n        if c in board and len(board[c]) > row and board[c][row] == color:\n            count += 1\n        else:\n            count = 0\n        if count >= 4:\n            return count\n    return count\n\ndef count_diagonal(board, col, row, color):\n    count = 0\n    for d in [1, -1]:  # Check both diagonals\n        for k in range(-3, 1):\n            r = row + k\n            c = ord(col) - ord('A') + d * k\n            if 0 <= c < 7 and 0 <= r < 6:\n                if board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    count = 0\n            if count >= 4:\n                return True\n    return False\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal (top-left to bottom-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal (bottom-left to top-right)\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if any(all(board[c][r] == board[c][r + k] for k in range(4)) for c in [c] for r in range(3)):\n                        return board[c][r]\n                    if all(board[c][r] == board[c + k][r] for k in range(4) if 0 <= ord(c) + k - ord('A') < 7):\n                        return board[c][r]\n                    if all(board[c][r] == board[c + k][r + k] for k in range(4) if 0 <= ord(c) + k - ord('A') < 7 and r + k < 6):\n                        return board[c][r]\n                    if all(board[c][r] == board[c + k][r - k] for k in range(4) if 0 <= ord(c) + k - ord('A') < 7 and r - k >= 0):\n                        return board[c][r]\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for c in 'ABCDEFG':\n        for r in range(6):\n            if board[c][r] == color:\n                if check_direction(board, color, c, r, 1, 0) or \\\n                   check_direction(board, color, c, r, 0, 1) or \\\n                   check_direction(board, color, c, r, 1, 1) or \\\n                   check_direction(board, color, c, r, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, dcol, drow):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dcol)\n        r = row + i * drow\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if j + 3 < 6 and all(board[chr(i + 65)][j + k] == color for k in range(4)):\n                        return color\n                    if i + 3 < 7 and all(board[chr(i + k + 65)][j] == color for k in range(4)):\n                        return color\n                    if i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4)):\n                        return color\n                    if i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win condition\n        if len(board[column]) >= 4:\n            if check_win(board[column][-4:], color):\n                return color\n    \n        # Check vertical\n        for col in board:\n            if len(board[col]) >= 4:\n                if check_win(board[col][-4:], color):\n                    return color\n\n        # Check horizontal and diagonal wins\n        for col in 'ABCDEFG':\n            for row in range(len(board[col])):\n                if row >= 3 and len(board[col]) > row and check_win([board[col][row-i] for i in range(4)], color):\n                    return color\n                \n                if col <= 'D' and row >= 3 and len(board[col]) > row and all(col in board[c] for c in 'DEFG'):\n                    if check_win([board[col][row-i] for i in range(4)], color):\n                        return color\n\n                if col <= 'D' and row <= 2 and len(board[col]) > row and all(col in board[c] for c in 'ABC'):\n                    if check_win([board[col][row+i] for i in range(4)], color):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n\ndef check_win(positions, color):\n    return all(p == color for p in positions)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if check_win(grid, col, row, color):\n                        return color\n    \n    return \"Draw\"\n\ndef check_win(grid, col, row, color):\n    return (check_direction(grid, col, row, color, 1, 0) or  # Horizontal\n            check_direction(grid, col, row, color, 0, 1) or  # Vertical\n            check_direction(grid, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(grid, col, row, color, 1, -1)    # Diagonal /\n           )\n\ndef check_direction(grid, col, row, color, delta_col, delta_row):\n    count = 0\n    for d in range(-3, 4):\n        c = chr(ord(col) + d * delta_col)\n        r = row + d * delta_row\n        if 0 <= r < 6 and c in grid and grid[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board['ABCDEFG'[c]][r] == color:\n                    if c <= 3 and all(board['ABCDEFG'[c + i]][r] == color for i in range(4)):\n                        return color\n                    if r <= 2 and all(board['ABCDEFG'[c]][r + i] == color for i in range(4)):\n                        return color\n                    if c <= 3 and r <= 2 and all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4)):\n                        return color\n                    if c <= 3 and r >= 3 and all(board['ABCDEFG'[c + i]][r - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = []\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                moves.append((col, row, color))\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n                    check_direction(board, col, row, color, 0, 1) or  # Vertical\n                    check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n                    check_direction(board, col, row, color, 1, -1)): # Diagonal /\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, dcol, drow):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + dcol * i)\n        r = row + drow * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        if check_winner(board, col, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        \n        for i in range(1, 4):\n            r, c = row + d[0] * i, ord(col) - ord('A') + d[1] * i\n            if 0 <= r < 6 and 0 <= c < 7 and len(board[chr(c + ord('A'))]) > r and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            r, c = row - d[0] * i, ord(col) - ord('A') - d[1] * i\n            if 0 <= r < 6 and 0 <= c < 7 and len(board[chr(c + ord('A'))]) > r and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        for line in LINES:\n            if any(pos in player_moves[player] for pos in line):\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1)    # Diagonal /\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 1\n    for direction in [1, -1]:\n        for step in range(1, 4):\n            new_col = chr(ord(col) + delta_col * direction * step)\n            new_row = row + delta_row * direction * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 3:\n            if check_winner(board, column, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    rows = len(board[column]) - 1\n    if check_direction(board, column, rows, color, 1, 0) or \\\n       check_direction(board, column, rows, color, 0, 1) or \\\n       check_direction(board, column, rows, color, 1, 1) or \\\n       check_direction(board, column, rows, color, 1, -1):\n        return True\n    return False\n\ndef check_direction(board, column, row, color, dir_x, dir_y):\n    count = 0\n    for i in range(-3, 1):\n        x = ord(column) - ord('A') + i * dir_x\n        y = row + i * dir_y\n        if 0 <= x < 7 and 0 <= y < 6 and (board[chr(x + ord('A'))] and board[chr(x + ord('A'))][-1] == color):\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c, r = chr(ord(col) + step * dc), row + step * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c, r = chr(ord(col) - step * dc), row - step * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if check_direction(board, column, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + d[0] * i)\n            r = row + d[1] * i\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        \n        for line in LINES:\n            if any(board[col][row] == player for col, row in line):\n                return player\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (check_winner(board, col, row, board[col][row])):\n                        return board[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 0\n        for step in range(-3, 4):\n            r = row + step * dr\n            c = chr(ord(col) + step * dc)\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player] += 1\n        \n        if check_winner(board, player):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if check_direction(board, col, row, player):\n                    return True\n    return False\n\ndef check_direction(board, col, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + d_col * i)\n            r = row + d_row * i\n            if 0 <= r < 6 and c in board and board[c][r] == player:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (0 <= r < 6) and (board[c][r] is not None)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(board, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[x][y] == color for x, y in line):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if any(board[c][r] != color for c, r in line):\n                continue\n            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        # Check for a win after each move\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player], player):\n            return player\n            \n    return \"Draw\"\n\ndef check_winner(moves, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for column, row in moves:\n        for dx, dy in directions:\n            count = 1\n            for step in range(1, 4):\n                x, y = chr(ord(column) + dx * step), row + dy * step\n                if 0 <= y < 6 and x in 'ABCDEFG' and (x, y) in moves:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                x, y = chr(ord(column) - dx * step), row - dy * step\n                if 0 <= y < 6 and x in 'ABCDEFG' and (x, y) in moves:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player] += 1\n        \n        if check_winner(board, player, row, column):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(board, player, row, column):\n    COLUMNS = 'ABCDEFG'\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        \n        for step in range(1, 4):\n            r = row + step * dr\n            c = COLUMNS.index(column) + step * dc\n            if 0 <= r < 6 and 0 <= c < 7 and board[COLUMNS[c]][r] == player:\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            r = row - step * dr\n            c = COLUMNS.index(column) - step * dc\n            if 0 <= r < 6 and 0 <= c < 7 and board[COLUMNS[c]][r] == player:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + d[0] * step)\n            r = row + d[1] * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_positions = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_positions[player].append((column, row))\n                break\n\n        for player in ['Red', 'Yellow']:\n            positions = player_positions[player]\n            for line in LINES:\n                if len(set(positions) & line) == 4:\n                    return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:\n                    # Horizontal\n                    if c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4)):\n                        return color\n                    # Vertical\n                    if r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4)):\n                        return color\n                    # Diagonal down-right\n                    if c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4)):\n                        return color\n                    # Diagonal down-left\n                    if c >= 3 and r <= 2 and all(board[chr(65 + c - i)][r + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + dc * i)\n            r = row + dr * i\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if grid[chr(j + 65)][i] is not None:\n                    if (j + 3 < 7 and\n                        grid[chr(j + 65)][i] == grid[chr(j + 66)][i] == grid[chr(j + 67)][i] == grid[chr(j + 68)][i]) or \\\n                       (i + 3 < 6 and\n                        grid[chr(j + 65)][i] == grid[chr(j + 65)][i + 1] == grid[chr(j + 65)][i + 2] == grid[chr(j + 65)][i + 3]) or \\\n                       (j + 3 < 7 and i + 3 < 6 and\n                        grid[chr(j + 65)][i] == grid[chr(j + 66)][i + 1] == grid[chr(j + 67)][i + 2] == grid[chr(j + 68)][i + 3]) or \\\n                       (j - 3 >= 0 and i + 3 < 6 and\n                        grid[chr(j + 65)][i] == grid[chr(j + 64)][i + 1] == grid[chr(j + 63)][i + 2] == grid[chr(j + 62)][i + 3]):\n                        return grid[chr(j + 65)][i]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for direction in LINES:\n            if all(board[x][y] == color for x, y in direction if (x in board) and (y < 6 and board[x][y] == color)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(7):\n        for j in range(6):\n            if board[chr(i + 65)][j] == color:\n                if i + 3 < 7 and all(board[chr(x + 65)][j] == color for x in range(i, i + 4)):\n                    return True\n                if j + 3 < 6 and all(board[chr(i + 65)][y] == color for y in range(j, j + 4)):\n                    return True\n                if i + 3 < 7 and j + 3 < 6 and all(board[chr(x + 65)][y] == color for x, y in zip(range(i, i + 4), range(j, j + 4))):\n                    return True\n                if i + 3 < 7 and j - 3 >= 0 and all(board[chr(x + 65)][y] == color for x, y in zip(range(i, i + 4), range(j, j - 4, -1))):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        board[col].append(color)\n        \n        # Check for a win\n        if len(board[col]) >= 4:\n            # Vertical check\n            if board[col][-4:] == [color] * 4:\n                return color\n            \n            # Horizontal and diagonal checks\n            for i in range(len(board[col]) - 3):\n                # Horizontal check\n                if all(board[c][i] == color for c in board if i < len(board[c])):\n                    return color\n            \n            # Diagonal checks\n            for i in range(max(0, len(board[col]) - 4), len(board[col])):\n                for j in range(-3, 1):\n                    if all((board[col][i + j * d] == color) for d in range(4) if 0 <= i + j * d < len(board[col])):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n\n        # Check for a win after each move\n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if len(board[column]) >= 4 and all(board[column][r] == color for r in range(row, row - 4, -1)):\n        return True\n    \n    # Check horizontal\n    for col in range(max(0, ord(column) - ord('A') - 3), min(7, ord(column) - ord('A') + 1)):\n        if all(board[chr(col + ord('A'))][row] == color for col in range(col, col + 4) if row < len(board[chr(col + ord('A'))])):\n            return True\n    \n    # Check diagonal \\\n    for r in range(row, -1, -1):\n        for c in range(max(0, ord(column) - ord('A') - 3), min(7, ord(column) - ord('A') + 1)):\n            if (r - 3 >= 0 and \n                all(board[chr(c + ord('A'))][r - k] == color for k in range(4) if r - k < len(board[chr(c + ord('A'))]))):\n                return True\n            \n    # Check diagonal /\n    for r in range(row, -1, -1):\n        for c in range(max(0, ord(column) - ord('A') - 3), min(7, ord(column) - ord('A') + 1)):\n            if (r + 3 < 6 and \n                all(board[chr(c + ord('A'))][r + k] == color for k in range(4) if r + k < len(board[chr(c + ord('A'))]))):\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for win in LINES:\n            if all(board[col][row] == color for col, row in win if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    move_set = set(moves)\n    \n    for column, row in moves:\n        for d in directions:\n            count = 1\n            for step in range(1, 4):\n                next_move = (chr(ord(column) + d[0] * step), row + d[1] * step)\n                if next_move in move_set:\n                    count += 1\n                else:\n                    break\n            \n            for step in range(1, 4):\n                prev_move = (chr(ord(column) - d[0] * step), row - d[1] * step)\n                if prev_move in move_set:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return True\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check if this move wins the game\n        if check_win(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_win(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if row >= 3 and all(board[column][row - i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for col in 'ABCDEFG':\n        if column == col:\n            continue\n        if board[col] and len(board[col]) > row and board[col][row] == color:\n            count = 1\n            for i in range(1, 4):\n                if (col_index := 'ABCDEFG'.index(col) + i) < 7 and len(board['ABCDEFG'[col_index]]) > row and board['ABCDEFG'[col_index]][row] == color:\n                    count += 1\n                else:\n                    break\n            for i in range(1, 4):\n                if (col_index := 'ABCDEFG'.index(col) - i) >= 0 and len(board['ABCDEFG'[col_index]]) > row and board['ABCDEFG'[col_index]][row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    \n    # Check diagonals\n    for d in [-1, 1]:  # for both diagonal directions\n        count = 1\n        for i in range(1, 4):\n            if row + i < 6 and (col_index := 'ABCDEFG'.index(column) + i * d) in range(7) and len(board['ABCDEFG'[col_index]]) > row + i and board['ABCDEFG'[col_index]][row + i] == color:\n                count += 1\n            else:\n                break\n        for i in range(1, 4):\n            if row - i >= 0 and (col_index := 'ABCDEFG'.index(column) - i * d) in range(7) and len(board['ABCDEFG'[col_index]]) > row - i and board['ABCDEFG'[col_index]][row - i] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if all(board[col][row] == color for col in 'ABCDEFG' if board[col][row] == color):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # vertical\n                    check_direction(board, col, row, 1, 1, color) or  # diagonal \\\n                    check_direction(board, col, row, 1, -1, color)):  # diagonal /\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[chr(j + k + 65)][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j >= 3 and i <= 2 and all(board[chr(j - k + 65)][i + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                if check_winner(board, col, i, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check all four directions for a winning condition\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1)    # Diagonal /\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        c = chr(ord(col) + step * delta_col)\n        r = row + step * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for win\n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if check_directions(board, column, row, color):\n                    return True\n    return False\n\ndef check_directions(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in [1, -1]:\n            x, y = column, row\n            while True:\n                x_idx = 'ABCDEFG'.index(x) + step * dx\n                y_idx = y + step * dy\n                if 0 <= x_idx < 7 and 0 <= y_idx < 6 and board['ABCDEFG'[x_idx]][y_idx] == color:\n                    count += 1\n                    x = 'ABCDEFG'[x_idx]\n                    y = y_idx\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) + k]][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) - k]][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if ord(col) + i < ord('H')) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if ord(col) + i < ord('H') and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if ord(col) + i < ord('H') and row - i >= 0)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] == color):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for positions in LINES:\n            if all(board[col][row] == color for col, row in positions if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[1]\n                    c = board.keys().index(col) + d * i * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid['ABCDEFG'[i]][row + i] == color for i in range(4) if 'ABCDEFG'.index(col) + i < 7):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid['ABCDEFG'[i]][row - i] == color for i in range(4) if 'ABCDEFG'.index(col) + i < 7):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Horizontal check\n                    if c <= 'D' and all(board[c][r] == board[c][r] for c in 'DEFG' if board[c][r] == board[c][r]):\n                        return board[c][r]\n                    # Vertical check\n                    if r <= 2 and all(board[c][r] == board[c][r] for r in range(r, r + 4)):\n                        return board[c][r]\n                    # Diagonal /\n                    if c <= 'D' and r >= 3 and all(board[c][r] == board[c][r] for c in 'DEFG' if board[c][r] == board[c][r]):\n                        return board[c][r]\n                    # Diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[c][r] == board[c][r] for r in range(r, r + 4)):\n                        return board[c][r]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            x = col[0] + dx * step\n                            y = row + dy * step\n                            if 0 <= y < 6 and x in 'ABCDEFG' and board[x][y] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] == color):\n                return color\n                \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if row < 6):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        if len(board[col]) >= 4:\n            for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                count = 1\n                for step in [-1, 1]:\n                    for i in range(1, 4):\n                        r = len(board[col]) - 1 + direction[1] * step * i\n                        c = ord(col) - ord('A') + direction[0] * step * i\n                        if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))] and board[chr(c + ord('A'))][-1] == color:\n                            count += 1\n                        else:\n                            break\n                if count >= 4:\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if r <= 2 and c >= 'D' and all(board[chr(ord(c)-i)][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if r <= 2 and c <= 'D' and all(board[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for row in range(6):\n            for col in 'ABCDEFG':\n                if board[col][row] == color:\n                    if (col, row) in LINES[0] or (col, row) in LINES[1] or (col, row) in LINES[2] or (col, row) in LINES[3]:\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:].count(color) == 4:\n                return color\n            \n            # Check horizontal\n            for c in 'ABCDEFG':\n                if c in board and board[c][-1] == color:\n                    if (board[c].count(color) >= 4 and\n                        (board[c][-4:].count(color) == 4)):\n                        return color\n            \n            # Check diagonals\n            for r in range(len(board[column]) - 3, len(board[column])):\n                if (board[column][r-3] == board[column][r-2] == \n                    board[column][r-1] == board[column][r] == color):\n                    return color\n                if column in board and board[column].count(color) >= 4:\n                    for i in range(-3, 1):\n                        if (board[column][r-i] == color and\n                            (column+i) in board and board[column+i].count(color) >= 4):\n                            return color\n                \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (i <= 3 and all(board[chr(65 + i + k)][j] == color for k in range(4))) or \\\n                       (j <= 2 and all(board[chr(65 + i)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == color for k in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if (r <= 2 and all(board[c][r + i] == board[c][r] for i in range(4))) or \\\n                       (c <= 'D' and all(board[chr(ord(c) + i)][r] == board[c][r] for i in range(4))) or \\\n                       (r <= 2 and c <= 'D' and all(board[chr(ord(c) + i)][r + i] == board[c][r] for i in range(4))) or \\\n                       (r >= 3 and c <= 'D' and all(board[chr(ord(c) + i)][r - i] == board[c][r] for i in range(4))):\n                        return board[c][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        # Check for a win after each move\n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal\n            for c in 'ABCDEFG':\n                if board[c][-len(board[c]):][-4:] == [color] * 4:\n                    return color\n            \n            # Check diagonal \\\n            for i in range(3):\n                for j in range(3):\n                    if (c := (column, color)) in [(c, color) for c in board.keys() if board[c][-1] == color]:\n                        if (board[chr(ord(column) + k)][j + k] == color for k in range(4)):\n                            return color\n            \n            # Check diagonal /\n            for i in range(3):\n                for j in range(3):\n                    if (c := (column, color)) in [(c, color) for c in board.keys() if board[c][-1] == color]:\n                        if (board[chr(ord(column) + k)][3 - j + k] == color for k in range(4)):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if any(all(grid[col][row] == grid[c][r] for c, r in line) for line in LINES):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a winner after this move\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] is not None:\n                    player = board['ABCDEFG'[c]][r]\n                    \n                    # Check vertical\n                    if r <= 2 and all(board['ABCDEFG'[c]][r+i] == player for i in range(4)):\n                        return player\n                    \n                    # Check horizontal\n                    if c <= 3 and all(board['ABCDEFG'[c+i]][r] == player for i in range(4)):\n                        return player\n                    \n                    # Check diagonal \\\n                    if r <= 2 and c <= 3 and all(board['ABCDEFG'[c+i]][r+i] == player for i in range(4)):\n                        return player\n                    \n                    # Check diagonal /\n                    if r >= 3 and c <= 3 and all(board['ABCDEFG'[c+i]][r-i] == player for i in range(4)):\n                        return player\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(color):\n            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n    \n    # Check vertical\n    if all(board[col][r] == color for r in range(max(0, row-3), row+1)):\n        return True\n    \n    # Check horizontal\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7 - 4 + ord(col) - ord('A') + 1, 7)):\n        if all(board[chr(c + ord('A'))][row] == color for c in range(c, c + 4)):\n            return True\n            \n    # Check diagonal \\\n    for r in range(max(0, row - 3), min(row + 1, 6)):\n        for c in range(max(0, ord(col) - ord('A') - 3), min(7 - 4 + ord(col) - ord('A') + 1, 7)):\n            if (r + 3 < 6 and all(board[chr(c + ord('A'))][r + i] == color for i in range(4) if r + i < 6 and c + i < 7)):\n                return True\n            \n    # Check diagonal /\n    for r in range(max(0, row - 3), min(row + 1, 6)):\n        for c in range(max(0, ord(col) - ord('A') - 3), min(7 - 4 + ord(col) - ord('A') + 1, 7)):\n            if (r - 3 >= 0 and all(board[chr(c + ord('A'))][r - i] == color for i in range(4) if r - i >= 0 and c + i < 7)):\n                return True\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (0 <= r < 6)):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if grid[chr(65 + c)][r] == color:\n                    if (c + 3 < 7 and all(grid[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r + 3 < 6 and all(grid[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(grid[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and all(grid[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i in range(6) if board[col][i] is None)\n        board[col][row] = color\n\n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in (1, -1):\n            x, y = ord(col) - ord('A'), row\n            while 0 <= x + step * dx < 7 and 0 <= y + step * dy < 6 and board[chr(ord('A') + x + step * dx)][y + step * dy] == color:\n                count += 1\n                x += step * dx\n                y += step * dy\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                if grid[col].count(color) >= 4:\n                    for row in range(6):\n                        if grid[col][row] == color:\n                            if (row <= 2 and \n                                grid[col][row] == grid[col][row+1] == grid[col][row+2] == grid[col][row+3]):\n                                return color\n\n            for row in range(6):\n                for col in range(4):\n                    if (grid['ABCDEFG'[col]][row] == color and\n                        grid['ABCDEFG'[col+1]][row] == color and\n                        grid['ABCDEFG'[col+2]][row] == color and\n                        grid['ABCDEFG'[col+3]][row] == color):\n                        return color\n\n            for row in range(3):\n                for col in range(4):\n                    if (grid['ABCDEFG'[col]][row] == color and\n                        grid['ABCDEFG'[col+1]][row+1] == color and\n                        grid['ABCDEFG'[col+2]][row+2] == color and\n                        grid['ABCDEFG'[col+3]][row+3] == color):\n                        return color\n\n            for row in range(3, 6):\n                for col in range(4):\n                    if (grid['ABCDEFG'[col]][row] == color and\n                        grid['ABCDEFG'[col+1]][row-1] == color and\n                        grid['ABCDEFG'[col+2]][row-2] == color and\n                        grid['ABCDEFG'[col+3]][row-3] == color):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if c + 3 < 7 and all(board['ABCDEFG'[c + i]][r] == color for i in range(4)):\n                        return color\n                    if r + 3 < 6 and all(board['ABCDEFG'[c]][r + i] == color for i in range(4)):\n                        return color\n                    if c + 3 < 7 and r + 3 < 6 and all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4)):\n                        return color\n                    if c - 3 >= 0 and r + 3 < 6 and all(board['ABCDEFG'[c - i]][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        # Check for a win condition\n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # check vertical\n    if len(board[column]) >= 4 and all(piece == color for piece in board[column][-4:]):\n        return True\n\n    # check horizontal\n    for col in board:\n        if len(board[col]) > 0 and board[col][-1] == color:\n            count = 1\n            # Check left\n            for left in range(ord(col) - ord('A') - 1, -1, -1):\n                if len(board[chr(left + ord('A'))]) > 0 and board[chr(left + ord('A'))][-1] == color:\n                    count += 1\n                else:\n                    break\n            # Check right\n            for right in range(ord(col) - ord('A') + 1, 7):\n                if len(board[chr(right + ord('A'))]) > 0 and board[chr(right + ord('A'))][-1] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n\n    # check diagonal \\\n    for i in range(6):\n        for j in range(7):\n            if (i < 3 and j < 4 and\n                board[chr(j + ord('A'))][i:i + 4] == [color] * 4):\n                return True\n    \n    # check diagonal /\n    for i in range(6):\n        for j in range(7):\n            if (i >= 3 and j < 4 and\n                board[chr(j + ord('A'))][i-3:i + 1] == [color] * 4):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] == color)):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board['ABCDEFG'[c]][r] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            rr = r + direction[0] * step\n                            cc = c + direction[1] * step\n                            if 0 <= rr < 6 and 0 <= cc < 7 and board['ABCDEFG'[cc]][rr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n    \n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    if ((c, r) in LINES[0] or \n                        (c, r) in LINES[1] or \n                        (c, r) in LINES[2] or \n                        (c, r) in LINES[3]):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n\n        for player in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(65 + col)][row] == player:\n                        if (col + 3 < 7 and all(grid[chr(65 + c)][row] == player for c in range(col, col + 4))) or \\\n                           (row + 3 < 6 and all(grid[chr(65 + col)][r] == player for r in range(row, row + 4))) or \\\n                           (col + 3 < 7 and row + 3 < 6 and all(grid[chr(65 + c)][row + c - col] == player for c in range(col, col + 4))) or \\\n                           (col + 3 < 7 and row - 3 >= 0 and all(grid[chr(65 + c)][row - (c - col)] == player for c in range(col, col + 4))):\n                            return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + delta_col * step)\n        r = row + delta_row * step\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color, 1, 0) or \\\n                   check_direction(grid, col, row, color, 0, 1) or \\\n                   check_direction(grid, col, row, color, 1, 1) or \\\n                   check_direction(grid, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in grid and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for x in range(7):\n                for y in range(6):\n                    if board[chr(65 + x)][y] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_x, new_y = x + direction[0] * step, y + direction[1] * step\n                            if 0 <= new_x < 7 and 0 <= new_y < 6 and board[chr(65 + new_x)][new_y] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if (j + 3 < 7 and all(board[chr(k + 65)][i] == color_to_check for k in range(j, j + 4))) or \\\n                       (i + 3 < 6 and all(board[chr(j + 65)][k] == color_to_check for k in range(i, i + 4))) or \\\n                       (i + 3 < 6 and j + 3 < 7 and all(board[chr(j + k + 65)][i + k] == color_to_check for k in range(4))) or \\\n                       (i - 3 >= 0 and j + 3 < 7 and all(board[chr(j + k + 65)][i - k] == color_to_check for k in range(4))):\n                        return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row + k] == color for k in range(4)) or\n                                col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)) or\n                                col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)) or\n                                col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        if check_winner(grid, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if (check_direction(grid, col, row, 1, 0, color) or  # horizontal\n                    check_direction(grid, col, row, 0, 1, color) or  # vertical\n                    check_direction(grid, col, row, 1, 1, color) or  # diagonal /\n                    check_direction(grid, col, row, 1, -1, color)):  # diagonal \\\n                    return True\n    return False\n\ndef check_direction(grid, col, row, dcol, drow, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * dcol)\n        r = row + i * drow\n        if c in grid and 0 <= r < 6 and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column].append(color)\n\n        # Check for a win\n        if len(grid[column]) >= 4:\n            if check_winner(grid, column, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(grid, column, color):\n    row = len(grid[column]) - 1\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        \n        # Check in the positive direction\n        r, c = row, ord(column) - ord('A')\n        while 0 <= r + dr < 6 and 0 <= c + dc < 7 and grid[chr(c + dc + ord('A'))] and grid[chr(c + dc + ord('A'))][-1] == color:\n            count += 1\n            r += dr\n            c += dc\n        \n        # Check in the negative direction\n        r, c = row, ord(column) - ord('A')\n        while 0 <= r - dr < 6 and 0 <= c - dc < 7 and grid[chr(c - dc + ord('A'))] and grid[chr(c - dc + ord('A'))][-1] == color:\n            count += 1\n            r -= dr\n            c -= dc\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check for a win after each move\n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n\ndef check_winner(board, col, color):\n    col_index = 'ABCDEFG'.index(col)\n    row_index = len(board[col]) - 1\n\n    # Check vertical\n    if all(board[col][r] == color for r in range(max(0, row_index - 3), row_index + 1)):\n        return True\n    \n    # Check horizontal\n    for i in range(max(0, col_index - 3), min(7, col_index + 1)):\n        if all(board['ABCDEFG'[i + j]][row_index] == color for j in range(4) if 0 <= i + j < 7):\n            return True\n\n    # Check diagonal \\\n    for i in range(-3, 1):\n        if all(0 <= col_index + i + j < 7 and 0 <= row_index + j < 6 and board['ABCDEFG'[col_index + i + j]][row_index + j] == color for j in range(4)):\n            return True\n\n    # Check diagonal /\n    for i in range(-3, 1):\n        if all(0 <= col_index + i + j < 7 and 0 <= row_index - j < 6 and board['ABCDEFG'[col_index + i + j]][row_index - j] == color for j in range(4)):\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n        \n        # Check for win condition\n        if len(board[column]) >= 4:\n            # Check vertical\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check horizontal and diagonal\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                if all((color in board['ABCDEFG'[c+i]] for i in range(4)) and \n                       (len(board['ABCDEFG'[c+i]]) > 0 and board['ABCDEFG'[c+i]][-1] == color) for i in range(4)):\n                    return color\n                \n                if c <= 3:\n                    if all((color in board['ABCDEFG'[c+i]] for i in range(4)) and \n                           (len(board['ABCDEFG'[c+i]]) > 0 and board['ABCDEFG'[c+i]][-1] == color) for i in range(4)):\n                        return color\n                \n                if c >= 3 and all((color in board['ABCDEFG'[c-i]] for i in range(4)) and \n                                  (len(board['ABCDEFG'[c-i]]) > 0 and board['ABCDEFG'[c-i]][-1] == color) for i in range(4)):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    if check_winner(board[chr(c + 65)], r, color) or check_vertical(board, c, r, color) or check_diagonal(board, c, r, color):\n                        return color\n    \n    return \"Draw\"\n\ndef check_winner(column, row, color):\n    count = 0\n    for c in column:\n        if c == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n\ndef check_vertical(board, col, row, color):\n    count = 0\n    for r in range(6):\n        if board[chr(col + 65)][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n\ndef check_diagonal(board, col, row, color):\n    count = 0\n    for d in range(-3, 4):\n        if 0 <= col + d < 7 and 0 <= row + d < 6 and board[chr(col + d + 65)][row + d] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    count = 0\n    for d in range(-3, 4):\n        if 0 <= col + d < 7 and 0 <= row - d < 6 and board[chr(col + d + 65)][row - d] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if any((column, row) in line for column in board.keys() for row in range(6)):\n                if all(board[column][r] == color for column, r in line if board[column][r] is not None):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == board[c][r] for i in range(4)):\n                        return board[c][r]\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == board[c][r] for i in range(4)):\n                        return board[c][r]\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[chr(ord(c)+i)][r-i] == board[c][r] for i in range(4)):\n                        return board[c][r]\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c)+i)][r+i] == board[c][r] for i in range(4)):\n                        return board[c][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for player in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == player:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == player for k in range(4)):\n                            return player\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == player for k in range(4)):\n                            return player\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == player for k in range(4)):\n                            return player\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == player for k in range(4)):\n                            return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for win_condition in LINES:\n            if all(board[c][r] == color for c, r in win_condition if (c in board and r < 6 and board[c][r] is not None)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board[COLUMNS[i]][j] is not None:\n                    color = board[COLUMNS[i]][j]\n                    if (i <= 3 and all(board[COLUMNS[i+k]][j] == color for k in range(4))) or \\\n                       (j <= 2 and all(board[COLUMNS[i]][j+k] == color for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[COLUMNS[i+k]][j+k] == color for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[COLUMNS[i+k]][j-k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check for vertical, horizontal, and diagonal connections\n                    if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                        return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for direction in [\n            [(0, 1), (0, 2), (0, 3)],  # Vertical\n            [(1, 0), (2, 0), (3, 0)],  # Horizontal\n            [(1, 1), (2, 2), (3, 3)],  # Diagonal down\n            [(1, -1), (2, -2), (3, -3)] # Diagonal up\n        ]:\n            for i in range(7):\n                for j in range(6):\n                    if grid[chr(i + 65)][j] == color:  # Convert index to column letter\n                        count = 1\n                        for dx, dy in direction:\n                            ni, nj = i + dx, j + dy\n                            if 0 <= ni < 7 and 0 <= nj < 6 and grid[chr(ni + 65)][nj] == color:\n                                count += 1\n                        if count >= 4:\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a winner\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(65 + c + k)][r] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check vertical\n                    if r <= 2 and all(board[chr(65 + c)][r + k] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(65 + c + k)][r - k] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(65 + c + k)][r + k] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n        \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == player:\n                    # Check horizontally\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == player for i in range(4)):\n                        return player\n                    # Check vertically\n                    if row <= 2 and all(grid[col][row + i] == player for i in range(4)):\n                        return player\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == player for i in range(4)):\n                        return player\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == player for i in range(4)):\n                        return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                for i in range(6):\n                    for j in range(4):\n                        if all(board[col][i] == color for col in 'ABCDEFG'[j:j+4]):\n                            return color\n                for i in range(3):\n                    for j in range(7):\n                        if all(board[chr(ord('A') + j)][i+k] == color for k in range(4)):\n                            return color\n                for i in range(3):\n                    for j in range(4):\n                        if all(board[chr(ord('A') + j+k)][i+k] == color for k in range(4)):\n                            return color\n                for i in range(3, 6):\n                    for j in range(4):\n                        if all(board[chr(ord('A') + j+k)][i-k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            # Check vertical\n            if all(board[col][-i] == color for i in range(1, 5)):\n                return color\n        \n        for i in range(max(0, len(board[col]) - 4), len(board[col])):\n            # Check horizontal\n            if all((c in board and len(board[c]) > i and board[c][i] == color) \n                   for c in 'ABCDEFG' \n                   if c in board and (len(board[c]) > i)):\n                return color\n        \n            # Check diagonal \\\n            if col in 'ABCDEFG' and (ord(col) - ord('A') + 3 < 7) and i < len(board[col]):\n                for j in range(4):\n                    if (ord(col) - ord('A') + j < 7 and \n                        i < len(board[chr(ord(col) - j)])) and \\\n                       board[chr(ord(col) - j)][i] != color:\n                        break\n                else:\n                    return color\n                \n            # Check diagonal /\n            if col in 'ABCDEFG' and (ord(col) - ord('A') - 3 >= 0) and i < len(board[col]):\n                for j in range(4):\n                    if (ord(col) - ord('A') - j >= 0 and \n                        i < len(board[chr(ord(col) + j)])) and \\\n                       board[chr(ord(col) + j)][i] != color:\n                        break\n                else:\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n\n        for line in LINES:\n            if any(pos in player_moves[player] for pos in line):\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, column, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return any(check_direction(board, col, row, color, dx, dy) for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)])\n\ndef check_direction(board, col, row, color, dx, dy):\n    count = 0\n    for step in range(-3, 4):\n        x = chr(ord(col) + step * dx)\n        y = row + step * dy\n        if 0 <= y < 6 and x in board and board[x][y] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            # Check for vertical win\n            if board[column][-4:] == [color] * 4:\n                return color\n\n        # Check for horizontal, diagonal \\\n        for i in range(max(0, len(board[column]) - 4), len(board[column])):\n            if (board[column][i:i+4] == [color] * 4 or\n                all(board[COLUMNS[c]] and board[COLUMNS[c]][i] == color for c in range(4)) or\n                all(board[COLUMNS[c]][i] == color for c in range(4) if i < len(board[COLUMNS[c]]))):\n                return color\n\n        # Check for diagonal /\n        for i in range(len(board[column])):\n            if (i < len(board[column]) - 3 and\n                all(board[COLUMNS[column_index]][i + (column_index - column)] == color for column_index in range(column, column + 4))):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c, r = chr(ord(col) + step * dc), row + step * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c, r = chr(ord(col) - step * dc), row - step * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    positions = {(col, row) for col, row in moves}\n\n    for col, row in moves:\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for step in range(1, 4):\n                next_pos = (chr(ord(col) + direction[0] * step), row + direction[1] * step)\n                if next_pos in positions:\n                    count += 1\n                else:\n                    break\n\n            for step in range(1, 4):\n                prev_pos = (chr(ord(col) - direction[0] * step), row - direction[1] * step)\n                if prev_pos in positions:\n                    count += 1\n                else:\n                    break\n\n            if count >= 4:\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for i, (c, r) in enumerate(moves):\n        if any(all((c, r) in moves for c, r in line) for line in get_lines(c, r)):\n            return True\n    return False\n\ndef get_lines(col, row):\n    COLUMNS = 'ABCDEFG'\n    return [\n        [(COLUMNS[i], row) for i in range(max(0, COLUMNS.index(col) - 3), min(7, COLUMNS.index(col) + 1))],\n        [(COLUMNS[COLUMNS.index(col)], j) for j in range(max(0, row - 3), min(6, row + 1))],\n        [(COLUMNS[COLUMNS.index(col) + k], row + k) for k in range(-3, 1) if 0 <= COLUMNS.index(col) + k < 7 and 0 <= row + k < 6],\n        [(COLUMNS[COLUMNS.index(col) + k], row - k) for k in range(-3, 1) if 0 <= COLUMNS.index(col) + k < 7 and 0 <= row - k < 6]\n    ]\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        \n        for line in LINES:\n            if any(board[col][row] == player for col, row in line):\n                return player\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player] += 1\n        \n        for line in LINES:\n            if all(board[col][row] == player for col, row in line if row < len(board[col]) and board[col][row] == player):\n                return player\n    \n    return \"Draw\" if sum(player_moves.values()) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if grid[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[x][y] == color for x, y in line):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        for combo in LINES:\n            if all((col, row) in player_moves[player] for col, row in combo):\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player] += 1\n        \n        if check_winner(board, player, row, column):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(board, player, row, column):\n    COLUMNS = 'ABCDEFG'\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        \n        for step in range(1, 4):\n            r = row + step * dr\n            c = COLUMNS.index(column) + step * dc\n            if 0 <= r < 6 and 0 <= c < 7 and board[COLUMNS[c]][r] == player:\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            r = row - step * dr\n            c = COLUMNS.index(column) - step * dc\n            if 0 <= r < 6 and 0 <= c < 7 and board[COLUMNS[c]][r] == player:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    # Convert column and row to indices\n    col_idx = 'ABCDEFG'.index(column)\n    row_idx = row\n    \n    # Check all directions\n    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = col_idx + direction[0] * step * i\n                new_row = row_idx + direction[1] * step * i\n                if 0 <= new_col < 7 and 0 <= new_row < 6 and board['ABCDEFG'[new_col]][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if any(board[x][y] == color for x, y in line) and all(board[x][y] == color for x, y in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid and r < 6 and grid[c][r] is not None)):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 3:  # Only need to check if there are at least 4 pieces\n            if check_winner(board, column, color):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if all(board[column][r] == color for r in range(max(0, row - 3), row + 1)):\n        return True\n    \n    # Check horizontal\n    for col_offset in range(-3, 1):\n        if all(board.get(chr(ord(column) + col_offset + i), [None])[row] == color for i in range(4)):\n            return True\n    \n    # Check diagonals\n    for col_offset in range(-3, 1):\n        if all(board.get(chr(ord(column) + col_offset + i), [None])[row + i] == color for i in range(4) if row + i < 6):\n            return True\n        if all(board.get(chr(ord(column) + col_offset + i), [None])[row - i] == color for i in range(4) if row - i >= 0):\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if 0 <= row < 6 and col in board and board[col][row] == color:\n            count += 1\n        else:\n            break\n        col = chr(ord(col) + delta_col)\n        row += delta_row\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    COLUMNS = 'ABCDEFG'\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for sign in [1, -1]:\n            x, y = COLUMNS.index(column), row\n            while 0 <= x + sign * dx < len(COLUMNS) and 0 <= y + sign * dy < 6:\n                if board[COLUMNS[x + sign * dx]][y + sign * dy] == color:\n                    count += 1\n                else:\n                    break\n                x += sign * dx\n                y += sign * dy\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        \n        for line in LINES:\n            if all(board[c][r] == player for c, r in line if c in board and r < 6 and board[c][r] == player):\n                return player\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r in range(6))):\n                return color\n    \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (\n                        (col <= 3 and all(board[chr(65 + col + i)][row] == color for i in range(4))) or\n                        (row <= 2 and all(board[chr(65 + col)][row + i] == color for i in range(4))) or\n                        (col <= 3 and row <= 2 and all(board[chr(65 + col + i)][row + i] == color for i in range(4))) or\n                        (col <= 3 and row >= 3 and all(board[chr(65 + col + i)][row - i] == color for i in range(4)))\n                    ):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            # Check for a win in the vertical direction\n            if board[column][-4:] == [color] * 4:\n                return color\n            \n            # Check for horizontal, diagonal \\\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n                if all(board['ABCDEFG'[c + i]].count(color) > 0 and \n                       board['ABCDEFG'[c + i]][-1] == color for i in range(4)):\n                    return color\n            \n            # Check for diagonal /\n            for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(4, 'ABCDEFG'.index(column) + 1)):\n                if all(board['ABCDEFG'[c + i]].count(color) > 0 and \n                       board['ABCDEFG'[c + 3 - i]][-1] == color for i in range(4)):\n                    return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player]):\n            return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    move_set = set(moves)\n    \n    for column, row in moves:\n        for d in directions:\n            count = 1\n            for step in (1, -1):\n                for i in range(1, 4):\n                    new_col = chr(ord(column) + d[0] * i * step)\n                    new_row = row + d[1] * i * step\n                    if (new_col, new_row) in move_set:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # vertical\n                    check_direction(board, col, row, 1, 1, color) or  # diagonal \\\n                    check_direction(board, col, row, 1, -1, color)):  # diagonal /\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[chr(j + k + 65)][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j >= 3 and i <= 2 and all(board[chr(j - k + 65)][i + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color_to_check in ['Red', 'Yellow']:\n            # Check vertical\n            for c in 'ABCDEFG':\n                for r in range(6):\n                    if grid[c][r] == color_to_check and r <= 2:\n                        if all(grid[c][r+k] == color_to_check for k in range(4)):\n                            return color_to_check\n            \n            # Check horizontal\n            for r in range(6):\n                for c in range(4):\n                    if all(grid[chr(65 + c + k)][r] == color_to_check for k in range(4)):\n                        return color_to_check\n            \n            # Check diagonal \\\n            for c in range(4):\n                for r in range(3):\n                    if all(grid[chr(65 + c + k)][r + k] == color_to_check for k in range(4)):\n                        return color_to_check\n            \n            # Check diagonal /\n            for c in range(4):\n                for r in range(3, 6):\n                    if all(grid[chr(65 + c + k)][r - k] == color_to_check for k in range(4)):\n                        return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x, y) in {(c, r) for c in board for r in range(6) if board[c][r] is not None}):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                if check_winner(board, col, i, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check all four directions for a winning condition\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1)    # Diagonal /\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        c = chr(ord(col) + step * delta_col)\n        r = row + step * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color] += 1\n\n        if check_winner(board, column, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    def count(direction):\n        count = 0\n        for d in direction:\n            r, c = row, 'ABCDEFG'.index(column)\n            while 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                count += 1\n                r += d[0]\n                c += d[1]\n        return count\n\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    for direction in directions:\n        total = 1 + count([(-direction[0], -direction[1]), direction])\n        if total >= 4:\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = []\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                moves.append((col, i, color))\n                break\n\n    def check_winner(color):\n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if col + 3 < 7 and all(board[chr(col + k + 65)][row] == color for k in range(4)):\n                        return True\n                    if row + 3 < 6 and all(board[chr(col + 65)][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row + 3 < 6 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)):\n                        return True\n                    if col + 3 < 7 and row - 3 >= 0 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)):\n                        return True\n        return False\n\n    for color in ['Red', 'Yellow']:\n        if check_winner(color):\n            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    moves = {'Red': 0, 'Yellow': 0}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color] += 1\n        \n        for line in LINES:\n            if any(board[col][row] == color for col, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(col + 65)][row] == color:\n                        if col <= 3 and all(grid[chr(col + i + 65)][row] == color for i in range(4)):\n                            return color\n                        if row <= 2 and all(grid[chr(col + 65)][row + i] == color for i in range(4)):\n                            return color\n                        if col <= 3 and row <= 2 and all(grid[chr(col + i + 65)][row + i] == color for i in range(4)):\n                            return color\n                        if col <= 3 and row >= 3 and all(grid[chr(col + i + 65)][row - i] == color for i in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col].append(color)\n        \n        if len(board[col]) >= 4:\n            if check_winner(board, col, color):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n\ndef check_winner(board, col, color):\n    row = len(board[col]) - 1\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dr, dc in directions:\n        count = 1\n        \n        for step in range(1, 4):\n            r, c = row + dr * step, ord(col) - ord('A') + dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and (chr(c + ord('A')) in board) and len(board[chr(c + ord('A'))]) > r and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            r, c = row - dr * step, ord(col) - ord('A') - dc * step\n            if 0 <= r < 6 and 0 <= c < 7 and (chr(c + ord('A')) in board) and len(board[chr(c + ord('A'))]) > r and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        player_turn[color] += 1\n        \n        # Check for win\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] == color):\n                return color\n        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == board[chr(ord(col) + k)][row] for k in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == board[col][row + k] for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + k)][row + k] for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + k)][row - k] for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n                \n        # Check for winning condition\n        for color_to_check in ['Red', 'Yellow']:\n            # Check vertical\n            for c in 'ABCDEFG':\n                for r in range(3):  # only check first 3 rows\n                    if grid[c][r] == color_to_check and \\\n                       grid[c][r + 1] == color_to_check and \\\n                       grid[c][r + 2] == color_to_check and \\\n                       grid[c][r + 3] == color_to_check:\n                        return color_to_check\n            \n            # Check horizontal\n            for r in range(6):\n                for c in range(4):  # only check first 4 columns\n                    if grid['ABCDEFG'[c]][r] == color_to_check and \\\n                       grid['ABCDEFG'[c + 1]][r] == color_to_check and \\\n                       grid['ABCDEFG'[c + 2]][r] == color_to_check and \\\n                       grid['ABCDEFG'[c + 3]][r] == color_to_check:\n                        return color_to_check\n            \n            # Check diagonal /\n            for c in range(4):\n                for r in range(3):\n                    if grid['ABCDEFG'[c]][r] == color_to_check and \\\n                       grid['ABCDEFG'[c + 1]][r + 1] == color_to_check and \\\n                       grid['ABCDEFG'[c + 2]][r + 2] == color_to_check and \\\n                       grid['ABCDEFG'[c + 3]][r + 3] == color_to_check:\n                        return color_to_check\n            \n            # Check diagonal \\\n            for c in range(4):\n                for r in range(3, 6):\n                    if grid['ABCDEFG'[c]][r] == color_to_check and \\\n                       grid['ABCDEFG'[c + 1]][r - 1] == color_to_check and \\\n                       grid['ABCDEFG'[c + 2]][r - 2] == color_to_check and \\\n                       grid['ABCDEFG'[c + 3]][r - 3] == color_to_check:\n                        return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n        \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [\n        [(0, 1), (0, -1)],  # Vertical\n        [(1, 0), (-1, 0)],  # Horizontal\n        [(1, 1), (-1, -1)], # Diagonal \\\n        [(1, -1), (-1, 1)]  # Diagonal /\n    ]\n    \n    for direction in directions:\n        count = 1\n        for dx, dy in direction:\n            x, y = ord(col) - ord('A'), row\n            while 0 <= x + dx < 7 and 0 <= y + dy < 6 and board[chr(x + dx + ord('A'))][y + dy] == color:\n                count += 1\n                x += dx\n                y += dy\n            if count >= 4:\n                return True\n    return False\n```"
        ]
    }
}