{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {column: [] for column in COLUMNS}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3:]\n        pieces_position_dict[column].append(color)\n\n    for color in set([piece[3:] for piece in pieces_positions]):\n        winning_combinations = [line for line in LINES if all(cell in pieces_position_dict[COLUMNS[i]] for cell, i in line) and all(pieces_position_dict[COLUMNS[i]].count(color) == 1 for cell, i in line)]\n        if any(len(line) == 4 for line in winning_combinations):\n            return color + \"_player\"\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Game not finished\""
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece.split(\"_\")[1]\n        for line in LINES:\n            if (column, str(int(6) - 3)) in line:\n                line.remove((column, str(int(6) - 3)))\n        for i in range(6):\n            if (column, str(i)) in line:\n                line.remove((column, str(i)))\n                if (column, str(i)) in line:\n                    if color == \"Red\" and not winner[\"Red\"]:\n                        winner[\"Red\"] = True\n                    elif color == \"Yellow\" and not winner[\"Yellow\"]:\n                        winner[\"Yellow\"] = True\n    if winner[\"Red\"]:\n        return \"Red\"\n    elif winner[\"Yellow\"]:\n        return \"Yellow\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in pieces_position_list if piece.split('_')[0] in [c for c, _ in line]]):\n                return color\n    \n    return 'Draw'"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if pieces_position_dict[pos].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set(pieces_position_dict.values())) == 1 else 'Not Finished'",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else \"Red\" if winner == \"Red\" else \"Draw\""
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    pieces_position_list = [pos.split('_')[1] for pos in pieces_positions]\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    for color in set(pieces_position_list):\n        for line in LINES:\n            if all([piece.split('_')[1] == color for piece in [f'{col}{row}' for col, row in line]]):\n                return 'Yellow' if color == 'Yellow' else 'Red'\n    if len(set(pieces_position_list)) == 1:\n        return 'Draw'\n    return 'Draw'",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\""
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n            column = COLUMNS[COLUMNS.index(column) - 1]\n        if column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            continue\n        for line in LINES:\n            if all((c, str(5 - current_row)) in line for c in line if f\"{c}_{color}\" in [f\"{c}_{color}\" for c in COLUMNS]):\n                return color\n    return \"Draw\""
        ],
        "1": [
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {\"Red\": 0, \"Yellow\": 0}\n    columns = {}\n    for piece in pieces_positions:\n        column, color = piece[:-4], piece[-4:]\n        if column not in columns:\n            columns[column] = []\n        columns[column].append(color)\n    \n    for column in columns:\n        for i in range(len(columns[column]) - 3):\n            if len(set(columns[column][i:i+4])) == 1:\n                return \"Yellow\" if columns[column][i] == \"Yellow\" else \"Red\"\n    \n    for line in LINES:\n        for column in line:\n            column_pieces = [pieces_positions[i].split(\"_\")[1] for i in range(len(pieces_positions)) if pieces_positions[i].startswith(column[0])]\n            for i in range(len(column_pieces) - 3):\n                if len(set(column_pieces[i:i+4])) == 1:\n                    return \"Yellow\" if column_pieces[i] == \"Yellow\" else \"Red\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0:\n            if pieces_positions[current_row * 7 + COLUMNS.index(column)].endswith(color):\n                break\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if any(field == piece for field in line):\n                    if len(list(filter(lambda x: x.endswith(color), [pieces_positions[x] for x in line]))) >= 4:\n                        return \"Yellow\" if color == \"Yellow\" else \"Red\"\n    return \"Draw\""
        ],
        "2": [],
        "3": [],
        "4": []
    }
}