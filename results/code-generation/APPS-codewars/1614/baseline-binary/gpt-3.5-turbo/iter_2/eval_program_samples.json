{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the game state\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position in the list\n    for piece in pieces_positions:\n        # Extract the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to a numerical index\n        col_index = ord(column) - ord('A')\n\n        # Find the lowest empty row in the column\n        row_index = -1\n        for row in range(5, -1, -1):\n            if grid[row][col_index] == '':\n                row_index = row\n                break\n\n        # Place the piece in the grid\n        grid[row_index][col_index] = color\n\n        # Check if the current move resulted in a win\n        for line in LINES:\n            # Get the set of positions in the line\n            positions = set([(COLUMNS.index(column) + i, int(row)) for i, row in enumerate(ROWS)])\n\n            # Check if all positions in the line have the same color\n            if all(grid[row][col] == color for col, row in positions):\n                return color\n\n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to represent the game board\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Extract the column and color from each piece\n        col, color = piece.split('_')\n        \n        # Find the first available row in the chosen column\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - ord('A')] == '':\n                grid[row][ord(col) - ord('A')] = color\n                break\n    \n    # Check for a win in each line\n    for line in LINES:\n        for row, col in line:\n            if grid[row][ord(col) - ord('A')] == grid[row + 1][ord(col) - ord('A')] == \\\n               grid[row + 2][ord(col) - ord('A')] == grid[row + 3][ord(col) - ord('A')]:\n                return grid[row][ord(col) - ord('A')]\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def check_winner(grid):\n        for line in LINES:\n            if all(grid[cell] == grid[next(iter(line))] for cell in line):\n                return grid[next(iter(line))]\n        return None\n\n    grid = {pos: None for pos in COLUMNS}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[column] = color\n        winner = check_winner(grid)\n        if winner:\n            return winner\n\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][COLUMNS.index(column)] == ' ':\n            row += 1\n        board[row-1][COLUMNS.index(column)] = color[0]\n\n    for line in LINES:\n        line_values = [board[ROWS.index(row)][COLUMNS.index(column)] for column, row in line]\n        if all(value == 'R' for value in line_values):\n            return 'Red'\n        if all(value == 'Y' for value in line_values):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def get_winner():\n        for line in LINES:\n            if all(pos in pieces_positions[player]\n                   for pos in line):\n                return player\n        return ''\n\n    players = ['Red', 'Yellow']\n    for piece in pieces_positions:\n        col, player = piece.split('_')\n        pieces_positions[player].add((col, min(ROWS - {pos[1]\n                                                       for pos in\n                                                       pieces_positions[col]})))\n        if get_winner():\n            return get_winner()\n        players = players[::-1]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is None:\n            continue\n        (red_moves if color == 'Red' else yellow_moves).add((column, row))\n        for line in LINES:\n            if line <= (red_moves if color == 'Red' else yellow_moves):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Red': set(), 'Yellow': set()}\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        pieces[color].add((column, len(pieces[color])))\n        for line in LINES:\n            if line <= pieces[color]:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {c: set() for c in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].add(color)\n        for line in LINES:\n            if all(board[col].issuperset(color) for col, color in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        board[COLUMNS.index(column)][ROWS.index(next(i for i, v in enumerate(board[COLUMNS.index(column)]) if not v)) - 1] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(all(cell != None for cell in row) for row in board):\n        return 'Draw'\n    \n    return None\n```"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        \n        for i in reversed(range(len(ROWS))):\n            if board[i][column_idx] == '':\n                board[i][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[i][COLUMNS.index(column)] == color for column, i in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    reds, yellows = set(), set()\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = next((r for r in ROWS if (col, r) not in reds and (col, r) not in yellows), None)\n        if row is None:\n            continue\n        (reds if color == 'Red' else yellows).add((col, row))\n        if any(line <= reds or line <= yellows for line in LINES):\n            return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_positions = set()\n    yellow_positions = set()\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_positions.add((column, max(ROWS) - sum(1 for c, _ in red_positions if c == column)))\n            if any(line <= red_positions for line in LINES):\n                return \"Red\"\n        else:\n            yellow_positions.add((column, max(ROWS) - sum(1 for c, _ in yellow_positions if c == column)))\n            if any(line <= yellow_positions for line in LINES):\n                return \"Yellow\"\n                \n    if len(red_positions) + len(yellow_positions) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(row for row in range(len(ROWS)) if grid[COLUMNS.index(column)][row] is None)\n        grid[COLUMNS.index(column)][row] = color\n    \n    for line in LINES:\n        if all(grid[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n            return 'Red'\n        elif all(grid[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create an empty board\n    board = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Get the column and color of the current piece\n        column, color = piece.split('_')\n        # Find the lowest empty row in the column\n        row = next((i for i in range(len(ROWS)-1, -1, -1) if board[i][COLUMNS.index(column)] == ''), None)\n        # Place the piece in the board\n        board[row][COLUMNS.index(column)] = color\n    \n    # Check if there is a winner\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [board[row][COLUMNS.index(column)] for column, row in line]\n        # Check if all the colors are the same and not empty\n        if all(color == colors[0] and color != '' for color in colors):\n            return colors[0]\n    \n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = len(grid[column_index]) - grid[column_index].count(None) - 1\n        grid[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def is_winner(player_moves):\n        for line in LINES:\n            if line.issubset(player_moves):\n                return True\n        return False\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = next((i for i in range(5, -1, -1) if (column, i) not in red_moves and (column, i) not in yellow_moves), None)\n        if row is None:\n            return 'Draw'\n        if player == 'Red':\n            red_moves.add((column, row))\n            if is_winner(red_moves):\n                return 'Red'\n        else:\n            yellow_moves.add((column, row))\n            if is_winner(yellow_moves):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(piece in pieces_positions for piece in [c + '_' + color for c, _ in line]):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {(c, r): None for c in COLUMNS for r in ROWS}\n    player = 'Yellow'\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(r for r in ROWS if grid[column, r] is None)\n        grid[column, row] = color\n        for line in LINES:\n            if all(grid[cell] == color for cell in line):\n                return color\n        player = 'Red' if player == 'Yellow' else 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * 6 for _ in range(7)]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in reversed(range(6)):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while (column, row) in red_moves or (column, row) in yellow_moves:\n            row += 1\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = len([p for p in pieces_positions if p.split('_')[0] == column])\n        \n        if color == 'Red':\n            red_positions.add((column, row))\n        elif color == 'Yellow':\n            yellow_positions.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n        \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    else:\n        return 'Pending'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['']*len(ROWS) for _ in range(len(COLUMNS))]\n    player = {'Yellow': 'Red', 'Red': 'Yellow'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to store the number of pieces in each column\n    column_count = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0}\n    \n    # Create a dictionary to store the number of pieces in each row\n    row_count = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\n    \n    # Create a dictionary to store the number of pieces in each diagonal\n    diagonal_count = {}\n    \n    # Create a dictionary to store the number of pieces in each anti-diagonal\n    anti_diagonal_count = {}\n    \n    # Create variables to store the color of the last played piece and the number of moves\n    last_color = None\n    moves = 0\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Update the column count\n        column_count[column] += 1\n        \n        # Update the row count\n        row_count[moves % 6] += 1\n        \n        # Calculate the diagonal and anti-diagonal indices\n        diagonal_index = int(column, 36) - (moves % 6)\n        anti_diagonal_index = int(column, 36) + (moves % 6)\n        \n        # Update the diagonal count\n        diagonal_count.setdefault(diagonal_index, 0)\n        diagonal_count[diagonal_index] += 1\n        \n        # Update the anti-diagonal count\n        anti_diagonal_count.setdefault(anti_diagonal_index, 0)\n        anti_diagonal_count[anti_diagonal_index] += 1\n        \n        # Check if a player has won\n        if column_count[column] >= 4 or row_count[moves % 6] >= 4 or diagonal_count[diagonal_index] >= 4 or anti_diagonal_count[anti_diagonal_index] >= 4:\n            return color\n        \n        # Update the last color and the number of moves\n        last_color = color\n        moves += 1\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_positions.add((column, row))\n            elif color == 'Yellow':\n                yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line <= red_positions:\n                return 'Red'\n            elif line <= yellow_positions:\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\""
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = next((row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions), None)\n\n        if row is not None:\n            if color == 'Red':\n                red_positions.add((column, row))\n            elif color == 'Yellow':\n                yellow_positions.add((column, row))\n\n        if any(line <= red_positions for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_positions for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        else:\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n\n    for line in LINES:\n        if line <= red_moves:\n            return \"Red\"\n        if line <= yellow_moves:\n            return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * 7 for _ in range(6)]\n    color_map = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid.count(['']) - 1\n        \n        grid[row][ord(col) - 65] = color_map[color]\n        \n        for line in LINES:\n            if all(grid[row][ord(col) - 65] == color_map[color] for col, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        if color == 'Red':\n            red_positions.add((column, ROWS[len(red_positions)]))\n        else:\n            yellow_positions.add((column, ROWS[len(yellow_positions)]))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_positions = set()\n    yellow_positions = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_positions.add((column, len([p for p in pieces_positions if p.startswith(column)])))\n        else:\n            yellow_positions.add((column, len([p for p in pieces_positions if p.startswith(column)])))\n    for line in LINES:\n        if line.issubset(red_positions):\n            return 'Red'\n        elif line.issubset(yellow_positions):\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [] for c in COLUMNS}\n    players = {'Yellow': [], 'Red': []}\n\n    for i, move in enumerate(pieces_positions):\n        column, player = move.split('_')\n        board[column].append(player)\n        players[player].append((column, len(board[column]) - 1))\n\n        for line in LINES:\n            if line <= set(players[player]):\n                return player\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        row = len([p for p in (red_positions | yellow_positions) if p[0] == column])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n        \n    if len(red_positions) + len(yellow_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    pieces = {'Red': set(), 'Yellow': set()}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in ROWS if (column, i) not in pieces['Red'] and (column, i) not in pieces['Yellow']), None)\n        pieces[color].add((column, row))\n        if any(line <= pieces[color] for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len([m for m in red_moves if m[0] == column])))\n        else:\n            yellow_moves.add((column, len([m for m in yellow_moves if m[0] == column])))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return \"Red\"\n            elif line <= yellow_moves:\n                return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create an empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # Iterate over the pieces and update the grid\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        grid[COLUMNS.index(col)][grid[COLUMNS.index(col)].index('')] = color\n\n    # Check for a winning line\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[COLUMNS.index(col)][ROWS.index(row)] == color for col, row in line):\n                return color\n\n    # If there are no winning lines, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {c: [None]*len(ROWS) for c in COLUMNS}\n\n    for piece in pieces_positions:\n        c, color = piece.split('_')\n        grid[c][grid[c].index(None)] = color\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        # Convert the column letter to an index\n        column_index = ord(column) - ord('A')\n        \n        # Iterate over the rows in the column\n        for row in range(6):\n            # If the cell is empty, place the color in it\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n    \n    # Check for a win in any line\n    for line in LINES:\n        # Get the colors in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        # If all colors are the same and not empty, return the color\n        if all(color == colors[0] and color != '' for color in colors):\n            return colors[0]\n    \n    # If no winner, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def is_winning(piece_positions):\n        return any(line.issubset(piece_positions) for line in LINES)\n\n    piece_positions_red = set()\n    piece_positions_yellow = set()\n\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = max((row for row in ROWS if (column, row) not in piece_positions_red and (column, row) not in piece_positions_yellow), default=None)\n        if row is None:\n            return 'Draw' if len(pieces_positions) == len(piece_positions_red) + len(piece_positions_yellow) else None\n        (piece_positions_red if color == 'Red' else piece_positions_yellow).add((column, row))\n        if is_winning(piece_positions_red):\n            return 'Red'\n        if is_winning(piece_positions_yellow):\n            return 'Yellow'\n\n    return 'Draw' if len(pieces_positions) == len(piece_positions_red) + len(piece_positions_yellow) else None",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Split the piece into column and color\n        column, color = piece.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(5, -1, -1):\n            if grid[row][ord(column)-ord('A')] == '':\n                # Place the piece in the grid\n                grid[row][ord(column)-ord('A')] = color\n                break\n    \n    # Check for a winner\n    for line in LINES:\n        # Get the set of colors in the line\n        colors = set(grid[row][ord(column)-ord('A')] for column, row in line)\n        \n        # Check if there is a winner\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = \"Red\", \"Yellow\"\n    board = [[None] * 7 for _ in range(6)]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((row for row in reversed(range(6)) if board[row][ord(column) - 65] is None), None)\n        if row is not None:\n            board[row][ord(column) - 65] = color\n    \n    for line in LINES:\n        for i in range(4):\n            if all(board[row][ord(column) - 65] == RED for column, row in line) or \\\n               all(board[row][ord(column) - 65] == YELLOW for column, row in line):\n                return RED if RED in [board[row][ord(column) - 65] for column, row in line] else YELLOW\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((row for row in ROWS if (column, row) not in red_moves and (column, row) not in yellow_moves), default=None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red_moves.add((column, row))\n            if any(line <= red_moves for line in LINES):\n                return \"Red\"\n        elif color == 'Yellow':\n            yellow_moves.add((column, row))\n            if any(line <= yellow_moves for line in LINES):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Variable to keep track of the current player\n    current_player = ''\n\n    # Loop through the pieces positions\n    for position in pieces_positions:\n\n        # Get the column and color of the current position\n        column, color = position.split('_')\n        row = -1\n\n        # Find the first empty row in the column\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n\n        # If no empty row is found, the column is full\n        if row == -1:\n            continue\n\n        # Update the grid with the current player's color\n        grid[row][ord(column) - ord('A')] = color\n\n        # Check if the current player wins\n        for line in LINES:\n            if all(grid[i][ord(j) - ord('A')] == color for j, i in line):\n                return color\n\n        # Switch to the other player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n\n    # If no winner is found, the game is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Find the next empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        \n        # Update the grid with the color\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check for a winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # No winner found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        for row in range(len(ROWS)-1, -1, -1):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_index = ord(col) - ord('A')\n        \n        for row in range(6):\n            if grid[row][col_index] == '':\n                grid[row][col_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(col)-ord('A')] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_pieces = set()\n    yellow_pieces = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(row for row in ROWS if (column, row) not in red_pieces and (column, row) not in yellow_pieces)\n        if color == 'Red':\n            red_pieces.add((column, row))\n            if any(line.issubset(red_pieces) for line in LINES):\n                return 'Red'\n        else:\n            yellow_pieces.add((column, row))\n            if any(line.issubset(yellow_pieces) for line in LINES):\n                return 'Yellow'\n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        for row in range(5, -1, -1):\n            if grid[row][column] == '':\n                grid[row][column] = color\n                break\n    \n    def check_winner(line):\n        red_count = line.count('Red')\n        yellow_count = line.count('Yellow')\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n        else:\n            return 'Draw'\n    \n    for line in LINES:\n        line_colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        winner = check_winner(line_colors)\n        if winner != 'Draw':\n            return winner\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    # initialize grid\n    grid = [[''] * 7 for _ in range(6)]\n\n    # initialize players\n    players = {'Red': [], 'Yellow': []}\n\n    # iterate through the pieces positions\n    for pos in pieces_positions:\n\n        # extract the column and player color\n        column, color = pos.split('_')\n        \n        # find the next empty row in the column\n        row = next((i for i in range(6) if not grid[i][ord(column) - ord('A')]), None)\n\n        # if the column is full, ignore the move\n        if row is None:\n            continue\n\n        # update the grid with the player's color\n        grid[row][ord(column) - ord('A')] = color\n\n        # add the position to the player's list\n        players[color].append((column, row))\n\n        # check if the player wins\n        if any(all((c, r) in player for c, r in line) for line in LINES for player in players.values()):\n            return color\n\n    # if all positions are filled and no player wins, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    # initialize the board\n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    # iterate through each piece position\n    for piece in pieces_positions:\n        # get the column and color of the piece\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        # find the next available row in the column\n        row_index = next((i for i in range(len(ROWS)) if board[column_index][i] == ''), None)\n        # if the column is full, ignore the piece\n        if row_index is None:\n            continue\n        # place the piece on the board\n        board[column_index][row_index] = color\n        # check if the player has won\n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    # if no player has won, return draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to represent the Connect Four board\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    # Loop through the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split(\"_\")\n        \n        # Find the empty row in the column\n        row = 0\n        while row < 6 and board[row][ord(column) - ord(\"A\")] == \"\":\n            row += 1\n        \n        # Place the color in the board\n        board[row - 1][ord(column) - ord(\"A\")] = color\n        \n        # Check if there is a winner\n        for line in LINES:\n            if all(board[row][ord(column) - ord(\"A\")] == color for column, row in line):\n                return color\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None]*len(ROWS) for c in COLUMNS}\n    for p in pieces_positions:\n        c, color = p.split('_')\n        board[c][board[c].index(None)] = color\n\n    for line in LINES:\n        if all(board[c][r] == 'Red' for c, r in line):\n            return 'Red'\n        if all(board[c][r] == 'Yellow' for c, r in line):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((r for r in range(6) if (column, r) not in red_moves and (column, r) not in yellow_moves), None)\n        if row is None:\n            return \"Draw\"\n        if color == \"Red\":\n            red_moves.add((column, row))\n            if any(line <= red_moves for line in LINES):\n                return \"Red\"\n        else:\n            yellow_moves.add((column, row))\n            if any(line <= yellow_moves for line in LINES):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    players = {'Red', 'Yellow'}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[COLUMNS.index(column)].index('')\n        grid[COLUMNS.index(column)][row] = player\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == player for c, r in line):\n                return player\n    \n    return 'Draw'",
            "```python\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = next((i for i, r in enumerate(grid) if r[ord(col)-65] == ' '), None)\n        if row is None:\n            return 'Draw'\n        grid[row][ord(col)-65] = color\n\n        for line in LINES:\n            if all(grid[r][ord(c)-65] == color for c, r in line):\n                return color\n\n    return 'Draw'\n```"
        ]
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        board[COLUMNS.index(column)][ROWS.index(next(i for i, v in enumerate(board[COLUMNS.index(column)]) if not v)) - 1] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(all(cell != None for cell in row) for row in board):\n        return 'Draw'\n    \n    return None\n```",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a grid to store the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # iterate through the pieces positions\n    for pos in pieces_positions:\n        # get the column and color from the position\n        column, color = pos.split('_')\n        \n        # find the next empty row in the column\n        row = 5\n        while row >= 0 and grid[row][ord(column)-65] != '':\n            row -= 1\n        \n        # if the row is valid, place the piece\n        if row >= 0:\n            grid[row][ord(column)-65] = color\n    \n    # check for a win\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n    \n    # if there are no empty spaces, it's a draw\n    if all(all(cell != '' for cell in row) for row in grid):\n        return 'Draw'\n    \n    # if no one has won and there are still empty spaces, the game is ongoing\n    return 'Ongoing'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell in the grid with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each line, check if all the cells are occupied by the same player's color.\n7. If a winner is found, return the corresponding color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j+1]] == board[COLUMNS[i+2]][ROWS[j+2]] == board[COLUMNS[i+3]][ROWS[j+3]] for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)):\n            return board[col][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j-1]] == board[COLUMNS[i+2]][ROWS[j-2]] == board[COLUMNS[i+3]][ROWS[j-3]] for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))):\n            return board[col][row]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    grid = [[None for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        row = 5 - grid[column_to_index(column)].count(None)\n        grid[column_to_index(column)][row] = color\n    \n    for line in LINES:\n        for i in range(4):\n            if all(grid[column_to_index(column)][row] == \"Red\" for column, row in line):\n                return \"Red\"\n            if all(grid[column_to_index(column)][row] == \"Yellow\" for column, row in line):\n                return \"Yellow\"\n    \n    return \"Draw\"\n\ndef column_to_index(column):\n    return ord(column) - ord(\"A\")",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    reds, yellows = set(), set()\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = next((r for r in ROWS if (col, r) not in reds and (col, r) not in yellows), None)\n        if row is None:\n            continue\n        (reds if color == 'Red' else yellows).add((col, row))\n        if any(line <= reds or line <= yellows for line in LINES):\n            return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(row for row in range(len(ROWS)) if grid[COLUMNS.index(column)][row] is None)\n        grid[COLUMNS.index(column)][row] = color\n    \n    for line in LINES:\n        if all(grid[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n            return 'Red'\n        elif all(grid[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create an empty board\n    board = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Get the column and color of the current piece\n        column, color = piece.split('_')\n        # Find the lowest empty row in the column\n        row = next((i for i in range(len(ROWS)-1, -1, -1) if board[i][COLUMNS.index(column)] == ''), None)\n        # Place the piece in the board\n        board[row][COLUMNS.index(column)] = color\n    \n    # Check if there is a winner\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [board[row][COLUMNS.index(column)] for column, row in line]\n        # Check if all the colors are the same and not empty\n        if all(color == colors[0] and color != '' for color in colors):\n            return colors[0]\n    \n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = len(grid[column_index]) - grid[column_index].count(None) - 1\n        grid[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def is_winner(player_moves):\n        for line in LINES:\n            if line.issubset(player_moves):\n                return True\n        return False\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = next((i for i in range(5, -1, -1) if (column, i) not in red_moves and (column, i) not in yellow_moves), None)\n        if row is None:\n            return 'Draw'\n        if player == 'Red':\n            red_moves.add((column, row))\n            if is_winner(red_moves):\n                return 'Red'\n        else:\n            yellow_moves.add((column, row))\n            if is_winner(yellow_moves):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(piece in pieces_positions for piece in [c + '_' + color for c, _ in line]):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {(c, r): None for c in COLUMNS for r in ROWS}\n    player = 'Yellow'\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(r for r in ROWS if grid[column, r] is None)\n        grid[column, row] = color\n        for line in LINES:\n            if all(grid[c, r] == color for c, r in line):\n                return color\n        player = 'Red' if player == 'Yellow' else 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * 6 for _ in range(7)]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in reversed(range(6)):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while (column, row) in red_moves or (column, row) in yellow_moves:\n            row += 1\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n    if len(red_moves) + len(yellow_moves) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = len([p for p in pieces_positions if p.split('_')[0] == column])\n        \n        if color == 'Red':\n            red_positions.add((column, row))\n        elif color == 'Yellow':\n            yellow_positions.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n        \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    else:\n        return 'Pending'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['']*len(ROWS) for _ in range(len(COLUMNS))]\n    player = {'Yellow': 'Red', 'Red': 'Yellow'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a dictionary to store the number of pieces in each column\n    column_count = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0}\n    \n    # Create a dictionary to store the number of pieces in each row\n    row_count = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\n    \n    # Create a dictionary to store the number of pieces in each diagonal\n    diagonal_count = {}\n    \n    # Create a dictionary to store the number of pieces in each anti-diagonal\n    anti_diagonal_count = {}\n    \n    # Create variables to store the color of the last played piece and the number of moves\n    last_color = None\n    moves = 0\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Update the column count\n        column_count[column] += 1\n        \n        # Update the row count\n        row_count[moves % 6] += 1\n        \n        # Calculate the diagonal and anti-diagonal indices\n        diagonal_index = int(column, 36) - (moves % 6)\n        anti_diagonal_index = int(column, 36) + (moves % 6)\n        \n        # Update the diagonal count\n        diagonal_count.setdefault(diagonal_index, 0)\n        diagonal_count[diagonal_index] += 1\n        \n        # Update the anti-diagonal count\n        anti_diagonal_count.setdefault(anti_diagonal_index, 0)\n        anti_diagonal_count[anti_diagonal_index] += 1\n        \n        # Check if a player has won\n        if column_count[column] >= 4 or row_count[moves % 6] >= 4 or diagonal_count[diagonal_index] >= 4 or anti_diagonal_count[anti_diagonal_index] >= 4:\n            return color\n        \n        # Update the last color and the number of moves\n        last_color = color\n        moves += 1\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_positions.add((column, row))\n            elif color == 'Yellow':\n                yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line <= red_positions:\n                return 'Red'\n            elif line <= yellow_positions:\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max(row for row in ROWS if (column, row) not in red_moves and (column, row) not in yellow_moves)\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n\n    for line in LINES:\n        if line.issubset(red_moves):\n            return \"Red\"\n        elif line.issubset(yellow_moves):\n            return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * 7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for i in range(6):\n            if grid[i][column_index] == '':\n                grid[i][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[j][ord(c) - ord('A')] == color for c, j in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(COLUMNS) for _ in ROWS]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        column_index = COLUMNS.index(column)\n        player_symbol = players[player]\n        \n        for row in reversed(ROWS):\n            if board[row][column_index] is None:\n                board[row][column_index] = player_symbol\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == player_symbol for column, row in line):\n                return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(grid):\n        for line in LINES:\n            pieces = [grid[column][row] for column, row in line]\n            if pieces.count('Red') == 4:\n                return 'Red'\n            elif pieces.count('Yellow') == 4:\n                return 'Yellow'\n        return 'Draw'\n    \n    grid = {column: [''] * len(ROWS) for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[column].index('')\n        grid[column][row] = color\n    \n    return check_winner(grid)"
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for i in range(6):\n        for j in range(7):\n            board[(COLUMNS[j], ROWS[i])] = ''\n    for p in pieces_positions:\n        column, color = p.split('_')\n        row = max(row for row in ROWS if not board[(column, row)])\n        board[(column, row)] = color\n        if any(all(board[cell] == color for cell in line) for line in LINES):\n            return color\n    return 'Draw'\n\nprint(who_is_winner([\"A_Red\", \"B_Yellow\", \"C_Red\", \"D_Yellow\"]))",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS[::-1]:\n            if not board[column_index][row]:\n                board[column_index][row] = color\n                break\n        for line in LINES:\n            if all(board[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [] for c in COLUMNS}\n    players = {'Yellow': [], 'Red': []}\n\n    for i, move in enumerate(pieces_positions):\n        column, player = move.split('_')\n        board[column].append(player)\n        players[player].append((column, len(board[column]) - 1))\n\n        for line in LINES:\n            if line <= set(players[player]):\n                return player\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        row = len([p for p in (red_positions | yellow_positions) if p[0] == column])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n        \n    if len(red_positions) + len(yellow_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    pieces = {'Red': set(), 'Yellow': set()}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in ROWS if (column, i) not in pieces['Red'] and (column, i) not in pieces['Yellow']), None)\n        pieces[color].add((column, row))\n        if any(line <= pieces[color] for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len([m for m in red_moves if m[0] == column])))\n        else:\n            yellow_moves.add((column, len([m for m in yellow_moves if m[0] == column])))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return \"Red\"\n            elif line <= yellow_moves:\n                return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create an empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # Iterate over the pieces and update the grid\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        grid[COLUMNS.index(col)][grid[COLUMNS.index(col)].index('')] = color\n\n    # Check for a winning line\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[COLUMNS.index(col)][ROWS.index(row)] == color for col, row in line):\n                return color\n\n    # If there are no winning lines, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {c: [None]*len(ROWS) for c in COLUMNS}\n\n    for piece in pieces_positions:\n        c, color = piece.split('_')\n        grid[c][grid[c].index(None)] = color\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = color\n                break\n\n    for line in LINES:\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        if colors.count(colors[0]) == 4 and colors[0]:\n            return colors[0]\n\n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def is_winning(piece_positions):\n        return any(line.issubset(piece_positions) for line in LINES)\n\n    piece_positions_red = set()\n    piece_positions_yellow = set()\n\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        row = max((row for row in ROWS if (column, row) not in piece_positions_red and (column, row) not in piece_positions_yellow), default=None)\n        if row is None:\n            return 'Draw' if len(pieces_positions) == len(piece_positions_red) + len(piece_positions_yellow) else None\n        (piece_positions_red if color == 'Red' else piece_positions_yellow).add((column, row))\n        if is_winning(piece_positions_red):\n            return 'Red'\n        if is_winning(piece_positions_yellow):\n            return 'Yellow'\n\n    return 'Draw' if len(pieces_positions) == len(piece_positions_red) + len(piece_positions_yellow) else None",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Split the piece into column and color\n        column, color = piece.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(5, -1, -1):\n            if grid[row][ord(column)-ord('A')] == '':\n                # Place the piece in the grid\n                grid[row][ord(column)-ord('A')] = color\n                break\n    \n    # Check for a winner\n    for line in LINES:\n        # Get the set of colors in the line\n        colors = set(grid[row][ord(column)-ord('A')] for column, row in line)\n        \n        # Check if there is a winner\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = \"Red\", \"Yellow\"\n    board = [[None] * 7 for _ in range(6)]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next((row for row in reversed(range(6)) if board[row][ord(column) - 65] is None), None)\n        if row is not None:\n            board[row][ord(column) - 65] = color\n    \n    for line in LINES:\n        for i in range(4):\n            if all(board[row][ord(column) - 65] == RED for column, row in line) or \\\n               all(board[row][ord(column) - 65] == YELLOW for column, row in line):\n                return RED if RED in [board[row][ord(column) - 65] for column, row in line] else YELLOW\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((row for row in ROWS if (column, row) not in red_moves and (column, row) not in yellow_moves), default=None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red_moves.add((column, row))\n            if any(line <= red_moves for line in LINES):\n                return \"Red\"\n        elif color == 'Yellow':\n            yellow_moves.add((column, row))\n            if any(line <= yellow_moves for line in LINES):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Variable to keep track of the current player\n    current_player = ''\n\n    # Loop through the pieces positions\n    for position in pieces_positions:\n\n        # Get the column and color of the current position\n        column, color = position.split('_')\n        row = -1\n\n        # Find the first empty row in the column\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n\n        # If no empty row is found, the column is full\n        if row == -1:\n            continue\n\n        # Update the grid with the current player's color\n        grid[row][ord(column) - ord('A')] = color\n\n        # Check if the current player wins\n        for line in LINES:\n            if all(grid[i][ord(j) - ord('A')] == color for j, i in line):\n                return color\n\n        # Switch to the other player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n\n    # If no winner is found, the game is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Find the next empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        \n        # Update the grid with the color\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check for a winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # No winner found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        for row in range(len(ROWS)-1, -1, -1):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len([m for m in red_moves if m[0] == column])))\n        else:\n            yellow_moves.add((column, len([m for m in yellow_moves if m[0] == column])))\n    \n    for line in LINES:\n        red_count = sum(1 for move in red_moves if move in line)\n        yellow_count = sum(1 for move in yellow_moves if move in line)\n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        for i in range(len(ROWS)):\n            if board[column_index][i] == '':\n                board[column_index][i] = color\n                break\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_pieces = set()\n    yellow_pieces = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(row for row in ROWS if (column, row) not in red_pieces and (column, row) not in yellow_pieces)\n        if color == 'Red':\n            red_pieces.add((column, row))\n            if any(line.issubset(red_pieces) for line in LINES):\n                return 'Red'\n        else:\n            yellow_pieces.add((column, row))\n            if any(line.issubset(yellow_pieces) for line in LINES):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None]*7 for _ in range(6)]\n    players = {'Red': 'Yellow', 'Yellow': 'Red'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(i for i in range(6) if not grid[i][ord(column) - ord('A')])\n        grid[row][ord(column) - ord('A')] = color\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to represent the Connect Four board\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    # Loop through the pieces positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split(\"_\")\n        \n        # Find the empty row in the column\n        row = 0\n        while row < 6 and board[row][ord(column) - ord(\"A\")] == \"\":\n            row += 1\n        \n        # Place the color in the board\n        board[row - 1][ord(column) - ord(\"A\")] = color\n        \n        # Check if there is a winner\n        for line in LINES:\n            if all(board[row][ord(column) - ord(\"A\")] == color for column, row in line):\n                return color\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None]*len(ROWS) for c in COLUMNS}\n    for p in pieces_positions:\n        c, color = p.split('_')\n        board[c][board[c].index(None)] = color\n\n    for color in ('Yellow', 'Red'):\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((r for r in range(6) if (column, r) not in red_moves and (column, r) not in yellow_moves), None)\n        if row is None:\n            return \"Draw\"\n        if color == \"Red\":\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line <= red_moves or line <= yellow_moves:\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        \n        if color == 'Red':\n            red_moves.add((column, len(red_moves)))\n        else:\n            yellow_moves.add((column, len(yellow_moves)))\n        \n        if check_winner(red_moves):\n            return 'Red'\n        elif check_winner(yellow_moves):\n            return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'\n    \n    return 'Draw'\n\n\ndef check_winner(moves):\n    for line in LINES:\n        if line.issubset(moves):\n            return True\n    return False",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    players = {'Red', 'Yellow'}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[COLUMNS.index(column)].index('')\n        grid[COLUMNS.index(column)][row] = player\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == player for c, r in line):\n                return player\n    \n    return 'Draw'",
            "```python\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = next((i for i, r in enumerate(grid) if r[ord(col)-65] == ' '), None)\n        if row is None:\n            return 'Draw'\n        grid[row][ord(col)-65] = color\n\n        for line in LINES:\n            if all(grid[r][ord(c)-65] == color for c, r in line):\n                return color\n\n    return 'Draw'\n```",
            "def who_is_winner(pieces_positions):\n    board = [[\"\" for _ in range(7)] for _ in range(6)]\n    players = {\"Red\": \"R\", \"Yellow\": \"Y\"}\n\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_idx = ord(column) - ord(\"A\")\n        \n        for row in range(5, -1, -1):\n            if board[row][column_idx] == \"\":\n                board[row][column_idx] = players[color]\n                break\n\n        for line in LINES:\n            if all(board[row][ord(col) - ord(\"A\")] == players[color] for col, row in line):\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - 65\n        \n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = players[color]\n                break\n        \n        for line in LINES:\n            if all(board[row][ord(column) - 65] == players[color] for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def connect4(color):\n        return any(line.issubset(color) for line in LINES)\n\n    red, yellow = set(), set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(i for i in ROWS if (column, i) not in red and (column, i) not in yellow)\n        if color == 'Red':\n            red.add((column, row))\n            if connect4(red):\n                return 'Red'\n        else:\n            yellow.add((column, row))\n            if connect4(yellow):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create empty board\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over pieces_positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the lowest empty row in the given column\n        row = 0\n        while row < 6 and board[row][ord(column)-ord('A')] != '':\n            row += 1\n        \n        # Place the color in the board\n        board[row][ord(column)-ord('A')] = color\n    \n    # Check if there is a winner\n    for line in LINES:\n        colors = set(board[row][ord(column)-ord('A')] for column, row in line)\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    \n    # If there is no winner, return Draw\n    return 'Draw'"
        ]
    },
    "2": {
        "0": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][next((i for i, x in enumerate(grid[COLUMNS.index(column)][::-1]) if x == ''), None)] = color\n        for line in LINES:\n            if all(grid[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = players[color]\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != '':\n                player = board[row][column]\n                if all(board[r][c] == player for r, c in line):\n                    return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a dictionary to store the number of pieces in each position\n    board = {}\n    \n    # create a dictionary to store the current player's color\n    current_player = {'color': ''}\n    \n    # iterate through each piece in the pieces_positions list\n    for piece in pieces_positions:\n        # split the piece string into column and color\n        column, color = piece.split('_')\n        \n        # if the current player is not set, set it to the color of the first piece\n        if current_player['color'] == '':\n            current_player['color'] = color\n        \n        # if the column is not in the board dictionary, add it with an empty list as the value\n        if column not in board:\n            board[column] = []\n        \n        # append the color to the column in the board dictionary\n        board[column].append(color)\n        \n        # check if the current player has won\n        if check_winner(board, current_player['color']):\n            return current_player['color']\n        \n        # switch the current player's color\n        current_player['color'] = 'Yellow' if current_player['color'] == 'Red' else 'Red'\n    \n    # if there are no more moves and no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each winning configuration, check if all the cells are occupied by the same player's piece.\n7. If a winner is found, return the corresponding player's color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[:-3]:\n                if all(board[COLUMNS[i+k]][row+k] == board[COLUMNS[i+k+1]][row+k+1] == board[COLUMNS[i+k+2]][row+k+2] == board[COLUMNS[i+k+3]][row+k+3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row+k]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[3:]:\n                if all(board[COLUMNS[i+k]][row-k] == board[COLUMNS[i+k+1]][row-k-1] == board[COLUMNS[i+k+2]][row-k-2] == board[COLUMNS[i+k+3]][row-k-3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row-k]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 6 for _ in range(7)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = COLUMNS.index(column)\n        row_idx = next((i for i in range(6) if board[col_idx][i] is None), None)\n        if row_idx is not None:\n            board[col_idx][row_idx] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column] = board.get(column, '') + color[0]\n\n        for line in LINES:\n            if all(board.get(cell, '') == board[column] for cell in line):\n                return board[column]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_idx = COLUMNS.index(column)\n        for row_idx in range(len(ROWS)-1, -1, -1):\n            if board[column_idx][row_idx] is None:\n                board[column_idx][row_idx] = color\n                break\n    \n    for line in LINES:\n        colors = [board[column_idx][row_idx] for column_idx, row_idx in line]\n        if all(color == \"Red\" for color in colors):\n            return \"Red\"\n        elif all(color == \"Yellow\" for color in colors):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the game grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    player_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the moves\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the column index\n        column_index = ord(column) - ord('A')\n        \n        # Find the row index\n        row_index = 5 - grid[::-1][column_index].count('')\n        \n        # Place the piece in the grid\n        grid[row_index][column_index] = color\n    \n        # Check for a winner\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return player_map[color]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for i in range(len(pieces_positions)):\n        col, player = pieces_positions[i].split('_')\n        row = len(board.get(col, []))\n        board.setdefault(col, []).append(player)\n\n        for line in LINES:\n            if all((col, row) in line for col, row in line):\n                return player\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = {column: [] for column in COLUMNS}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n            \n    if all(len(board[column]) == 6 for column in COLUMNS):\n        return 'Draw'\n    \n    return 'None'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column = COLUMNS.index(piece[0])\n        color = piece[2:]\n        \n        for row in range(len(ROWS)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = set(grid[column][row] for column, row in line)\n        \n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in reversed(range(6)):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # create grid to keep track of pieces\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # iterate over pieces positions\n    for position in pieces_positions:\n        # get column and color from position string\n        column, color = position.split('_')\n        # find first empty slot in the column\n        for i in range(len(grid[column])):\n            if grid[column][i] == '':\n                # place the piece in the slot\n                grid[column][i] = color\n                break\n\n    # check for a winning line\n    for line in LINES:\n        # count the number of consecutive pieces of the same color in the line\n        red_count = 0\n        yellow_count = 0\n        for position in line:\n            column, row = position\n            if grid[column][row] == 'Red':\n                red_count += 1\n                if red_count == 4:\n                    return 'Red'\n            elif grid[column][row] == 'Yellow':\n                yellow_count += 1\n                if yellow_count == 4:\n                    return 'Yellow'\n\n    # if no winning line found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(row for row in ROWS if grid[COLUMNS.index(column)][row] is None)\n        grid[COLUMNS.index(column)][row] = color\n    \n    for line in LINES:\n        colors = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if all(color == colors[0] for color in colors) and colors[0] is not None:\n            return colors[0]\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create an empty board\n    board = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Get the column and color of the current piece\n        column, color = piece.split('_')\n        # Find the lowest empty row in the column\n        row = next((i for i in range(len(ROWS)-1, -1, -1) if board[i][COLUMNS.index(column)] == ''), None)\n        # Place the piece in the board\n        board[row][COLUMNS.index(column)] = color\n    \n    # Check if there is a winner\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [board[row][COLUMNS.index(column)] for column, row in line]\n        # Check if all the colors are the same and not empty\n        if all(color == colors[0] and color != '' for color in colors):\n            return colors[0]\n    \n    # If there is no winner, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = len(grid[column_index]) - grid[column_index].count(None) - 1\n        grid[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def is_winner(player_moves):\n        for line in LINES:\n            if line.issubset(player_moves):\n                return True\n        return False\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = next((i for i in range(5, -1, -1) if (column, i) not in red_moves and (column, i) not in yellow_moves), None)\n        if row is None:\n            return 'Draw'\n        if player == 'Red':\n            red_moves.add((column, row))\n            if is_winner(red_moves):\n                return 'Red'\n        else:\n            yellow_moves.add((column, row))\n            if is_winner(yellow_moves):\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(piece in pieces_positions for piece in [c + '_' + color for c, _ in line]):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {(c, r): None for c in COLUMNS for r in ROWS}\n    player = 'Yellow'\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(r for r in ROWS if grid[column, r] is None)\n        grid[column, row] = color\n        for line in LINES:\n            if all(grid[c, r] == color for c, r in line):\n                return color\n        player = 'Red' if player == 'Yellow' else 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n  # Create a list to keep track of the board state\n  board = [['' for _ in range(7)] for _ in range(6)]\n\n  # Create a dictionary to map column letters to column indices\n  column_indices = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n\n  # Create a dictionary to map colors to player names\n  colors = {'Red': 'Red', 'Yellow': 'Yellow'}\n\n  # Iterate over the pieces positions\n  for piece_position in pieces_positions:\n    \n    # Split the piece position into column and color\n    column, color = piece_position.split('_')\n    \n    # Get the column index\n    column_index = column_indices[column]\n    \n    # Iterate over the rows in the column, starting from the bottom\n    for row in range(5, -1, -1):\n      \n      # If the cell is empty, place the piece and break the loop\n      if board[row][column_index] == '':\n        board[row][column_index] = color\n        break\n  \n  # Check for a winning condition\n  for line in LINES:\n    for color in colors.values():\n      if all(board[row][column_indices[column]] == color for column, row in line):\n        return colors[color]\n  \n  # If there is no winner, return 'Draw'\n  return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while (column, row) in red_moves or (column, row) in yellow_moves:\n            row += 1\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = len([p for p in pieces_positions if p.split('_')[0] == column])\n        \n        if color == 'Red':\n            red_positions.add((column, row))\n        elif color == 'Yellow':\n            yellow_positions.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n        \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    else:\n        return 'Pending'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['']*len(ROWS) for _ in range(len(COLUMNS))]\n    player = {'Yellow': 'Red', 'Red': 'Yellow'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_positions.add((column, row))\n            elif color == 'Yellow':\n                yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line <= red_positions:\n                return 'Red'\n            elif line <= yellow_positions:\n                return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] is None:\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column_index = ord(column) - ord('A')\n        \n        for row in range(6):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[''] * 7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for i in range(6):\n            if grid[i][column_index] == '':\n                grid[i][column_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[j][ord(c) - ord('A')] == color for c, j in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(COLUMNS) for _ in ROWS]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        column_index = COLUMNS.index(column)\n        player_symbol = players[player]\n        \n        for row in reversed(ROWS):\n            if board[row][column_index] is None:\n                board[row][column_index] = player_symbol\n                break\n        \n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == player_symbol for column, row in line):\n                return player\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_winner(grid):\n        for line in LINES:\n            pieces = [grid[column][row] for column, row in line]\n            if pieces.count('Red') == 4:\n                return 'Red'\n            elif pieces.count('Yellow') == 4:\n                return 'Yellow'\n        return 'Draw'\n    \n    grid = {column: [''] * len(ROWS) for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[column].index('')\n        grid[column][row] = color\n    \n    return check_winner(grid)",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    player = None\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = len(grid) - 1\n        \n        while row >= 0 and grid[row][ord(column) - ord('A')] != ' ':\n            row -= 1\n        \n        if row < 0:\n            continue\n        \n        grid[row][ord(column) - ord('A')] = color\n        \n        for line in LINES:\n            if all(grid[row][ord(col) - ord('A')] == color for col, row in line):\n                player = color\n                break\n        \n        if player is not None:\n            break\n    \n    if player == 'Red':\n        return 'Red'\n    elif player == 'Yellow':\n        return 'Yellow'\n    else:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_positions and (column, r) not in yellow_positions), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_positions.add((column, row))\n            elif color == 'Yellow':\n                yellow_positions.add((column, row))\n        if any(line <= red_positions for line in LINES):\n            return 'Red'\n        if any(line <= yellow_positions for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_positions = set()\n    yellow_positions = set()\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        if color == \"Red\":\n            red_positions.add((column, ROWS[len(red_positions)]))\n            if any(line <= red_positions for line in LINES):\n                return \"Red\"\n        elif color == \"Yellow\":\n            yellow_positions.add((column, ROWS[len(yellow_positions)]))\n            if any(line <= yellow_positions for line in LINES):\n                return \"Yellow\"\n    return \"Draw\""
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [] for c in COLUMNS}\n    players = {'Yellow': [], 'Red': []}\n\n    for i, move in enumerate(pieces_positions):\n        column, player = move.split('_')\n        board[column].append(player)\n        players[player].append((column, len(board[column]) - 1))\n\n        for line in LINES:\n            if line <= set(players[player]):\n                return player\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = []\n    yellow_positions = []\n\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        if color == \"Red\":\n            red_positions.append((column, ROWS[len(red_positions)]))\n        else:\n            yellow_positions.append((column, ROWS[len(yellow_positions)]))\n\n    for line in LINES:\n        if line.issubset(red_positions):\n            return \"Red\"\n        elif line.issubset(yellow_positions):\n            return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    pieces = {'Red': set(), 'Yellow': set()}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in ROWS if (column, i) not in pieces['Red'] and (column, i) not in pieces['Yellow']), None)\n        pieces[color].add((column, row))\n        if any(line <= pieces[color] for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, len([m for m in red_moves if m[0] == column])))\n        else:\n            yellow_moves.add((column, len([m for m in yellow_moves if m[0] == column])))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return \"Red\"\n            elif line <= yellow_moves:\n                return \"Yellow\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create an empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n\n    # Iterate over the pieces and update the grid\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        grid[COLUMNS.index(col)][grid[COLUMNS.index(col)].index('')] = color\n\n    # Check for a winning line\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[COLUMNS.index(col)][ROWS.index(row)] == color for col, row in line):\n                return color\n\n    # If there are no winning lines, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = {c: [None]*len(ROWS) for c in COLUMNS}\n\n    for piece in pieces_positions:\n        c, color = piece.split('_')\n        grid[c][grid[c].index(None)] = color\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[c][r] == color for c, r in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Variable to keep track of the current player\n    current_player = ''\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and player from the position\n        column, player = position.split('_')\n        \n        # Convert the column to index\n        column_index = ord(column) - ord('A')\n        \n        # Iterate over the rows in the column\n        for i in range(5, -1, -1):\n            # If the current position in the grid is empty\n            if grid[i][column_index] == '':\n                # Place the player's piece in the grid\n                grid[i][column_index] = player\n                break\n        \n        # Update the current player\n        current_player = player\n    \n    # Check for a winner\n    for line in LINES:\n        # Get the values at the positions in the line\n        values = [grid[i][ord(column) - ord('A')] for column, i in line]\n        \n        # If all the values in the line are the same and not empty\n        if all(value == current_player and value != '' for value in values):\n            return current_player\n    \n    # If there are no more moves and no winner, it is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = color\n                break\n\n    for line in LINES:\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        if colors.count(colors[0]) == 4 and colors[0]:\n            return colors[0]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Variable to keep track of the current player\n    current_player = 'Red'\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position\n        column, color = position.split('_')\n        \n        # Find the empty row in the column\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == ' ':\n                grid[i][ord(column) - ord('A')] = color\n                break\n        \n        # Check if the current player wins\n        for line in LINES:\n            if all(grid[j][ord(i) - ord('A')] == color for i, j in line):\n                return color\n        \n        # Switch players\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n    \n    # If no player wins, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if (col, r) not in red_moves and (col, r) not in yellow_moves), None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red_moves.add((col, row))\n            if any(line.issubset(red_moves) for line in LINES):\n                return 'Red'\n        elif color == 'Yellow':\n            yellow_moves.add((col, row))\n            if any(line.issubset(yellow_moves) for line in LINES):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[' ' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(len(ROWS)):\n            if board[ord(column)-ord('A')][row] == ' ':\n                board[ord(column)-ord('A')][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for column, row in line:\n            colors.add(board[ord(column)-ord('A')][row])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    return 'Draw'"
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((row for row in ROWS if (column, row) not in red_moves and (column, row) not in yellow_moves), default=None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red_moves.add((column, row))\n            if any(line <= red_moves for line in LINES):\n                return \"Red\"\n        elif color == 'Yellow':\n            yellow_moves.add((column, row))\n            if any(line <= yellow_moves for line in LINES):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Variable to keep track of the current player\n    current_player = ''\n\n    # Loop through the pieces positions\n    for position in pieces_positions:\n\n        # Get the column and color of the current position\n        column, color = position.split('_')\n        row = -1\n\n        # Find the first empty row in the column\n        for i in range(5, -1, -1):\n            if grid[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n\n        # If no empty row is found, the column is full\n        if row == -1:\n            continue\n\n        # Update the grid with the current player's color\n        grid[row][ord(column) - ord('A')] = color\n\n        # Check if the current player wins\n        for line in LINES:\n            if all(grid[i][ord(j) - ord('A')] == color for j, i in line):\n                return color\n\n        # Switch to the other player\n        current_player = 'Yellow' if current_player == 'Red' else 'Red'\n\n    # If no winner is found, the game is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Find the next empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        \n        # Update the grid with the color\n        grid[row][ord(column) - ord('A')] = color\n        \n        # Check for a winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # No winner found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        for row in range(len(ROWS)-1, -1, -1):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_index = ord(col) - ord('A')\n        \n        for row in range(6):\n            if grid[row][col_index] == '':\n                grid[row][col_index] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(col)-ord('A')] == color for col, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        for i in range(len(ROWS)):\n            if board[column_index][i] == '':\n                board[column_index][i] = color\n                break\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_pieces = set()\n    yellow_pieces = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next(row for row in ROWS if (column, row) not in red_pieces and (column, row) not in yellow_pieces)\n        if color == 'Red':\n            red_pieces.add((column, row))\n            if any(line.issubset(red_pieces) for line in LINES):\n                return 'Red'\n        else:\n            yellow_pieces.add((column, row))\n            if any(line.issubset(yellow_pieces) for line in LINES):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next(i for i in range(5, -1, -1) if not board[i][COLUMNS.index(col)])\n        board[row][COLUMNS.index(col)] = color\n    \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[ROWS.index(row)][COLUMNS.index(col)] == color for col, row in line):\n                return color\n    \n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {c: [None]*len(ROWS) for c in COLUMNS}\n    for p in pieces_positions:\n        c, color = p.split('_')\n        board[c][board[c].index(None)] = color\n\n    for line in LINES:\n        if all(board[c][r] == 'Red' for c, r in line):\n            return 'Red'\n        if all(board[c][r] == 'Yellow' for c, r in line):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((r for r in range(6) if (column, r) not in red_moves and (column, r) not in yellow_moves), None)\n        if row is None:\n            return \"Draw\"\n        if color == \"Red\":\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line <= red_moves or line <= yellow_moves:\n                return color\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] is not None:\n            row += 1\n        board[row][ord(column) - ord('A')] = color\n        \n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    players = {'Red', 'Yellow'}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[COLUMNS.index(column)].index('')\n        grid[COLUMNS.index(column)][row] = player\n        \n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == player for c, r in line):\n                return player\n    \n    return 'Draw'",
            "```python\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = next((i for i, r in enumerate(grid) if r[ord(col)-65] == ' '), None)\n        if row is None:\n            return 'Draw'\n        grid[row][ord(col)-65] = color\n\n        for line in LINES:\n            if all(grid[r][ord(c)-65] == color for c, r in line):\n                return color\n\n    return 'Draw'\n```",
            "def who_is_winner(pieces_positions):\n    def winner(player):\n        for line in LINES:\n            if all(piece in pieces[player] for piece in line):\n                return True\n        return False\n    \n    pieces = {'Red': set(), 'Yellow': set()}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        pieces[color].add((column, len(pieces[color])))\n        if winner(color):\n            return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = ord(column) - 65\n        \n        for row in range(6):\n            if not board[row][column_index]:\n                board[row][column_index] = players[color]\n                break\n        \n        for line in LINES:\n            if all(board[row][ord(column) - 65] == players[color] for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create empty board\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over pieces_positions\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the lowest empty row in the given column\n        row = 0\n        while row < 6 and board[row][ord(column)-ord('A')] != '':\n            row += 1\n        \n        # Place the color in the board\n        board[row][ord(column)-ord('A')] = color\n    \n    # Check if there is a winner\n    for line in LINES:\n        colors = set(board[row][ord(column)-ord('A')] for column, row in line)\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    \n    # If there is no winner, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def check_line(line):\n        if line.issubset(red_pieces):\n            return \"Red\"\n        elif line.issubset(yellow_pieces):\n            return \"Yellow\"\n        else:\n            return None\n\n    red_pieces = set()\n    yellow_pieces = set()\n\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max((row for row in ROWS if (column, row) not in red_pieces and (column, row) not in yellow_pieces))\n        if color == \"Red\":\n            red_pieces.add((column, row))\n        elif color == \"Yellow\":\n            yellow_pieces.add((column, row))\n\n        for line in LINES:\n            result = check_line(line)\n            if result:\n                return result\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {(c, r): None for c in COLUMNS for r in ROWS}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        board[col, next(r for r in ROWS if board[col, r] is None)] = color\n\n    for line in LINES:\n        cells = [board[cell] for cell in line]\n        if all(cells) and len(set(cells)) == 1:\n            return cells[0]\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[''] * 7 for _ in range(6)]\n\n    # Keep track of the last played color\n    last_color = ''\n\n    # Iterate over each move in the pieces_positions list\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the row to place the piece\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] == '':\n            row += 1\n        \n        # Place the piece in the grid\n        grid[row - 1][ord(column) - ord('A')] = color\n        \n        # Check for a winning condition\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n        \n        # Update the last_color variable\n        last_color = color\n    \n    # If no winning condition is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[\"\"] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        row = 0\n        while row < 6 and grid[row][ord(column) - 65] == \"\":\n            row += 1\n        row -= 1\n        grid[row][ord(column) - 65] = color\n        \n        for line in LINES:\n            if all(grid[row][ord(column) - 65] == color for column, row in line):\n                return color\n    return \"Draw\""
        ]
    }
}