{
    "0": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if (x in grid and y < 6 and grid[x][y] is not None)):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for positions in LINES:\n                if all(board[col][row] == color for col, row in positions if row < 6 and board[col][row] is not None):\n                    return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        c = chr(ord(col) + delta_col * d)\n        r = row + delta_row * d\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if 0 <= r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Horizontal check\n                    if col <= 'D' and all(board[col][row] == board[c][row] for c in 'DEFG'[:7 - (ord(col) - ord('A'))]):\n                        return board[col][row]\n                    # Vertical check\n                    if row <= 2 and all(board[col][row] == board[col][r] for r in range(row, row + 4)):\n                        return board[col][row]\n                    # Diagonal down right check\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[C][R] for C, R in zip('DEFG', range(row, row + 4))):\n                        return board[col][row]\n                    # Diagonal down left check\n                    if col >= 'D' and row <= 2 and all(board[col][row] == board[C][R] for C, R in zip('DCBA', range(row, row + 4))):\n                        return board[col][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if ((col, row) in LINES and\n                        any(all(board[c][r] == color for c, r in line) for line in LINES)):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(col + 65)][row] == color:\n                    if col + 3 < 7 and all(grid[chr(col + i + 65)][row] == color for i in range(4)):\n                        return color\n                    if row + 3 < 6 and all(grid[chr(col + 65)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row + 3 < 6 and all(grid[chr(col + i + 65)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row - 3 >= 0 and all(grid[chr(col + i + 65)][row - i] == color for i in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for step in range(1, 4):\n                    new_row = row + direction[0] * step * d\n                    new_col = ord(column) - ord('A') + direction[1] * step * d\n                    if 0 <= new_row < 6 and 0 <= new_col < 7:\n                        if grid[chr(new_col + ord('A'))][new_row] == player:\n                            count += 1\n                        else:\n                            break\n                    else:\n                        break\n            if count >= 4:\n                return player\n\n    return \"Draw\"\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for row in range(6):\n            for col in range(7):\n                if board['ABCDEFG'[col]][row] == color:\n                    if (col <= 3 and all(board['ABCDEFG'[col+i]][row] == color for i in range(4)) or\n                        row <= 2 and all(board['ABCDEFG'[col]][row+i] == color for i in range(4)) or\n                        col <= 3 and row <= 2 and all(board['ABCDEFG'[col+i]][row+i] == color for i in range(4)) or\n                        col <= 3 and row >= 3 and all(board['ABCDEFG'[col+i]][row-i] == color for i in range(4))):\n                        return color\n                        \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(color):\n                    return color\n                break\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(65 + c + i)][r] == board[chr(65 + c)][r] for i in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check vertical\n                    if r <= 2 and all(board[chr(65 + c)][r + i] == board[chr(65 + c)][r] for i in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == board[chr(65 + c)][r] for i in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == board[chr(65 + c)][r] for i in range(4)):\n                        return board[chr(65 + c)][r]\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check for wins\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal (down-right)\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal (down-left)\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if (row <= 2 and all(grid[col][row+i] == color for i in range(4)) or\n                        col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4)) or\n                        row <= 2 and col <= 'D' and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4)) or\n                        row >= 3 and col <= 'D' and all(grid[chr(ord(col)+i)][row-i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row]:\n                    color = grid[col][row]\n                    if (row <= 2 and all(grid[col][row + k] == color for k in range(4)) or\n                        col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)) or\n                        col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)) or\n                        col >= 'D' and row <= 2 and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4))):\n                        return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] == color:  # A=65, B=66, ..., G=71\n                    # Check vertical\n                    if i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if j <= 3 and all(board[chr(j + k + 65)][i] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if i <= 2 and j <= 3 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal up-right\n                    if i >= 3 and j <= 3 and all(board[chr(j + k + 65)][i - k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for step in range(4):\n            x = ord(col) - ord('A') + step * dx\n            y = row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and (board[chr(x + ord('A'))][y] == color):\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if board['A'][i] == color and j < 4 and all(board[chr(ord('A') + j + k)][i] == color for k in range(4)):\n                        return color\n                    if board['A'][i] == color and i < 3 and all(board[chr(ord('A') + j)][i + k] == color for k in range(4)):\n                        return color\n                    if board['A'][i] == color and i < 3 and j < 4 and all(board[chr(ord('A') + j + k)][i + k] == color for k in range(4)):\n                        return color\n                    if board['A'][i] == color and i < 3 and j >= 3 and all(board[chr(ord('A') + j - k)][i + k] == color for k in range(4)):\n                        return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6)):\n                return color\n                \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    else:\n        return 'Draw'\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or\n                    check_direction(board, color, col, row, 0, 1) or\n                    check_direction(board, color, col, row, 1, 1) or\n                    check_direction(board, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_turn[player] += 1\n        \n        if player_turn[player] >= 4:\n            # Check for win conditions\n            if any(all(grid[c][r] == player for c, r in line) for line in LINES):\n                return player\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[(ord(col)-65):(ord(col)-61)]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row-i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    c = ord(col) - ord('A') + i * direction[0] * d\n                    r = row + i * direction[1] * d\n                    if 0 <= c < 7 and 0 <= r < 6 and board[chr(c + ord('A'))][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n                \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in range(7):\n            for row in range(6):\n                if board[chr(65 + col)][row] is not None:\n                    if (col + 3 < 7 and \n                        board[chr(65 + col)][row] == board[chr(65 + col + 1)][row] == \n                        board[chr(65 + col + 2)][row] == board[chr(65 + col + 3)][row]):\n                        return board[chr(65 + col)][row]\n                    if (row + 3 < 6 and \n                        board[chr(65 + col)][row] == board[chr(65 + col)][row + 1] == \n                        board[chr(65 + col)][row + 2] == board[chr(65 + col)][row + 3]):\n                        return board[chr(65 + col)][row]\n                    if (col + 3 < 7 and row + 3 < 6 and \n                        board[chr(65 + col)][row] == board[chr(65 + col + 1)][row + 1] == \n                        board[chr(65 + col + 2)][row + 2] == board[chr(65 + col + 3)][row + 3]):\n                        return board[chr(65 + col)][row]\n                    if (col + 3 < 7 and row - 3 >= 0 and \n                        board[chr(65 + col)][row] == board[chr(65 + col + 1)][row - 1] == \n                        board[chr(65 + col + 2)][row - 2] == board[chr(65 + col + 3)][row - 3]):\n                        return board[chr(65 + col)][row]\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check for win in all directions\n                    if check_win(board, color, col, row):\n                        return color\n\n    return \"Draw\"\n\ndef check_win(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                c = chr(ord(col) + d[0] * step * i)\n                r = row + d[1] * step * i\n                if c in board and 0 <= r < 6 and board[c][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n                \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        # Check for a win condition\n        if check_winner(grid, color, row, col):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color, row, col):\n    # Check horizontal\n    count = 0\n    for c in 'ABCDEFG':\n        count = count + 1 if grid[c][row] == color else 0\n        if count >= 4:\n            return True\n\n    # Check vertical\n    count = 0\n    for r in range(6):\n        count = count + 1 if grid[col][r] == color else 0\n        if count >= 4:\n            return True\n\n    # Check diagonal (bottom-left to top-right)\n    count = 0\n    start_col = max(0, ord(col) - ord('A') - 3)\n    start_row = max(0, row - 3)\n    for i in range(4):\n        c = chr(start_col + i + ord('A'))\n        r = start_row + i\n        if r < 6 and c in grid and grid[c][r] == color:\n            count += 1\n            if count >= 4:\n                return True\n        else:\n            count = 0\n\n    # Check diagonal (top-left to bottom-right)\n    count = 0\n    start_col = max(0, ord(col) - ord('A') - 3)\n    start_row = min(5, row + 3)\n    for i in range(4):\n        c = chr(start_col + i + ord('A'))\n        r = start_row - i\n        if r >= 0 and c in grid and grid[c][r] == color:\n            count += 1\n            if count >= 4:\n                return True\n        else:\n            count = 0\n            \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4)):\n                        return color\n                    \n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal /\n                    if j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        }
    ]
}