{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (\n                        c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4)) or\n                        r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4)) or\n                        c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)) or\n                        c - 3 >= 0 and r + 3 < 6 and all(board[chr(c - i + 65)][r + i] == color for i in range(4))\n                    ):\n                        return color\n    \n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if all(board[c][row] == color for c in 'ABCDEFG'[(ord(col) - 65):(ord(col) - 65 + 4)]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[column][row] for column, row in line if board[column][row] is not None]\n        if len(set(colors)) == 1 and colors:\n            return colors[0]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and len(set(colors)) == 1:\n                return colors[0]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c, r) in grid.items() and r < 6 and grid[c][r] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if y < 6 and grid[x][y] is not None):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for line in LINES:\n            values = [board[c][r] for c, r in line if c in board and r < 6 and board[c][r] is not None]\n            if len(values) == 4 and len(set(values)) == 1:\n                return values[0]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= (r + col_offset) < len(board[c]) and \\\n                           all(board[c][r] == color for c in 'ABCDEFG' if c in board and r + col_offset in range(len(board[c]))):\n                            return color\n                    # Check diagonal \\\n                    for d in range(4):\n                        if 0 <= r - d < len(board[c]) and \\\n                           0 <= (r - d) < len(board[column]) and \\\n                           (column - d in board) and \\\n                           board[column - d][r - d] == color:\n                            return color\n                    # Check diagonal /\n                    for d in range(4):\n                        if 0 <= r + d < len(board[c]) and \\\n                           0 <= (r + d) < len(board[column]) and \\\n                           (column + d in board) and \\\n                           board[column + d][r + d] == color:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [((0, 1), (1, 0)), ((1, 0), (0, 1)), ((1, 1), (1, -1))]:\n            count = 1\n            for (dx, dy) in direction:\n                x, y = board[column].index(color), row\n                while 0 <= x + dx < 6 and 0 <= y + dy < 7 and board['ABCDEFG'[y + dy]][x + dx] == color:\n                    count += 1\n                    x += dx\n                    y += dy\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if (0 <= row < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Check vertical\n    if len(board[column]) >= 4 and all(c == color for c in board[column][-4:]):\n        return True\n    \n    # Check horizontal\n    row_index = len(board[column]) - 1\n    for c in 'ABCDEFG':\n        if board[c][-1] == color and row_index < len(board[c]):\n            if sum(1 for k in range(-3, 1) if row_index < len(board[c]) and board[c][row_index] == color) == 4:\n                return True\n    \n    # Check diagonal \\\n    for c in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        for r in range(3, 7):\n            if all(board[chr(c + i)][r - i] == color for i in range(4) if 0 <= c + i < 7 and r - i >= 0):\n                return True\n    \n    # Check diagonal /\n    for c in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        for r in range(0, 4):\n            if all(board[chr(c + i)][r + i] == color for i in range(4) if 0 <= c + i < 7 and r + i < 6):\n                return True\n\n    return False\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if (col, row) in line):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if (col, row) in line):\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < len(grid[c]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[col] if col in board else [])[row] == color for col in 'ABCDEFG' if len(board[col]) > row):\n                    return color\n    \n    # Check for draw\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board[chr(ord(column) - k)][row + k] == color for k in range(4)):\n                    return color\n\n        return None\n\n    winner = check_winner()\n    if winner is None:\n        return \"Draw\"\n    return winner\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < len(board[x]))):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and y >= 0):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (0 <= y < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (i <= 3 and all(board[chr(65 + i + k)][j] == color_check for k in range(4))) or \\\n                       (j <= 2 and all(board[chr(65 + i)][j + k] == color_check for k in range(4))) or \\\n                       (i <= 3 and j <= 2 and all(board[chr(65 + i + k)][j + k] == color_check for k in range(4))) or \\\n                       (i <= 3 and j >= 3 and all(board[chr(65 + i + k)][j - k] == color_check for k in range(4))):\n                        return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        # Check horizontal, vertical, and diagonal lines for a win\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][j] == color for j in range(row, row + 4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[COLUMNS[i]][row - (i - COLUMNS.index(col))] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[i]][row + (i - COLUMNS.index(col))] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in grid:\n            if grid[col].count(color) >= 4:\n                for row in range(6):\n                    if grid[col][row] == color:\n                        if (row <= 2 and all(grid[col][row + k] == color for k in range(4))) or \\\n                           (col in 'ABCDEFG' and col != 'G' and all(grid[chr(ord(col) + k)][row] == color for k in range(4) if chr(ord(col) + k) in grid)) or \\\n                           (col in 'ABCDEFG' and col != 'A' and all(grid[chr(ord(col) - k)][row] == color for k in range(4) if chr(ord(col) - k) in grid)) or \\\n                           (row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4) if chr(ord(col) + k) in grid)) or \\\n                           (row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4) if chr(ord(col) + k) in grid)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check horizontal\n    for i in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n        if all(board[chr(i + ord('A'))][row] == color for i in range(i, i + 4)):\n            return True\n    \n    # Check vertical\n    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n        return True\n\n    # Check diagonal /\n    for i in range(-3, 1):\n        if 0 <= row + i < 6 and 0 <= ord(col) - ord('A') + i < 7:\n            if all(0 <= row + k < 6 and 0 <= ord(col) - ord('A') + i + k < 7 and\n                   board[chr(ord(col) + i + k)][row + k] == color for k in range(4)):\n                return True\n\n    # Check diagonal \\\n    for i in range(-3, 1):\n        if 0 <= row - i < 6 and 0 <= ord(col) - ord('A') + i < 7:\n            if all(0 <= row - k < 6 and 0 <= ord(col) - ord('A') + i + k < 7 and\n                   board[chr(ord(col) + i + k)][row - k] == color for k in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n\n        if check_winner(player_moves[player]):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(moves):\n    for move in moves:\n        if count_connected(moves, move, (1, 0)) >= 4 or \\\n           count_connected(moves, move, (0, 1)) >= 4 or \\\n           count_connected(moves, move, (1, 1)) >= 4 or \\\n           count_connected(moves, move, (1, -1)) >= 4:\n            return True\n    return False\n\ndef count_connected(moves, start, direction):\n    count = 1\n    count += count_direction(moves, start, direction)\n    count += count_direction(moves, start, (-direction[0], -direction[1]))\n    return count\n\ndef count_direction(moves, start, direction):\n    count = 0\n    col_index = 'ABCDEFG'.index(start[0])\n    for step in range(1, 4):\n        new_col = col_index + step * direction[0]\n        new_row = start[1] + step * direction[1]\n        if 0 <= new_col < 7 and 0 <= new_row < 6:\n            if (chr(new_col + 65), new_row) in moves:\n                count += 1\n            else:\n                break\n    return count\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            if check_winner(board, col):\n                return board[col][0]\n    \n    return \"Draw\"\n\ndef check_winner(board, col):\n    color = board[col][0]\n    if color is None:\n        return False\n    \n    # Check vertical\n    if sum(1 for row in range(6) if board[col][row] == color) >= 4:\n        return True\n    \n    # Check horizontal\n    for start_col in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n        if all(board[chr(start_col + ord('A'))][row] == color for row in range(6)):\n            return True\n    \n    # Check diagonal (bottom left to top right)\n    for start_col in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n        if all(board[chr(start_col + ord('A') + i)][5 - i] == color for i in range(4) if 0 <= (start_col + i) < 7):\n            return True\n    \n    # Check diagonal (top left to bottom right)\n    for start_col in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n        if all(board[chr(start_col + ord('A') + i)][i] == color for i in range(4) if 0 <= (start_col + i) < 7):\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + step * delta_col)\n        r = row + step * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        if check_winner(grid, column, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        \n        for i in range(1, 4):\n            r = row + d[1] * i\n            c = col_index(col) + d[0] * i\n            if 0 <= r < 6 and 0 <= c < 7 and grid[COLUMNS[c]][r] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            r = row - d[1] * i\n            c = col_index(col) - d[0] * i\n            if 0 <= r < 6 and 0 <= c < 7 and grid[COLUMNS[c]][r] == color:\n                count += 1\n            else:\n                break\n            \n        if count >= 4:\n            return True\n            \n    return False\n\ndef col_index(col):\n    return 'ABCDEFG'.index(col)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1))   # Diagonal /\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + d_col * step)\n        new_row = row + d_row * step\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win condition after each move\n        if len(board[column]) >= 4:  # Only check if there are at least 4 pieces\n            if check_winner(board, column, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Convert column letters to indices\n    col_idx = 'ABCDEFG'.index(column)\n    row_idx = len(board[column]) - 1\n    \n    # Check all directions: horizontal, vertical, and two diagonals\n    directions = [\n        [(0, 1), (0, -1)],  # horizontal\n        [(1, 0)],           # vertical\n        [(1, 1), (-1, -1)], # diagonal /\n        [(1, -1), (-1, 1)]  # diagonal \\\n    ]\n\n    for direction in directions:\n        count = 1\n        \n        for (dx, dy) in direction:\n            x, y = col_idx, row_idx\n            while 0 <= x < 7 and 0 <= y < 6 and board['ABCDEFG'[x]][y] == color:\n                count += 1\n                x += dx\n                y += dy\n\n        if count >= 4:\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win condition\n        if check_winner(board, color, col, row):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        \n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') + dx * step, row + dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') - dx * step, row - dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win condition after each move\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in COLUMNS:\n                for row in ROWS:\n                    if (row <= 2 and \n                        board[col][row] == color and \n                        board[col][row + 1] == color and \n                        board[col][row + 2] == color and \n                        board[col][row + 3] == color):\n                        return color\n                    if (col <= 'D' and \n                        board[col][row] == color and \n                        board[chr(ord(col) + 1)][row] == color and \n                        board[chr(ord(col) + 2)][row] == color and \n                        board[chr(ord(col) + 3)][row] == color):\n                        return color\n                    if (col <= 'D' and row <= 2 and \n                        board[col][row] == color and \n                        board[chr(ord(col) + 1)][row + 1] == color and \n                        board[chr(ord(col) + 2)][row + 2] == color and \n                        board[chr(ord(col) + 3)][row + 3] == color):\n                        return color\n                    if (col <= 'D' and row >= 3 and \n                        board[col][row] == color and \n                        board[chr(ord(col) + 1)][row - 1] == color and \n                        board[chr(ord(col) + 2)][row - 2] == color and \n                        board[chr(ord(col) + 3)][row - 3] == color):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] is None:\n                    continue\n                \n                if row <= 2 and all(board[col][row + i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                if col <= 'D' and all(board[chr(ord(col) + i)][row] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n                if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == board[col][row] for i in range(4)):\n                    return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(color):\n                    return color\n                break\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row+k] == color for k in range(4))) or \\\n                           (col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4))) or \\\n                           (col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4))) or \\\n                           (col >= 'D' and row <= 2 and all(board[chr(ord(col)-k)][row+k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check horizontal, vertical, and diagonal connections\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Horizontal\n                        if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                            return color\n                        # Vertical\n                        if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Diagonal down\n                        if col <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                            return color\n                        # Diagonal up\n                        if col <= 'D' and row >= 3 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row - k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (j + 3 < 6 and\n                        all(board[chr(i + 65)][j + k] == color for k in range(4)) or\n                        (i + 3 < 7 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or\n                        (i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or\n                        (i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        values = [board[c][r] for c, r in line if board[c][r] is not None]\n        if len(values) == 4 and len(set(values)) == 1:\n            return values[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    elif len(pieces_positions) == 42:\n        return 'Draw'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board[column][-4:], color):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(column_moves, color):\n    return column_moves.count(color) == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for step in range(4):\n            x = ord(col) - ord('A') + step * dx\n            y = row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and (board[chr(x + ord('A'))][y] == color):\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_win(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y in ROWS):\n                return True\n        return False\n\n    if check_win('Red'):\n        return 'Red'\n    elif check_win('Yellow'):\n        return 'Yellow'\n    else:\n        return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][j] == color for j in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[i]][row + i - COLUMNS.index(col)] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[COLUMNS[i]][row - (i - COLUMNS.index(col))] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if check_winner(board[c]):\n                return board[c][0]\n    \n    return \"Draw\"\n\ndef check_winner(column):\n    count = 0\n    last_color = None\n    for cell in column:\n        if cell == last_color and cell is not None:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 1\n            last_color = cell\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col_start in range(7):\n            for row_start in range(6):\n                if board['ABCDEFG'[col_start]][row_start] == color:\n                    # Check horizontal\n                    if col_start <= 3 and all(board['ABCDEFG'[col_start + i]][row_start] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row_start <= 2 and all(board['ABCDEFG'[col_start]][row_start + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col_start <= 3 and row_start <= 2 and all(board['ABCDEFG'[col_start + i]][row_start + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col_start <= 3 and row_start >= 3 and all(board['ABCDEFG'[col_start + i]][row_start - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, color, 1, 0) or\n                    check_direction(board, col, row, color, 0, 1) or\n                    check_direction(board, col, row, color, 1, 1) or\n                    check_direction(board, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        new_col = chr(ord(col) + i * delta_col)\n        new_row = row + i * delta_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    # Check horizontal\n                    if c + 3 < 7 and all(board[chr(65 + c + k)][r] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check vertical\n                    if r + 3 < 6 and all(board[chr(65 + c)][r + k] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check diagonal /\n                    if c + 3 < 7 and r - 3 >= 0 and all(board[chr(65 + c + k)][r - k] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check diagonal \\\n                    if c + 3 < 7 and r + 3 < 6 and all(board[chr(65 + c + k)][r + k] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for color_to_check in ['Red', 'Yellow']:\n            # Check vertical, horizontal, and both diagonals\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color_to_check:\n                        # Vertical\n                        if row <= 2 and all(grid[col][row + k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color_to_check for k in range(4)):\n                            return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player], player):\n            return player\n            \n    return \"Draw\"\n\ndef check_winner(moves, player):\n    positions = {(col, row) for col, row in moves}\n    for (col, row) in moves:\n        if all((col, row + i) in positions for i in range(4)) or \\\n           all((chr(ord(col) + i), row) in positions for i in range(4)) or \\\n           all((chr(ord(col) + i), row + i) in positions for i in range(4)) or \\\n           all((chr(ord(col) + i), row - i) in positions for i in range(4)):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player] += 1\n        \n        if check_winner(board, player, column, row):\n            return player\n\n    return \"Draw\" if player_moves['Red'] + player_moves['Yellow'] == 42 else \"Draw\"\n\ndef check_winner(board, player, column, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = ord(column) - ord('A') + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == player:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = ord(column) - ord('A') - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == player:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal connections\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # Horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # Vertical\n                    check_direction(board, col, row, 1, 1, color) or  # Diagonal /\n                    check_direction(board, col, row, 1, -1, color)):  # Diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == color:\n                        # Check horizontal\n                        if col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[chr(col + 65)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if (col, row) in line:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6)):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j + k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j + k]][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j >= 3 and i <= 2 and all(board[COLUMNS[j - k]][i + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        # Check for a win condition\n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check horizontal, vertical, and both diagonals\n    return (check_direction(board, color, col, row, 1, 0) or\n            check_direction(board, color, col, row, 0, 1) or\n            check_direction(board, color, col, row, 1, 1) or\n            check_direction(board, color, col, row, 1, -1))\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(-3, 4):\n        c = chr(ord(col) + d * delta_col)\n        r = row + d * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_turn[player] += 1\n        \n        if check_winner(grid, player):\n            return player\n            \n    return \"Draw\"\n\ndef check_winner(grid, player):\n    for column in grid:\n        for row in range(6):\n            if grid[column][row] == player:\n                if check_direction(grid, column, row, player):\n                    return True\n    return False\n\ndef check_direction(grid, column, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                new_col = chr(ord(column) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == player:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if any(all(grid[col][row] == grid[c][r] for c, r in line) for line in LINES):\n                        return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if 0 <= c + direction[0] * 3 < 7 and 0 <= r + direction[1] * 3 < 6:\n                        colors = {board['ABCDEFG'[c + direction[0] * i]][r + direction[1] * i] for i in range(4)}\n                        if len(colors) == 1 and None not in colors:\n                            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j <= 3 and all(board[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4))) or \\\n                   (i <= 2 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                   (i <= 2 and j <= 3 and all(board[chr(j + ord('A') + k)][i + k] == color for k in range(4))) or \\\n                   (i >= 3 and j <= 3 and all(board[chr(j + ord('A') + k)][i - k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        for line in LINES:\n            if any((col, row) in line for col in grid for row in range(6) if grid[col][row] == color):\n                if all(grid[c][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, color, 1, 0) or\n                        check_direction(board, col, row, color, 0, 1) or\n                        check_direction(board, col, row, color, 1, 1) or\n                        check_direction(board, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + step * delta_col)\n        r = row + step * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(65 + col)][row] == color_to_check:\n                        if col <= 3 and all(board[chr(65 + col + k)][row] == color_to_check for k in range(4)):\n                            return color_to_check\n                        if row <= 2 and all(board[chr(65 + col)][row + k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        if col <= 3 and row <= 2 and all(board[chr(65 + col + k)][row + k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        if col <= 3 and row >= 3 and all(board[chr(65 + col + k)][row - k] == color_to_check for k in range(4)):\n                            return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, color, 1, 0) or\n                    check_direction(board, col, row, color, 0, 1) or\n                    check_direction(board, col, row, color, 1, 1) or\n                    check_direction(board, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    # Check horizontal\n                    if c + 3 < 7 and all(board[chr(65 + c + k)][r] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check vertical\n                    if r + 3 < 6 and all(board[chr(65 + c)][r + k] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check diagonal /\n                    if c + 3 < 7 and r - 3 >= 0 and all(board[chr(65 + c + k)][r - k] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n                    # Check diagonal \\\n                    if c + 3 < 7 and r + 3 < 6 and all(board[chr(65 + c + k)][r + k] == board[chr(65 + c)][r] for k in range(4)):\n                        return board[chr(65 + c)][r]\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player].append((column, row))\n                break\n    \n    def check_winner(player):\n        for x, y in player_moves[player]:\n            for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                count = 1\n                for step in range(1, 4):\n                    nx, ny = chr(ord(x) + dx * step), y + dy * step\n                    if 0 <= ord(nx) - ord('A') < 7 and 0 <= ny < 6 and board[nx][ny] == player:\n                        count += 1\n                    else:\n                        break\n                for step in range(1, 4):\n                    nx, ny = chr(ord(x) - dx * step), y - dy * step\n                    if 0 <= ord(nx) - ord('A') < 7 and 0 <= ny < 6 and board[nx][ny] == player:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return player\n        return None\n    \n    for player in ['Red', 'Yellow']:\n        winner = check_winner(player)\n        if winner:\n            return winner\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        for line in LINES:\n            if any(board[c][r] == color for c, r in line) and all(board[c][r] == color for c, r in line if (c, r) in line):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        # Check for victory\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal lines\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j <= 3 and all(board[chr(k + 65)][i] == color for k in range(j, j + 4))) or \\\n                   (i <= 2 and all(board[chr(j + 65)][i + k] == color for k in range(4))) or \\\n                   (j <= 3 and i <= 2 and all(board[chr(j + k + 65)][i + k] == color for k in range(4))) or \\\n                   (j <= 3 and i >= 3 and all(board[chr(j + k + 65)][i - k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for win_color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[x][y] == win_color for x, y in line if y < len(grid[x])):\n                    return win_color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) - 65 + 4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (col, row) in [(col, row) for col in 'ABCDEFG' for row in range(6)]:\n                        if check_win(board, col, row, color):\n                            return color\n    \n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dr, dc in directions:\n        count = 1\n        for i in range(1, 4):\n            r, c = row + dr * i, ord(col) - ord('A') + dc * i\n            if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        for i in range(1, 4):\n            r, c = row - dr * i, ord(col) - ord('A') - dc * i\n            if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == 'Red' for x, y in line if x in board and y < 6):\n                return \"Red\"\n            if all(board[x][y] == 'Yellow' for x, y in line if x in board and y < 6):\n                return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(ord('A') + col)][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[chr(ord('A') + col)][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 3 and all(board[chr(ord('A') + col + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if col <= 3 and row <= 2 and all(board[chr(ord('A') + col + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if col >= 3 and row <= 2 and all(board[chr(ord('A') + col - k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if (col in grid and 0 <= row < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1))   # Diagonal /\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for d in range(-3, 4):\n        c = chr(ord(col) + d * delta_col)\n        r = row + d * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if board[chr(65 + col)][row] == color:\n                    if col + 3 < 7 and all(board[chr(65 + col + i)][row] == color for i in range(4)):\n                        return color\n                    if row + 3 < 6 and all(board[chr(65 + col)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row + 3 < 6 and all(board[chr(65 + col + i)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row - 3 >= 0 and all(board[chr(65 + col + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal (top-left to bottom-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (bottom-left to top-right)\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < len(board[x]) and board[x][y] is not None):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and row >= 0 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 0 <= ord(c) + i < 7):\n                            return color\n                    # Check diagonal /\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and 0 <= ord(c) + d < 7 and all(\n                            board[chr(ord(c) + i)][r - i + d] == color for i in range(4) if 0 <= r - i + d < 6):\n                            return color\n                    # Check diagonal \\\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and 0 <= ord(c) - d < 7 and all(\n                            board[chr(ord(c) - i)][r - i + d] == color for i in range(4) if 0 <= r - i + d < 6):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_check for col, row in line) for line in LINES):\n                return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y in range(6)):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if (0 <= row < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (len(board[column]) >= 4 and \n                board[column][i] == color and \n                board[column][i-1] == color and \n                board[column][i-2] == color and \n                board[column][i-3] == color):\n                return color\n\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if row < len(board[col]):\n                current_color = board[col][row]\n                \n                if current_color != 'Red' and current_color != 'Yellow':\n                    continue\n\n                # Vertical\n                if row <= 2 and all(current_color == board[col][row + k] for k in range(4)):\n                    return current_color\n                \n                # Horizontal\n                for k in range(max(0, col.index(col) - 3), min(7, col.index(col) + 1)):\n                    if all((k + j < 7 and row < len(board[COLUMNS[k + j]]) and \n                            board[COLUMNS[k + j]][row] == current_color) for j in range(4)):\n                        return current_color\n                \n                # Diagonal \\\n                if row <= 2 and all((col_idx < 7 and \n                                     row + (col_idx - col.index(col)) < len(board[COLUMNS[col_idx]]) and \n                                     board[COLUMNS[col_idx]][row + (col_idx - col.index(col))] == current_color) \n                                    for col_idx in range(col.index(col), col.index(col) + 4)):\n                    return current_color\n                \n                # Diagonal /\n                if row >= 3 and all((col_idx < 7 and \n                                     row - (col_idx - col.index(col)) >= 0 and \n                                     board[COLUMNS[col_idx]][row - (col_idx - col.index(col))] == current_color) \n                                    for col_idx in range(col.index(col), col.index(col) + 4)):\n                    return current_color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and all(color == colors[0] for color in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        all(grid[c][row] == color for c in 'ABCDEFG' if grid[c][row] is not None) or\n                        all(grid[COLUMNS[i][j]][row + j] == color for j in range(4) \n                            if row + j < 6 and i < len(COLUMNS)) or\n                        all(grid[COLUMNS[i][3 - j]][row + j] == color for j in range(4) \n                            if row + j < 6 and i < len(COLUMNS))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for positions in LINES:\n            if all(board[col][row] == color for col, row in positions if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i + 3 < 7 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j + 3 < 6 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[1]\n                    c = board.keys().index(col) + d * i * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in grid and all(grid[col][row] == color for col in 'ABCDEFG'[:7][\n                                'ABCDEFG'.index(col):][:4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) - k][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {c: [None] * 6 for c in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n    \n    for player in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == player:\n                    if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == player for k in range(4)):\n                        return player\n                    if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == player for k in range(4)):\n                        return player\n                    if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == player for k in range(4)):\n                        return player\n                    if j - 3 >= 0 and i + 3 < 6 and all(board['ABCDEFG'[j-k]][i+k] == player for k in range(4)):\n                        return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and all(color == colors[0] for color in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if col in board and row in board[col]:\n                        if (row <= 2 and all(board[col][row+k] == board[col][row] for k in range(4))) or \\\n                           (col in 'ABCDEFG' and all(board[COLUMNS[i]][row] == board[col][row] for i in range(max(0, ord(col)-65), min(ord(col)-65+4, 7)))) or \\\n                           (row <= 2 and col in 'ABCDEFG' and all(board[COLUMNS[i+k]][row+k] == board[col][row] for k in range(4))) or \\\n                           (row >= 3 and col in 'ABCDEFG' and all(board[COLUMNS[i+k]][row-k] == board[col][row] for k in range(4))):\n                            return board[col][row]\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for win_positions in LINES:\n        colors = {color for pos in win_positions for color in [board[pos[0]][pos[1]] if board[pos[0]][pos[1]] is not None else None]}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = list(board.keys()).index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and (list(board.keys())[c], board[list(board.keys())[c]][r]) == (column, color):\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col])):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[pos[0]][pos[1]] == color for pos in line if 0 <= pos[1] < 6):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all((col, row) in [(c, r) for c in grid for r in range(6) if grid[c][r] == color] for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        if check_win(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    # Check vertical\n    if count_consecutive(board[col], color) >= 4:\n        return True\n    \n    # Check horizontal\n    for c in 'ABCDEFG':\n        if board[c][row] == color:\n            if count_consecutive(board[c], color) >= 4:\n                return True\n            \n    # Check diagonal (bottom-left to top-right)\n    for d in range(-3, 1):\n        if col_in_bounds(chr(ord(col) + d)) and row - d >= 0 and row - d < 6:\n            if board[chr(ord(col) + d)][row - d] == color and \\\n               col_in_bounds(chr(ord(col) + d + 1)) and row - d + 1 < 6 and \\\n               board[chr(ord(col) + d + 1)][row - d + 1] == color and \\\n               col_in_bounds(chr(ord(col) + d + 2)) and row - d + 2 < 6 and \\\n               board[chr(ord(col) + d + 2)][row - d + 2] == color:\n                return True\n            \n    # Check diagonal (top-left to bottom-right)\n    for d in range(-3, 1):\n        if col_in_bounds(chr(ord(col) + d)) and row + d < 6:\n            if board[chr(ord(col) + d)][row + d] == color and \\\n               col_in_bounds(chr(ord(col) + d + 1)) and row + d + 1 < 6 and \\\n               board[chr(ord(col) + d + 1)][row + d + 1] == color and \\\n               col_in_bounds(chr(ord(col) + d + 2)) and row + d + 2 < 6 and \\\n               board[chr(ord(col) + d + 2)][row + d + 2] == color:\n                return True\n            \n    return False\n\ndef count_consecutive(column, color):\n    count = 0\n    for cell in column:\n        if cell == color:\n            count += 1\n            if count >= 4:\n                return count\n        else:\n            count = 0\n    return count\n\ndef col_in_bounds(col):\n    return col in 'ABCDEFG'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win condition after each move\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col <= 3 and\n                        all(board[chr(65 + col + i)][row] == color for i in range(4)) or\n                        (row <= 2 and all(board[chr(65 + col)][row + i] == color for i in range(4))) or\n                        (col <= 3 and row <= 2 and all(board[chr(65 + col + i)][row + i] == color for i in range(4))) or\n                        (col <= 3 and row >= 3 and all(board[chr(65 + col + i)][row - i] == color for i in range(4)))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check horizontal, vertical and diagonal lines for the winner\n    for c in 'ABCDEFG':\n        for r in range(6):\n            if grid[c][r] == color:\n                if check_direction(grid, c, r, 1, 0, color) or \\\n                   check_direction(grid, c, r, 0, 1, color) or \\\n                   check_direction(grid, c, r, 1, 1, color) or \\\n                   check_direction(grid, c, r, 1, -1, color):\n                    return True\n    return False\n\ndef check_direction(grid, c, r, dc, dr, color):\n    count = 0\n    for i in range(4):\n        cc = chr(ord(c) + dc * i)\n        rr = r + dr * i\n        if cc in grid and 0 <= rr < 6 and grid[cc][rr] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:  # chr(65) is 'A'\n                    if (c + 3 < 7 and all(board[chr(c + i + 65)][r] == board[chr(c + 65)][r] for i in range(4))) or \\\n                       (r + 3 < 6 and all(board[chr(c + 65)][r + i] == board[chr(c + 65)][r] for i in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == board[chr(c + 65)][r] for i in range(4))) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and all(board[chr(c + i + 65)][r - i] == board[chr(c + 65)][r] for i in range(4))):\n                        return board[chr(c + 65)][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if (row <= 2 and all(board[col][row+k] == board[col][row] for k in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col)+k)][row] == board[col][row] for k in range(4))) or \\\n                       (col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == board[col][row] for k in range(4))) or \\\n                       (col <= 'D' and row >= 3 and all(board[chr(ord(col)+k)][row-k] == board[col][row] for k in range(4))):\n                        return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if grid['ABCDEFG'[c]][r] is not None:\n                    if c <= 3:  # Horizontal\n                        if all(grid['ABCDEFG'[c+i]][r] == grid['ABCDEFG'[c]][r] for i in range(4)):\n                            return grid['ABCDEFG'[c]][r]\n                    if r <= 2:  # Vertical\n                        if all(grid['ABCDEFG'[c]][r+i] == grid['ABCDEFG'[c]][r] for i in range(4)):\n                            return grid['ABCDEFG'[c]][r]\n                    if c <= 3 and r <= 2:  # Diagonal right\n                        if all(grid['ABCDEFG'[c+i]][r+i] == grid['ABCDEFG'[c]][r] for i in range(4)):\n                            return grid['ABCDEFG'[c]][r]\n                    if c <= 3 and r >= 3:  # Diagonal left\n                        if all(grid['ABCDEFG'[c+i]][r-i] == grid['ABCDEFG'[c]][r] for i in range(4)):\n                            return grid['ABCDEFG'[c]][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n        # Check for win conditions after each move\n        for i in range(len(board[col]) - 3, len(board[col])):\n            if len(board[col]) >= 4:\n                # Check vertical\n                if i >= 3 and all(board[col][j] == color for j in range(i - 3, i + 1)):\n                    return color\n                \n                # Check horizontal\n                for c in 'ABCDEFG':\n                    if len(board[c]) >= 4 and all(board[c][j] == color for j in range(len(board[c]) - 3, len(board[c]))):\n                        return color\n                \n                # Check diagonal /\n                for d in range(4):\n                    if all((board.get(chr(ord(col) - d + i), [])[-(i + 1)] == color) for i in range(4)):\n                        return color\n                \n                # Check diagonal \\\n                for d in range(4):\n                    if all((board.get(chr(ord(col) + d - i), [])[-(i + 1)] == color) for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check for wins\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if (j + 3 < 6 and\n                        all(board[chr(i + 65)][j + k] == color for k in range(4)) or\n                        (i + 3 < 7 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or\n                        (i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or\n                        (i + 3 < 7 and j - 3 >= 0 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        if check_win(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            r, c = row, ord(col) - ord('A')\n            while 0 <= r + step * d[1] < 6 and 0 <= c + step * d[0] < 7:\n                r += step * d[1]\n                c += step * d[0]\n                if board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if row >= 3 and check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for step in range(4):\n            new_col = chr(ord(col) + dx * step)\n            new_row = row + dy * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for i in range(6):\n            for j in range(7):\n                color = board['ABCDEFG'[j]][i]\n                if color:\n                    # Check horizontal\n                    if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if check_winner(board[c]):\n                return board[c][row]\n    \n    return \"Draw\"\n\ndef check_winner(column):\n    count = 0\n    last_color = None\n    for color in column:\n        if color == last_color and color is not None:\n            count += 1\n            if count == 3:  # we already have one piece, counting to 3 gives us four in total\n                return color\n        else:\n            count = 0\n            last_color = color\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n\n        # Check for a win only if there are at least 4 pieces in the column\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Get the last row index of the current piece\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if all(board[column][r] == color for r in range(max(0, row-3), row+1)):\n        return True\n\n    # Check horizontal\n    for col in 'ABCDEFG':\n        if col in board and len(board[col]) > 0:\n            if count_consecutive(board[col], color) >= 4:\n                return True\n\n    # Check diagonal \\\n    for col_offset in range(-3, 1):\n        for row_offset in range(-3, 1):\n            if (column_offset := chr(ord(column) + col_offset)) in board and \\\n               (row_offset := row + row_offset) in range(6):\n                if all(0 <= row_offset + k <= 5 and board.get(chr(ord(column) + col_offset + k), [])[row_offset + k] == color for k in range(4)):\n                    return True\n\n    # Check diagonal /\n    for col_offset in range(-3, 1):\n        for row_offset in range(-3, 1):\n            if (column_offset := chr(ord(column) + col_offset)) in board and \\\n               (row_offset := row - row_offset) in range(6):\n                if all(0 <= row_offset - k <= 5 and board.get(chr(ord(column) + col_offset + k), [])[row_offset - k] == color for k in range(4)):\n                    return True\n\n    return False\n\ndef count_consecutive(column, color):\n    count = 0\n    for c in column:\n        if c == color:\n            count += 1\n        else:\n            count = 0\n    return count\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    if (c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        if check_winner(player_moves[player], player):\n            return player\n            \n    return \"Draw\"\n\ndef check_winner(moves, player):\n    positions = {(col, row) for col, row in moves}\n    for (col, row) in moves:\n        if all((col, row + i) in positions for i in range(4)) or \\\n           all((chr(ord(col) + i), row) in positions for i in range(4)) or \\\n           all((chr(ord(col) + i), row + i) in positions for i in range(4)) or \\\n           all((chr(ord(col) + i), row - i) in positions for i in range(4)):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player] += 1\n        \n        if check_winner(board, player, column, row):\n            return player\n\n    return \"Draw\"\n\ndef check_winner(board, player, column, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for step in [1, -1]:\n            x, y = ord(column) - ord('A'), row\n            while 0 <= x + step * dx < 7 and 0 <= y + step * dy < 6:\n                x += step * dx\n                y += step * dy\n                if x >= 0 and y >= 0 and board[chr(ord('A') + x)][y] == player:\n                    count += 1\n                else:\n                    break\n\n        if count >= 4:\n            return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal\n    for r in range(6):\n        count = 0\n        for c in 'ABCDEFG':\n            if board[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check vertical\n    for c in 'ABCDEFG':\n        count = 0\n        for r in range(6):\n            if board[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check diagonal \\\n    for c in range(4):\n        for r in range(3, 6):\n            if all(board[chr(c+i+65)][r-i] == color for i in range(4)):\n                return True\n\n    # Check diagonal /\n    for c in range(4):\n        for r in range(3):\n            if all(board[chr(c+i+65)][r+i] == color for i in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        # Check for victory\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal lines\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6)):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j + k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j + k]][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j >= 3 and i <= 2 and all(board[COLUMNS[j - k]][i + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color_to_check for c, r in line) for line in LINES):\n                return color_to_check\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        \n        player_turn[player] += 1\n        if player_turn[player] >= 4:\n            # Check for win conditions\n            if any(all(grid[c][r] == player for c, r in line) for line in LINES):\n                return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for win_color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[x][y] == win_color for x, y in line if x in grid and y < len(grid[x])):\n                    return win_color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if 0 <= c < 7 and 0 <= r < 6 and board['ABCDEFG'[c]][r] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_r = r + step * direction[0]\n                            new_c = c + step * direction[1]\n                            if 0 <= new_r < 6 and 0 <= new_c < 7 and board['ABCDEFG'[new_c]][new_r] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + direction[0] * i * d\n                    c = 'ABCDEFG'.index(col) + direction[1] * i * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (col, row) in [(col, row) for col in 'ABCDEFG' for row in range(6)]:\n                        if check_win(board, col, row, color):\n                            return color\n    \n    return \"Draw\"\n\ndef check_win(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for i in range(1, 4):\n            c, r = chr(ord(col) + dc * i), row + dr * i\n            if c in board and r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        for i in range(1, 4):\n            c, r = chr(ord(col) - dc * i), row - dr * i\n            if c in board and r >= 0 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        for line in LINES:\n            if any((col, row) in line for col in grid for row in range(6) if grid[col][row] == color):\n                if sum(1 for c, r in line if grid[c][r] == color) == 4:\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if 0 <= r + direction[0] * 3 < 6 and 0 <= c + direction[1] * 3 < 7:\n                        if (board['ABCDEFG'[c]][r] == color and\n                            board['ABCDEFG'[c + direction[1]]][r + direction[0]] == color and\n                            board['ABCDEFG'[c + direction[1] * 2]][r + direction[0] * 2] == color and\n                            board['ABCDEFG'[c + direction[1] * 3]][r + direction[0] * 3] == color):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or   # Horizontal\n            check_direction(board, col, row, color, 0, 1) or   # Vertical\n            check_direction(board, col, row, color, 1, 1) or   # Diagonal \\\n            check_direction(board, col, row, color, 1, -1)     # Diagonal /\n           )\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        c = chr(ord(col) + step * delta_col)\n        r = row + step * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if board[chr(65 + col)][row] == color:\n                    if col + 3 < 7 and all(board[chr(65 + col + i)][row] == color for i in range(4)):\n                        return color\n                    if row + 3 < 6 and all(board[chr(65 + col)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row + 3 < 6 and all(board[chr(65 + col + i)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row - 3 >= 0 and all(board[chr(65 + col + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal (top-left to bottom-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (bottom-left to top-right)\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = player\n                player_moves[player].append((column, row))\n                break\n    \n    def check_winner(player):\n        for col, row in player_moves[player]:\n            if any(all((col, row) in player_moves[player] for (col, row) in line) for line in LINES):\n                return player\n        return None\n\n    winner = check_winner('Red')\n    if winner:\n        return 'Red'\n    winner = check_winner('Yellow')\n    if winner:\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal\n    for r in range(6):\n        count = 0\n        for c in 'ABCDEFG':\n            if board[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check vertical\n    for c in 'ABCDEFG':\n        count = 0\n        for r in range(6):\n            if board[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n\n    # Check diagonal \\\n    for c in range(4):\n        for r in range(3, 6):\n            if (board['A'][r] == color and board['B'][r-1] == color and \n                board['C'][r-2] == color and board['D'][r-3] == color):\n                return True\n\n    # Check diagonal /\n    for c in range(4):\n        for r in range(3, 6):\n            if (board['A'][r] == color and board['B'][r-1] == color and \n                board['C'][r-2] == color and board['D'][r-3] == color):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        # Check for victory\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal lines\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if c + 3 < 7 and all(board[chr(c + k + 65)][r] == color for k in range(4)):\n                        return color\n                    if r + 3 < 6 and all(board[chr(c + 65)][r + k] == color for k in range(4)):\n                        return color\n                    if c + 3 < 7 and r + 3 < 6 and all(board[chr(c + k + 65)][r + k] == color for k in range(4)):\n                        return color\n                    if c + 3 < 7 and r - 3 >= 0 and all(board[chr(c + k + 65)][r - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col_start in range(7):\n                for row_start in range(6):\n                    count = 0\n                    for step in range(4):\n                        col_index = col_start + direction[0] * step\n                        row_index = row_start + direction[1] * step\n                        if 0 <= col_index < 7 and 0 <= row_index < 6 and board['ABCDEFG'[col_index]][row_index] == color:\n                            count += 1\n                    if count == 4:\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board['ABCDEFG'[c]][r] == color:\n                        count = 1\n                        for d in range(1, 4):\n                            dr, dc = direction[0] * d, direction[1] * d\n                            if 0 <= r + dr < 6 and 0 <= c + dc < 7 and board['ABCDEFG'[c + dc]][r + dr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d_col, d_row in directions:\n        count = 0\n        for step in range(4):\n            new_col = chr(ord(col) + d_col * step)\n            new_row = row + d_row * step\n            \n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n            \n            if count == 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j <= 3 and all(board[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4))) or \\\n                   (i <= 2 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                   (i <= 2 and j <= 3 and all(board[chr(j + ord('A') + k)][i + k] == color for k in range(4))) or \\\n                   (i >= 3 and j <= 3 and all(board[chr(j + ord('A') + k)][i - k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in grid:\n            for row in range(6):\n                if grid[col][row] == color:\n                    if check_winner(grid, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if (c + 3 < 7 and \n                        all(board['ABCDEFG'[c + k]][r] == color for k in range(4))) or \\\n                       (r + 3 < 6 and \n                        all(board['ABCDEFG'[c]][r + k] == color for k in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and \n                        all(board['ABCDEFG'[c + k]][r + k] == color for k in range(4))) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and \n                        all(board['ABCDEFG'[c + k]][r - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) + k]][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) - k]][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][r] == color for r in range(row, min(row + 4, 6))) or\n                        all(grid[c][row] == color for c in 'ABCDEFG' if grid[c][row] is not None) or\n                        all(grid[COLUMNS[i][j]][row + j] == color for j in range(4) \n                            if row + j < 6 and i < len(COLUMNS)) or\n                        all(grid[COLUMNS[i][3 - j]][row + j] == color for j in range(4) \n                            if row + j < 6 and 3 - j >= 0)):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[1]\n                    c = board.keys().index(col) + d * i * direction[0]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row - 4, -1))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if 0 <= r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] == color):\n                return color\n                \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col])):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and all(color == colors[0] for color in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < len(board[x]))):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for win_positions in LINES:\n        colors = {color: 0 for color in ['Red', 'Yellow']}\n        for position in win_positions:\n            col, row = position\n            if board[col][row] is not None:\n                colors[board[col][row]] += 1\n        if colors['Red'] == 4:\n            return 'Red'\n        if colors['Yellow'] == 4:\n            return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(col + 65)][row] == color:\n                    if col + 3 < 7 and all(grid[chr(col + i + 65)][row] == color for i in range(4)):\n                        return color\n                    if row + 3 < 6 and all(grid[chr(col + 65)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row + 3 < 6 and all(grid[chr(col + i + 65)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row - 3 >= 0 and all(grid[chr(col + i + 65)][row - i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if ((col, row) in LINES):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 1}\n    turn_sequence = []\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 5 - grid[column].count(None)\n        if row >= 0:\n            grid[column][row] = color\n            turn_sequence.append((color, (column, row)))\n    \n    for color, (col, row) in turn_sequence:\n        for line in LINES:\n            if (col, row) in line:\n                if all(grid[c][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\" if len(turn_sequence) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    \n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for line in LINES:\n        colors = [board[column][row] for column, row in line if board[column][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in (-1, 1):\n                r, c = row, 'ABCDEFG'.index(col)\n                while 0 <= r < 6 and 0 <= c < 7:\n                    r += direction[0] * d\n                    c += direction[1] * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n\n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        pieces = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(pieces) == 4 and len(set(pieces)) == 1:\n            return pieces[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    \n                    # Check horizontal\n                    if col <= 'D' and all(board[c][row] == color for c in 'ABCD'):\n                        return color\n                    \n                    # Check vertical\n                    if row <= 2 and all(board[col][r] == color for r in range(row, row + 4)):\n                        return color\n                    \n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for row in range(6):\n            for col in range(7):\n                if board['ABCDEFG'[col]][row] == color:\n                    if (col <= 3 and all(board['ABCDEFG'[col+i]][row] == color for i in range(4)) or\n                        row <= 2 and all(board['ABCDEFG'[col]][row+i] == color for i in range(4)) or\n                        col <= 3 and row <= 2 and all(board['ABCDEFG'[col+i]][row+i] == color for i in range(4)) or\n                        col <= 3 and row >= 3 and all(board['ABCDEFG'[col+i]][row-i] == color for i in range(4))):\n                        return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                            return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [] for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column].append(color)\n    \n    for line in LINES:\n        colors = [grid[column].pop() if grid[column] else None for column, _ in line]\n        if colors.count('Red') == 4:\n            return 'Red'\n        if colors.count('Yellow') == 4:\n            return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check for wins\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color, 1, 0) or \\\n                   check_direction(grid, col, row, color, 0, 1) or \\\n                   check_direction(grid, col, row, color, 1, 1) or \\\n                   check_direction(grid, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        new_col = chr(ord(col) + i * delta_col)\n        new_row = row + i * delta_row\n        if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    def drop_piece(column, color):\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                return (column, row)\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        drop_piece(column, color)\n\n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check all directions for a win\n                    for dcol, drow in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            ncol = chr(ord(col) + dcol * step)\n                            nrow = row + drow * step\n                            if ncol in COLUMNS and 0 <= nrow < 6 and board[ncol][nrow] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(65 + c)][r] == color:\n                        # Check horizontal\n                        if c + 3 < 7 and all(board[chr(65 + c + i)][r] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if r + 3 < 6 and all(board[chr(65 + c)][r + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if c + 3 < 7 and r - 3 >= 0 and all(board[chr(65 + c + i)][r - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if c + 3 < 7 and r + 3 < 6 and all(board[chr(65 + c + i)][r + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        values = [board[c][r] for c, r in line if board[c][r] is not None]\n        if len(values) == 4 and len(set(values)) == 1:\n            return values[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        # Check for a win\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for sign in [1, -1]:\n                for step in range(1, 4):\n                    r = row + sign * step * direction[0]\n                    c = board[column].index(color) + sign * step * direction[1]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_directions(grid, col, row, color):\n                    return True\n    return False\n\ndef check_directions(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for step in range(-3, 4):\n            c = chr(ord(col) + dc * step)\n            r = row + dr * step\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n                if count == 4:\n                    return True\n            else:\n                count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board[chr(i + 65)][j] is not None:\n                    color = board[chr(i + 65)][j]\n                    if (\n                        (i < 4 and all(board[chr(k + 65)][j] == color for k in range(i, i + 4))) or\n                        (j < 3 and all(board[chr(i + 65)][k] == color for k in range(j, j + 4))) or\n                        (i < 4 and j < 3 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or\n                        (i < 4 and j > 2 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)))\n                    ):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) >= 4:\n            if check_winner(board[column][-4:], color):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n\ndef check_winner(column_moves, color):\n    return column_moves.count(color) == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for step in range(4):\n            x = ord(col) - ord('A') + step * dx\n            y = row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and (board[chr(x + ord('A'))][y] == color):\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if board['A'][i] == color and j < 4 and all(board[chr(ord('A') + j + k)][i] == color for k in range(4)):\n                        return color\n                    if board['A'][i] == color and i < 3 and all(board[chr(ord('A') + j)][i + k] == color for k in range(4)):\n                        return color\n                    if board['A'][i] == color and i < 3 and j < 4 and all(board[chr(ord('A') + j + k)][i + k] == color for k in range(4)):\n                        return color\n                    if board['A'][i] == color and i < 3 and j >= 3 and all(board[chr(ord('A') + j - k)][i + k] == color for k in range(4)):\n                        return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if check_winner(board[c]):\n                return board[c][0]\n    \n    return \"Draw\"\n\ndef check_winner(column):\n    count = 0\n    last_color = None\n    for cell in column:\n        if cell == last_color and cell is not None:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 1\n            last_color = cell\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if (col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4))) or \\\n                       (row <= 2 and all(board[chr(col + 65)][row + k] == color for k in range(4))) or \\\n                       (col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            if check_winner(board[c], color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(column, color):\n    count = 0\n    for cell in column:\n        if cell == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n\n        # Check for a win only if there are at least 4 pieces in the column\n        if len(board[column]) >= 4:\n            if check_winner(board, column, color):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Get the last row index of the current piece\n    row = len(board[column]) - 1\n    \n    # Check vertical\n    if all(board[column][r] == color for r in range(max(0, row-3), row+1)):\n        return True\n\n    # Check horizontal\n    for col in 'ABCDEFG':\n        if col in board and len(board[col]) > 0:\n            if count_consecutive(board[col], color) >= 4:\n                return True\n\n    # Check diagonal \\\n    for col_offset in range(-3, 1):\n        for row_offset in range(-3, 1):\n            if (column_offset := chr(ord(column) + col_offset)) in board and \\\n               (row_offset := row + row_offset) in range(6):\n                if all(0 <= row_offset + k <= 5 and board.get(chr(ord(column) + k), [])[row + k] == color for k in range(4)):\n                    return True\n\n    # Check diagonal /\n    for col_offset in range(-3, 1):\n        for row_offset in range(3):\n            if (column_offset := chr(ord(column) + col_offset)) in board and \\\n               (row_offset := row - row_offset) in range(6):\n                if all(0 <= row_offset - k <= 5 and board.get(chr(ord(column) + k), [])[row - k] == color for k in range(4)):\n                    return True\n\n    return False\n\ndef count_consecutive(pieces, color):\n    count = 0\n    for piece in pieces:\n        if piece == color:\n            count += 1\n        else:\n            count = 0\n        if count >= 4:\n            return count\n    return count\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for a win after each move\n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal lines for a win\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    if (c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        grid[col].append(color)\n\n        # Check for a win after each move\n        if check_winner(grid, col, color):\n            return color.split('_')[1]\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, color):\n    # Create a list of all pieces in a flat way for the current color\n    positions = [(c, len(grid[c])-1) for c in grid if grid[c] and grid[c][-1] == color]\n    \n    # Check vertical, horizontal and diagonal directions\n    for r in range(len(positions)):\n        count = 0\n        for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1  # Start counting the current piece\n            # Check in one direction\n            for step in range(1, 4):\n                new_r = positions[r][1] + dr * step\n                new_c = chr(ord(positions[r][0]) + dc * step)\n                if (new_c in grid and len(grid[new_c]) > new_r and grid[new_c][new_r] == color):\n                    count += 1\n                else:\n                    break\n            # Check in the opposite direction\n            for step in range(1, 4):\n                new_r = positions[r][1] - dr * step\n                new_c = chr(ord(positions[r][0]) - dc * step)\n                if (new_c in grid and new_r >= 0 and len(grid[new_c]) > new_r and grid[new_c][new_r] == color):\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 1}\n    players = ['Red', 'Yellow']\n    \n    for position in pieces_positions:\n        column, player = position.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n\n        for line in LINES:\n            if (column, row) in line:\n                if all(grid[c][r] == player for c, r in line):\n                    return player\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board[COLUMNS[j + k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board[COLUMNS[j]][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board[COLUMNS[j + k]][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j >= 3 and i <= 2 and all(board[COLUMNS[j - k]][i + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_turn[player] += 1\n        \n        if check_winner(grid, player):\n            return player\n            \n    return \"Draw\"\n\ndef check_winner(grid, player):\n    for column in grid:\n        for row in range(6):\n            if grid[column][row] == player:\n                if check_direction(grid, column, row, player):\n                    return True\n    return False\n\ndef check_direction(grid, column, row, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(column) + d[0] * step)\n            r = row + d[1] * step\n            if 0 <= r < 6 and c in grid and grid[c][r] == player:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            new_col = chr(ord(col) + direction[0] * step)\n                            new_row = row + direction[1] * step\n                            if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == grid[col][row]:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return grid[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if 0 <= c < 7 and 0 <= r < 6 and board['ABCDEFG'[c]][r] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_r = r + step * direction[0]\n                            new_c = c + step * direction[1]\n                            if 0 <= new_r < 6 and 0 <= new_c < 7 and board['ABCDEFG'[new_c]][new_r] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + delta_col * i)\n        r = row + delta_row * i\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j <= 3 and all(board[chr(k)][i] == color for k in range(ord('A') + j, ord('A') + j + 4))) or \\\n                   (i <= 2 and all(board[chr(j + ord('A'))][i + k] == color for k in range(4))) or \\\n                   (i <= 2 and j <= 3 and all(board[chr(j + ord('A') + k)][i + k] == color for k in range(4))) or \\\n                   (i >= 3 and j <= 3 and all(board[chr(j + ord('A') + k)][i - k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + direction[0] * i * d\n                    c = 'ABCDEFG'.index(col) + direction[1] * i * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        for line in LINES:\n            if any((col, row) in line for col in grid for row in range(6) if grid[col][row] == color):\n                if all(grid[c][r] == color for c, r in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, color, 1, 0) or\n                        check_direction(board, col, row, color, 0, 1) or\n                        check_direction(board, col, row, color, 1, 1) or\n                        check_direction(board, col, row, color, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + step * delta_col)\n        r = row + step * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = {'Red': 0, 'Yellow': 0}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        moves[color] += 1\n        \n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_directions(grid, color, col, row):\n                    return True\n    return False\n\ndef check_directions(grid, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in range(1, 4):\n            x = ord(col) - ord('A') + step * dx\n            y = row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            x = ord(col) - ord('A') - step * dx\n            y = row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(6):\n            for j in range(7):\n                if (j < 4 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4))) or \\\n                   (i < 3 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4))) or \\\n                   (i < 3 and j < 4 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4))) or \\\n                   (i > 2 and j < 4 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal (top-left to bottom-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (bottom-left to top-right)\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player\n        player_moves[player].append((col, row))\n        \n        if check_winner(player_moves[player], player):\n            return player\n            \n    return \"Draw\"\n\ndef check_winner(moves, player):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    move_set = set(moves)\n    \n    for col, row in moves:\n        for dc, dr in directions:\n            count = 1\n            for step in range(1, 4):\n                if (chr(ord(col) + dc * step), row + dr * step) in move_set:\n                    count += 1\n                else:\n                    break\n            for step in range(1, 4):\n                if (chr(ord(col) - dc * step), row - dr * step) in move_set:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[x][y] == color for x, y in line):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            for col in range(len(board)):\n                for row in range(6):\n                    if (\n                        (col < 4 and all(board[COLUMNS[col + i]][row] == color for i in range(4))) or\n                        (row < 3 and all(board[COLUMNS[col]][row + i] == color for i in range(4))) or\n                        (col < 4 and row < 3 and all(board[COLUMNS[col + i]][row + i] == color for i in range(4))) or\n                        (col < 4 and row > 2 and all(board[COLUMNS[col + i]][row - i] == color for i in range(4)))\n                    ):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n        \n        if check_winner(player_moves[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for i, (c, r) in enumerate(moves):\n        if check_direction(moves, c, r, 1, 0) or check_direction(moves, c, r, 0, 1) or \\\n           check_direction(moves, c, r, 1, 1) or check_direction(moves, c, r, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, column, row, col_step, row_step):\n    count = 0\n    for step in range(-3, 4):\n        c = chr(ord(column) + step * col_step)\n        r = row + step * row_step\n        if (c, r) in moves:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if c + 3 < 7 and all(board[chr(c + k + 65)][r] == color for k in range(4)):\n                        return color\n                    if r + 3 < 6 and all(board[chr(c + 65)][r + k] == color for k in range(4)):\n                        return color\n                    if c + 3 < 7 and r + 3 < 6 and all(board[chr(c + k + 65)][r + k] == color for k in range(4)):\n                        return color\n                    if c + 3 < 7 and r - 3 >= 0 and all(board[chr(c + k + 65)][r - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board[chr(c + ord('A'))][r] == color:\n                        count = 0\n                        for d in range(4):\n                            nr = r + d * direction[0]\n                            nc = c + d * direction[1]\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board[chr(nc + ord('A'))][nr] == color:\n                                count += 1\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column].append(color)\n        \n        # Check if this move creates a win\n        if check_winner(grid, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, column, color):\n    rows = len(grid[column]) - 1\n    # Check vertical\n    if len(grid[column]) >= 4 and all(grid[column][rows-i] == color for i in range(4)):\n        return True\n    \n    # Check horizontal\n    for col in 'ABCDEFG':\n        if column in grid and len(grid[col]) > 0 and grid[col][-1] == color:\n            count = 0\n            for check_col in 'ABCDEFG':\n                if len(grid[check_col]) > 0 and grid[check_col][-1] == color:\n                    count += 1\n                    if count == 4:\n                        return True\n                else:\n                    count = 0\n    \n    # Check diagonals\n    for d_row in range(-3, 1):\n        for d_col in range(-3, 1):\n            if (column, rows) in grid.items():\n                if all(\n                    grid.get(chr(ord(column) + d_col * i), [])[rows + d_row * i] == color\n                    for i in range(4) if 0 <= ord(column) + d_col * i < 7 and 0 <= rows + d_row * i < 6\n                ):\n                    return True\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if (row <= 2 and all(board[col][row + k] == color for k in range(4))) or \\\n                       (col in board and \n                        sum(1 for k in range(-3, 1) if 0 <= ord(col) - ord('A') + k < 7 and \n                             board[chr(ord(col) + k)][row] == color) == 4) or \\\n                       (row <= 2 and col in board and \n                        sum(1 for k in range(-3, 1) if 0 <= row + k < 6 and \n                             0 <= ord(col) - ord('A') + k < 7 and \n                             board[chr(ord(col) + k)][row + k] == color) == 4) or \\\n                       (row >= 3 and col in board and \n                        sum(1 for k in range(-3, 1) if 0 <= row - k < 6 and \n                             0 <= ord(col) - ord('A') + k < 7 and \n                             board[chr(ord(col) + k)][row - k] == color) == 4):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d_col, d_row in directions:\n        count = 0\n        for step in range(4):\n            new_col = chr(ord(col) + d_col * step)\n            new_row = row + d_row * step\n            \n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n            \n            if count == 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for i in range(7):\n            for j in range(6):\n                if (i <= 3 and all(board[chr(i + ord('A'))][j] == color for i in range(i, i + 4))) or \\\n                   (j <= 2 and all(board[chr(i + ord('A'))][j + k] == color for k in range(4))) or \\\n                   (i <= 3 and j <= 2 and all(board[chr(i + k + ord('A'))][j + k] == color for k in range(4))) or \\\n                   (i <= 3 and j >= 3 and all(board[chr(i + k + ord('A'))][j - k] == color for k in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in range(7):\n            for row in range(6):\n                if board[chr(65 + col)][row] == color:\n                    # Check horizontal\n                    if col <= 3 and all(board[chr(65 + col + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[chr(65 + col)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down\n                    if col <= 3 and row <= 2 and all(board[chr(65 + col + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal up\n                    if col <= 3 and row >= 3 and all(board[chr(65 + col + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == 'Red' for x, y in line if x in board and y < 6):\n                return \"Red\"\n            if all(board[x][y] == 'Yellow' for x, y in line if x in board and y < 6):\n                return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if 0 <= r + direction[0] * 3 < 6 and 0 <= c + direction[1] * 3 < 7:\n                        if (board['ABCDEFG'[c]][r] == color and\n                            board['ABCDEFG'[c + direction[1]]][r + direction[0]] == color and\n                            board['ABCDEFG'[c + direction[1] * 2]][r + direction[0] * 2] == color and\n                            board['ABCDEFG'[c + direction[1] * 3]][r + direction[0] * 3] == color):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in board:\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (all(board[col][r] == color for r in range(row, min(row + 4, 6))) or\n                            (col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4) if ord(col) + k <= ord('G'))) or\n                            (row <= 2 and all(board[col][row + k] == color for k in range(4))) or\n                            (col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4))) or\n                            (col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontally\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                            return color\n                        # Check vertically\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[COLUMNS[COLUMNS.index(col)+k]][row-k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col)+k]][row+k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal (top-left to bottom-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (bottom-left to top-right)\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for i in range(7):\n            for j in range(6):\n                if board['ABCDEFG'[i]][j] is not None:\n                    color = board['ABCDEFG'[i]][j]\n                    # Check vertical\n                    if j <= 2 and all(board['ABCDEFG'[i]][j+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if i <= 3 and all(board['ABCDEFG'[i+k]][j] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if i <= 3 and j <= 2 and all(board['ABCDEFG'[i+k]][j+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if i <= 3 and j >= 3 and all(board['ABCDEFG'[i+k]][j-k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + step * delta_col)\n        new_row = row + step * delta_row\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = next((i for i in range(6) if board[col][i] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, col, row, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dr, dc in directions:\n        count = 1\n        for d in (1, -1):\n            r, c = row, ord(col) - ord('A')\n            while 0 <= r + d * dr < 6 and 0 <= c + d * dc < 7 and board[chr(c + d * dc + ord('A'))][r + d * dr] == color:\n                count += 1\n                r += d * dr\n                c += d * dc\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n                \n        # Check for a win after the current move\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check for winning condition\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```"
        ]
    }
}