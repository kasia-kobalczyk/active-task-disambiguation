{
    "0": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (\n                        c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4)) or\n                        r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4)) or\n                        c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)) or\n                        c - 3 >= 0 and r + 3 < 6 and all(board[chr(c - i + 65)][r + i] == color for i in range(4))\n                    ):\n                        return color\n    \n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if (col, row) in line):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if (col, row) in line):\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [board[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for line in LINES:\n            values = [board[c][r] for c, r in line if c in board and r < 6 and board[c][r] is not None]\n            if len(values) == 4 and len(set(values)) == 1:\n                return values[0]\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= (r + col_offset) < len(board[c]) and \\\n                           all(board[c][r] == color for c in 'ABCDEFG' if c in board and r + col_offset in range(len(board[c]))):\n                            return color\n                    # Check diagonal \\\n                    for d in range(4):\n                        if 0 <= r - d < len(board[c]) and \\\n                           0 <= (r - d) < len(board[column]) and \\\n                           (column_offset := 'ABCDEFG'.index(c) - d) in range(len(board)):\n                            if all(board['ABCDEFG'[column_offset + i]][r - i] == color for i in range(4) if column_offset + i in range(7)):\n                                return color\n                    # Check diagonal /\n                    for d in range(4):\n                        if 0 <= r + d < len(board[c]) and \\\n                           (column_offset := 'ABCDEFG'.index(c) + d) in range(len(board)):\n                            if all(board['ABCDEFG'[column_offset - i]][r + i] == color for i in range(4) if column_offset - i in range(7)):\n                                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in COLUMNS:\n                for row in ROWS:\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal up-right\n                        if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                if board[col].count(color) >= 4:\n                    for start in range(6):\n                        if start + 3 < 6 and all(board[col][start + i] == color for i in range(4)):\n                            return color\n                for row in range(6):\n                    if board[col][row] == color:\n                        if row < 3 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        if col in 'ABCD' and all(board[chr(ord(col) + i)][row] == color for i in range(4) if chr(ord(col) + i) in 'ABCDEFG'):\n                            return color\n                        if col in 'ABCDEFG' and row < 3 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4) if chr(ord(col) + i) in 'ABCDEFG'):\n                            return color\n                        if col in 'ABCDEFG' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4) if chr(ord(col) + i) in 'ABCDEFG'):\n                            return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board.get(chr(c + 65), [None] * 6)[r] == color:\n                        count = 0\n                        for d in range(4):\n                            rr = r + direction[0] * d\n                            cc = c + direction[1] * d\n                            if 0 <= rr < 6 and 0 <= cc < 7 and board.get(chr(cc + 65), [None] * 6)[rr] == color:\n                                count += 1\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            # Check in the positive direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') + step * dx, row + step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the negative direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') - step * dx, row - step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in 'ABCDEFG':\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[column][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if column <= 'D' and all(board[chr(ord(column)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if column <= 'D' and row <= 2 and all(board[chr(ord(column)+i)][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if column <= 'D' and row >= 3 and all(board[chr(ord(column)+i)][row-i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        board[col][row + 1:] = board[col][row:-1]  # Shift the pieces down\n    \n        # Check for a win\n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in COLUMNS:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + step * i * d[0])\n                new_row = row + step * i * d[1]\n                if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(65 + col)][row] == color:\n                        if (col <= 3 and all(board[chr(65 + col + k)][row] == color for k in range(4))) or \\\n                           (row <= 2 and all(board[chr(65 + col)][row + k] == color for k in range(4))) or \\\n                           (col <= 3 and row <= 2 and all(board[chr(65 + col + k)][row + k] == color for k in range(4))) or \\\n                           (col <= 3 and row >= 3 and all(board[chr(65 + col + k)][row - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        # Check for a win condition\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    # Check horizontal\n                    if c <= 'D' and all(grid[c][r] == grid[chr(ord(c)+i)][r] for i in range(4)):\n                        return grid[c][r]\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r] == grid[c][r+i] for i in range(4)):\n                        return grid[c][r]\n                    # Check diagonal (down-right)\n                    if c <= 'D' and r <= 2 and all(grid[c][r] == grid[chr(ord(c)+i)][r+i] for i in range(4)):\n                        return grid[c][r]\n                    # Check diagonal (up-right)\n                    if c <= 'D' and r >= 3 and all(grid[c][r] == grid[chr(ord(c)+i)][r-i] for i in range(4)):\n                        return grid[c][r]\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Yellow', 'Red']:\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(65 + c)][r] == color:\n                        if (c + 3 < 7 and all(board[chr(65 + c + k)][r] == color for k in range(4)) or\n                            r + 3 < 6 and all(board[chr(65 + c)][r + k] == color for k in range(4)) or\n                            c + 3 < 7 and r + 3 < 6 and all(board[chr(65 + c + k)][r + k] == color for k in range(4)) or\n                            c + 3 < 7 and r - 3 >= 0 and all(board[chr(65 + c + k)][r - k] == color for k in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check vertical\n            for col in 'ABCDEFG':\n                count = 0\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check diagonal \\\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n\n            # Check diagonal /\n            for col in range(4):\n                for row in range(6):\n                    if row + 3 < 6 and all(grid[chr(col + ord('A') + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Yellow', 'Red']:\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if x in grid and y < 6):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = next(i for i in range(6) if grid[col][i] is None)\n        grid[col][row] = color\n\n        for combination in LINES:\n            if all(grid[c][r] == color for c, r in combination if c in grid and r < 6 and grid[c][r] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board.get(chr(c + 65), [None] * 6)[r] == color:\n                        count = 0\n                        for d in range(4):\n                            rr = r + direction[0] * d\n                            cc = c + direction[1] * d\n                            if 0 <= rr < 6 and 0 <= cc < 7 and board.get(chr(cc + 65), [None] * 6)[rr] == color:\n                                count += 1\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            # Check in the positive direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') + step * dx, row + step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the negative direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') - step * dx, row - step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win condition\n        if check_winner(board, color, col, row):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        \n        # Check in one direction\n        for step in range(1, 4):\n            x, y = COLUMNS.index(col) + step * dx, row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[COLUMNS[x]][y] == color:\n                count += 1\n            else:\n                break\n        \n        # Check in the opposite direction\n        for step in range(1, 4):\n            x, y = COLUMNS.index(col) - step * dx, row - step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and board[COLUMNS[x]][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) + i]][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) - i]][row + i] == color for i in range(4)):\n                        return color\n        return None\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner():\n                    return color\n                break\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check vertical\n            for col in 'ABCDEFG':\n                count = 0\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check diagonal \\\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n\n            # Check diagonal /\n            for col in range(4):\n                for row in range(6):\n                    if row + 3 < 6 and all(grid[chr(col + ord('A') + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    for color in ['Yellow', 'Red']:\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if x in grid and y < 6 and grid[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    def drop_piece(column, color):\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                return (column, row)\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        drop_piece(column, color)\n\n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check all directions for a win\n                    for dcol, drow in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            ncol = chr(ord(col) + dcol * step)\n                            nrow = row + drow * step\n                            if ncol in COLUMNS and 0 <= nrow < 6 and board[ncol][nrow] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n        # Check for a winner\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    color = grid[c][r]\n                    \n                    # Horizontal check\n                    if c <= 'D' and all(grid[c][r] == color for c in 'ABCDEFG'[COLUMNS.index(c):COLUMNS.index(c)+4]):\n                        return color\n                    \n                    # Vertical check\n                    if r <= 2 and all(grid[c][r] == color for r in range(r, r + 4)):\n                        return color\n                    \n                    # Diagonal check \\\n                    if c <= 'D' and r <= 2 and all(grid[COLUMNS[COLUMNS.index(c) + k]][r + k] == color for k in range(4)):\n                        return color\n                    \n                    # Diagonal check /\n                    if c <= 'D' and r >= 3 and all(grid[COLUMNS[COLUMNS.index(c) + k]][r - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for i in range(7):\n            for j in range(6):\n                if board[chr(i + 65)][j] == color:\n                    if i <= 3 and all(board[chr(i + k + 65)][j] == color for k in range(4)):\n                        return color\n                    if j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4)):\n                        return color\n                    if i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4)):\n                        return color\n                    if i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + i * dc)\n            r = row + i * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n        \n        for win in LINES:\n            if all((pos in player_moves[color]) for pos in win):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check if this move resulted in a win\n        if check_winner(board, color):\n            winner = color\n            break\n    \n    return winner if winner else \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            new_col = chr(ord(col) + dc * step)\n            new_row = row + dr * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n            \n        for step in range(1, 4):\n            new_col = chr(ord(col) - dc * step)\n            new_row = row - dr * step\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n    \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board[chr(j + 65)][i] == color:\n                if check_direction(board, color, i, j, 1, 0) or \\\n                   check_direction(board, color, i, j, 0, 1) or \\\n                   check_direction(board, color, i, j, 1, 1) or \\\n                   check_direction(board, color, i, j, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, row, col, row_delta, col_delta):\n    count = 0\n    for step in range(4):\n        r = row + step * row_delta\n        c = col + step * col_delta\n        if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + 65)][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for winning condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (all(board[col][row] == board[col][r] for r in range(row, min(row + 4, 6))) or\n                        all(board[c][row] == color for c in 'ABCDEFG'[(ord(col) - ord('A')): (ord(col) - ord('A') + 4)]) or\n                        all(board[c][row + d] == color for d, c in enumerate('ABCDEFG'[(ord(col) - ord('A')): (ord(col) - ord('A') + 4)], start=0)) or\n                        all(board[c][row - d] == color for d, c in enumerate('ABCDEFG'[(ord(col) - ord('A')): (ord(col) - ord('A') + 4)], start=0))):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n        \n        if check_winner(player_moves[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(positions):\n    for i, (col, row) in enumerate(positions):\n        if check_direction(positions, col, row, 1, 0) or \\\n           check_direction(positions, col, row, 0, 1) or \\\n           check_direction(positions, col, row, 1, 1) or \\\n           check_direction(positions, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(positions, col, row, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        if step == 0:\n            continue\n        check_col = chr(ord(col) + step * delta_col)\n        check_row = row + step * delta_row\n        if check_col in 'ABCDEFG' and 0 <= check_row < 6 and (check_col, check_row) in positions:\n            count += 1\n            if count == 3:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for step in (1, -1):\n            for i in range(1, 4):\n                x, y = chr(ord(column) + dx * step * i), row + dy * step * i\n                if 0 <= y < 6 and x in board and board[x][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return True\n                \n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if x in grid and y < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check for winning conditions\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(65 + c)][r] == color:\n                        # Check horizontal\n                        if c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n    return \"Draw\"\n```",
            "logp": null
        }
    ]
}