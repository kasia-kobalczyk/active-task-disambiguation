{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c].count(color) >= 1 for c in line if c in board):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] == color:\n                    if (\n                        c + 3 < 7 and all(board[chr(c + i + 65)][r] == color for i in range(4)) or\n                        r + 3 < 6 and all(board[chr(c + 65)][r + i] == color for i in range(4)) or\n                        c + 3 < 7 and r + 3 < 6 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)) or\n                        c - 3 >= 0 and r + 3 < 6 and all(board[chr(c - i + 65)][r + i] == color for i in range(4))\n                    ):\n                        return color\n    \n    if len(pieces_positions) < 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if all(board[c][row] == color for c in 'ABCDEFG'[(ord(col) - 65):(ord(col) - 65 + 4)]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if row < 6 and board[col][row] is not None):\n            return 'Red'\n        if all(board[col][row] == 'Yellow' for col, row in line if row < 6 and board[col][row] is not None):\n            return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if board[x][y] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < len(grid[c]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= (r + col_offset) < len(board[c]) and \\\n                           all(board[c][r] == color for c in 'ABCDEFG' if c in board and r + col_offset in range(len(board[c]))):\n                            return color\n                    # Check diagonal \\\n                    for d in range(4):\n                        if 0 <= r - d < len(board[c]) and \\\n                           0 <= (r - d) < len(board[column]) and \\\n                           (column_offset := 'ABCDEFG'.index(column) - d) >= 0 and \\\n                           board['ABCDEFG'[column_offset]][r - d] == color:\n                            if all(board['ABCDEFG'[column_offset + i]][r - d + i] == color for i in range(4)):\n                                return color\n                    # Check diagonal /\n                    for d in range(4):\n                        if 0 <= r - d < len(board[c]) and \\\n                           0 <= (r - d) < len(board[column]) and \\\n                           (column_offset := 'ABCDEFG'.index(column) + d) < len('ABCDEFG') and \\\n                           board['ABCDEFG'[column_offset]][r - d] == color:\n                            if all(board['ABCDEFG'[column_offset - i]][r - d + i] == color for i in range(4)):\n                                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_check for col, row in line) for line in LINES):\n                return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y in range(6)):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if (0 <= row < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == color and \n                (board[column][i-1:i-4:-1] + board[column][i+1:i+4])[:3].count(color) == 3):\n                return color\n\n        # Check vertical\n        for c in 'ABCDEFG':\n            if len(board[c]) >= 4 and all(board[c][-j-1] == color for j in range(4)):\n                return color\n\n        # Check diagonals\n        for c in range(4):\n            for r in range(3, 6):\n                if (board[c] and r < len(board[c]) and\n                    board[c][r] == color and\n                    ((c+1 < 7 and r-1 >= 0 and board[c+1][r-1] == color) and\n                     (c+2 < 7 and r-2 >= 0 and board[c+2][r-2] == color) and\n                     (c+3 < 7 and r-3 >= 0 and board[c+3][r-3] == color))):\n                    return color\n            \n        for c in range(4):\n            for r in range(3):\n                if (board[c] and r < len(board[c]) and\n                    board[c][r] == color and\n                    ((c+1 < 7 and r+1 < len(board[c+1]) and board[c+1][r+1] == color) and\n                     (c+2 < 7 and r+2 < len(board[c+2]) and board[c+2][r+2] == color) and\n                     (c+3 < 7 and r+3 < len(board[c+3]) and board[c+3][r+3] == color))):\n                    return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in range(len(grid)):\n            if check_winner(grid, color):\n                return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check horizontal\n    for row in range(6):\n        count = 0\n        for col in 'ABCDEFG':\n            count = count + 1 if grid[col][row] == color else 0\n            if count == 4:\n                return True\n\n    # Check vertical\n    for col in 'ABCDEFG':\n        count = 0\n        for row in range(6):\n            count = count + 1 if grid[col][row] == color else 0\n            if count == 4:\n                return True\n\n    # Check diagonal (top-left to bottom-right)\n    for col in range(4):\n        for row in range(3, 6):\n            if all(grid[chr(col + i + ord('A'))][row - i] == color for i in range(4)):\n                return True\n\n    # Check diagonal (bottom-left to top-right)\n    for col in range(4):\n        for row in range(3):\n            if all(grid[chr(col + i + ord('A'))][row + i] == color for i in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in grid.keys():\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (\n                        (col in 'ABCDEFG' and row <= 2 and all(grid[col][row + k] == color for k in range(4))) or  # Vertical\n                        (col in 'ABCDEFG' and all(grid[chr(ord(col) + k)][row] == color for k in range(4) if col in 'ABCDEF' and chr(ord(col) + k) in 'ABCDEFG')) or  # Horizontal\n                        (col in 'ABCDEFG' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4) if col in 'ABCDEF' and row + k <= 5 and chr(ord(col) + k) in 'ABCDEFG')) or  # Diagonal \\\n                        (col in 'ABCDEFG' and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4) if col in 'ABCDEF' and row - k >= 0 and chr(ord(col) + k) in 'ABCDEFG'))  # Anti-diagonal\n                    ):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                if board[col].count(color) >= 4:\n                    for start in range(6):\n                        if start + 3 < 6 and all(board[col][start + i] == color for i in range(4)):\n                            return color\n                for row in range(6):\n                    if board[col][row] == color:\n                        if row < 3 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        if col in 'ABCDEFG'[:4] and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        if col in 'ABCDEFG'[:4] and row < 3 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        if col in 'ABCDEFG'[:4] and row > 2 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board['ABCDEFG'[c]][r] == color:\n                        count = 0\n                        for k in range(4):\n                            nr, nc = r + direction[0] * k, c + direction[1] * k\n                            if 0 <= nr < 6 and 0 <= nc < 7 and board['ABCDEFG'[nc]][nr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal (bottom-left to top-right)\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal (top-left to bottom-right)\n                    if c <= 'D' and r >= 3 and all(board[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        c = chr(ord(col) + step * delta_col)\n        r = row + step * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        if check_winner(grid, column, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        \n        for i in range(1, 4):\n            r = row + d[1] * i\n            c = col_index(col) + d[0] * i\n            if 0 <= r < 6 and 0 <= c < 7 and grid[COLUMNS[c]][r] == color:\n                count += 1\n            else:\n                break\n        \n        for i in range(1, 4):\n            r = row - d[1] * i\n            c = col_index(col) - d[0] * i\n            if 0 <= r < 6 and 0 <= c < 7 and grid[COLUMNS[c]][r] == color:\n                count += 1\n            else:\n                break\n            \n        if count >= 4:\n            return True\n            \n    return False\n\ndef col_index(col):\n    return 'ABCDEFG'.index(col)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1))   # Diagonal /\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + d_col * step)\n        new_row = row + d_row * step\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if check_winner(grid, col, row, grid[col][row]):\n                        return grid[col][row]\n    \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for d in [1, -1]:\n            x, y = ord(col) - ord('A'), row\n            while 0 <= x + d*dx < 7 and 0 <= y + d*dy < 6 and grid[chr(x + ord('A'))][y + d*dy] == color:\n                count += 1\n                x += d * dx\n                y += d * dy\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if (j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)) or  # Horizontal\n                        i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)) or  # Vertical\n                        j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)) or  # Diagonal /\n                        j - 3 >= 0 and i + 3 < 6 and all(board['ABCDEFG'[j-k]][i+k] == color for k in range(4))):  # Diagonal \\\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[i]][row+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[COLUMNS[i]][row-i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n\n                    # Vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n\n                    # Horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n\n                    # Diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n                    # Diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col <= 3 and\n                        board[chr(col + ord('A'))][row] == color and\n                        board[chr(col + ord('A') + 1)][row] == color and\n                        board[chr(col + ord('A') + 2)][row] == color and\n                        board[chr(col + ord('A') + 3)][row] == color):\n                        return color\n                    if (row <= 2 and\n                        board[chr(col + ord('A'))][row] == color and\n                        board[chr(col + ord('A'))][row + 1] == color and\n                        board[chr(col + ord('A'))][row + 2] == color and\n                        board[chr(col + ord('A'))][row + 3] == color):\n                        return color\n                    if (col <= 3 and row <= 2 and\n                        board[chr(col + ord('A'))][row] == color and\n                        board[chr(col + ord('A') + 1)][row + 1] == color and\n                        board[chr(col + ord('A') + 2)][row + 2] == color and\n                        board[chr(col + ord('A') + 3)][row + 3] == color):\n                        return color\n                    if (col <= 3 and row >= 3 and\n                        board[chr(col + ord('A'))][row] == color and\n                        board[chr(col + ord('A') + 1)][row - 1] == color and\n                        board[chr(col + ord('A') + 2)][row - 2] == color and\n                        board[chr(col + ord('A') + 3)][row - 3] == color):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check horizontal, vertical and diagonal lines for the winner\n    for c in 'ABCDEFG':\n        for r in range(6):\n            if grid[c][r] == color:\n                if check_direction(grid, c, r, 1, 0, color) or \\\n                   check_direction(grid, c, r, 0, 1, color) or \\\n                   check_direction(grid, c, r, 1, 1, color) or \\\n                   check_direction(grid, c, r, 1, -1, color):\n                    return True\n    return False\n\ndef check_direction(grid, c, r, dc, dr, color):\n    count = 0\n    for i in range(4):\n        cc = chr(ord(c) + dc * i)\n        rr = r + dr * i\n        if cc in grid and 0 <= rr < 6 and grid[cc][rr] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win conditions\n        for i in range(7):\n            for j in range(6):\n                if board[chr(i + 65)][j] is None:\n                    continue\n                \n                color = board[chr(i + 65)][j]\n                \n                # Horizontal check\n                if i + 3 < 7 and all(board[chr(k + 65)][j] == color for k in range(i, i + 4)):\n                    return color\n                \n                # Vertical check\n                if j + 3 < 6 and all(board[chr(i + 65)][j + k] == color for k in range(4)):\n                    return color\n                \n                # Diagonal check (down-right)\n                if i + 3 < 7 and j + 3 < 6 and all(board[chr(i + k + 65)][j + k] == color for k in range(4)):\n                    return color\n                \n                # Diagonal check (down-left)\n                if i - 3 >= 0 and j + 3 < 6 and all(board[chr(i - k + 65)][j + k] == color for k in range(4)):\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (\n                        (col < 4 and all(board[chr(c)][row] == color for c in range(ord('A') + col, ord('A') + col + 4))) or\n                        (row < 3 and all(board[chr(col + ord('A'))][row + k] == color for k in range(4))) or\n                        (col < 4 and row < 3 and all(board[chr(c)][row + k] == color for k in range(4) for c in range(ord('A') + col, ord('A') + col + 4))) or\n                        (col < 4 and row > 2 and all(board[chr(c)][row - k] == color for k in range(4) for c in range(ord('A') + col, ord('A') + col + 4)))\n                    ):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in range(7):\n            for row in range(6):\n                if grid[COLUMNS[col]][row] == color:\n                    if (col <= 3 and all(grid[COLUMNS[col + i]][row] == color for i in range(4))) or \\\n                       (row <= 2 and all(grid[COLUMNS[col]][row + i] == color for i in range(4))) or \\\n                       (col <= 3 and row <= 2 and all(grid[COLUMNS[col + i]][row + i] == color for i in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(grid[COLUMNS[col + i]][row - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    color = board[c][r]\n                    # Check horizontal\n                    if c <= 'D' and all(board[c][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal (down-right)\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c) + i)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal (down-left)\n                    if c >= 'D' and r <= 2 and all(board[chr(ord(c) - i)][r + i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        grid[col].append(color)\n    \n    for col in grid:\n        for row in range(len(grid[col])):\n            color = grid[col][row]\n            if color:\n                # Check vertical\n                if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                    return color\n                # Check horizontal\n                for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n                    if all(grid[chr(c + ord('A'))][row] == color for c in range(c, c + 4)):\n                        return color\n                # Check diagonal \\\n                if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        # Check horizontal, vertical, and diagonal lines for a win\n        for col in COLUMNS:\n            for row in ROWS:\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][j] == color for j in range(row, row + 4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[COLUMNS[i]][row - (i - COLUMNS.index(col))] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[i]][row + (i - COLUMNS.index(col))] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return True\n        return False\n    \n    if check_winner('Yellow'):\n        return \"Yellow\"\n    elif check_winner('Red'):\n        return \"Red\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_colors = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = player_colors[color]\n        \n        if check_winner(board, player_colors[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, player):\n    # Check vertical, horizontal and diagonal winning conditions\n    for col in board:\n        for row in range(6):\n            if board[col][row] == player:\n                if (check_direction(board, player, col, row, 1, 0) or\n                    check_direction(board, player, col, row, 0, 1) or\n                    check_direction(board, player, col, row, 1, 1) or\n                    check_direction(board, player, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, player, col, row, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == player:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for win_condition in LINES:\n            if all(board[c][r] == color for c, r in win_condition if (c, r) in {(col, row) for col in 'ABCDEFG' for row in range(6)}):\n                return color\n                \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        if check_winner(grid, column, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [\n        [(0, 1), (0, -1)],  # Vertical\n        [(1, 0), (-1, 0)],  # Horizontal\n        [(1, 1), (-1, -1)], # Diagonal /\n        [(1, -1), (-1, 1)]  # Diagonal \\\n    ]\n    \n    for direction in directions:\n        count = 1\n        \n        for dx, dy in direction:\n            x, y = ord(col) - ord('A'), row\n            while True:\n                x += dx\n                y += dy\n                if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n                \n                if count >= 4:\n                    return True\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            # Check in the positive direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') + step * dx, row + step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the negative direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') - step * dx, row - step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col <= 3 and\n                        all(board[chr(65 + col + i)][row] == color for i in range(4)) or\n                        (row <= 2 and all(board[chr(65 + col)][row + i] == color for i in range(4))) or\n                        (col <= 3 and row <= 2 and all(board[chr(65 + col + i)][row + i] == color for i in range(4))) or\n                        (col <= 3 and row >= 3 and all(board[chr(65 + col + i)][row - i] == color for i in range(4)))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[0]\n                    c = board[column].index(color) + d * i * direction[1]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    return \"Draw\" if len(pieces_positions) >= 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (r < 6)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(65 + col)][row] == color:\n                        if (col <= 3 and all(board[chr(65 + col + k)][row] == color for k in range(4))) or \\\n                           (row <= 2 and all(board[chr(65 + col)][row + k] == color for k in range(4))) or \\\n                           (col <= 3 and row <= 2 and all(board[chr(65 + col + k)][row + k] == color for k in range(4))) or \\\n                           (col <= 3 and row >= 3 and all(board[chr(65 + col + k)][row - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        # Check for a win condition\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    # Check horizontal\n                    if c <= 'D' and all(grid[c][r] == grid[chr(ord(c)+i)][r] for i in range(4)):\n                        return grid[c][r]\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r] == grid[c][r+i] for i in range(4)):\n                        return grid[c][r]\n                    # Check diagonal (down-right)\n                    if c <= 'D' and r <= 2 and all(grid[c][r] == grid[chr(ord(c)+i)][r+i] for i in range(4)):\n                        return grid[c][r]\n                    # Check diagonal (up-right)\n                    if c <= 'D' and r >= 3 and all(grid[c][r] == grid[chr(ord(c)+i)][r-i] for i in range(4)):\n                        return grid[c][r]\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col >= 'D' and all(grid[chr(ord(col)-i)][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if grid['ABCDEFG'[c]][r] is not None:\n                    color = grid['ABCDEFG'[c]][r]\n\n                    # Check vertical\n                    if r <= 2 and all(grid['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if c <= 3 and all(grid['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(grid['ABCDEFG'[c+i]][r-i] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check horizontal, vertical, and both diagonal\n            for col in COLUMNS:\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Horizontal\n                        if col <= 'D' and all(grid[col][row] == color for col in COLUMNS[COLUMNS.index(col):COLUMNS.index(col) + 4]):\n                            return color\n                        # Vertical\n                        if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Diagonal down-right\n                        if col <= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                            return color\n                        # Diagonal down-left\n                        if col >= 'D' and row <= 2 and all(grid[COLUMNS[COLUMNS.index(col) - k]][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    def drop_piece(column, color):\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                return (column, row)\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        drop_piece(column, color)\n\n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] == color:\n                    # Check all directions for a win\n                    for dcol, drow in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 1\n                        for step in range(1, 4):\n                            ncol = chr(ord(col) + dcol * step)\n                            nrow = row + drow * step\n                            if ncol in COLUMNS and nrow in ROWS and board[ncol][nrow] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        values = [board[c][r] for c, r in line if board[c][r] is not None]\n        if len(values) == 4 and len(set(values)) == 1:\n            return values[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal lines\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or\n                    check_direction(board, color, col, row, 0, 1) or\n                    check_direction(board, color, col, row, 1, 1) or\n                    check_direction(board, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if (0 <= ord(col) - ord('A') + count * delta_col < 7) and (0 <= row + count * delta_row < 6):\n            if board[chr(ord(col) + count * delta_col)][row + count * delta_row] == color:\n                count += 1\n            else:\n                break\n        else:\n            break\n    return count == 4\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Yellow', 'Red']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for winner\n        for row in range(6):\n            for col in 'ABCDEFG':\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col in 'ABCDEFG' and all(board[col][row] == color for col in 'ABCDEFG'[\n                        'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                        return color\n                    # Check vertical\n                    if row < 3 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col in 'ABCDEFG' and row < 3 and all(board['ABCDEFG'[i]][row + (3 - i)] == color for i in range(4) if 'ABCDEFG'.index(col) - i >= 0):\n                        return color\n                    # Check diagonal \\\n                    if col in 'ABCDEFG' and row < 3 and all(board['ABCDEFG'[i]][row + i] == color for i in range(4) if 'ABCDEFG'.index(col) + i < 7):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = player\n        player_moves[player].append((column, row))\n        \n        for combo in LINES:\n            if all((pos in player_moves[player]) for pos in combo):\n                return player\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all((pos in occupied and occupied[pos] == color) for pos in line):\n                return True\n        return False\n    \n    occupied = {}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                occupied[(column, row)] = color\n                if check_winner(color):\n                    return color\n                break\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[x][y] == color for x, y in line if x in grid and y < 6):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check if this move resulted in a win\n        if check_winner(board, col, row, color):\n            winner = color\n            break\n\n    return winner if winner else \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check horizontal, vertical and diagonal directions for win\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        # Check one direction\n        for step in range(1, 4):\n            x, y = ord(col) - 65 + dx * step, row + dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + 65)][y] == color:\n                count += 1\n            else:\n                break\n        \n        # Check the opposite direction\n        for step in range(1, 4):\n            x, y = ord(col) - 65 - dx * step, row - dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + 65)][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(7):\n        for j in range(6):\n            if board[chr(65 + i)][j] == color:\n                if check_direction(board, color, i, j, 1, 0) or \\\n                   check_direction(board, color, i, j, 0, 1) or \\\n                   check_direction(board, color, i, j, 1, 1) or \\\n                   check_direction(board, color, i, j, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        c = col + delta_col * step\n        r = row + delta_row * step\n        if 0 <= c < 7 and 0 <= r < 6 and board[chr(65 + c)][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board[chr(65+j)][i] == color:\n                    if (j <= 3 and all(board[chr(65+j+k)][i] == color for k in range(4))) or \\\n                       (i <= 2 and all(board[chr(65+j)][i+k] == color for k in range(4))) or \\\n                       (j <= 3 and i <= 2 and all(board[chr(65+j+k)][i+k] == color for k in range(4))) or \\\n                       (j <= 3 and i >= 3 and all(board[chr(65+j+k)][i-k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for i in range(1, 4):\n            c, r = chr(ord(col) + d_col * i), row + d_row * i\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        for i in range(1, 4):\n            c, r = chr(ord(col) - d_col * i), row - d_row * i\n            if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n        \n        if check_winner(player_moves[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(positions):\n    for i, (col, row) in enumerate(positions):\n        if check_direction(positions, col, row, 1, 0) or \\\n           check_direction(positions, col, row, 0, 1) or \\\n           check_direction(positions, col, row, 1, 1) or \\\n           check_direction(positions, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(positions, col, row, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        if step == 0:\n            continue\n        check_col = chr(ord(col) + step * delta_col)\n        check_row = row + step * delta_row\n        if check_col in 'ABCDEFG' and 0 <= check_row < 6 and (check_col, check_row) in positions:\n            count += 1\n            if count == 3:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for sign in (1, -1):\n            for step in range(1, 4):\n                x, y = ord(column) - ord('A') + dx * sign * step, row + dy * sign * step\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return True\n                \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        # Check for a win\n        for i in range(6):\n            for j in range(7):\n                if grid[chr(j + 65)][i] == color:\n                    if j <= 3 and all(grid[chr(j + k + 65)][i] == color for k in range(4)):  # Horizontal\n                        return color\n                    if i <= 2 and all(grid[chr(j + 65)][i + k] == color for k in range(4)):  # Vertical\n                        return color\n                    if j <= 3 and i <= 2 and all(grid[chr(j + k + 65)][i + k] == color for k in range(4)):  # Diagonal \\\n                        return color\n                    if j <= 3 and i >= 3 and all(grid[chr(j + k + 65)][i - k] == color for k in range(4)):  # Diagonal /\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = next((r for r in range(6) if grid[col][r] is None), None)\n        if row is not None:\n            grid[col][row] = player\n            player_moves[player].append((col, row))\n            if check_winner(player_moves[player]):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for (c, r) in moves:\n        if check_direction(moves, c, r, 1, 0) or check_direction(moves, c, r, 0, 1) or \\\n           check_direction(moves, c, r, 1, 1) or check_direction(moves, c, r, 1, -1):\n            return True\n    return False\n\ndef check_direction(moves, c, r, dc, dr):\n    count = 0\n    for i in range(-3, 4):\n        if (chr(ord(c) + i * dc), r + i * dr) in moves:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 1}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for dr, dc in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for step in [1, -1]:\n                r, c = row, 'ABCDEFG'.index(column)\n                while 0 <= r + step * dr < 6 and 0 <= c + step * dc < 7:\n                    if board['ABCDEFG'[c + step * dc]][r + step * dr] == color:\n                        count += 1\n                    else:\n                        break\n                    r += step * dr\n                    c += step * dc\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color, row, col):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color, row, col):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dr, dc in directions:\n        count = 1\n        for step in [1, -1]:\n            r, c = row, ord(col) - ord('A')\n            while True:\n                r += dr * step\n                c += dc * step\n                if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n                if count >= 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[COLUMNS[i]][j] == color:\n                        if (i <= 3 and all(board[COLUMNS[i+k]][j] == color for k in range(4))) or \\\n                           (j <= 2 and all(board[COLUMNS[i]][j+k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[COLUMNS[i+k]][j+k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[COLUMNS[i+k]][j-k] == color for k in range(4))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                step = 1\n                while True:\n                    r = row + direction[0] * step * d\n                    c = (ord(col) - ord('A')) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and (0 <= c < 7) and board[chr(c + ord('A'))][r] == color:\n                        count += 1\n                        step += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) >= 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, col_delta, row_delta):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + col_delta * i)\n        r = row + row_delta * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a win after each move\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCD'[ord(col) - ord('A'):ord(col) - ord('A') + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal down-right\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for direction in [1, -1]:\n                x, y = ord(column) - ord('A'), row\n                while True:\n                    x += dx * direction\n                    y += dy * direction\n                    if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for winner\n        for row in range(6):\n            for col in 'ABCDEFG':\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                player_moves[color].append((column, row))\n                break\n\n        for player in player_moves:\n            if check_winner(player_moves[player]):\n                return player\n\n    return \"Draw\"\n\ndef check_winner(positions):\n    for pos in positions:\n        if (pos[0], pos[1]) in positions:\n            count = 1\n            for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                for step in range(1, 4):\n                    new_pos = (chr(ord(pos[0]) + dx * step), pos[1] + dy * step)\n                    if new_pos in positions:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all((pos in occupied and occupied[pos] == color) for pos in line):\n                return True\n        return False\n    \n    occupied = {}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                occupied[(column, row)] = color\n                if check_winner(color):\n                    return color\n                break\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[x][y] == color for x, y in line if x in grid and y < 6):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board[chr(j + 65)][i] == color:\n                if check_direction(board, color, i, j, 1, 0) or \\\n                   check_direction(board, color, i, j, 0, 1) or \\\n                   check_direction(board, color, i, j, 1, 1) or \\\n                   check_direction(board, color, i, j, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, row, col, row_delta, col_delta):\n    count = 0\n    for step in range(4):\n        r = row + step * row_delta\n        c = col + step * col_delta\n        if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + 65)][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(board, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for c in board:\n        for r in range(6):\n            if board[c][r] == color:\n                if check_direction(board, color, c, r, 1, 0) or \\\n                   check_direction(board, color, c, r, 0, 1) or \\\n                   check_direction(board, color, c, r, 1, 1) or \\\n                   check_direction(board, color, c, r, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, col_delta, row_delta):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * col_delta)\n        r = row + i * row_delta\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(board, color):\n                    return color\n                break\n                \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j <= 3 and i >= 3 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win after each move\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCD'[ord(col) - ord('A'):ord(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[c][r] == color for c, r in zip('ABCD'[ord(col) - ord('A'):ord(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal /\n                        if col >= 'D' and row <= 2 and all(board[c][r] == color for c, r in zip('DCBA'[ord(col) - ord('A'):ord(col) + 4], range(row, row + 4))):\n                            return color\n\n    return \"Draw\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6)):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] == color):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 0 <= ord(c) + i < 7):\n                            return color\n                    # Check diagonal /\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and 0 <= ord(c) + d < 7 and all(\n                            board[chr(ord(c) + i)][r - i + d] == color for i in range(4) if 0 <= r - i + d < 6):\n                            return color\n                    # Check diagonal \\\n                    for d in range(-3, 1):\n                        if 0 <= r - d < len(board[c]) and 0 <= ord(c) - d < 7 and all(\n                            board[chr(ord(c) + i)][r + i - d] == color for i in range(4) if 0 <= r + i - d < 6):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_check for col, row in line) for line in LINES):\n                return color_check\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y in range(6)):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == color and \n                (i >= 3 and all(board[column][i-j] == color for j in range(4)) or\n                 (column in board and board[column][i-1] == color and\n                  board[column][i-2] == color and board[column][i-3] == color) or\n                 (board[column][i] == color and column in 'ABCD' and board[chr(ord(column) - 1)][i] == color and \n                  board[chr(ord(column) - 2)][i] == color and board[chr(ord(column) - 3)][i] == color) or\n                 (board[column][i] == color and column in 'DEFG' and board[chr(ord(column) + 1)][i] == color and \n                  board[chr(ord(column) + 2)][i] == color and board[chr(ord(column) + 3)][i] == color)))):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCDEFG'[(ord(column)-65):(ord(column)-61)]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row] == color for row in range(row, row + 4)):\n                    return color\n                # Check diagonal (bottom-left to top-right)\n                if column <= 'D' and row >= 3 and all(board[chr(ord(column) + i)][row - i] == color for i in range(4)):\n                    return color\n                # Check diagonal (top-left to bottom-right)\n                if column <= 'D' and row <= 2 and all(board[chr(ord(column) + i)][row + i] == color for i in range(4)):\n                    return color\n\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is None:\n                    continue\n                color = grid[col][row]\n                # Check horizontal\n                if col <= 'D' and all(grid[c][row] == color for c in 'ABCD'[ 'A':'A' + 4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                    return color\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col)+i)][row] for i in range(4)):\n                        return color\n                    if row <= 2 and all(board[col][row] == board[col][row+i] for i in range(4)):\n                        return color\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col)+i)][row+i] for i in range(4)):\n                        return color\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col)+i)][row-i] for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(k + 65)][j] == color for k in range(i, i + 4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in grid and all(grid[col][row] == color for col in 'ABCDEFG'[:7][\n                                'ABCDEFG'.index(col):][:4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) - k][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            # Check in the positive direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') + step * dx, row + step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the negative direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') - step * dx, row - step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win condition\n        if check_winner(board, color, col, row):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        \n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') + dx * step, row + dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[COLUMNS[x]][y] == color:\n                count += 1\n            else:\n                break\n        \n        for step in range(1, 4):\n            x, y = ord(col) - ord('A') - dx * step, row - dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[COLUMNS[x]][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check horizontal\n    count = 0\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        count = count + 1 if board[chr(ord('A') + c)][row] == color else 0\n        if count == 4:\n            return True\n    \n    # Check vertical\n    count = 0\n    for r in range(max(0, row - 3), min(6, row + 1)):\n        count = count + 1 if board[col][r] == color else 0\n        if count == 4:\n            return True\n    \n    # Check diagonal \\\n    count = 0\n    for d in range(-3, 1):\n        r = row + d\n        c = ord(col) - ord('A') + d\n        if 0 <= r < 6 and 0 <= c < 7 and board[chr(ord('A') + c)][r] == color:\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    \n    # Check diagonal /\n    count = 0\n    for d in range(-3, 1):\n        r = row - d\n        c = ord(col) - ord('A') + d\n        if 0 <= r < 6 and 0 <= c < 7 and board[chr(ord('A') + c)][r] == color:\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * i * step)\n                new_row = row + d[1] * i * step\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) + i]][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) - i]][row + i] == color for i in range(4)):\n                        return color\n        return None\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner():\n                    return color\n                break\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        # Check for a win condition\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    # Check horizontal\n                    if c <= 'D' and all(grid[c][r] == grid[chr(ord(c)+i)][r] for i in range(4)):\n                        return grid[c][r]\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r] == grid[c][r+i] for i in range(4)):\n                        return grid[c][r]\n                    # Check diagonal (down-right)\n                    if c <= 'D' and r <= 2 and all(grid[c][r] == grid[chr(ord(c)+i)][r+i] for i in range(4)):\n                        return grid[c][r]\n                    # Check diagonal (up-right)\n                    if c <= 'D' and r >= 3 and all(grid[c][r] == grid[chr(ord(c)+i)][r-i] for i in range(4)):\n                        return grid[c][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c) + k)][r] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c) + k)][r + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if c >= 'D' and r <= 2 and all(board[chr(ord(c) - k)][r + k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    color = grid[c][r]\n                    # Check horizontal\n                    if c <= 'D' and all(grid[c][r] == color for c in 'ABCDEFG'[(ord(c) - 65):(ord(c) - 61)]):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r] == color for r in range(r, r + 4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(grid[c][r] == color for k in range(4) if r - k >= 0 and grid[chr(ord(c) + k)][r - k] == color):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(grid[c][r] == color for k in range(4) if grid[chr(ord(c) + k)][r + k] == color):\n                        return color\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if grid['ABCDEFG'[c]][r] is not None:\n                    color = grid['ABCDEFG'[c]][r]\n\n                    # Check vertical\n                    if r <= 2 and all(grid['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if c <= 3 and all(grid['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(grid['ABCDEFG'[c+i]][r-i] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check vertical\n            for col in 'ABCDEFG':\n                count = 0\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check diagonal \\\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n\n            # Check diagonal /\n            for col in range(4):\n                for row in range(3):\n                    if all(grid[chr(col + ord('A') + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCD'[ord(col)-65:ord(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col)-k)][row+k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        values = [board[c][r] for c, r in line if board[c][r] is not None]\n        if len(values) == 4 and len(set(values)) == 1:\n            return values[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n\n        for c in 'ABCDEFG':\n            if board[c].count('Red') >= 4 or board[c].count('Yellow') >= 4:\n                for color_check in ['Red', 'Yellow']:\n                    if board[c][-4:].count(color_check) == 4:\n                        return color_check\n        \n        for i in range(6):\n            for j in range(len(board[c])):\n                if j + 3 < len(board[c]):\n                    if board[c][j:j+4].count('Red') == 4:\n                        return 'Red'\n                    if board[c][j:j+4].count('Yellow') == 4:\n                        return 'Yellow'\n\n        for r in range(6):\n            for c in range(4):\n                if len(board[COLUMNS[c]]) > r and len(board[COLUMNS[c+1]]) > r and len(board[COLUMNS[c+2]]) > r and len(board[COLUMNS[c+3]]) > r:\n                    if (board[COLUMNS[c]][r] == board[COLUMNS[c+1]][r] == board[COLUMNS[c+2]][r] == board[COLUMNS[c+3]][r]):\n                        return board[COLUMNS[c]][r]\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical, and diagonal lines\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, color, col, row, 1, 0) or\n                    check_direction(board, color, col, row, 0, 1) or\n                    check_direction(board, color, col, row, 1, 1) or\n                    check_direction(board, color, col, row, 1, -1)):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if (0 <= ord(col) - ord('A') + count * delta_col < 7 and\n            0 <= row + count * delta_row < 6 and\n            board[chr(ord(col) + count * delta_col)][row + count * delta_row] == color):\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return True\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return True\n        return False\n\n    if check_winner('Yellow'):\n        return 'Yellow'\n    elif check_winner('Red'):\n        return 'Red'\n    elif len(pieces_positions) == 42:\n        return 'Draw'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [((1, 0)), ((0, 1)), ((1, 1)), ((1, -1))]:\n            count = 1\n            \n            for d in [-1, 1]:\n                r, c = row, ord(col) - ord('A')\n                while 0 <= r < 6 and 0 <= c < 7:\n                    r += direction[0] * d\n                    c += direction[1] * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + ord('A'))][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c = chr(ord(col) + dc * step)\n            r = row + dr * step\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c = chr(ord(col) - dc * step)\n            r = row - dr * step\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n\n    if check_winner('Yellow'):\n        return 'Yellow'\n    elif check_winner('Red'):\n        return 'Red'\n    else:\n        return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for d in [1, -1]:\n            for step in range(1, 4):\n                new_col = chr(ord(col) + dx * d * step)\n                new_row = row + dy * d * step\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            # Check in the positive direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') + step * dx, row + step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the negative direction\n            for step in range(1, 4):\n                x, y = ord(col) - ord('A') - step * dx, row - step * dy\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win after every move\n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Get the row index of the current move\n    row = len(board[column]) - 1\n    \n    # Check all possible directions for a win\n    directions = [\n        [(0, 1), (0, -1)],  # Vertical\n        [(1, 0), (-1, 0)],  # Horizontal\n        [(1, 1), (-1, -1)], # Diagonal \\\n        [(1, -1), (-1, 1)]  # Diagonal /\n    ]\n    \n    for direction in directions:\n        count = 1\n        \n        for d in direction:\n            r, c = row, ord(column) - ord('A')\n            while True:\n                r += d[0]\n                c += d[1]\n                if 0 <= r < 6 and 0 <= c < 7 and len(board[chr(c + ord('A'))]) > r and board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:\n                    if (c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win condition after each move\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for i in range(1, 4):\n                    r = row + d * i * direction[0]\n                    c = board[column].index(color) + d * i * direction[1]\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    return \"Draw\" if len(pieces_positions) >= 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check horizontal\n    count = 0\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        count = count + 1 if board[chr(ord('A') + c)][row] == color else 0\n        if count == 4:\n            return True\n    \n    # Check vertical\n    count = 0\n    for r in range(max(0, row - 3), min(6, row + 1)):\n        count = count + 1 if board[col][r] == color else 0\n        if count == 4:\n            return True\n    \n    # Check diagonal \\\n    count = 0\n    for d in range(-3, 1):\n        r = row + d\n        c = ord(col) - ord('A') + d\n        if 0 <= r < 6 and 0 <= c < 7 and board[chr(ord('A') + c)][r] == color:\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    \n    # Check diagonal /\n    count = 0\n    for d in range(-3, 1):\n        r = row - d\n        c = ord(col) - ord('A') + d\n        if 0 <= r < 6 and 0 <= c < 7 and board[chr(ord('A') + c)][r] == color:\n            count += 1\n        else:\n            count = 0\n        if count == 4:\n            return True\n    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check horizontal, vertical and diagonal lines for the winner\n    for c in 'ABCDEFG':\n        for r in range(6):\n            if grid[c][r] == color:\n                if check_direction(grid, c, r, 1, 0, color) or \\\n                   check_direction(grid, c, r, 0, 1, color) or \\\n                   check_direction(grid, c, r, 1, 1, color) or \\\n                   check_direction(grid, c, r, 1, -1, color):\n                    return True\n    return False\n\ndef check_direction(grid, c, r, dc, dr, color):\n    count = 0\n    for i in range(4):\n        cc = chr(ord(c) + dc * i)\n        rr = r + dr * i\n        if cc in grid and 0 <= rr < 6 and grid[cc][rr] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for win conditions\n        for i in range(7):\n            for j in range(6):\n                if board[chr(i + 65)][j] is None:\n                    continue\n                \n                # Check vertical\n                if j <= 2 and all(board[chr(i + 65)][j + k] == board[chr(i + 65)][j] for k in range(4)):\n                    return board[chr(i + 65)][j]\n                \n                # Check horizontal\n                if i <= 3 and all(board[chr(i + k + 65)][j] == board[chr(i + 65)][j] for k in range(4)):\n                    return board[chr(i + 65)][j]\n                \n                # Check diagonal down\n                if i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == board[chr(i + 65)][j] for k in range(4)):\n                    return board[chr(i + 65)][j]\n                \n                # Check diagonal up\n                if i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == board[chr(i + 65)][j] for k in range(4)):\n                    return board[chr(i + 65)][j]\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(color):\n                    return color\n                break\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, col_dir, row_dir):\n    count = 0\n    for i in range(4):\n        check_col = chr(ord(col) + i * col_dir)\n        check_row = row + i * row_dir\n        if check_col in board and 0 <= check_row < 6:\n            if board[check_col][check_row] == color:\n                count += 1\n            else:\n                break\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col >= 'D' and all(grid[chr(ord(col)-i)][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check horizontal, vertical, and both diagonals for a win\n            for c in 'ABCDEFG':\n                for r in range(6):\n                    if grid[c][r] == color:\n                        # Check horizontal\n                        if c <= 'D' and all(grid[c][r] == color for c in 'ABCDEFG'[(ord(c) - ord('A')):(ord(c) - ord('A') + 4)]):\n                            return color\n                        # Check vertical\n                        if r <= 2 and all(grid[c][r + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-right\n                        if c <= 'D' and r <= 2 and all(grid[chr(ord(c) + k)][r + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if c >= 'D' and r <= 2 and all(grid[chr(ord(c) - k)][r + k] == color for k in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == grid[col][row] for k in range(4)):\n                        return grid[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == grid[col][row] for k in range(4)):\n                        return grid[col][row]\n                    # Check diagonal (down-right)\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == grid[col][row] for k in range(4)):\n                        return grid[col][row]\n                    # Check diagonal (up-right)\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == grid[col][row] for k in range(4)):\n                        return grid[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for col_start in range(7):\n            for row_start in range(6):\n                if grid[chr(col_start + 65)][row_start] == color:\n                    # Check horizontal\n                    if col_start <= 3 and all(grid[chr(col_start + i + 65)][row_start] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row_start <= 2 and all(grid[chr(col_start + 65)][row_start + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col_start <= 3 and row_start >= 3 and all(grid[chr(col_start + i + 65)][row_start - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col_start <= 3 and row_start <= 2 and all(grid[chr(col_start + i + 65)][row_start + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"None\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(65 + c)][r] == color:\n                        # Check horizontal\n                        if c + 3 < 7 and all(board[chr(65 + c + i)][r] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if r + 3 < 6 and all(board[chr(65 + c)][r + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if c + 3 < 7 and r - 3 >= 0 and all(board[chr(65 + c + i)][r - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if c + 3 < 7 and r + 3 < 6 and all(board[chr(65 + c + i)][r + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for d in (1, -1):\n            for step in range(1, 4):\n                c = chr(ord(col) + step * d * dc)\n                r = row + step * d * dr\n                if c in board and 0 <= r < 6 and board[c][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        # Check for a winner\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    color = grid[c][r]\n                    \n                    # Horizontal check\n                    if c <= 'D' and all(grid[c][r] == color for c in 'ABCDEFG'[COLUMNS.index(c):COLUMNS.index(c)+4]):\n                        return color\n                    \n                    # Vertical check\n                    if r <= 2 and all(grid[c][r] == color for r in range(r, r + 4)):\n                        return color\n                    \n                    # Diagonal check \\\n                    if c <= 'D' and r <= 2 and all(grid[COLUMNS[COLUMNS.index(c) + k]][r + k] == color for k in range(4)):\n                        return color\n                    \n                    # Diagonal check /\n                    if c <= 'D' and r >= 3 and all(grid[COLUMNS[COLUMNS.index(c) + k]][r - k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if row >= 3:  # Check vertical\n            if all(board[col][row - i] == color for i in range(4)):\n                return color\n        \n        # Check horizontal\n        for c in range(max(0, ord(col) - 65 - 3), min(7 - 3, ord(col) - 65 + 1)):\n            if all(board[chr(65 + c + i)][row] == color for i in range(4)):\n                return color\n        \n        # Check diagonal /\n        for c in range(max(0, ord(col) - 65 - 3), min(7 - 3, ord(col) - 65 + 1)):\n            for r in range(max(0, row - 3), min(6, row + 1)):\n                if all(board[chr(65 + c + i)][r + i] == color for i in range(4)):\n                    return color\n        \n        # Check diagonal \\\n        for c in range(max(0, ord(col) - 65 - 3), min(7 - 3, ord(col) - 65 + 1)):\n            for r in range(min(5, row + 3), max(-1, row - 1)):\n                if all(board[chr(65 + c + i)][r - i] == color for i in range(4)):\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for step in range(4):\n            new_col = chr(ord(col) + dx * step)\n            new_row = row + dy * step\n            if 0 <= new_row < 6 and new_col in board and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in 'ABCDEFG':\n        for row in range(6):\n            if board[column][row] == color:\n                if check_direction(board, column, row, color, 1, 0) or \\\n                   check_direction(board, column, row, color, 0, 1) or \\\n                   check_direction(board, column, row, color, 1, 1) or \\\n                   check_direction(board, column, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, column, row, color, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        col = chr(ord(column) + delta_col * _)  # Shift column\n        r = row + delta_row * _\n        if col in board and 0 <= r < 6 and board[col][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] is not None:\n                    color = board['ABCDEFG'[c]][r]\n                    # Check horizontal\n                    if c <= 3 and all(board['ABCDEFG'[c + i]][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board['ABCDEFG'[c]][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down\n                    if c <= 3 and r <= 2 and all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal up\n                    if c <= 3 and r >= 3 and all(board['ABCDEFG'[c + i]][r - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if (col <= 3 and all(board[chr(col + k + 65)][row] == color for k in range(4))) or \\\n                       (row <= 2 and all(board[chr(col + 65)][row + k] == color for k in range(4))) or \\\n                       (col <= 3 and row <= 2 and all(board[chr(col + k + 65)][row + k] == color for k in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(board[chr(col + k + 65)][row - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n                \n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[x][y] == color for x, y in line if x in grid and y < 6):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    winner = None\n\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check if this move resulted in a win\n        if check_winner(board, col, row, color):\n            winner = color\n            break\n\n    return winner if winner else \"Draw\"\n\ndef check_winner(board, col, row, color):\n    # Check horizontal, vertical and diagonal directions for win\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        # Check one direction\n        for step in range(1, 4):\n            x, y = ord(col) - 65 + dx * step, row + dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + 65)][y] == color:\n                count += 1\n            else:\n                break\n        \n        # Check the opposite direction\n        for step in range(1, 4):\n            x, y = ord(col) - 65 - dx * step, row - dy * step\n            if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + 65)][y] == color:\n                count += 1\n            else:\n                break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board[chr(j + 65)][i] == color:\n                if check_direction(board, color, i, j, 1, 0) or \\\n                   check_direction(board, color, i, j, 0, 1) or \\\n                   check_direction(board, color, i, j, 1, 1) or \\\n                   check_direction(board, color, i, j, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, row, col, row_delta, col_delta):\n    count = 0\n    for step in range(4):\n        r = row + step * row_delta\n        c = col + step * col_delta\n        if 0 <= r < 6 and 0 <= c < 7 and board[chr(c + 65)][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for i in range(1, 4):\n            new_col = chr(ord(col) + d_col * i)\n            new_row = row + d_row * i\n            if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        for i in range(1, 4):\n            new_col = chr(ord(col) - d_col * i)\n            new_row = row - d_row * i\n            if new_col in grid and 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c])):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n        \n        if check_winner(player_moves[color]):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(positions):\n    for i, (col, row) in enumerate(positions):\n        if check_direction(positions, col, row, 1, 0) or \\\n           check_direction(positions, col, row, 0, 1) or \\\n           check_direction(positions, col, row, 1, 1) or \\\n           check_direction(positions, col, row, 1, -1):\n            return True\n    return False\n\ndef check_direction(positions, col, row, delta_col, delta_row):\n    count = 0\n    for step in range(-3, 4):\n        if step == 0:\n            continue\n        check_col = chr(ord(col) + step * delta_col)\n        check_row = row + step * delta_row\n        if check_col in 'ABCDEFG' and 0 <= check_row < 6:\n            if (check_col, check_row) in positions:\n                count += 1\n                if count == 3:\n                    return True\n            else:\n                count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if row >= 3:  # Check vertical\n            if all(board[column][r] == color for r in range(row, row-4, -1)):\n                return color\n        \n        # Check horizontal\n        for c in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n            if all(board['ABCDEFG'[c + i]][row] == color for i in range(4) if c + i < 7):\n                return color\n        \n        # Check diagonal \\\n        for d in range(-3, 1):\n            if all(0 <= 'ABCDEFG'.index(column) + d + i < 7 and\n                   0 <= row - i < 6 and\n                   board['ABCDEFG'[d + 'ABCDEFG'.index(column) + i]][row - i] == color for i in range(4)):\n                return color\n        \n        # Check diagonal /\n        for d in range(-3, 1):\n            if all(0 <= 'ABCDEFG'.index(column) + d + i < 7 and\n                   0 <= row + i < 6 and\n                   board['ABCDEFG'[d + 'ABCDEFG'.index(column) + i]][row + i] == color for i in range(4)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for column in board:\n        for row in range(6):\n            if board[column][row] == color:\n                if check_direction(board, column, row, color):\n                    return True\n    return False\n\ndef check_direction(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 0\n        for i in range(4):\n            col = chr(ord(column) + d[0] * i)\n            r = row + d[1] * i\n            if col in board and 0 <= r < 6 and board[col][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 0, 'Yellow': 1}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for dr, dc in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for direction in [1, -1]:\n                r, c = row, 'ABCDEFG'.index(column)\n                while 0 <= r + direction * dr < 6 and 0 <= c + direction * dc < 7:\n                    r += direction * dr\n                    c += direction * dc\n                    if r < 0 or board['ABCDEFG'[c]][r] != color:\n                        break\n                    count += 1\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if c < 4 and all(board['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n                    if r < 3 and all(board['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n                    if c < 4 and r < 3 and all(board['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n                    if c < 4 and r > 2 and all(board['ABCDEFG'[c+i]][r-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for step in [1, -1]:\n                for i in range(1, 4):\n                    r, c = row + direction[0] * step * i, 'ABCDEFG'.index(column) + direction[1] * step * i\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                step = 1\n                while step <= 3:\n                    r = row + direction[0] * step * d\n                    c = board[col].index(color) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n                    step += 1\n\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    # Check horizontal, vertical and diagonal\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, col_delta, row_delta):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + col_delta * i)\n        r = row + row_delta * i\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win after each move\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCD'[ord(col) - ord('A'):ord(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[c][r] == color for c, r in zip('ABCD'[ord(col) - ord('A'):ord(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[c][r] == color for c, r in zip('ABCD'[ord(col) - ord('A'):ord(col) + 4], range(row, row - 4, -1))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        moves[color].append((column, row))\n\n        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for direction in [1, -1]:\n                x, y = column, row\n                while True:\n                    x = chr(ord(x) + dx * direction)\n                    y += dy * direction\n                    if x in board and 0 <= y < 6 and board[x][y] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    if check_winner(\"Red\"):\n        return \"Red\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < len(board[x])):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(positions):\n    positions_set = set(positions)\n    for x, y in positions:\n        if all((chr(col), row) in positions_set for col in range(ord(x) - 3, ord(x) + 1) for row in [y]):\n            return True\n        if all((x, row) in positions_set for row in range(y, y + 4)):\n            return True\n        if all((chr(ord(x) + k), y + k) in positions_set for k in range(4)):\n            return True\n        if all((chr(ord(x) + k), y - k) in positions_set for k in range(4)):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        for direction in LINES:\n            if (col, row) in direction:\n                colors = [board[c][r] for c, r in direction if board[c][r] is not None]\n                if len(colors) == 4 and all(c == color for c in colors):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_positions = {'Red': set(), 'Yellow': set()}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        player_positions[color].add((column, row))\n        \n        for line in LINES:\n            if line & player_positions[color] == line:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board[chr(j + 65)][i] == color:\n                if check_direction(board, color, j, i, 1, 0) or \\\n                   check_direction(board, color, j, i, 0, 1) or \\\n                   check_direction(board, color, j, i, 1, 1) or \\\n                   check_direction(board, color, j, i, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for _ in range(4):\n        if 0 <= col < 7 and 0 <= row < 6 and board[chr(col + 65)][row] == color:\n            count += 1\n            if count == 4:\n                return True\n        col += delta_col\n        row += delta_row\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (all(board[col][row] == board[col][r] for r in range(row, min(row + 4, 6))) or\n                        all(board[c][row] == color for c in 'ABCDEFG'[(ord(col) - ord('A')): (ord(col) - ord('A') + 4)]) or\n                        all(board[c][row + d] == color for d, c in enumerate('ABCDEFG'[(ord(col) - ord('A')): (ord(col) - ord('A') + 4)], start=0)) or\n                        all(board[c][row - d] == color for d, c in enumerate('ABCDEFG'[(ord(col) - ord('A')): (ord(col) - ord('A') + 4)], start=0))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_check for col, row in line) for line in LINES):\n                return color_check\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(board, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all((grid[col][row] == color for col, row in line)):\n                return True\n        return False\n    \n    if check_winner('Yellow'):\n        return \"Yellow\"\n    elif check_winner('Red'):\n        return \"Red\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = []\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                moves.append((column, i, color))\n                break\n\n        for c, r, player in moves:\n            # Check for winning conditions\n            for line in LINES:\n                if (c, r) in line and all(grid[c][r] == player for c, r in line):\n                    return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < len(board[x])):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c, r) in {(col, row) for col in board for row in range(6)}):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and all(c == colors[0] for c in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n\n        # Check for a winner\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    color = board[c][r]\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[chr(ord(c)+i)][r+i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 'D' and r >= 3 and all(board[chr(ord(c)+i)][r-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row - 4, -1))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for win_condition in LINES:\n            if all(board[col][row] == color for col, row in win_condition if board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and col in board and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Horizontal check\n                    if c <= 'D' and all(board[c][r] == board[c][r+i] for i in range(4)):\n                        return board[c][r]\n                    # Vertical check\n                    if r <= 2 and all(board[c][r] == board[c+i][r] for i in range(4)):\n                        return board[c][r]\n                    # Diagonal /\n                    if c <= 'D' and r >= 3 and all(board[c][r] == board[c+i][r-i] for i in range(4)):\n                        return board[c][r]\n                    # Diagonal \\\n                    if c <= 'D' and r <= 2 and all(board[c][r] == board[c+i][r+i] for i in range(4)):\n                        return board[c][r]\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        if all(0 <= row + dy * k < 6 and 0 <= ord(col) - ord('A') + dx * k < 7 and board[chr(ord('A') + ord(col) - ord('A') + dx * k)][row + dy * k] == color for k in range(4)):\n                            return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = {board[col][row] for col, row in line if board[col][row] is not None}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] == color):\n                return color\n                \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col]) and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n            \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in [1, -1]:\n            c, r = col_index(col), row\n            while 0 <= c < 7 and 0 <= r < 6 and board['ABCDEFG'[c]][r] == color:\n                count += 1\n                c += dc * step\n                r += dr * step\n            if count >= 4:\n                return True\n    return False\n\ndef col_index(col):\n    return 'ABCDEFG'.index(col)\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) + k]][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col) - k]][row + k] == color for k in range(4)):\n                        return color\n        return None\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner():\n                    return color\n                break\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        # Check for a win condition\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    # Check vertical\n                    if r <= 2 and all(grid[c][r+i] == grid[c][r] for i in range(4)):\n                        return grid[c][r]\n                    # Check horizontal\n                    if c <= 'D' and all(grid[chr(ord(c)+i)][r] == grid[c][r] for i in range(4)):\n                        return grid[c][r]\n                    # Check diagonal (down-right)\n                    if c <= 'D' and r <= 2 and all(grid[chr(ord(c)+i)][r+i] == grid[c][r] for i in range(4)):\n                        return grid[c][r]\n                    # Check diagonal (up-right)\n                    if c <= 'D' and r >= 3 and all(grid[chr(ord(c)+i)][r-i] == grid[c][r] for i in range(4)):\n                        return grid[c][r]\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col >= 'D' and all(grid[chr(ord(col)-i)][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n                        \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check vertical\n            for col in 'ABCDEFG':\n                count = 0\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check diagonal \\\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n\n            # Check diagonal /\n            for col in range(4):\n                for row in range(6):\n                    if row >= 3 and all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCD'[ord(col)-65:ord(col)-61]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col)-k)][row+k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and board[c][r] is not None)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        values = [board[c][r] for c, r in line if board[c][r] is not None]\n        if len(values) == 4 and len(set(values)) == 1:\n            return values[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n\n        for i in range(len(board[col]) - 3, len(board[col])):\n            if len(board[col]) >= 4 and all(board[col][i + k] == color for k in range(4)):\n                return color\n\n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            color = board[col][row]\n            if color:\n                if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                    return color\n                if col <= 'D':\n                    if all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                if col <= 'D' and row <= 2:\n                    if all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                if col <= 'D' and row >= 3:\n                    if all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece.split('_')[1]\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line]\n        if colors.count('Red') == 4:\n            return \"Red\"\n        if colors.count('Yellow') == 4:\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        # Check for a winner\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if grid[c][r] is not None:\n                    color = grid[c][r]\n                    \n                    # Horizontal check\n                    if c <= 'D' and all(grid[c][r] == color for c in 'ABCDEFG'[COLUMNS.index(c):COLUMNS.index(c)+4]):\n                        return color\n                    \n                    # Vertical check\n                    if r <= 2 and all(grid[c][r] == color for r in range(r, r + 4)):\n                        return color\n                    \n                    # Diagonal check \\\n                    if c <= 'D' and r <= 2 and all(grid[COLUMNS[COLUMNS.index(c) + k]][r + k] == color for k in range(4)):\n                        return color\n                    \n                    # Diagonal check /\n                    if c <= 'D' and r >= 3 and all(grid[COLUMNS[COLUMNS.index(c) + k]][r - k] == color for k in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ('Red', 'Yellow'):\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for step in range(4):\n            x = ord(col) - ord('A') + step * dx\n            y = row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and (board[chr(x + ord('A'))][y] == color):\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] is not None:  # chr(c + 65) gives 'A' to 'G'\n                    color = board[chr(c + 65)][r]\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal (down-right)\n                    if r <= 2 and c <= 3 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal (down-left)\n                    if r <= 2 and c >= 3 and all(board[chr(c - i + 65)][r + i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in range(7):\n            for row in range(6):\n                if board[chr(col + 65)][row] == color:\n                    if (col + 1 < 7 and board[chr(col + 1 + 65)][row] == color and\n                        col + 2 < 7 and board[chr(col + 2 + 65)][row] == color and\n                        col + 3 < 7 and board[chr(col + 3 + 65)][row] == color):\n                        return color\n                    if (row + 1 < 6 and board[chr(col + 65)][row + 1] == color and\n                        row + 2 < 6 and board[chr(col + 65)][row + 2] == color and\n                        row + 3 < 6 and board[chr(col + 65)][row + 3] == color):\n                        return color\n                    if (col + 1 < 7 and row + 1 < 6 and board[chr(col + 1 + 65)][row + 1] == color and\n                        col + 2 < 7 and row + 2 < 6 and board[chr(col + 2 + 65)][row + 2] == color and\n                        col + 3 < 7 and row + 3 < 6 and board[chr(col + 3 + 65)][row + 3] == color):\n                        return color\n                    if (col + 1 < 7 and row - 1 >= 0 and board[chr(col + 1 + 65)][row - 1] == color and\n                        col + 2 < 7 and row - 2 >= 0 and board[chr(col + 2 + 65)][row - 2] == color and\n                        col + 3 < 7 and row - 3 >= 0 and board[chr(col + 3 + 65)][row - 3] == color):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n\n        # Check for a win only if there are at least 4 in the column\n        if len(board[column]) >= 4:\n            # Check vertical\n            if all(piece == color for piece in board[column][-4:]):\n                return color\n        \n        # Check horizontal and diagonal wins after placing the piece\n        for col_index in range(max(0, 'ABCDEFG'.index(column) - 3), min(7, 'ABCDEFG'.index(column) + 1)):\n            # Check horizontal\n            if all((color == board['ABCDEFG'[i]][-1] if len(board['ABCDEFG'[i]]) > 0 else False) for i in range(col_index, col_index + 4)):\n                return color\n            \n            # Check diagonal (\\)\n            if all((color == board['ABCDEFG'[col_index + k]][-1] if len(board['ABCDEFG'[col_index + k]]) > 0 else False) for k in range(4) if col_index + k < 7):\n                return color\n            \n            # Check diagonal (/)\n            if all((color == board['ABCDEFG'[col_index + k]][-1] if len(board['ABCDEFG'[col_index + k]]) > 0 else False) for k in range(4) if col_index - k >= 0):\n                return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for sign in [1, -1]:\n                for step in range(1, 4):\n                    r = row + sign * step * direction[0]\n                    c = [col for col in 'ABCDEFG'].index(col) + sign * step * direction[1]\n                    if 0 <= r < 6 and 0 <= c < 7 and (board['ABCDEFG'[c]][r] == color):\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] == color):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    if (c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        grid[col].append(color)\n\n        # Check for a win after each move\n        if check_winner(grid, col, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, col, color):\n    # Check vertical\n    if len(grid[col]) >= 4 and all(grid[col][i] == color for i in range(len(grid[col]) - 4, len(grid[col]))):\n        return True\n\n    # Check horizontal\n    for c in range(7):\n        if all((grid[chr(c + 65)][-1] == color if len(grid[chr(c + 65)]) > 0 else False) for c in range(max(0, ord(col) - 65 - 3), min(7, ord(col) - 65 + 1))):\n            return True\n\n    # Check diagonal \\\n    for r in range(3, 6):\n        for c in range(4):\n            if all((grid[chr(c + 65)][r - i] == color if len(grid[chr(c + 65)]) > r - i else False) for i in range(4)):\n                return True\n\n    # Check diagonal /\n    for r in range(3):\n        for c in range(4):\n            if all((grid[chr(c + 65)][r + i] == color if len(grid[chr(c + 65)]) > r + i else False) for i in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    if check_winner(\"Red\"):\n        return \"Red\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        player = player_turn[color]\n        \n        # Place the piece in the next available row\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n        \n        # Check for a win\n        if check_winner(grid, player):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, player):\n    # Check vertical, horizontal, and diagonal connections\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if grid[col][row] == player:\n                # Check vertical\n                if row <= 2 and all(grid[col][row+i] == player for i in range(4)):\n                    return True\n                # Check horizontal\n                for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n                    if all(grid[chr(c + ord('A'))][row] == player for c in range(c, c + 4)):\n                        return True\n                # Check diagonal \\\n                if row <= 2 and ord(col) <= 3 and all(grid[chr(ord(col) + i)][row + i] == player for i in range(4)):\n                    return True\n                # Check diagonal /\n                if row >= 3 and ord(col) <= 3 and all(grid[chr(ord(col) + i)][row - i] == player for i in range(4)):\n                    return True\n    return False\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row <= 2 and col >= 'D' and all(board[chr(ord(col)-i)][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if grid['ABCDEFG'[c]][r] is not None:\n                    color = grid['ABCDEFG'[c]][r]\n\n                    # Check vertical\n                    if r <= 2 and all(grid['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n\n                    # Check horizontal\n                    if c <= 3 and all(grid['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(grid['ABCDEFG'[c+i]][r-i] == color for i in range(4)):\n                        return color\n\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(grid['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check vertical\n            for col in 'ABCDEFG':\n                count = 0\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check diagonal \\\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n\n            # Check diagonal /\n            for col in range(4):\n                for row in range(3):\n                    if all(grid[chr(col + ord('A') + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row+4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col)-k)][row+k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece.split('_')[1]\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Yellow', 'Red']:\n        for col in range(7):\n            for row in range(6):\n                if (col <= 3 and all(board['ABCDEFG'[col + i]][row] == color for i in range(4))) or \\\n                   (row <= 2 and all(board['ABCDEFG'[col]][row + i] == color for i in range(4))) or \\\n                   (col <= 3 and row <= 2 and all(board['ABCDEFG'[col + i]][row + i] == color for i in range(4))) or \\\n                   (col <= 3 and row >= 3 and all(board['ABCDEFG'[col + i]][row - i] == color for i in range(4))):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == color for (col, row) in zip('ABCD', range(row, row - 4, -1))):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == color for (col, row) in zip('ABCD', range(row, row + 4))):\n                        return True\n        return False\n    \n    if check_winner('Yellow'):\n        return \"Yellow\"\n    elif check_winner('Red'):\n        return \"Red\"\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if row >= 3:  # Check vertical\n            if all(board[col][row - i] == color for i in range(4)):\n                return color\n        \n        # Check horizontal\n        for c in range(max(0, ord(col) - 65 - 3), min(7, ord(col) - 65 + 1)):\n            if all(board[chr(65 + c + i)][row] == color for i in range(4)):\n                return color\n        \n        # Check diagonal \\\n        for i in range(-3, 1):\n            if 0 <= row + i < 6 and 0 <= ord(col) - 65 + i < 7:\n                if all(board[chr(65 + ord(col) - 65 + j)][row + i + j] == color for j in range(4)):\n                    return color\n        \n        # Check diagonal /\n        for i in range(-3, 1):\n            if 0 <= row - i < 6 and 0 <= ord(col) - 65 + i < 7:\n                if all(board[chr(65 + ord(col) - 65 + j)][row - i + j] == color for j in range(4)):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_win(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y in ROWS):\n                return True\n        return False\n\n    if check_win('Yellow'):\n        return \"Yellow\"\n    elif check_win('Red'):\n        return \"Red\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for win_condition in LINES:\n        colors = [board[col][row] for col, row in win_condition if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col_start in range(7):\n            for row_start in range(6):\n                if board['ABCDEFG'[col_start]][row_start] == color:\n                    # Check vertical\n                    if row_start <= 2 and all(board['ABCDEFG'[col_start]][row_start + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col_start <= 3 and all(board['ABCDEFG'[col_start + k]][row_start] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col_start <= 3 and row_start <= 2 and all(board['ABCDEFG'[col_start + k]][row_start + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col_start <= 3 and row_start >= 3 and all(board['ABCDEFG'[col_start + k]][row_start - k] == color for k in range(4)):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': 0, 'Yellow': 0}\n\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        player_moves[color] += 1\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * d * step\n                    c = grid[col].index(color) + direction[1] * d * step\n\n                    if 0 <= r < 6 and 0 <= c < 7 and grid[list(grid.keys())[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n    for color in ['Yellow', 'Red']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col)+k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(grid[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(grid[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    if (c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if grid[chr(c + 65)][r] == color:\n                    if (r <= 2 and all(grid[chr(c + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and all(grid[chr(c + i + 65)][r] == color for i in range(4))) or \\\n                       (r <= 2 and c <= 3 and all(grid[chr(c + i + 65)][r + i] == color for i in range(4))) or \\\n                       (r >= 3 and c <= 3 and all(grid[chr(c + i + 65)][r - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_turn = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        player = player_turn[color]\n        \n        # Place the piece in the next available row\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n        \n        # Check for a win\n        if check_winner(grid, player):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, player):\n    # Check vertical, horizontal, and both diagonals\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == player:\n                # Check vertical\n                if row <= 2 and all(grid[col][row+i] == player for i in range(4)):\n                    return True\n                # Check horizontal\n                for c in range(max(0, ord(col) - ord('A') - 3), min(4, ord(col) - ord('A') + 1)):\n                    if all(grid[chr(c + ord('A'))][row] == player for c in range(c, c + 4)):\n                        return True\n                # Check diagonal \\\n                if row <= 2 and ord(col) <= 3 and all(grid[chr(ord(col) + i)][row + i] == player for i in range(4)):\n                    return True\n                # Check diagonal /\n                if row >= 3 and ord(col) <= 3 and all(grid[chr(ord(col) + i)][row - i] == player for i in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for c in range(len(board)):\n                for r in range(6):\n                    if board[chr(c + ord('A'))][r] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            nc, nr = c + direction[0] * step, r + direction[1] * step\n                            if 0 <= nc < 7 and 0 <= nr < 6 and board[chr(nc + ord('A'))][nr] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return True\n        return False\n\n    if check_winner('Yellow'):\n        return 'Yellow'\n    if check_winner('Red'):\n        return 'Red'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for winning conditions\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal\n            count = 1\n            \n            # Check in one direction\n            for step in range(1, 4):\n                r = row + direction[1] * step\n                c = 'ABCDEFG'.index(col) + direction[0] * step\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            # Check in the opposite direction\n            for step in range(1, 4):\n                r = row - direction[1] * step\n                c = 'ABCDEFG'.index(col) - direction[0] * step\n                if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                    count += 1\n                else:\n                    break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d_col, d_row in directions:\n        count = 1\n        for step in range(1, 4):\n            c = chr(ord(col) + d_col * step)\n            r = row + d_row * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c = chr(ord(col) - d_col * step)\n            r = row - d_row * step\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        board[column].append(color)\n        \n        # Check for a winning move\n        if len(board[column]) >= 4:\n            count = {'Red': 0, 'Yellow': 0}\n            # Check vertical\n            for row in range(len(board[column]) - 4, len(board[column])):\n                count[board[column][row]] += 1\n            \n            if count['Red'] == 4:\n                return 'Red'\n            if count['Yellow'] == 4:\n                return 'Yellow'\n        \n        # Check horizontal and diagonal\n        for c in board:\n            count = {'Red': 0, 'Yellow': 0}\n            for row in range(len(board[c])):\n                count[board[c][row]] += 1\n                if count['Red'] == 4:\n                    return 'Red'\n                if count['Yellow'] == 4:\n                    return 'Yellow'\n        \n        for row in range(len(board[column])):\n            for d in range(-3, 1):\n                count = {'Red': 0, 'Yellow': 0}\n                for i in range(4):\n                    col = chr(ord(column) + d + i)\n                    if col in board and row < len(board[col]):\n                        count[board[col][row]] += 1\n                if count['Red'] == 4:\n                    return 'Red'\n                if count['Yellow'] == 4:\n                    return 'Yellow'\n    \n    return 'Draw' if len(pieces_positions) == 42 else 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, column, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for sign in (1, -1):\n            for step in range(1, 4):\n                x, y = chr(ord(column) + dx * step * sign), row + dy * step * sign\n                if 0 <= y < 6 and x in board and board[x][y] == color:\n                    count += 1\n                else:\n                    break\n                    \n                if count == 4:\n                    return True\n                    \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        # Check for a win\n        for i in range(7):\n            for j in range(6):\n                if grid[chr(65 + i)][j] is not None:\n                    color = grid[chr(65 + i)][j]\n                    # Check horizontal\n                    if i + 3 < 7 and all(grid[chr(65 + k)][j] == color for k in range(i, i + 4)):\n                        return color\n                    # Check vertical\n                    if j + 3 < 6 and all(grid[chr(65 + i)][j + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if i + 3 < 7 and j - 3 >= 0 and all(grid[chr(65 + i + k)][j - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if i + 3 < 7 and j + 3 < 6 and all(grid[chr(65 + i + k)][j + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                if check_direction(grid, col, row, color):\n                    return True\n    return False\n\ndef check_direction(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 0\n        for step in range(4):\n            x = ord(col) - ord('A') + step * dx\n            y = row + step * dy\n            if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = next((r for r in range(6) if grid[col][r] is None), None)\n        if row is not None:\n            grid[col][row] = player\n            player_moves[player].append((col, row))\n            if check_winner(player_moves[player]):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for (c, r) in moves:\n        if all((c, r + i) in moves for i in range(4)) or \\\n           all((chr(ord(c) + i), r) in moves for i in range(4)) or \\\n           all((chr(ord(c) + i), r + i) in moves for i in range(4)) or \\\n           all((chr(ord(c) + i), r - i) in moves for i in range(4)):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if c < 4 and all(board['ABCDEFG'[c+i]][r] == color for i in range(4)):\n                        return color\n                    if r < 3 and all(board['ABCDEFG'[c]][r+i] == color for i in range(4)):\n                        return color\n                    if c < 4 and r < 3 and all(board['ABCDEFG'[c+i]][r+i] == color for i in range(4)):\n                        return color\n                    if c < 4 and r > 2 and all(board['ABCDEFG'[c+i]][r-i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[c][r] == color for c, r in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [\n            [(0, 1), (0, -1)],  # vertical\n            [(1, 0), (-1, 0)],  # horizontal\n            [(1, 1), (-1, -1)], # diagonal \\\n            [(1, -1), (-1, 1)]  # diagonal /\n        ]:\n            count = 1\n            for (dx, dy) in direction:\n                x, y = ord(col) - ord('A'), row\n                while 0 <= x + dx < 7 and 0 <= y + dy < 6:\n                    x += dx\n                    y += dy\n                    if x < 0 or x >= 7 or y < 0 or y >= 6 or board[chr(x + ord('A'))][y] != color:\n                        break\n                    count += 1\n                    if count == 4:\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for i in range(6):\n            for j in range(7):\n                if board['ABCDEFG'[j]][i] == color:\n                    # Check horizontal\n                    if j <= 3 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i <= 2 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j <= 3 and i >= 3 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j <= 3 and i <= 2 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in (-1, 1):\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(col) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    if check_winner(\"Red\"):\n        return \"Red\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < len(board[x])):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        player_moves[color].append((column, row))\n\n        if check_winner(player_moves[color]):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(positions):\n    positions_set = set(positions)\n    for x, y in positions:\n        if all((chr(col), row) in positions_set for col in range(ord(x) - 3, ord(x) + 1) for row in [y]):\n            return True\n        if all((x, row) in positions_set for row in range(y, y + 4)):\n            return True\n        if all((chr(ord(x) + k), y + k) in positions_set for k in range(4)):\n            return True\n        if all((chr(ord(x) + k), y - k) in positions_set for k in range(4)):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_positions = {'Red': set(), 'Yellow': set()}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        player_positions[color].add((column, row))\n        \n        for line in LINES:\n            if line & player_positions[color] == line:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check for vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check for horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check for diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check for diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if x in grid and y < 6):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        col, player = move.split('_')\n        row = next((r for r in range(6) if grid[col][r] is None), None)\n        if row is not None:\n            grid[col][row] = player\n            player_moves[player].append((col, row))\n            if check_winner(player_moves[player]):\n                return player\n    \n    return \"Draw\"\n\ndef check_winner(moves):\n    for (c, r) in moves:\n        if all((c, r + i) in moves for i in range(4)) or \\\n           all((chr(ord(c) + i), r) in moves for i in range(4)) or \\\n           all((chr(ord(c) + i), r + i) in moves for i in range(4)) or \\\n           all((chr(ord(c) + i), r - i) in moves for i in range(4)):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                if check_winner(board, color):\n                    return color\n                break\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_to_check for col, row in line) for line in LINES):\n                return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        # Check for a win after each move\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCD'[ord(col) - ord('A'):ord(col) - ord('A') + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal down-right\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal down-left\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - i)][row + i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    if check_winner(\"Red\"):\n        return \"Red\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    moves = []\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                moves.append((column, row, color))\n                break\n\n        for c, r, player in moves:\n            # Check for winning conditions\n            for line in LINES:\n                if (c, r) in line and all(grid[col][row] == player for col, row in line):\n                    return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < len(board[x])):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col = piece[0]\n        color = piece.split('_')[1]\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_directions(board, color, col, row):\n                    return True\n    return False\n\ndef check_directions(board, color, col, row):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            r, c = row, ord(col) - ord('A')\n            while 0 <= r + step * d[1] < 6 and 0 <= c + step * d[0] < 7:\n                r += step * d[1]\n                c += step * d[0]\n                if board[chr(c + ord('A'))][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```"
        ]
    }
}