{
    "0": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for line in LINES:\n            values = [board[c][r] for c, r in line if c in board and r < 6]\n            if values.count(\"Red\") == 4:\n                return \"Red\"\n            elif values.count(\"Yellow\") == 4:\n                return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= r + col_offset < len(board[c]) and all(\n                            board[chr(ord(c) + i)][r] == color for i in range(4) if 0 <= ord(c) + i < 7):\n                            return color\n                    # Check diagonal /\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and 0 <= ord(c) + d < 7 and all(\n                            board[chr(ord(c) + i)][r - i] == color for i in range(4) if 0 <= ord(c) + i < 7 and r - i >= 0):\n                            return color\n                    # Check diagonal \\\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and 0 <= ord(c) - d < 7 and all(\n                            board[chr(ord(c) - i)][r - i] == color for i in range(4) if 0 <= ord(c) - i < 7 and r - i >= 0):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) + k]][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board['ABCDEFG'[ord(column) - k]][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for column in grid:\n            for row in range(6):\n                if grid[column][row] == color:\n                    if ((column, row) in LINES or \n                        (column, row + 1) in LINES or \n                        (column, row + 2) in LINES or \n                        (column, row + 3) in LINES):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] == color):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if r < 6 and board[c][r] is not None):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6)):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c][row] == color if c in board and len(board[c]) > row else False) for c in 'ABCDEFG'):\n                    return color\n    \n    # Check vertical and diagonal conditions\n    for column in 'ABCDEFG':\n        for row in range(len(board[column])):\n            if row >= 3:\n                if all(board[column][row - i] == board[column][row] for i in range(4)):\n                    return board[column][row]\n\n            if column in 'ABCDEFG' and column != 'G':\n                for i in range(1, 4):\n                    if column != 'A' and row >= 3:\n                        if all(board[c][row - i] == board[column][row] for c in (column, chr(ord(column) + i)) if c in board and len(board[c]) > row - i):\n                            return board[column][row]\n\n                    if column != 'A' and row < 3:\n                        if all(board[c][row + i] == board[column][row] for c in (column, chr(ord(column) - i)) if c in board and len(board[c]) > row + i):\n                            return board[column][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n\n    return None\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if board[col][row] is not None]\n            if len(colors) == 4 and all(c == colors[0] for c in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is None:\n                    continue\n                color = grid[col][row]\n                # Check horizontal\n                if col <= 'D' and all(grid[col][row] == color for col in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                    return color\n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if col >= 'D' and row <= 2 and all(grid[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                    return color\n        return None\n\n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    for line in LINES:\n                        if (col, row) in line and all(board[c][r] == color for c, r in line):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6):\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(ord('A') + c)][r] is not None:\n                    if (c <= 3 and all(board[chr(ord('A') + c + i)][r] == board[chr(ord('A') + c)][r] for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(ord('A') + c)][r + i] == board[chr(ord('A') + c)][r] for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(ord('A') + c + i)][r + i] == board[chr(ord('A') + c)][r] for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(ord('A') + c + i)][r - i] == board[chr(ord('A') + c)][r] for i in range(4))):\n                        return board[chr(ord('A') + c)][r]\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * d_col)\n        r = row + i * d_row\n        if 0 <= r < 6 and c in board and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for column in board:\n                for row in range(6):\n                    if board[column][row] == color:\n                        if (column, row) in LINES:\n                            for line in LINES:\n                                if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                                    return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:\n                    if (c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win condition after each move\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] is not None:\n                    # Check horizontal\n                    if c < 4 and all(board[chr(c + i + 65)][r] == board[chr(c + 65)][r] for i in range(4)):\n                        return board[chr(c + 65)][r]\n                    # Check vertical\n                    if r < 3 and all(board[chr(c + 65)][r + i] == board[chr(c + 65)][r] for i in range(4)):\n                        return board[chr(c + 65)][r]\n                    # Check diagonal /\n                    if c < 4 and r > 2 and all(board[chr(c + i + 65)][r - i] == board[chr(c + 65)][r] for i in range(4)):\n                        return board[chr(c + 65)][r]\n                    # Check diagonal \\\n                    if c < 4 and r < 3 and all(board[chr(c + i + 65)][r + i] == board[chr(c + 65)][r] for i in range(4)):\n                        return board[chr(c + 65)][r]\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'DEFG'[ord(col)-65:ord(col)+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[col][row] == color for col, row in zip('DEFG'[ord(col)-65:ord(col)+4], range(row, row - 4, -1))):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[col][row] == color for col, row in zip('DEFG'[ord(col)-65:ord(col)+4], range(row, row + 4))):\n                        return color\n        return None\n    \n    winner = check_winner(\"Red\") or check_winner(\"Yellow\")\n    return winner if winner else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(c + 65)][r] == color:  # convert c to column letter\n                        count = 0\n                        for i in range(4):\n                            col_idx = c + direction[0] * i\n                            row_idx = r + direction[1] * i\n                            if 0 <= col_idx < 7 and 0 <= row_idx < 6 and board[chr(col_idx + 65)][row_idx] == color:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, col_dir, row_dir):\n    count = 0\n    for step in range(4):\n        check_col = chr(ord(col) + step * col_dir)\n        check_row = row + step * row_dir\n        if check_col in board and 0 <= check_row < 6:\n            if board[check_col][check_row] == color:\n                count += 1\n            else:\n                break\n        else:\n            break\n    return count == 4\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n            \n            # Check vertical\n            for col in 'ABCDEFG':\n                count = 0\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n            \n            # Check diagonal \\\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n            \n            # Check diagonal /\n            for col in range(4):\n                for row in range(3):\n                    if all(grid[chr(col + ord('A') + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal (down-right)\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal (down-left)\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) - 61]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal (down-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (down-left)\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    \n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[(ord(col) - ord('A')): (ord(col) - ord('A')) + 4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in LINES:\n            count = 0\n            for pos in direction:\n                if board[pos[0]][pos[1]] == color:\n                    count += 1\n                else:\n                    count = 0\n                if count == 4:\n                    return color\n    \n    return \"Draw\"\n```",
            "logp": null
        },
        {
            "content": "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for direction in [\n            [(0, 1), (0, -1)],  # vertical\n            [(1, 0), (-1, 0)],  # horizontal\n            [(1, 1), (-1, -1)], # diagonal \\\n            [(1, -1), (-1, 1)]  # diagonal /\n        ]:\n            count = 1\n            for (dx, dy) in direction:\n                x, y = 'ABCDEFG'.index(column), row\n                while 0 <= x + dx < 7 and 0 <= y + dy < 6:\n                    x += dx\n                    y += dy\n                    if x < 0 or y < 0 or y >= 6 or board['ABCDEFG'[x]][y] != color:\n                        break\n                    count += 1\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "logp": null
        }
    ]
}