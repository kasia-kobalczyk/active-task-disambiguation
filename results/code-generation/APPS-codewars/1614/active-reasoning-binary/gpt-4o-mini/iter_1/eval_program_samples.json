{
    "0": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c].count(color) >= 1 for c in line if c in board):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        if all(board[col][row] == 'Red' for col, row in line if (col, row) in line):\n            return \"Red\"\n        if all(board[col][row] == 'Yellow' for col, row in line if (col, row) in line):\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            colors = {board[col][row] for col, row in line if board[col][row] is not None}\n            if len(colors) == 1 and None not in colors:\n                return colors.pop()\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < len(grid[c]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n                \n        # Check for a win after every move\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    if check_win(grid, col, row):\n                        return grid[col][row]\n    \n    return \"Draw\"\n\ndef check_win(grid, col, row):\n    color = grid[col][row]\n    # Check vertical\n    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n        return True\n    # Check horizontal\n    for c in range(max(0, ord(col) - ord('A') - 3), min(7, ord(col) - ord('A') + 1)):\n        if all(grid[chr(c + ord('A'))][row] == color for i in range(4) if 0 <= c + i < 7):\n            return True\n    # Check diagonal \\\n    for offset in range(-3, 1):\n        if 0 <= row + offset < 6 and 0 <= ord(col) - ord('A') + offset < 7:\n            if all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                return True\n    # Check diagonal /\n    for offset in range(-3, 1):\n        if 0 <= row - offset < 6 and 0 <= ord(col) - ord('A') + offset < 7:\n            if all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition\n        if len(board[column]) >= 4:\n            for row in range(len(board[column]) - 1, len(board[column]) - 5, -1):\n                if row < 0:\n                    continue\n                if all((board[c][row] == color if c in board and len(board[c]) > row else False) for c in 'ABCDEFG'):\n                    return color\n    \n    # Check vertical and diagonal conditions\n    for column in 'ABCDEFG':\n        for row in range(len(board[column])):\n            if row >= 3:\n                if all(board[column][row - i] == board[column][row] for i in range(4)):\n                    return board[column][row]\n\n            if column in board and row < len(board[column]) - 3:\n                for col_offset in range(-3, 1):\n                    col_index = ord(column) - ord('A') + col_offset\n                    if 0 <= col_index < 7:\n                        if len(board[chr(col_index + ord('A'))]) > row:\n                            if all(board[chr(col_index + ord('A'))][row + i] == board[column][row] for i in range(4)):\n                                return board[column][row]\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    if check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            return \"Invalid move\"\n        \n        if check_winner(board, column, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, column, color):\n    # Check vertical\n    if len(board[column]) >= 4 and all(c == color for c in board[column][-4:]):\n        return True\n    \n    # Check horizontal\n    row_index = len(board[column]) - 1\n    for c in 'ABCDEFG':\n        if board[c][-1] == color and row_index < len(board[c]):\n            if sum(1 for k in range(-3, 1) if row_index < len(board[c]) and board[c][row_index] == color) == 4:\n                return True\n    \n    # Check diagonal \\\n    for c in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        for r in range(3, 7):\n            if all(board[chr(c + i)][r - i] == color for i in range(4) if 0 <= c + i < 7 and r - i < 6):\n                return True\n    \n    # Check diagonal /\n    for c in range(max(0, ord(column) - 3), min(7, ord(column) + 1)):\n        for r in range(0, 4):\n            if all(board[chr(c + i)][r + i] == color for i in range(4) if 0 <= c + i < 7 and r + i < 6):\n                return True\n\n    return False\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        # Check for a win\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return \"Red\"\n    if check_winner('Yellow'):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row+k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col)+k)][row+k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col)+k)][row-k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for line in LINES:\n            if all(grid[c][r] == color for c, r in line if (c in grid) and (r < len(grid[c]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line]\n        if colors.count('Red') == 4:\n            return \"Red\"\n        if colors.count('Yellow') == 4:\n            return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col)-65:ord(col)-65+4]):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_to_check in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color_to_check for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                    return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for win_positions in LINES:\n        colors = {color: 0 for color in ['Red', 'Yellow']}\n        for position in win_positions:\n            col, row = position\n            if board[col][row] is not None:\n                colors[board[col][row]] += 1\n        if colors['Red'] == 4:\n            return 'Red'\n        if colors['Yellow'] == 4:\n            return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c].count(color) > 0 and board[c][r] == color for c, r in line):\n                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all((col, row) in [(c, r) for c in grid for r in range(6) if grid[c][r] == color] for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color_check:\n                        if (col, row) in board and \\\n                           (col, row + 1) in board and \\\n                           (col, row + 2) in board and \\\n                           (col, row + 3) in board and \\\n                           all(board[col][row + k] == color_check for k in range(4)):\n                            return color_check\n                        if (col, row) in board and \\\n                           (col + 1, row) in board and \\\n                           (col + 2, row) in board and \\\n                           (col + 3, row) in board and \\\n                           all(board[col + k][row] == color_check for k in range(4)):\n                            return color_check\n                        if (col, row) in board and \\\n                           (col + 1, row + 1) in board and \\\n                           (col + 2, row + 2) in board and \\\n                           (col + 3, row + 3) in board and \\\n                           all(board[col + k][row + k] == color_check for k in range(4)):\n                            return color_check\n                        if (col, row) in board and \\\n                           (col + 1, row - 1) in board and \\\n                           (col + 2, row - 2) in board and \\\n                           (col + 3, row - 3) in board and \\\n                           all(board[col + k][row - k] == color_check for k in range(4)):\n                            return color_check\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n\n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(col + 65)][row] == color:\n                    if (col <= 3 and all(grid[chr(col + k + 65)][row] == color for k in range(4))) or \\\n                       (row <= 2 and all(grid[chr(col + 65)][row + k] == color for k in range(4))) or \\\n                       (col <= 3 and row <= 2 and all(grid[chr(col + k + 65)][row + k] == color for k in range(4))) or \\\n                       (col <= 3 and row >= 3 and all(grid[chr(col + k + 65)][row - k] == color for k in range(4))):\n                        return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                if board[col].count(color) >= 4:\n                    for start in range(6):\n                        if start + 3 < 6 and all(board[col][start + i] == color for i in range(4)):\n                            return color\n                for row in range(6):\n                    if board[col][row] == color:\n                        if row < 3 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        if col in 'ABCDEFG'[:4] and row < 3 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        if col in 'ABCDEFG'[:4] and row > 2 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [] for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        grid[col].append(color)\n\n        # Check if this move caused a win\n        if check_winner(grid, col, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, col, color):\n    rows = {col: len(grid[col]) - 1 for col in grid}\n    for r in range(6):\n        for c in range(7):\n            if grid[chr(c + 65)] and rows[chr(c + 65)] >= r and grid[chr(c + 65)][rows[chr(c + 65)]] == color:\n                if (check_direction(grid, c, r, 1, 0, color) or  # Horizontal\n                    check_direction(grid, c, r, 0, 1, color) or  # Vertical\n                    check_direction(grid, c, r, 1, 1, color) or  # Diagonal \\\n                    check_direction(grid, c, r, 1, -1, color)):  # Diagonal /\n                    return True\n    return False\n\ndef check_direction(grid, c, r, dc, dr, color):\n    count = 0\n    for i in range(4):\n        nc, nr = c + i * dc, r + i * dr\n        if 0 <= nc < 7 and 0 <= nr < 6 and (grid[chr(nc + 65)] and len(grid[chr(nc + 65)]) > nr and grid[chr(nc + 65)][len(grid[chr(nc + 65)]) - 1 - nr] == color):\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for step in range(4):\n            c = chr(ord(col) + step * dc)\n            r = row + step * dr\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        # Check for winning condition\n        if check_winner(grid, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(grid, color):\n    for col in grid:\n        for row in range(6):\n            if grid[col][row] == color:\n                # Check horizontal\n                if col in 'ABCDEFG'[:4] and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                    return True\n                # Check vertical\n                if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                    return True\n                # Check diagonal /\n                if col in 'ABCDEFG'[:4] and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                    return True\n                # Check diagonal \\\n                if col in 'ABCDEFG'[:4] and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if check_winner(board, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    return (check_direction(board, col, row, color, 1, 0) or  # Horizontal\n            check_direction(board, col, row, color, 0, 1) or  # Vertical\n            check_direction(board, col, row, color, 1, 1) or  # Diagonal \\\n            check_direction(board, col, row, color, 1, -1))   # Diagonal /\n\ndef check_direction(board, col, row, color, d_col, d_row):\n    count = 0\n    for step in range(4):\n        new_col = chr(ord(col) + d_col * step)\n        new_row = row + d_row * step\n        if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win condition after each move\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col <= 3 and\n                        board[chr(col + 65)][row] == color and\n                        board[chr(col + 66)][row] == color and\n                        board[chr(col + 67)][row] == color and\n                        board[chr(col + 68)][row] == color):\n                        return color\n                    if (row <= 2 and\n                        board[chr(col + 65)][row] == color and\n                        board[chr(col + 65)][row + 1] == color and\n                        board[chr(col + 65)][row + 2] == color and\n                        board[chr(col + 65)][row + 3] == color):\n                        return color\n                    if (col <= 3 and row <= 2 and\n                        board[chr(col + 65)][row] == color and\n                        board[chr(col + 66)][row + 1] == color and\n                        board[chr(col + 67)][row + 2] == color and\n                        board[chr(col + 68)][row + 3] == color):\n                        return color\n                    if (col <= 3 and row >= 3 and\n                        board[chr(col + 65)][row] == color and\n                        board[chr(col + 66)][row - 1] == color and\n                        board[chr(col + 67)][row - 2] == color and\n                        board[chr(col + 68)][row - 3] == color):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in COLUMNS:\n            for row in ROWS:\n                if board[col][row] is None:\n                    continue\n                \n                # Check vertical\n                if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                    return board[col][row]\n                \n                # Check horizontal\n                if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                    return board[col][row]\n                \n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                    return board[col][row]\n                \n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4)):\n                    return board[col][row]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for player in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(col + 65)][row] == player:\n                        if col + 3 < 7 and all(board[chr(col + i + 65)][row] == player for i in range(4)):\n                            return player\n                        if row + 3 < 6 and all(board[chr(col + 65)][row + i] == player for i in range(4)):\n                            return player\n                        if col + 3 < 7 and row + 3 < 6 and all(board[chr(col + i + 65)][row + i] == player for i in range(4)):\n                            return player\n                        if col + 3 < 7 and row - 3 >= 0 and all(board[chr(col + i + 65)][row - i] == player for i in range(4)):\n                            return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        check_col = chr(ord(col) + delta_col * step)\n        check_row = row + delta_row * step\n        if check_col in board and 0 <= check_row < 6:\n            if board[check_col][check_row] == color:\n                count += 1\n            else:\n                break\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        if (row <= 2 and all(board[col][row+k] == color for k in range(4))) or \\\n                           (col <= 'D' and all(board[chr(ord(col)+k)][row] == color for k in range(4))) or \\\n                           (col <= 'D' and row <= 2 and all(board[chr(ord(col)+k)][row+k] == color for k in range(4))) or \\\n                           (col >= 'D' and row <= 2 and all(board[chr(ord(col)-k)][row+k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for win condition\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n            \n            # Check vertical\n            for col in 'ABCDEFG':\n                count = 0\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n            \n            # Check diagonal \\\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n            \n            # Check diagonal /\n            for col in range(4):\n                for row in range(6):\n                    if row >= 3 and all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == player:\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + k] == player for k in range(4)):\n                        return player\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + k)][row] == player for k in range(4)):\n                        return player\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == player for k in range(4)):\n                        return player\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == player for k in range(4)):\n                        return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n\n                if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                    return color\n                if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                    return color\n                if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                    return color\n                if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n\n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board['ABCDEFG'[c]][r] is not None:\n                    if c < 4:  # Check horizontal\n                        if all(board['ABCDEFG'[c + i]][r] == board['ABCDEFG'[c]][r] for i in range(4)):\n                            return board['ABCDEFG'[c]][r]\n                    if r < 3:  # Check vertical\n                        if all(board['ABCDEFG'[c]][r + i] == board['ABCDEFG'[c]][r] for i in range(4)):\n                            return board['ABCDEFG'[c]][r]\n                    if c < 4 and r < 3:  # Check diagonal \\\n                        if all(board['ABCDEFG'[c + i]][r + i] == board['ABCDEFG'[c]][r] for i in range(4)):\n                            return board['ABCDEFG'[c]][r]\n                    if c < 4 and r > 2:  # Check diagonal /\n                        if all(board['ABCDEFG'[c + i]][r - i] == board['ABCDEFG'[c]][r] for i in range(4)):\n                            return board['ABCDEFG'[c]][r]\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        # Check for a win condition\n        if check_winner(board, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dx, dy in directions:\n        count = 1\n        for step in [1, -1]:\n            x, y = ord(col) - ord('A'), row\n            while 0 <= x + step * dx < 7 and 0 <= y + step * dy < 6:\n                if board[chr(x + ord('A'))][y + step * dy] == color:\n                    count += 1\n                else:\n                    break\n                x += step * dx\n                y += step * dy\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if (check_direction(board, col, row, 1, 0, color) or  # horizontal\n                    check_direction(board, col, row, 0, 1, color) or  # vertical\n                    check_direction(board, col, row, 1, 1, color) or  # diagonal /\n                    check_direction(board, col, row, 1, -1, color)):  # diagonal \\\n                    return True\n    return False\n\ndef check_direction(board, col, row, delta_col, delta_row, color):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if grid[chr(col + 65)][row] == color:\n                        # Check horizontal\n                        if col <= 3 and all(grid[chr(col + i + 65)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[chr(col + 65)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 3 and row >= 3 and all(grid[chr(col + i + 65)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 3 and row <= 2 and all(grid[chr(col + i + 65)][row + i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if board[chr(65 + col)][row] == color:\n                        if (col <= 3 and all(board[chr(65 + col + i)][row] == color for i in range(4)) or\n                            row <= 2 and all(board[chr(65 + col)][row + i] == color for i in range(4)) or\n                            col <= 3 and row <= 2 and all(board[chr(65 + col + i)][row + i] == color for i in range(4)) or\n                            col <= 3 and row >= 3 and all(board[chr(65 + col + i)][row - i] == color for i in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for step in [1, -1]:\n                r, c = row, ord(col) - ord('A')\n                while 0 <= r + step * direction[0] < 6 and 0 <= c + step * direction[1] < 7:\n                    r += step * direction[0]\n                    c += step * direction[1]\n                    if r < 0 or c < 0 or c >= 7 or board[chr(c + ord('A'))][r] != color:\n                        break\n                    count += 1\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if col < 'E' and all(board[col][row] == board[chr(ord(col) + i)][row] for i in range(4)):\n                        return board[col][row]\n                    if row < 3 and all(board[col][row] == board[col][row + i] for i in range(4)):\n                        return board[col][row]\n                    if col < 'E' and row < 3 and all(board[col][row] == board[chr(ord(col) + i)][row + i] for i in range(4)):\n                        return board[col][row]\n                    if col < 'E' and row > 2 and all(board[col][row] == board[chr(ord(col) + i)][row - i] for i in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        # Check for a win after the current move\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(board[chr(c - i + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) - 61]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for win conditions\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win after each move\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if any(all(board[c][r] == board[c_offset][r_offset]\n                               for c_offset, r_offset in line)\n                           for line in LINES):\n                        return board[c][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        # Check for a winning condition\n        if check_winner(grid, column, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, column, row, color):\n    # Check vertical\n    if count_in_direction(grid, column, row, color, 0, 1) >= 4:\n        return True\n    # Check horizontal\n    if count_in_direction(grid, column, row, color, 1, 0) + count_in_direction(grid, column, row, color, -1, 0) >= 4:\n        return True\n    # Check diagonal /\n    if count_in_direction(grid, column, row, color, 1, -1) + count_in_direction(grid, column, row, color, -1, 1) >= 4:\n        return True\n    # Check diagonal \\\n    if count_in_direction(grid, column, row, color, 1, 1) + count_in_direction(grid, column, row, color, -1, -1) >= 4:\n        return True\n    \n    return False\n\ndef count_in_direction(grid, column, row, color, dir_x, dir_y):\n    count = 0\n    while 0 <= row < 6 and column in grid and grid[column][row] == color:\n        count += 1\n        row += dir_y\n        column = chr(ord(column) + dir_x)  # Move to the next column in the direction\n    return count\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for winner\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        # Check for a win\n        for i in range(6):\n            for j in range(7):\n                if board[chr(j + 65)][i] == color:\n                    # Check horizontal\n                    if j < 4 and all(board[chr(j + k + 65)][i] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if i < 3 and all(board[chr(j + 65)][i + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if j < 4 and i >= 3 and all(board[chr(j + k + 65)][i - k] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if j < 4 and i < 3 and all(board[chr(j + k + 65)][i + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if grid['ABCDEFG'[j]][i] == color:\n                        if (j + 3 < 7 and all(grid['ABCDEFG'[j+k]][i] == color for k in range(4)) or\n                            i + 3 < 6 and all(grid['ABCDEFG'[j]][i+k] == color for k in range(4)) or\n                            j + 3 < 7 and i + 3 < 6 and all(grid['ABCDEFG'[j+k]][i+k] == color for k in range(4)) or\n                            j - 3 >= 0 and i + 3 < 6 and all(grid['ABCDEFG'[j-k]][i+k] == color for k in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(6):\n                for j in range(7):\n                    if board['ABCDEFG'[j]][i] == color:\n                        if (j + 3 < 7 and all(board['ABCDEFG'[j + k]][i] == color for k in range(4))) or \\\n                           (i + 3 < 6 and all(board['ABCDEFG'[j]][i + k] == color for k in range(4))) or \\\n                           (j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j + k]][i + k] == color for k in range(4))) or \\\n                           (j - 3 >= 0 and i + 3 < 6 and all(board['ABCDEFG'[j - k]][i + k] == color for k in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color_to_check in ['Red', 'Yellow']:\n            for i in range(len(board)):\n                for j in range(6):\n                    if board[COLUMNS[i]][j] == color_to_check:\n                        # Check horizontal\n                        if i <= 3 and all(board[COLUMNS[i + k]][j] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Check vertical\n                        if j <= 2 and all(board[COLUMNS[i]][j + k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Check diagonal down-right\n                        if i <= 3 and j <= 2 and all(board[COLUMNS[i + k]][j + k] == color_to_check for k in range(4)):\n                            return color_to_check\n                        # Check diagonal up-right\n                        if i <= 3 and j >= 3 and all(board[COLUMNS[i + k]][j - k] == color_to_check for k in range(4)):\n                            return color_to_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        if len(board[col]) < 6:\n            board[col].append(color)\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * i * step)\n                new_row = row + d[1] * i * step\n                if new_col in board and new_row < len(board[new_col]) and new_row >= 0:\n                    if board[new_col][new_row] == color:\n                        count += 1\n                    else:\n                        break\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if (c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for victory\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == board[c][r] for i in range(4)):\n                        return board[c][r]\n                    # Check horizontal\n                    if c <= 'D' and all(board[chr(ord(c)+i)][r] == board[c][r] for i in range(4)):\n                        return board[c][r]\n                    # Check diagonal \\\n                    if r <= 2 and c <= 'D' and all(board[chr(ord(c)+i)][r+i] == board[c][r] for i in range(4)):\n                        return board[c][r]\n                    # Check diagonal /\n                    if r >= 3 and c <= 'D' and all(board[chr(ord(c)+i)][r-i] == board[c][r] for i in range(4)):\n                        return board[c][r]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if board[column][i] is None)\n        board[column][row] = color\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6 and board[x][y] is not None)):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    for line in LINES:\n        values = [grid[c][r] for c, r in line]\n        if values.count('Red') == 4:\n            return \"Red\"\n        if values.count('Yellow') == 4:\n            return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and y >= 0 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Continue\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column].append(color)\n        \n        # Check for a win condition after each move\n        for c in 'ABCDEFG':\n            for r in range(len(board[c])):\n                if board[c][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[c][r+i] == color for i in range(4)):\n                        return color\n                    # Check horizontal\n                    for col_offset in range(-3, 1):\n                        if 0 <= (r + col_offset) < len(board[c]) and \\\n                           all(board.get(chr(ord(c) + i), [])[r] == color for i in range(4) if 0 <= (ord(c) + i) < ord('H'))):\n                            return color\n                    # Check diagonal /\n                    for d in range(-3, 1):\n                        if 0 <= r + d < len(board[c]) and \\\n                           0 <= (ord(c) - d) < ord('H') and \\\n                           all(board.get(chr(ord(c) - i), [])[r + i] == color for i in range(4) if 0 <= (ord(c) - i) < ord('H'))):\n                            return color\n                    # Check diagonal \\\n                    for d in range(-3, 1):\n                        if 0 <= r - d < len(board[c]) and \\\n                           0 <= (ord(c) + d) < ord('H') and \\\n                           all(board.get(chr(ord(c) + i), [])[r - i] == color for i in range(4) if 0 <= (ord(c) + i) < ord('H'))):\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_check for col, row in line) for line in LINES):\n                return color_check\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y in range(6)):\n                return True\n        return False\n\n    if check_winner('Red'):\n        return 'Red'\n    elif check_winner('Yellow'):\n        return 'Yellow'\n    \n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column].append(color)\n        \n        if len(board[column]) > 6:\n            continue\n            \n        # Check for a win\n        for i in range(len(board[column]) - 3, len(board[column])):\n            if (board[column][i] == color and \n                (i >= 3 and all(board[column][i-j] == color for j in range(4)) or\n                 (column in 'ABCD' and all(board[chr(ord(column) - j)][i] == color for j in range(4)) if ord(column) - j >= ord('A') else False) or\n                 (column in 'ABCDEFG' and all(board[chr(ord(column) + j)][i-3] == color for j in range(4)) if ord(column) + j <= ord('G') else False)))):\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    if (all(grid[col][row + i] == color for i in range(4) if row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row] == color for i in range(4) if 0 <= ord(col) + i < 7) or\n                        all(grid[chr(ord(col) + i)][row + i] == color for i in range(4) if 0 <= ord(col) + i < 7 and row + i < 6) or\n                        all(grid[chr(ord(col) + i)][row - i] == color for i in range(4) if 0 <= ord(col) + i < 7 and row - i >= 0)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            colors = {board[col][row] for col, row in line if board[col][row] is not None}\n            if len(colors) == 1 and None not in colors:\n                return colors.pop()\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < len(board[c]) and board[c][r] is not None):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if board[col][row] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board) and (y < len(board[x]))):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in grid and all(grid[col][row] == color for col in 'ABCDEFG'[:7][\n                                'ABCDEFG'.index(col):][:4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) - k][row - k] == color for k in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col in grid and all(grid['ABCDEFG'[\n                                'ABCDEFG'.index(col) + k][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for i in range(6):\n        for j in range(7):\n            if board['ABCDEFG'[j]][i] == color:\n                if j + 3 < 7 and all(board['ABCDEFG'[j+k]][i] == color for k in range(4)):\n                    return True\n                if i + 3 < 6 and all(board['ABCDEFG'[j]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i + 3 < 6 and all(board['ABCDEFG'[j+k]][i+k] == color for k in range(4)):\n                    return True\n                if j + 3 < 7 and i - 3 >= 0 and all(board['ABCDEFG'[j+k]][i-k] == color for k in range(4)):\n                    return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color_check for col, row in line) for line in LINES):\n                return color_check\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for positions in LINES:\n            colors = [board[col][row] for col, row in positions if board[col][row] is not None]\n            if len(colors) == 4 and all(c == colors[0] for c in colors):\n                return colors[0]\n        return None\n    \n    winner = check_winner()\n    return winner if winner else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and col in board):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line if row >= 0 and row < 6 and board[col][row] is not None):\n                    return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and len(set(colors)) == 1:\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(col + 65)][row] == color:\n                    if col + 3 < 7 and all(grid[chr(col + i + 65)][row] == color for i in range(4)):\n                        return color\n                    if row + 3 < 6 and all(grid[chr(col + 65)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row + 3 < 6 and all(grid[chr(col + i + 65)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row - 3 >= 0 and all(grid[chr(col + i + 65)][row - i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and y >= 0):\n                return color\n    \n    return \"Draw\"\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for column in board:\n                for row in range(6):\n                    if board[column][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[column][row+k] == color for k in range(4)):\n                            return color\n                        # Check horizontal\n                        for c in range(max(0, ord(column) - ord('A') - 3), min(4, ord(column) - ord('A') + 1)):\n                            if all(board[chr(c + ord('A'))][row] == color for c in range(c, c + 4)):\n                                return color\n                        # Check diagonal \\\n                        if row <= 2 and ord(column) <= 3 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and ord(column) <= 3 and all(board[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win condition after each move\n        for r in range(6):\n            for c in range(7):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in range(7):\n                for row in range(6):\n                    if (col <= 3 and\n                        board[chr(col + ord('A'))][row] == color and\n                        board[chr(col + ord('A') + 1)][row] == color and\n                        board[chr(col + ord('A') + 2)][row] == color and\n                        board[chr(col + ord('A') + 3)][row] == color):\n                        return color\n                    if (row <= 2 and\n                        board[chr(col + ord('A'))][row] == color and\n                        board[chr(col + ord('A'))][row + 1] == color and\n                        board[chr(col + ord('A'))][row + 2] == color and\n                        board[chr(col + ord('A'))][row + 3] == color):\n                        return color\n                    if (col <= 3 and row <= 2 and\n                        board[chr(col + ord('A'))][row] == color and\n                        board[chr(col + ord('A') + 1)][row + 1] == color and\n                        board[chr(col + ord('A') + 2)][row + 2] == color and\n                        board[chr(col + ord('A') + 3)][row + 3] == color):\n                        return color\n                    if (col <= 3 and row >= 3 and\n                        board[chr(col + ord('A'))][row] == color and\n                        board[chr(col + ord('A') + 1)][row - 1] == color and\n                        board[chr(col + ord('A') + 2)][row - 2] == color and\n                        board[chr(col + ord('A') + 3)][row - 3] == color):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for i in range(6):\n                    if board[col][i] == color:\n                        # Check vertical\n                        if i <= 2 and all(board[col][i + j] == color for j in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + j)][i] == color for j in range(4)):\n                            return color\n                        # Check diagonal /\n                        if i <= 2 and col >= 'D' and all(board[chr(ord(col) - j)][i + j] == color for j in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if i <= 2 and col <= 'D' and all(board[chr(ord(col) + j)][i + j] == color for j in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(ROWS):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color_check in ['Red', 'Yellow']:\n            for col in COLUMNS:\n                for row in ROWS:\n                    if board[col][row] == color_check:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color_check for col in COLUMNS[COLUMNS.index(col):COLUMNS.index(col)+4]):\n                            return color_check\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color_check for row in range(row, row+4)):\n                            return color_check\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[COLUMNS[COLUMNS.index(col)+k]][row-k] == color_check for k in range(4)):\n                            return color_check\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[COLUMNS[COLUMNS.index(col)+k]][row+k] == color_check for k in range(4)):\n                            return color_check\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        for i in range(7):\n            for j in range(6):\n                if board['ABCDEFG'[i]][j] == color:\n                    if (i < 4 and all(board['ABCDEFG'[i + k]][j] == color for k in range(4))) or \\\n                       (j < 3 and all(board['ABCDEFG'[i]][j + k] == color for k in range(4))) or \\\n                       (i < 4 and j < 3 and all(board['ABCDEFG'[i + k]][j + k] == color for k in range(4))) or \\\n                       (i < 4 and j > 2 and all(board['ABCDEFG'[i + k]][j - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            if board[col].count(color) >= 4:\n                for r in range(6):\n                    for c in range(len(board)):\n                        if board[col][r] == color:\n                            if c + 3 < 7 and all(board[chr(ord(col) + i)][r] == color for i in range(4)):\n                                return color\n                            if r + 3 < 6 and all(board[col][r + i] == color for i in range(4)):\n                                return color\n                            if c + 3 < 7 and r + 3 < 6 and all(board[chr(ord(col) + i)][r + i] == color for i in range(4)):\n                                return color\n                            if c + 3 < 7 and r - 3 >= 0 and all(board[chr(ord(col) + i)][r - i] == color for i in range(4)):\n                                return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for c in range(7):\n            for r in range(6):\n                if grid['ABCDEFG'[c]][r] is not None:\n                    if c <= 3:  # Horizontal\n                        if all(grid['ABCDEFG'[c+i]][r] == grid['ABCDEFG'[c]][r] for i in range(4)):\n                            return grid['ABCDEFG'[c]][r]\n                    if r <= 2:  # Vertical\n                        if all(grid['ABCDEFG'[c]][r+i] == grid['ABCDEFG'[c]][r] for i in range(4)):\n                            return grid['ABCDEFG'[c]][r]\n                    if c <= 3 and r <= 2:  # Diagonal /\n                        if all(grid['ABCDEFG'[c+i]][r+i] == grid['ABCDEFG'[c]][r] for i in range(4)):\n                            return grid['ABCDEFG'[c]][r]\n                    if c <= 3 and r >= 3:  # Diagonal \\\n                        if all(grid['ABCDEFG'[c+i]][r-i] == grid['ABCDEFG'[c]][r] for i in range(4)):\n                            return grid['ABCDEFG'[c]][r]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] == color:\n                    if (c + 3 < 7 and all(board['ABCDEFG'[c + k]][r] == color for k in range(4))) or \\\n                       (r + 3 < 6 and all(board['ABCDEFG'[c]][r + k] == color for k in range(4))) or \\\n                       (c + 3 < 7 and r + 3 < 6 and all(board['ABCDEFG'[c + k]][r + k] == color for k in range(4))) or \\\n                       (c + 3 < 7 and r - 3 >= 0 and all(board['ABCDEFG'[c + k]][r - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = player\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] is not None:\n                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n                        count = 0\n                        for d in range(4):\n                            x, y = ord(col) - ord('A') + d * dx, row + d * dy\n                            if 0 <= x < 7 and 0 <= y < 6 and grid[chr(x + ord('A'))][y] == grid[col][row]:\n                                count += 1\n                        if count == 4:\n                            return grid[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:\n                    if (c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4))):\n                        return color\n                    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n\n                if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                    return color\n                if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                    return color\n                if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                    return color\n                if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for direction in [\n            [(0, 1), (0, -1)],  # Vertical\n            [(1, 0), (-1, 0)],  # Horizontal\n            [(1, 1), (-1, -1)], # Diagonal /\n            [(1, -1), (-1, 1)]  # Diagonal \\\n        ]:\n            count = 1\n            \n            for (dx, dy) in direction:\n                x, y = ord(column) - ord('A'), row\n                while 0 <= (x := x + dx) < 7 and 0 <= (y := y + dy) < 6:\n                    if board[chr(x + ord('A'))][y] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner():\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row]:\n                    color = grid[col][row]\n                    if (col + str(row)) in grid and row + 3 < 6 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    if row <= 2 and all(grid[col][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        if check_winner(board, col, row, color):\n            return color\n    \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for step in (1, -1):\n            for i in range(1, 4):\n                x, y = ord(col) - ord('A') + step * dx * i, row + step * dy * i\n                if 0 <= x < 7 and 0 <= y < 6 and board[chr(x + ord('A'))][y] == color:\n                    count += 1\n                else:\n                    break\n        \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 0\n        for i in range(4):\n            c = chr(ord(col) + i * dc)\n            r = row + i * dr\n            if c in board and 0 <= r < 6 and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count == 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        # Check for a winner\n        for r in range(6):\n            for c in range(7):\n                if board['ABCDEFG'[c]][r] is not None:\n                    color = board['ABCDEFG'[c]][r]\n                    # Check horizontal\n                    if c <= 3 and all(board['ABCDEFG'[c + k]][r] == color for k in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board['ABCDEFG'[c]][r + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal down\n                    if c <= 3 and r <= 2 and all(board['ABCDEFG'[c + k]][r + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal up\n                    if c <= 3 and r >= 3 and all(board['ABCDEFG'[c + k]][r - k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in board:\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                \n                # Check horizontal\n                if col <= 'D' and all(board[col][row] == board[col_chr][row] for col_chr in 'DEFG'):\n                    return board[col][row]\n                \n                # Check vertical\n                if row <= 2 and all(board[col][row] == board[col][row_chr] for row_chr in range(row, row + 4)):\n                    return board[col][row]\n                \n                # Check diagonal /\n                if col <= 'D' and row >= 3 and all(board[col][row] == board[col_chr][row - (ord(col_chr) - ord(col))] for col_chr in 'DEFG'):\n                    return board[col][row]\n                \n                # Check diagonal \\\n                if col <= 'D' and row <= 2 and all(board[col][row] == board[col_chr][row + (ord(col_chr) - ord(col))] for col_chr in 'DEFG'):\n                    return board[col][row]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            if check_winner(board[col], color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(column, color):\n    count = 0\n    for cell in column:\n        if cell == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        if len(board[col]) < 6:\n            board[col].append(color)\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(len(board[col])):\n            if board[col][row] == color:\n                if check_directions(board, col, row, color):\n                    return True\n    return False\n\ndef check_directions(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in (1, -1):\n            for i in range(1, 4):\n                new_col = chr(ord(col) + d[0] * step * i)\n                new_row = row + d[1] * step * i\n                if new_col in board and new_row < len(board[new_col]) and new_row >= 0 and board[new_col][new_row] == color:\n                    count += 1\n                else:\n                    break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if (c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            colors = [board[col][row] for col, row in line if row < 6 and board[col][row] is not None]\n            if len(colors) == 4 and len(set(colors)) == 1:\n                return colors[0]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win after each move\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if any(all(board[c][r] == board[c_offset][r_offset]\n                               for c_offset, r_offset in line)\n                           for line in LINES):\n                        return board[c][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if (c <= 3 and all(board[chr(65 + c + k)][r] == color for k in range(4))) or \\\n                       (r <= 2 and all(board[chr(65 + c)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(65 + c + k)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(65 + c + k)][r - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (0 <= r < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        if check_winner(grid, col, row, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                c = chr(ord(col) + d[0] * step * i)\n                r = row + d[1] * step * i\n                if 0 <= r < 6 and c in grid and grid[c][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        # Check for a winner\n        for player in ['Red', 'Yellow']:\n            # Check vertical\n            for c in 'ABCDEFG':\n                for r in range(3):\n                    if all(board[c][r+i] == player for i in range(4)):\n                        return player\n            \n            # Check horizontal\n            for r in range(6):\n                for c in range(4):\n                    if all(board[chr(65+c+i)][r] == player for i in range(4)):\n                        return player\n            \n            # Check diagonal \\\n            for c in range(4):\n                for r in range(3):\n                    if all(board[chr(65+c+i)][r+i] == player for i in range(4)):\n                        return player\n            \n            # Check diagonal /\n            for c in range(4):\n                for r in range(3, 6):\n                    if all(board[chr(65+c+i)][r-i] == player for i in range(4)):\n                        return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n\n        # Check for a win after the current move\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] == color:\n                    # Check vertical\n                    if r <= 2 and all(board[chr(c + 65)][r + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                        return color\n                    # Check diagonal /\n                    if c >= 3 and r <= 2 and all(board[chr(c - i + 65)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            for r in range(6):\n                for c in range(7):\n                    if board[chr(65 + c)][r] == color:\n                        count = 1\n                        for step in range(1, 4):\n                            new_r = r + direction[0] * step\n                            new_c = c + direction[1] * step\n                            if 0 <= new_r < 6 and 0 <= new_c < 7 and board[chr(65 + new_c)][new_r] == color:\n                                count += 1\n                            else:\n                                break\n                        if count >= 4:\n                            return color\n\n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for col in grid:\n            for row in range(6):\n                if grid[col][row] == color:\n                    if check_winner(grid, col, row, color):\n                        return color\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    return (check_direction(grid, col, row, color, 1, 0) or  # horizontal\n            check_direction(grid, col, row, color, 0, 1) or  # vertical\n            check_direction(grid, col, row, color, 1, 1) or  # diagonal \\\n            check_direction(grid, col, row, color, 1, -1)    # diagonal /\n           )\n\ndef check_direction(grid, col, row, color, col_inc, row_inc):\n    count = 0\n    for _ in range(4):\n        if (0 <= row < 6) and (col in grid) and (grid[col][row] == color):\n            count += 1\n            if count == 4:\n                return True\n        col = chr(ord(col) + col_inc)\n        row += row_inc\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[pos[0]][pos[1]] == color for pos in line if pos[1] < 6):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        if check_winner(grid, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, color):\n    # Check horizontal\n    for row in range(6):\n        for col in range(4):\n            if all(grid[chr(col + 65)][row] == color for col in range(col, col + 4)):\n                return True\n\n    # Check vertical\n    for col in 'ABCDEFG':\n        for row in range(3):\n            if all(grid[col][row + k] == color for k in range(4)):\n                return True\n\n    # Check diagonal \\\n    for col in range(4):\n        for row in range(3):\n            if all(grid[chr(col + 65 + k)][row + k] == color for k in range(4)):\n                return True\n\n    # Check diagonal /\n    for col in range(4):\n        for row in range(3, 6):\n            if all(grid[chr(col + 65 + k)][row - k] == color for k in range(4)):\n                return True\n\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        if check_winner(board, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for i in range(4):\n        c = chr(ord(col) + i * delta_col)\n        r = row + i * delta_row\n        if c in board and 0 <= r < 6 and board[c][r] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for d_col, d_row in directions:\n        count = 1\n        for i in range(1, 4):\n            new_col = chr(ord(col) + d_col * i)\n            new_row = row + d_row * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        for i in range(1, 4):\n            new_col = chr(ord(col) - d_col * i)\n            new_row = row - d_row * i\n            if new_col in board and 0 <= new_row < 6 and board[new_col][new_row] == color:\n                count += 1\n            else:\n                break\n\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        if check_winner(board, column, row, color):\n            return color\n            \n    return \"Draw\"\n\ndef check_winner(board, col, row, color):\n    directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1\n        \n        for sign in [-1, 1]:\n            x, y = ord(col) - ord('A'), row\n            while 0 <= x + sign * dx < 7 and 0 <= y + sign * dy < 6 and board[chr(x + ord('A'))][y + sign * dy] == color:\n                count += 1\n                x += sign * dx\n                y += sign * dy\n            \n        if count >= 4:\n            return True\n            \n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in LINES:\n            count = sum((board[c][r] == color for c, r in direction if (c in board and r < 6 and board[c][r] == color)), 0)\n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n\n        if check_winner(grid, col, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, col, row, color):\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for d in directions:\n        count = 1\n        for step in [1, -1]:\n            for i in range(1, 4):\n                c = chr(ord(col) + d[0] * step * i)\n                r = row + d[1] * step * i\n                if c in grid and 0 <= r < 6 and grid[c][r] == color:\n                    count += 1\n                else:\n                    break\n            if count >= 4:\n                return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    return \"Draw\"\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if board[column][row] is None:\n                    continue\n                color = board[column][row]\n                # Check horizontal\n                if column <= 'D' and all(board[column][row] == color for column in 'ABCD'[ord(column)-65:ord(column)-65+4]):\n                    return color\n                # Check vertical\n                if row <= 2 and all(board[column][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal \\\n                if column <= 'D' and row <= 2 and all(board[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                    return color\n                # Check diagonal /\n                if column >= 'D' and row <= 2 and all(board[chr(ord(column) - k)][row + k] == color for k in range(4)):\n                    return color\n\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    elif len(pieces_positions) == 42:\n        return \"Draw\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line if row < 6 and grid[col][row] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < 6 and board[col][row] == color):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = board[col].index(None)\n        board[col][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for sign in [1, -1]:\n                r, c = row, 'ABCDEFG'.index(col)\n                while 0 <= r + sign * direction[0] < 6 and 0 <= c + sign * direction[1] < 7:\n                    r += sign * direction[0]\n                    c += sign * direction[1]\n                    if r >= 0 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(k + 65)][j] == color for k in range(i, i + 4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if c in board and r < 6 and board[c][r] is not None):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row - 4, -1))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for win_positions in LINES:\n        colors = {color: 0 for color in ['Red', 'Yellow']}\n        for position in win_positions:\n            col, row = position\n            if board[col][row] is not None:\n                colors[board[col][row]] += 1\n        if colors['Red'] == 4:\n            return 'Red'\n        if colors['Yellow'] == 4:\n            return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] is not None:\n                    color = board[chr(65 + c)][r]\n                    if all(board[chr(65 + c)][r] == color for c in range(c, c + 4) if 0 <= c < 7) or \\\n                       all(board[chr(65 + c)][r] == color for r in range(r, r + 4) if 0 <= r < 6) or \\\n                       all(board[chr(65 + c)][r] == color for k in range(4) if 0 <= c + k < 7 and 0 <= r + k < 6) or \\\n                       all(board[chr(65 + c)][r] == color for k in range(4) if 0 <= c + k < 7 and 0 <= r - k < 6):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            if check_winner(board, color):\n                return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for line in LINES:\n        if all(board[col][row] == color for col, row in line if row < 6 and board[col][row] is not None):\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n                if count >= 4:\n                    return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if col in board and row < len(board[col])):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[col][row] == color for col, row in line if 0 <= row < 6 and board[col][row] is not None):\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col].count(color) > 0 for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```"
        ],
        "1": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board and r < 6 and r >= 0)):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for i in range(7):\n                for j in range(6):\n                    if board[chr(i + 65)][j] == color:\n                        if (i <= 3 and all(board[chr(i + k + 65)][j] == color for k in range(4))) or \\\n                           (j <= 2 and all(board[chr(i + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j <= 2 and all(board[chr(i + k + 65)][j + k] == color for k in range(4))) or \\\n                           (i <= 3 and j >= 3 and all(board[chr(i + k + 65)][j - k] == color for k in range(4))):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == 'Red' for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return 'Red'\n            if all(board[x][y] == 'Yellow' for x, y in line if x in board and y < 6 and board[x][y] is not None):\n                return 'Yellow'\n    \n    if len(pieces_positions) == 42:\n        return 'Draw'\n    return 'Draw'\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col in 'ABCDEFG' and all(grid[c][row] == color for c in 'ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][r] == color for r in range(row, row + 4)):\n                            return color\n                        # Check diagonal /\n                        if col in 'ABCDEFG' and row <= 2 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row + 4))):\n                            return color\n                        # Check diagonal \\\n                        if col in 'ABCDEFG' and row >= 3 and all(grid[C][R] == color for C, R in zip('ABCDEFG'[ 'ABCDEFG'.index(col): 'ABCDEFG'.index(col) + 4], range(row, row - 4, -1))):\n                            return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n    for win_positions in LINES:\n        colors = {color for pos in win_positions for color in [board[pos[0]][pos[1]] if board[pos[0]][pos[1]] is not None else None]}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if board[column][i] is None:\n                board[column][i] = color\n                break\n        if check_winner(board, color):\n            return color\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in board:\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, color, col, row, 1, 0) or \\\n                   check_direction(board, color, col, row, 0, 1) or \\\n                   check_direction(board, color, col, row, 1, 1) or \\\n                   check_direction(board, color, col, row, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, color, col, row, delta_col, delta_row):\n    count = 0\n    for d in range(4):\n        check_col = chr(ord(col) + d * delta_col)\n        check_row = row + d * delta_row\n        if 0 <= check_row < 6 and check_col in board and board[check_col][check_row] == color:\n            count += 1\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    for line in LINES:\n        colors = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(colors) == 4 and all(c == colors[0] for c in colors):\n            return colors[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win condition\n        for direction in [(0, 1), (1, 0), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                for step in range(1, 4):\n                    r = row + direction[0] * step * d\n                    c = 'ABCDEFG'.index(column) + direction[1] * step * d\n                    if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                        count += 1\n                    else:\n                        break\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(board[col].count(color) > 0 for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    def check_winner(color):\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return True\n        return False\n\n    if check_winner(\"Red\"):\n        return \"Red\"\n    elif check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                    return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line):\n                return True\n        return False\n    \n    if check_winner(\"Red\"):\n        return \"Red\"\n    if check_winner(\"Yellow\"):\n        return \"Yellow\"\n    \n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color_check in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color_check:\n                        # Check for vertical win\n                        if row <= 2 and all(board[col][row + i] == color_check for i in range(4)):\n                            return color_check\n                        # Check for horizontal win\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color_check for i in range(4)):\n                            return color_check\n                        # Check for diagonal win \\\n                        if row <= 2 and col <= 'D' and all(board[chr(ord(col) + i)][row + i] == color_check for i in range(4)):\n                            return color_check\n                        if row >= 3 and col <= 'D' and all(board[chr(ord(col) + i)][row - i] == color_check for i in range(4)):\n                            return color_check\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for player in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == player:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == player for i in range(4)):\n                            return player\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == player for i in range(4)):\n                            return player\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == player for i in range(4)):\n                            return player\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == player for i in range(4)):\n                            return player\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {c: [None] * 6 for c in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for col in range(7):\n            for row in range(6):\n                if grid[chr(col + 65)][row] == color:\n                    if col + 3 < 7 and all(grid[chr(col + i + 65)][row] == color for i in range(4)):\n                        return color\n                    if row + 3 < 6 and all(grid[chr(col + 65)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row + 3 < 6 and all(grid[chr(col + i + 65)][row + i] == color for i in range(4)):\n                        return color\n                    if col + 3 < 7 and row - 3 >= 0 and all(grid[chr(col + i + 65)][row - i] == color for i in range(4)):\n                        return color\n\n    if len(pieces_positions) == 42:\n        return \"Draw\"\n    \n    return None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in reversed(range(6)):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    if ((col, row) in LINES):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n\n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = player\n        player_moves[player].append((column, row))\n\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for d in [1, -1]:\n                for step in range(1, 4):\n                    new_row = row + direction[0] * step * d\n                    new_col = ord(column) - ord('A') + direction[1] * step * d\n                    if 0 <= new_row < 6 and 0 <= new_col < 7:\n                        if grid[chr(new_col + ord('A'))][new_row] == player:\n                            count += 1\n                        else:\n                            break\n                    else:\n                        break\n            if count >= 4:\n                return player\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6 and y >= 0):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[x][y] == color for x, y in line):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if (x in board and y < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n    \n    for line in LINES:\n        pieces = [board[col][row] for col, row in line if board[col][row] is not None]\n        if len(pieces) == 4 and len(set(pieces)) == 1:\n            return pieces[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (0 <= r < 6)):\n                return color\n    return \"Draw\" if len(pieces_positions) == 42 else None\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n    \n        # Check for a winner\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    \n                    # Check horizontal\n                    if col <= 'D' and all(board[c][row] == color for c in 'ABCD'):\n                        return color\n                    \n                    # Check vertical\n                    if row <= 2 and all(board[col][r] == color for r in range(row, row + 4)):\n                        return color\n                    \n                    # Check diagonal down-right\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    \n                    # Check diagonal down-left\n                    if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                        return color\n    \n    return \"Draw\" if len(pieces_positions) == 42 else None\n```"
        ],
        "2": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n    \n        for i in range(7):\n            for j in range(6):\n                if board['ABCDEFG'[i]][j] == color:\n                    if (i < 4 and all(board['ABCDEFG'[i + k]][j] == color for k in range(4))) or \\\n                       (j < 3 and all(board['ABCDEFG'[i]][j + k] == color for k in range(4))) or \\\n                       (i < 4 and j < 3 and all(board['ABCDEFG'[i + k]][j + k] == color for k in range(4))) or \\\n                       (i < 4 and j > 2 and all(board['ABCDEFG'[i + k]][j - k] == color for k in range(4))):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for c in range(7):\n                for r in range(6):\n                    count = 0\n                    while (0 <= c < 7 and 0 <= r < 6 and \n                           board[chr(65 + c)][r] == color):\n                        count += 1\n                        if count == 4:\n                            return color\n                        c += direction[0]\n                        r += direction[1]\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for i in range(6):\n            if board[col][i] is None:\n                board[col][i] = color\n                break\n\n        if check_winner(board, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(board, color):\n    for col in 'ABCDEFG':\n        for row in range(6):\n            if board[col][row] == color:\n                if check_direction(board, col, row, color, 1, 0) or \\\n                   check_direction(board, col, row, color, 0, 1) or \\\n                   check_direction(board, col, row, color, 1, 1) or \\\n                   check_direction(board, col, row, color, 1, -1):\n                    return True\n    return False\n\ndef check_direction(board, col, row, color, delta_col, delta_row):\n    count = 0\n    for step in range(4):\n        check_col = chr(ord(col) + delta_col * step)\n        check_row = row + delta_row * step\n        if check_col in board and 0 <= check_row < 6:\n            if board[check_col][check_row] == color:\n                count += 1\n            else:\n                break\n        else:\n            break\n    return count == 4\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check horizontal\n            for row in range(6):\n                count = 0\n                for col in 'ABCDEFG':\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check vertical\n            for col in 'ABCDEFG':\n                count = 0\n                for row in range(6):\n                    if grid[col][row] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n            # Check diagonal \\\n            for col in range(4):\n                for row in range(3, 6):\n                    if all(grid[chr(col + ord('A') + k)][row - k] == color for k in range(4)):\n                        return color\n\n            # Check diagonal /\n            for col in range(4):\n                for row in range(3):\n                    if all(grid[chr(col + ord('A') + k)][row + k] == color for k in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal (down-right)\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n                    # Check diagonal (up-right)\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == board[col][row] for k in range(4)):\n                        return board[col][row]\n    \n    return \"Draw\" if len(pieces_positions) == 42 else \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    grid = {col: [None] * 6 for col in COLUMNS}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner():\n        for col in COLUMNS:\n            for row in range(6):\n                if grid[col][row] is not None:\n                    color = grid[col][row]\n                    # Check horizontal\n                    if col <= 'D' and all(grid[COLUMNS[i]][row] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check vertical\n                    if row <= 2 and all(grid[col][j] == color for j in range(row, row + 4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[COLUMNS[i]][row - (i - COLUMNS.index(col))] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[COLUMNS[i]][row + (i - COLUMNS.index(col))] == color for i in range(COLUMNS.index(col), COLUMNS.index(col) + 4)):\n                        return color\n        return None\n    \n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    board = {col: [None] * 6 for col in COLUMNS}\n    \n    def drop_piece(column, color):\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                return True\n        return False\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if not drop_piece(column, color):\n            continue\n\n        for i in range(6):\n            for j in range(7):\n                if board[COLUMNS[j]][i] == color:\n                    if (j <= 3 and all(board[COLUMNS[j+k]][i] == color for k in range(4))) or \\\n                       (i <= 2 and all(board[COLUMNS[j]][i+k] == color for k in range(4))) or \\\n                       (j <= 3 and i <= 2 and all(board[COLUMNS[j+k]][i+k] == color for k in range(4))) or \\\n                       (j <= 3 and i >= 3 and all(board[COLUMNS[j+k]][i-k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in board:\n            for row in range(6):\n                if board[col][row] is None:\n                    continue\n                color = board[col][row]\n\n                if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                    return color\n                if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                    return color\n                if row <= 2 and col <= 'D' and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                    return color\n                if row >= 3 and col <= 'D' and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                    return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [] for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        board[col].append(color)\n\n        for i in range(len(board[col]) - 3):\n            if all(board[col][j] == color for j in range(i, i + 4)):\n                return color\n\n        for c in board.keys():\n            if c != col:\n                count = 0\n                for r in range(len(board[c])):\n                    if board[c][r] == color:\n                        count += 1\n                        if count == 4:\n                            return color\n                    else:\n                        count = 0\n\n        for i in range(len(board[col])):\n            if i >= 3:\n                for j in range(4):\n                    if j <= 3 and i - j >= 0 and (col, i) in board.items():\n                        if all(board[col][i - k] == color for k in range(4)):\n                            return color\n\n        for i in range(len(board[col])):\n            if i >= 3:\n                for j in range(4):\n                    if j <= 3 and i + j < len(board[col]) and (col, i) in board.items():\n                        if all(board[col][i + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if grid[col][row] == color:\n                    # Check horizontal\n                    if col <= 'D' and all(grid[col][row] == color for col in 'ABCD'):\n                        return True\n                    # Check vertical\n                    if row <= 2 and all(grid[col][row] == color for row in range(row, row + 4)):\n                        return True\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(grid[col][row] == color for (col, row) in zip('ABCD', range(row, row - 4, -1))):\n                        return True\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(grid[col][row] == color for (col, row) in zip('ABCD', range(row, row + 4))):\n                        return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            if check_winner(board[col], color):\n                return color\n    \n    return \"Draw\"\n\ndef check_winner(column, color):\n    count = 0\n    for cell in column:\n        if cell == color:\n            count += 1\n            if count == 4:\n                return True\n        else:\n            count = 0\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    player_moves = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        row = next((r for r in range(6) if grid[column][r] is None), None)\n        if row is not None:\n            grid[column][row] = player\n            player_moves[player].append((column, row))\n    \n    def check_winner(player):\n        positions = player_moves[player]\n        for col, row in positions:\n            if any(all((c, r) in positions for c, r in line) for line in LINES):\n                return player\n        return None\n    \n    winner = check_winner('Red')\n    if winner:\n        return 'Red'\n    winner = check_winner('Yellow')\n    if winner:\n        return 'Yellow'\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n            \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = board[column].index(None)\n        board[column][row] = color\n        \n        # Check for a win\n        for c in range(7):\n            for r in range(6):\n                if board[chr(c + 65)][r] is not None:\n                    color = board[chr(c + 65)][r]\n                    if (c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4))) or \\\n                       (r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, player = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = player\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(c + ord('A'))][r] == player:\n                        count = 1\n                        for step in range(1, 4):\n                            nc, nr = c + direction[0] * step, r + direction[1] * step\n                            if 0 <= nc < 7 and 0 <= nr < 6 and board[chr(nc + ord('A'))][nr] == player:\n                                count += 1\n                            else:\n                                break\n                        if count == 4:\n                            return player\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for color in [\"Red\", \"Yellow\"]:\n            for c in range(7):\n                for r in range(6):\n                    if board[chr(c + 65)][r] == color:\n                        # Check horizontal\n                        if c <= 3 and all(board[chr(c + i + 65)][r] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if r <= 2 and all(board[chr(c + 65)][r + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if c <= 3 and r <= 2 and all(board[chr(c + i + 65)][r + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if c <= 3 and r >= 3 and all(board[chr(c + i + 65)][r - i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(board[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            \n            for d in [-1, 1]:\n                step = 1\n                while True:\n                    new_row = row + d * step * direction[1]\n                    new_col = 'ABCDEFG'[('ABCDEFG'.index(column) + d * step * direction[0]) % 7]\n                    if 0 <= new_row < 6 and grid[new_col][new_row] == color:\n                        count += 1\n                    else:\n                        break\n                    step += 1\n            \n            if count >= 4:\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            for col_index in range(7):\n                for row_index in range(6):\n                    if (row_index + direction[0] * 3 < 6 and\n                        col_index + direction[1] * 3 < 7 and\n                        col_index + direction[1] * 3 >= 0):\n                        line = [board['ABCDEFG'[col_index + direction[1] * i]][row_index + direction[0] * i] for i in range(4)]\n                        if line[0] is not None and all(piece == line[0] for piece in line):\n                            return line[0]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n\n    return \"Draw\"\n```"
        ],
        "3": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    if check_winner(board, col, row):\n                        return board[col][row]\n    return \"Draw\"\n\ndef check_winner(board, col, row):\n    color = board[col][row]\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    for dc, dr in directions:\n        count = 1\n        for step in range(1, 4):\n            c = chr(ord(col) + dc * step)\n            r = row + dr * step\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        for step in range(1, 4):\n            c = chr(ord(col) - dc * step)\n            r = row - dr * step\n            if 0 <= r < 6 and c in board and board[c][r] == color:\n                count += 1\n            else:\n                break\n        if count >= 4:\n            return True\n    return False\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n        for line in LINES:\n            if all(board[c][r] == 'Red' for c, r in line if r < 6):\n                return \"Red\"\n            if all(board[c][r] == 'Yellow' for c, r in line if r < 6):\n                return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        # Check for win conditions\n        for color in ['Red', 'Yellow']:\n            if any(all(board[col][row] == color for col, row in line) for line in LINES):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        # Check for a win after each move\n        for c in 'ABCDEFG':\n            for r in range(6):\n                if board[c][r] is not None:\n                    if any(all(board[c][r] == board[c_offset][r_offset]\n                               for c_offset, r_offset in line)\n                           for line in LINES):\n                        return board[c][r]\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            # Check vertical\n            for c in 'ABCDEFG':\n                for r in range(3):\n                    if all(board[c][r + i] == color for i in range(4)):\n                        return color\n\n            # Check horizontal\n            for r in range(6):\n                for c in range(4):\n                    if all(board['ABCDEFG'[c + i]][r] == color for i in range(4)):\n                        return color\n\n            # Check diagonal (top-left to bottom-right)\n            for c in range(4):\n                for r in range(3):\n                    if all(board['ABCDEFG'[c + i]][r + i] == color for i in range(4)):\n                        return color\n\n            # Check diagonal (bottom-left to top-right)\n            for c in range(4):\n                for r in range(3, 6):\n                    if all(board['ABCDEFG'[c + i]][r - i] == color for i in range(4)):\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        row = next((r for r in range(6) if board[col][r] is None), None)\n        if row is not None:\n            board[col][row] = color\n            \n            # Check for victory\n            for dr, dc in [(0, 1), (1, 0), (1, 1), (1, -1)]:  # horizontal, vertical, diagonal \\\n                for d in range(-3, 1):  # Check in both directions\n                    count = 0\n                    for step in range(4):\n                        r = row + dr * (d + step)\n                        c = 'ABCDEFG'.index(col) + dc * (d + step)\n                        if 0 <= r < 6 and 0 <= c < 7 and board['ABCDEFG'[c]][r] == color:\n                            count += 1\n                    if count == 4:\n                        return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = grid[column].index(None)\n        grid[column][row] = color\n        \n        # Check for a winning condition\n        if check_winner(grid, column, row, color):\n            return color\n\n    return \"Draw\"\n\ndef check_winner(grid, column, row, color):\n    # Check vertical\n    if count_in_direction(grid, column, row, color, 0, 1) >= 4:\n        return True\n    # Check horizontal\n    if count_in_direction(grid, column, row, color, 1, 0) >= 4:\n        return True\n    # Check diagonal /\n    if count_in_direction(grid, column, row, color, 1, -1) >= 4:\n        return True\n    # Check diagonal \\\n    if count_in_direction(grid, column, row, color, 1, 1) >= 4:\n        return True\n    return False\n\ndef count_in_direction(grid, column, row, color, delta_col, delta_row):\n    count = 1\n    # Check forward direction\n    for d in range(1, 4):\n        c = chr(ord(column) + d * delta_col)\n        r = row + d * delta_row\n        if 0 <= r < 6 and c in grid and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    # Check backward direction\n    for d in range(1, 4):\n        c = chr(ord(column) - d * delta_col)\n        r = row - d * delta_row\n        if 0 <= r < 6 and c in grid and grid[c][r] == color:\n            count += 1\n        else:\n            break\n    return count\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n    \n    def check_winner(color):\n        for line in LINES:\n            if all(grid[col][row] == color for col, row in line):\n                return True\n        return False\n    \n    if check_winner('Red'):\n        return \"Red\"\n    elif check_winner('Yellow'):\n        return \"Yellow\"\n    else:\n        return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for c in range(7):\n            for r in range(6):\n                if board[chr(65 + c)][r] == color:\n                    # Check horizontal\n                    if c <= 3 and all(board[chr(65 + c + i)][r] == color for i in range(4)):\n                        return color\n                    # Check vertical\n                    if r <= 2 and all(board[chr(65 + c)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal down\n                    if c <= 3 and r <= 2 and all(board[chr(65 + c + i)][r + i] == color for i in range(4)):\n                        return color\n                    # Check diagonal up\n                    if c <= 3 and r >= 3 and all(board[chr(65 + c + i)][r - i] == color for i in range(4)):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for c in range(7):\n                for r in range(6):\n                    if (c <= 3 and all(board[chr(65 + c + k)][r] == color for k in range(4))) or \\\n                       (r <= 2 and all(board[chr(65 + c)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r <= 2 and all(board[chr(65 + c + k)][r + k] == color for k in range(4))) or \\\n                       (c <= 3 and r >= 3 and all(board[chr(65 + c + k)][r - k] == color for k in range(4))):\n                        return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for line in LINES:\n            if all(board[c][r] == color for c, r in line if (c in board) and (0 <= r < 6)):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] == color:\n                    if (row <= 2 and all(board[col][row+i] == color for i in range(4))) or \\\n                       (col <= 'D' and all(board[chr(ord(col)+i)][row] == color for i in range(4))) or \\\n                       (col <= 'D' and row <= 2 and all(board[chr(ord(col)+i)][row+i] == color for i in range(4))) or \\\n                       (col >= 'D' and row <= 2 and all(board[chr(ord(col)-i)][row+i] == color for i in range(4))):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = grid[col].index(None)\n        grid[col][row] = color\n        \n        # Check for a win\n        for direction in [(1, 0), (0, 1), (1, 1), (1, -1)]:\n            count = 1\n            for step in [1, -1]:\n                for i in range(1, 4):\n                    new_col = chr(ord(col) + direction[0] * step * i)\n                    new_row = row + direction[1] * step * i\n                    if 0 <= new_row < 6 and new_col in grid and grid[new_col][new_row] == color:\n                        count += 1\n                    else:\n                        break\n            if count >= 4:\n                return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n\n        for line in LINES:\n            if all(grid[x][y] == 'Red' for x, y in line if y < len(grid[x])):\n                return \"Red\"\n            if all(grid[x][y] == 'Yellow' for x, y in line if y < len(grid[x])):\n                return \"Yellow\"\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[c][r] == color for c, r in line):\n                    return color\n\n    return \"Draw\"\n```"
        ],
        "4": [
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if board[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(board[col][row] == color for col in 'ABCDEFG'[ord(col) - 65:ord(col) - 61]):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(board[col][row] == color for row in range(row, row + 4)):\n                            return color\n                        # Check diagonal (down-right)\n                        if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                            return color\n                        # Check diagonal (down-left)\n                        if col >= 'D' and row <= 2 and all(board[chr(ord(col) - k)][row + k] == color for k in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n                \n        for color in ['Red', 'Yellow']:\n            if any(all(board[c][r] == color for c, r in line) for line in LINES):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for line in LINES:\n            if all(board[x][y] == color for x, y in line if x in board and y < 6):\n                return color\n                \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(6):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for color in [\"Red\", \"Yellow\"]:\n            for line in LINES:\n                if all(board[col][row] == color for col, row in line):\n                    return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for position in pieces_positions:\n        col, color = position.split('_')\n        for row in range(5, -1, -1):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        if any(all(grid[c][r] == color for c, r in line) for line in LINES):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n        \n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col) + i)][row] == color for i in range(4)):\n                            return color\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col) + i)][row + i] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col) + i)][row - i] == color for i in range(4)):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {column: [None] * 6 for column in 'ABCDEFG'}\n    for pos in pieces_positions:\n        column, color = pos.split('_')\n        for row in range(6):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n\n    for color in ['Red', 'Yellow']:\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in reversed(range(6)):\n            if board[col][row] is None:\n                board[col][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    color = board[col][row]\n                    # Check vertical\n                    if row <= 2 and all(board[col][row + k] == color for k in range(4)):\n                        return color\n                    # Check horizontal\n                    if col <= 'D' and all(board[chr(ord(col) + k)][row] == color for k in range(4)):\n                        return color\n                    # Check diagonal \\\n                    if col <= 'D' and row <= 2 and all(board[chr(ord(col) + k)][row + k] == color for k in range(4)):\n                        return color\n                    # Check diagonal /\n                    if col <= 'D' and row >= 3 and all(board[chr(ord(col) + k)][row - k] == color for k in range(4)):\n                        return color\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for i in range(6):\n            if grid[column][i] is None:\n                grid[column][i] = color\n                break\n    \n    def check_winner():\n        for column in 'ABCDEFG':\n            for row in range(6):\n                if grid[column][row] is None:\n                    continue\n                color = grid[column][row]\n                \n                # Check horizontal\n                if column <= 'D' and all(grid[chr(ord(column) + k)][row] == color for k in range(4)):\n                    return color\n                \n                # Check vertical\n                if row <= 2 and all(grid[column][row + k] == color for k in range(4)):\n                    return color\n                \n                # Check diagonal (down-right)\n                if column <= 'D' and row <= 2 and all(grid[chr(ord(column) + k)][row + k] == color for k in range(4)):\n                    return color\n                \n                # Check diagonal (up-right)\n                if column <= 'D' and row >= 3 and all(grid[chr(ord(column) + k)][row - k] == color for k in range(4)):\n                    return color\n\n        return None\n\n    winner = check_winner()\n    if winner:\n        return winner\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * 6 for column in 'ABCDEFG'}\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if grid[column][row] is None:\n                grid[column][row] = color\n                break\n        \n        for line in LINES:\n            if all(grid[x][y] == color for x, y in line if (x in grid and y < len(grid[x]))):\n                return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        col, color = move.split('_')\n        for row in range(6):\n            if grid[col][row] is None:\n                grid[col][row] = color\n                break\n\n        # Check for a win\n        for color in ['Red', 'Yellow']:\n            for col in 'ABCDEFG':\n                for row in range(6):\n                    if grid[col][row] == color:\n                        # Check vertical\n                        if row <= 2 and all(grid[col][row+i] == color for i in range(4)):\n                            return color\n                        # Check horizontal\n                        if col <= 'D' and all(grid[chr(ord(col)+i)][row] == color for i in range(4)):\n                            return color\n                        # Check diagonal /\n                        if col <= 'D' and row >= 3 and all(grid[chr(ord(col)+i)][row-i] == color for i in range(4)):\n                            return color\n                        # Check diagonal \\\n                        if col <= 'D' and row <= 2 and all(grid[chr(ord(col)+i)][row+i] == color for i in range(4)):\n                            return color\n\n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    board = {col: [None] * 6 for col in 'ABCDEFG'}\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(5, -1, -1):\n            if board[column][row] is None:\n                board[column][row] = color\n                break\n        \n        for col in 'ABCDEFG':\n            for row in range(6):\n                if board[col][row] is not None:\n                    # Check for winning condition\n                    for line in LINES:\n                        if all(board[c][r] == color for c, r in line if (c, r) in [(col, row) for col in board for row in range(6)]):\n                            return color\n    \n    return \"Draw\"\n```",
            "```python\ndef who_is_winner(pieces_positions):\n    grid = {col: [None] * 6 for col in 'ABCDEFG'}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        for i in range(6):\n            if grid[col][i] is None:\n                grid[col][i] = color\n                break\n\n        for color in ['Red', 'Yellow']:\n            for line in LINES:\n                if all(grid[c][r] == color for c, r in line):\n                    return color\n\n    return \"Draw\"\n```"
        ]
    }
}