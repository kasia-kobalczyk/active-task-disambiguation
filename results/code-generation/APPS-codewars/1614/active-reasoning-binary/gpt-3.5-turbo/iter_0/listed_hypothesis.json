{
    "0": [
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the game state\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position in the list\n    for piece in pieces_positions:\n        # Extract the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to a numerical index\n        col_index = ord(column) - ord('A')\n\n        # Find the lowest empty row in the column\n        row_index = -1\n        for row in range(5, -1, -1):\n            if grid[row][col_index] == '':\n                row_index = row\n                break\n\n        # Place the piece in the grid\n        grid[row_index][col_index] = color\n\n        # Check if the current move resulted in a win\n        for line in LINES:\n            # Get the set of positions in the line\n            positions = set([(COLUMNS.index(column) + i, int(row)) for i, row in enumerate(ROWS)])\n\n            # Check if all positions in the line have the same color\n            if all(grid[row][col] == color for col, row in positions):\n                return color\n\n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create a 2D grid to represent the game board\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Extract the column and color from each piece\n        col, color = piece.split('_')\n        \n        # Find the first available row in the chosen column\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - ord('A')] == '':\n                grid[row][ord(col) - ord('A')] = color\n                break\n    \n    # Check for a win in each line\n    for line in LINES:\n        for row, col in line:\n            if grid[row][ord(col) - ord('A')] == grid[row + 1][ord(col) - ord('A')] == \\\n               grid[row + 2][ord(col) - ord('A')] == grid[row + 3][ord(col) - ord('A')]:\n                return grid[row][ord(col) - ord('A')]\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_idx = COLUMNS.index(column)\n        row_idx = next((i for i, cell in enumerate(board[column_idx]) if cell is None), None)\n        if row_idx is not None:\n            board[column_idx][row_idx] = color\n            for line in LINES:\n                if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                    return color\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][COLUMNS.index(column)] == ' ':\n            row += 1\n        board[row-1][COLUMNS.index(column)] = color[0]\n\n    for line in LINES:\n        line_values = [board[ROWS.index(row)][COLUMNS.index(column)] for column, row in line]\n        if all(value == 'R' for value in line_values):\n            return 'Red'\n        if all(value == 'Y' for value in line_values):\n            return 'Yellow'\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def get_winner():\n        for line in LINES:\n            if all(pos in pieces_positions[player]\n                   for pos in line):\n                return player\n        return ''\n\n    players = ['Red', 'Yellow']\n    for piece in pieces_positions:\n        col, player = piece.split('_')\n        pieces_positions[player].add((col, min(ROWS - {pos[1]\n                                                       for pos in\n                                                       pieces_positions[col]})))\n        if get_winner():\n            return get_winner()\n        players = players[::-1]\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the moves\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_to_player = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over each move\n    for move in pieces_positions:\n        # Extract the column and color from the move\n        column, color = move.split('_')\n        \n        # Convert the column to an index\n        column_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][column_index].index('')\n        \n        # Update the grid with the move\n        grid[row_index][column_index] = color\n        \n        # Check if the move results in a winning position\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return color_to_player[color]\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 6 for _ in range(7)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = COLUMNS.index(column)\n        row_idx = next((i for i in range(6) if board[col_idx][i] is None), None)\n        if row_idx is not None:\n            board[col_idx][row_idx] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column] = board.get(column, '') + color[0]\n\n        for line in LINES:\n            if all(board.get(cell, '') == color[0] for cell in line):\n                return color\n\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for i in range(len(pieces_positions)):\n        col, player = pieces_positions[i].split('_')\n        if col not in board:\n            board[col] = []\n        board[col].append(player)\n\n        if len(board[col]) == 6:\n            board[col] = []\n            \n        for line in LINES:\n            if all((col, player) in line for col, row in line):\n                return player\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = []\n    yellow_moves = []\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_moves.append(column)\n        elif color == 'Yellow':\n            yellow_moves.append(column)\n\n    for line in LINES:\n        if all(move in red_moves for move in line):\n            return 'Red'\n        if all(move in yellow_moves for move in line):\n            return 'Yellow'\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, max([row for row in ROWS if (column, row) not in yellow_moves])))\n        elif color == 'Yellow':\n            yellow_moves.add((column, max([row for row in ROWS if (column, row) not in red_moves])))\n            \n        for line in LINES:\n            if line.issubset(red_moves):\n                return 'Red'\n            elif line.issubset(yellow_moves):\n                return 'Yellow'\n                \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def who_is_winner(pieces_positions):\n\n    def check_win(color):\n        for line in LINES:\n            if all(p in played[color] for p in line):\n                return True\n        return False\n\n    played = {'Red': set(), 'Yellow': set()}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        played[color].add((column, ROWS[len(played[color])]))\n        if len(played[color]) >= 4 and check_win(color):\n            return color\n\n    if len(played['Red']) + len(played['Yellow']) == 42:\n        return \"Draw\"\n    else:\n        return \"Yellow\" if len(played['Red']) > len(played['Yellow']) else \"Red\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Initialize the game grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through the pieces positions\n    for position in pieces_positions:\n        # Get the column and color of the current piece\n        column, color = position.split('_')\n\n        # Find the row where the piece should be placed\n        row = next((i for i in range(6) if grid[i][ord(column) - ord('A')] == ''), None)\n\n        # If the row is None, the column is full and the game is a draw\n        if row is None:\n            return \"Draw\"\n\n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n\n        # Check if the current move results in a win\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # If no player has won, the game is a draw\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    player = 'Red'\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = board[column_index].index(None)\n        board[column_index][row_index] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n        player = 'Yellow' if player == 'Red' else 'Red'\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        col_index = COLUMNS.index(col)\n        row_index = next((i for i in range(len(ROWS)-1,-1,-1) if (col, ROWS[i]) not in grid), None)\n        if row_index is None:\n            continue\n        grid[(col, ROWS[row_index])] = color\n        if any(line.issubset(grid) for line in LINES):\n            return color.capitalize()\n    return \"Draw\"\n\nprint(who_is_winner([\"A_Red\", \"B_Yellow\", \"A_Red\", \"B_Yellow\", \"A_Red\", \"B_Yellow\", \"G_Red\", \"B_Yellow\"]))",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max([row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n\n    if len(red_positions) + len(yellow_positions) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        else:\n            raise ValueError(\"Invalid color\")\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Keep track of the last player who placed a piece\n    last_player = None\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Split the piece position into column and player\n        column, player = piece.split('_')\n        \n        # Find the next available row in the column\n        row = -1\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n        \n        # Place the player's color in the grid\n        grid[row][ord(column) - ord('A')] = player\n        \n        # Check if the player has won\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == player for column, row in line):\n                return player\n        \n        # Update the last player\n        last_player = player\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def who_is_winner(pieces_positions):\n    def check_winner(board):\n        for line in LINES:\n            for player in ['Red', 'Yellow']:\n                if all(board[cell] == player for cell in line):\n                    return player\n        return None\n\n    board = {}\n    for column in COLUMNS:\n        for row in ROWS:\n            board[(column, row)] = ''\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in ROWS[::-1]:\n            if board[(column, row)] == '':\n                board[(column, row)] = color\n                break\n        winner = check_winner(board)\n        if winner is not None:\n            return winner\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "```python\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((i for i in range(6) if board[i][ord(col) - ord('A')] == ' '), None)\n        if row is not None:\n            board[row][ord(col) - ord('A')] = color[0]\n            for line in LINES:\n                if all(board[i][ord(j) - ord('A')] == color[0] for j, i in line):\n                    return color\n    return 'Draw'\n```",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        \n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = ROWS[max(j for j in ROWS if (column, j) not in red_moves and (column, j) not in yellow_moves)]\n        (red_moves if color == 'Red' else yellow_moves).add((column, row))\n\n        if any(line <= red_moves for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_moves for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "logp": null
        }
    ]
}