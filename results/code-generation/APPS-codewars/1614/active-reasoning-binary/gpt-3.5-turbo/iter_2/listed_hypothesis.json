{
    "0": [
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in ROWS]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS[::-1]:\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n    \n    for line in LINES:\n        colors = set(grid[row][column] for column, row in line)\n        if colors == {'Red'}:\n            return 'Red'\n        elif colors == {'Yellow'}:\n            return 'Yellow'\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # create a dictionary to store the number of pieces in each position\n    board = {}\n    \n    # create a dictionary to store the current player's color\n    current_player = {'Red': 0, 'Yellow': 0}\n    \n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # extract the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # check if the column is already in the board dictionary\n        if column not in board:\n            # if not, add the column to the board dictionary with an empty list\n            board[column] = []\n        \n        # append the color to the column list in the board dictionary\n        board[column].append(color)\n        \n        # check if there are four consecutive pieces of the same color in the board\n        for line in LINES:\n            # get the colors in the current line\n            line_colors = [board[column][index] for column, index in line]\n            \n            # check if there are four consecutive pieces of the same color in the current line\n            if line_colors.count(color) == 4:\n                # return the current player's color as the winner\n                return color\n        \n        # switch the current player's color\n        current_player[color] += 1\n        \n        # check if all the positions in the board are occupied\n        if all(len(board[column]) == 6 for column in board):\n            # if so, return 'Draw'\n            return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 6 for _ in range(7)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = COLUMNS.index(column)\n        row_idx = next((i for i in range(6) if board[col_idx][i] is None), None)\n        if row_idx is not None:\n            board[col_idx][row_idx] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column] = board.get(column, '') + color[0]\n\n        for line in LINES:\n            if all(board.get(cell, '') == board[column] for cell in line):\n                return board[column]\n\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None] * len(ROWS) for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row_idx, cell in enumerate(board[column_idx]):\n            if cell is None:\n                board[column_idx][row_idx] = color\n                break\n        else:\n            return \"Draw\"\n        for line in LINES:\n            if all(board[c][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Initialize the game grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    player_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the moves\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the column index\n        column_index = ord(column) - ord('A')\n        \n        # Find the row index\n        row_index = 5 - grid[::-1][column_index].count('')\n        \n        # Place the piece in the grid\n        grid[row_index][column_index] = color\n    \n        # Check for a winner\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return player_map[color]\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for i in range(len(pieces_positions)):\n        col, player = pieces_positions[i].split('_')\n        if col not in board:\n            board[col] = []\n        board[col].append(player)\n\n        if len(board[col]) == 6:\n            board[col] = []\n            \n        for line in LINES:\n            if all((col, player) in line for col, player in board.items()):\n                return player\n                \n    return \"Draw\"",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max([row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n\n    if len(red_positions) + len(yellow_positions) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is not None:\n            board[column_index][row_index] = color\n            \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    if all(all(cell is not None for cell in column) for column in board):\n        return \"Draw\"\n    \n    return None",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [None] * len(ROWS) for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col][board[col].index(None)] = color\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line]\n        if all(color == colors[0] for color in colors) and colors[0] is not None:\n            return colors[0]\n\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        else:\n            raise ValueError(\"Invalid color\")\n        \n        for line in LINES:\n            if line.issubset(red_moves):\n                return \"Red\"\n            elif line.issubset(yellow_moves):\n                return \"Yellow\"\n    \n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    \n    return \"None\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Keep track of the last player who placed a piece\n    last_player = None\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Split the piece position into column and player\n        column, player = piece.split('_')\n        \n        # Find the next available row in the column\n        row = -1\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n        \n        # Place the player's color in the grid\n        grid[row][ord(column) - ord('A')] = player\n        \n        # Check if the player has won\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == player for column, row in line):\n                return player\n        \n        # Update the last player\n        last_player = player\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    # Initialize the game grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[column_index][i] == '':\n                row_index = i\n                break\n        \n        # Place the piece in the grid\n        grid[column_index][row_index] = color\n        \n        # Check if the game has been won\n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    # If no one has won and the grid is full, it's a draw\n    if all(grid[column_index][i] != '' for column_index in range(7) for i in range(6)):\n        return 'Draw'\n    \n    # Otherwise, the game is still ongoing\n    return 'Ongoing'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        col, color = move.split(\"_\")\n        if color == \"Red\":\n            red_moves.append((col, ROWS[len([m for m in red_moves if m[0] == col])]))\n            if any(line.issubset(red_moves) for line in LINES):\n                return \"Red\"\n        else:\n            yellow_moves.append((col, ROWS[len([m for m in yellow_moves if m[0] == col])]))\n            if any(line.issubset(yellow_moves) for line in LINES):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        if any(line <= red_moves for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_moves for line in LINES):\n            return 'Yellow'\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n\n    for line in LINES:\n        colors = {board[COLUMNS.index(column)][row] for column, row in line}\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n\n    return \"Draw\"",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    # create a board with all empty positions\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    # iterate through the pieces positions and update the board accordingly\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        col_index = COLUMNS.index(column)\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[col_index][row] is None:\n                board[col_index][row] = color\n                break\n    # check for a winning line\n    for line in LINES:\n        line_values = set()\n        for pos in line:\n            col, row = pos\n            col_index = COLUMNS.index(col)\n            line_values.add(board[col_index][row])\n        if len(line_values) == 1 and None not in line_values:\n            return line_values.pop()\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        \n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((row for row in ROWS if grid[COLUMNS.index(column)][row] is None), None)\n        if row is None:\n            return \"Invalid Move\"\n        grid[COLUMNS.index(column)][row] = color\n    \n    for line in LINES:\n        colors = {grid[COLUMNS.index(column)][row] for column, row in line}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = ROWS[max(j for j in ROWS if (column, j) not in red_moves and (column, j) not in yellow_moves)]\n        (red_moves if color == 'Red' else yellow_moves).add((column, row))\n\n        if any(line <= red_moves for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_moves for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_idx] is None:\n                board[row][column_idx] = color\n                break\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n        \n        # Find the row to place the piece\n        row = -1\n        for i in range(6):\n            if grid[i][ord(column) - ord('A')] == ' ':\n                row = i\n                break\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Check if all positions in the line have the same color\n        colors = set()\n        for position in line:\n            colors.add(grid[position[1]][ord(position[0]) - ord('A')])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * 7 for _ in range(6)]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if grid[i][ord(column) - ord('A')] is None), None)\n        grid[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(grid[j][ord(i) - ord('A')] == color for i, j in line):\n                return color\n\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n            \ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[COLUMNS.index(column)].index(None)\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n\n    grid = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        row_index = -1\n        while grid[row_index][column_index] is not None:\n            row_index -= 1\n        grid[row_index][column_index] = color\n\n    for line in LINES:\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if all(color == 'Red' for color in colors):\n            return 'Red'\n        if all(color == 'Yellow' for color in colors):\n            return 'Yellow'\n\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate over the pieces_positions list\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n\n        # Find the first empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n\n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n\n        # Check if the current move results in a win\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # If no one has won, it is a draw\n    return 'Draw'",
            "logp": null
        }
    ]
}