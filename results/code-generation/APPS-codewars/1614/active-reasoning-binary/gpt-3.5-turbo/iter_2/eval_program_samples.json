{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the game state\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate through each piece position in the list\n    for piece in pieces_positions:\n        # Extract the column and color from the piece position\n        column, color = piece.split('_')\n\n        # Convert the column letter to a numerical index\n        col_index = ord(column) - ord('A')\n\n        # Find the lowest empty row in the column\n        row_index = -1\n        for row in range(5, -1, -1):\n            if grid[row][col_index] == '':\n                row_index = row\n                break\n\n        # Place the piece in the grid\n        grid[row_index][col_index] = color\n\n        # Check if the current move resulted in a win\n        for line in LINES:\n            # Get the set of positions in the line\n            positions = set([(COLUMNS.index(column) + i, int(row)) for i, row in enumerate(ROWS)])\n\n            # Check if all positions in the line have the same color\n            if all(grid[row][col] == color for col, row in positions):\n                return color\n\n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to represent the game board\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Extract the column and color from each piece\n        col, color = piece.split('_')\n        \n        # Find the first available row in the chosen column\n        for row in range(5, -1, -1):\n            if grid[row][ord(col) - ord('A')] == '':\n                grid[row][ord(col) - ord('A')] = color\n                break\n    \n    # Check for a win in each line\n    for line in LINES:\n        for row, col in line:\n            if grid[row][ord(col) - ord('A')] == grid[row + 1][ord(col) - ord('A')] == \\\n               grid[row + 2][ord(col) - ord('A')] == grid[row + 3][ord(col) - ord('A')]:\n                return grid[row][ord(col) - ord('A')]\n    \n    # If no winner is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in reversed(ROWS) if (column, r) not in red_positions and (column, r) not in yellow_positions), None)\n        if row is None:\n            return \"Draw\"\n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n        \n        if any(line.issubset(red_positions) for line in LINES):\n            return \"Red\"\n        if any(line.issubset(yellow_positions) for line in LINES):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][COLUMNS.index(column)] != '':\n            row += 1\n        board[row][COLUMNS.index(column)] = color\n    \n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    def get_winner():\n        for line in LINES:\n            if all(pos in pieces_positions[player]\n                   for pos in line):\n                return player\n        return ''\n\n    players = ['Red', 'Yellow']\n    for piece in pieces_positions:\n        col, player = piece.split('_')\n        pieces_positions[player].add((col, min(ROWS - {pos[1]\n                                                       for pos in\n                                                       pieces_positions[col]})))\n        if get_winner():\n            return get_winner()\n        players = players[::-1]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is None:\n            continue\n        if color == 'Red':\n            red_moves.add((column, row))\n        else:\n            yellow_moves.add((column, row))\n        for line in LINES:\n            if line <= red_moves or line <= yellow_moves:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Red': set(), 'Yellow': set()}\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        pieces[color].add((column, len(pieces[color])))\n        for line in LINES:\n            if line <= pieces[color]:\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = {c: set() for c in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].add(color)\n        for line in LINES:\n            if all(board[col].issuperset(color) for col, color in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        board[COLUMNS.index(column)][ROWS.index(next(i for i, v in enumerate(board[COLUMNS.index(column)]) if not v)) - 1] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(all(cell != None for cell in row) for row in board):\n        return 'Draw'\n    \n    return None\n```"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n\n    def check_win(color):\n        for line in LINES:\n            if all(p in played[color] for p in line):\n                return True\n        return False\n\n    played = {'Red': set(), 'Yellow': set()}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        played[color].add((column, ROWS[len(played[color])]))\n        if len(played[color]) >= 4 and check_win(color):\n            return color\n\n    if len(played['Red']) + len(played['Yellow']) == 42:\n        return \"Draw\"\n    else:\n        return \"Yellow\" if len(played['Red']) > len(played['Yellow']) else \"Red\"",
            "```python\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, value in enumerate(board[column_index]) if value is None), None)\n        if row_index is None:\n            continue\n        board[column_index][row_index] = color\n\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n\n    return \"Draw\"\n```",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is not None:\n            board[column_index][row_index] = color\n    \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    if all(cell is not None for column in board for cell in column):\n        return 'Draw'\n    \n    return None",
            "def who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - 65\n        color = piece[2:]\n        for row in range(5, -1, -1):\n            if board[row][column] == ' ':\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for column, row in line:\n            colors.add(board[row][ord(column) - 65])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = ord(position[0]) - ord('A')\n        color = position.split('_')[1]\n        \n        for row in range(5, -1, -1):\n            if grid[row][column] == '':\n                grid[row][column] = color\n                break\n    \n    for line in LINES:\n        cells = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if len(set(cells)) == 1 and cells[0] != '':\n            return cells[0]\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][next(i for i in range(len(ROWS)) if grid[COLUMNS.index(column)][i] is None)] = color\n\n    for line in LINES:\n        colors = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if colors.count(colors[0]) == 4 and colors[0] is not None:\n            return colors[0]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max([row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n\n    if len(red_positions) + len(yellow_positions) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(5, -1, -1):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n    \n    for line in LINES:\n        cells = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        if all(cell == 'Red' for cell in cells):\n            return 'Red'\n        elif all(cell == 'Yellow' for cell in cells):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n\n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][ROW] == color for column, ROW in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {}\n    for pp in pieces_positions:\n        col, color = pp.split('_')\n        row = ROWS[-1]\n        while (col, row) in grid:\n            row = row - 1\n        if row < 0:\n            raise ValueError('column full')\n        grid[col, row] = color\n        if any(line <= grid.keys() for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None]*len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in ROWS:\n            if board[COLUMNS.index(column)][row] is None:\n                board[COLUMNS.index(column)][row] = color\n                break\n\n    for line in LINES:\n        if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n            return 'Red'\n        elif all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [None] * len(ROWS) for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col][board[col].index(None)] = color\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line]\n        if all(color == 'Yellow' for color in colors):\n            return 'Yellow'\n        elif all(color == 'Red' for color in colors):\n            return 'Red'\n\n    if all(board[col][row] is not None for col in COLUMNS for row in ROWS):\n        return 'Draw'\n\n    return None",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        else:\n            raise ValueError(\"Invalid color\")\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for position in line:\n            column, row = position\n            column_index = COLUMNS.index(column)\n            if board[column_index][row] == 'Red':\n                red_count += 1\n            elif board[column_index][row] == 'Yellow':\n                yellow_count += 1\n        \n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red = set()\n    yellow = set()\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red.add((column, ROWS[len(red)]))\n        else:\n            yellow.add((column, ROWS[len(yellow)]))\n        \n        for line in LINES:\n            if line.issubset(red):\n                return 'Red'\n            elif line.issubset(yellow):\n                return 'Yellow'\n            \n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the board\n    board = [[''] * 7 for _ in range(6)]\n    \n    # Iterate over the moves\n    for move in pieces_positions:\n        # Get the column and color from the move\n        column, color = move.split('_')\n        \n        # Find the next empty row in the column\n        row = 5\n        while board[row][ord(column) - ord('A')]:\n            row -= 1\n        \n        # Place the color in the board\n        board[row][ord(column) - ord('A')] = color\n    \n        # Check for a winning condition\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no winning condition is found, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Keep track of the last player who placed a piece\n    last_player = None\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Split the piece position into column and player\n        column, player = piece.split('_')\n        \n        # Find the next available row in the column\n        row = -1\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n        \n        # Place the player's color in the grid\n        grid[row][ord(column) - ord('A')] = player\n        \n        # Check if the player has won\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == player for column, row in line):\n                return player\n        \n        # Update the last player\n        last_player = player\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to store the positions of the pieces\n    grid = [[None] * 7 for _ in range(6)]\n\n    # Iterate through the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split(\"_\")\n        row = 0\n        # Iterate through the rows of the column to find an empty space\n        while row < 6 and grid[row][ord(column) - ord('A')] is not None:\n            row += 1\n        # If a empty space is found, place the piece in the grid\n        if row < 6:\n            grid[row][ord(column) - ord('A')] = color\n\n        # Check if the player who placed the piece is the winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\""
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    def check_winner(board):\n        for line in LINES:\n            for player in ['Red', 'Yellow']:\n                if all(board[cell] == player for cell in line):\n                    return player\n        return None\n\n    board = {(column, row): None for column in COLUMNS for row in ROWS}\n\n    for piece in pieces_positions:\n        column, player = piece.split('_')\n        row = next(row for row in reversed(ROWS) if board[column, row] is None)\n        board[column, row] = player\n\n        winner = check_winner(board)\n        if winner is not None:\n            return winner\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = -1\n        while board[row][ord(column) - ord('A')]:\n            row -= 1\n        board[row][ord(column) - ord('A')] = color\n    \n    for line in LINES:\n        colors = set(board[row][ord(column) - ord('A')] for column, row in line)\n        if len(colors) == 1 and colors != {''}:\n            return colors.pop()\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate over each piece position\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n\n        # Find the lowest empty cell in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n\n        # Place the color in the lowest empty cell\n        grid[row][ord(column) - ord('A')] = color\n\n        # Check if the current move is a winning move\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # If no winning move is found, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in ROWS:\n            if board[COLUMNS.index(column)][row] == '':\n                board[COLUMNS.index(column)][row] = color\n                break\n\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        for row in range(6):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n        for row in range(len(ROWS)-1, -1, -1):\n            if board[ord(column) - ord('A')][row] is None:\n                board[ord(column) - ord('A')][row] = color\n                break\n    \n    for line in LINES:\n        for column, row in line:\n            if all(board[ord(c) - ord('A')][r] == 'Yellow' for c, r in line):\n                return 'Yellow'\n            elif all(board[ord(c) - ord('A')][r] == 'Red' for c, r in line):\n                return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        \n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to track the positions of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the list of pieces positions\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n        \n        # Find the first empty row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no player has won, it is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_pieces = set()\n    yellow_pieces = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(6) if (column, i) not in red_pieces and (column, i) not in yellow_pieces)\n        if color == 'Red':\n            red_pieces.add((column, row))\n        else:\n            yellow_pieces.add((column, row))\n        for line in LINES:\n            if line <= red_pieces:\n                return 'Red'\n            elif line <= yellow_pieces:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to keep track of the game\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the next available row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        line_colors = {grid[row][ord(column) - ord('A')] for column, row in line}\n        if line_colors == {'Red'}:\n            return 'Red'\n        elif line_colors == {'Yellow'}:\n            return 'Yellow'\n    \n    # If no player has won, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [[None] * 7 for _ in range(6)]\n    \n    # Loop through each piece position\n    for piece_position in pieces_positions:\n        # Get the column and color of the piece\n        column, color = piece_position.split('_')\n        row = 0\n        \n        # Find the lowest empty row in the column\n        while row < 6 and grid[row][ord(column) - ord('A')] is not None:\n            row += 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n        # Check if the current player has won\n        for line in LINES:\n            # Check if all the positions in the line have the same color\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                # Return the color of the winner\n                return color\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = ROWS[max(j for j in ROWS if (column, j) not in red_moves and (column, j) not in yellow_moves)]\n        (red_moves if color == 'Red' else yellow_moves).add((column, row))\n\n        if any(line <= red_moves for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_moves for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    # Define the grid size\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n\n    # Define the lines to check for a winning combination\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create a grid to keep track of the pieces\n    grid = [['']*len(ROWS) for _ in range(len(COLUMNS))]\n\n    # Iterate through the pieces positions\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n        # Find the next empty row in the column\n        row = next((i for i, col in enumerate(grid[COLUMNS.index(column)]) if not col), None)\n        if row is not None:\n            # Place the piece in the grid\n            grid[COLUMNS.index(column)][row] = color\n\n            # Check if there is a winning combination\n            for line in LINES:\n                if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                    return color\n\n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a grid to track the pieces\n    grid = [[None] * 7 for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Get the column and color of the current piece\n        column, color = piece.split(\"_\")\n        column_index = ord(column) - ord(\"A\")\n        \n        # Find the row to place the current piece\n        for row in range(6):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n    \n    # Check for a win in each line\n    for line in LINES:\n        colors = [grid[row][ord(column) - ord(\"A\")] for column, row in line]\n        if colors[0] is not None and all(color == colors[0] for color in colors):\n            return colors[0]\n    \n    # If no win is found, it is a draw\n    return \"Draw\""
        ],
        "3": [
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    # Loop through the pieces_positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split(\"_\")\n        \n        # Find the first empty row in the column\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - ord('A')] == \"\":\n                # Place the piece in the grid\n                grid[row][ord(column) - ord('A')] = color\n                break\n                \n    # Check for a winner\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all the colors are the same and not empty\n        if all(color == colors[0] and color != \"\" for color in colors):\n            return colors[0]\n        \n    # If no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [[None for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n        else:\n            continue\n        \n        for line in LINES:\n            if all(grid[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = -1\n        for i in range(len(ROWS)):\n            if grid[i][COLUMNS.index(col)] == '':\n                row = i\n                break\n        grid[row][COLUMNS.index(col)] = color\n    \n        for line in LINES:\n            if all(grid[r][COLUMNS.index(c)] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "```python\n    board = [['']*6 for _ in range(7)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[ord(column)-ord('A')][board[ord(column)-ord('A')].index('')] = players[color]\n\n        for line in LINES:\n            if all(board[ord(column)-ord('A')][row] == players[color] for column, row in line):\n                return color\n    return 'Draw'\n```",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                grid[COLUMNS.index(column)][row] = color\n                break\n        else:\n            continue\n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n        \n        # Find the row to place the piece\n        row = -1\n        for i in range(6):\n            if grid[i][ord(column) - ord('A')] == ' ':\n                row = i\n                break\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create an empty board with 6 rows and 7 columns\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map the column names to their indices\n    column_indices = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate over the pieces_positions list\n    for piece_position in pieces_positions:\n        # Extract the column name and color from the piece_position string\n        column_name, color = piece_position.split('_')\n        \n        # Get the column index from the column_indices dictionary\n        column_index = column_indices[column_name]\n        \n        # Find the first empty row in the column\n        for row_index in range(5, -1, -1):\n            if board[row_index][column_index] == '':\n                # Place the color in the empty cell\n                board[row_index][column_index] = color\n                break\n    \n    # Check for a winning condition\n    for line in LINES:\n        # Create a list of colors in the line\n        colors = [board[row][column_indices[column]] for column, row in line]\n        \n        # Check if all the colors in the line are the same and not empty\n        if all(color == colors[0] and color != '' for color in colors):\n            return colors[0]\n    \n    # If no winning condition is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * 7 for _ in range(6)]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if grid[i][ord(column) - ord('A')] is None), None)\n        grid[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(grid[j][ord(i) - ord('A')] == color for i, j in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n            \ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[COLUMNS.index(column)].index(None)\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    players = {'Red', 'Yellow'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column][grid[column].index(None)] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_positions.add((column, ROWS[len(red_positions)]))\n        else:\n            yellow_positions.add((column, ROWS[len(yellow_positions)]))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Yellow': set(), 'Red': set()}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        pieces[color].add((column, max(ROWS) - sum(1 for other in pieces[color] if other[0] == column)))\n        for line in LINES:\n            if line.issubset(pieces[color]):\n                return color\n    \n    return 'Draw'"
        ],
        "4": [
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[\"\" for _ in range(7)] for _ in range(6)]\n    \n    # Loop through the pieces_positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split(\"_\")\n        \n        # Find the first empty row in the column\n        for row in range(5, -1, -1):\n            if grid[row][ord(column) - ord('A')] == \"\":\n                # Place the piece in the grid\n                grid[row][ord(column) - ord('A')] = color\n                break\n                \n    # Check for a winner\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all the colors are the same and not empty\n        if all(color == colors[0] and color != \"\" for color in colors):\n            return colors[0]\n        \n    # If no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    grid = [[None for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n        else:\n            continue\n        \n        for line in LINES:\n            if all(grid[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        row = next((i for i, v in enumerate(grid) if v[COLUMNS.index(col)] == ''), None)\n        if row is not None:\n            grid[row][COLUMNS.index(col)] = color\n    \n    for line in LINES:\n        colors = {grid[row][COLUMNS.index(col)] for col, row in line}\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    \n    return 'Draw'",
            "```python\n    board = [['']*6 for _ in range(7)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[ord(column)-ord('A')][board[ord(column)-ord('A')].index('')] = players[color]\n\n        for line in LINES:\n            if all(board[ord(column)-ord('A')][row] == players[color] for column, row in line):\n                return color\n    return 'Draw'\n```",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n        \n        # Find the row to place the piece\n        row = -1\n        for i in range(6):\n            if grid[i][ord(column) - ord('A')] == ' ':\n                row = i\n                break\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Check if all positions in the line have the same color\n        colors = set()\n        for position in line:\n            colors.add(grid[position[1]][ord(position[0]) - ord('A')])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in ROWS] for _ in COLUMNS]\n    for pos in pieces_positions:\n        col, color = pos.split('_')\n        col_index = COLUMNS.index(col)\n        for row in range(len(grid[col_index])-1, -1, -1):\n            if grid[col_index][row] == ' ':\n                grid[col_index][row] = color[0]\n                break\n    for line in LINES:\n        line_values = set()\n        for pos in line:\n            col, row = pos\n            col_index = COLUMNS.index(col)\n            row_index = row\n            line_values.add(grid[col_index][row_index])\n        if len(line_values) == 1 and ' ' not in line_values:\n            if 'R' in line_values:\n                return 'Red'\n            else:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty board with 6 rows and 7 columns\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map the color to the player\n    player_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Loop through the pieces positions\n    for position in pieces_positions:\n        # Get the column index from the position string\n        column = ord(position[0]) - ord('A')\n        \n        # Get the color from the position string\n        color = position.split('_')[1]\n        \n        # Loop through the rows in reverse order\n        for row in range(5, -1, -1):\n            # If the cell is empty, place the color in the cell and break the loop\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n    \n    # Check if there is a winner\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        \n        # If there are 4 colors in a row, return the player who has the color\n        if len(set(colors)) == 1 and colors[0] != '':\n            return player_map[colors[0]]\n    \n    # If there are no winners, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * 7 for _ in range(6)]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if grid[i][ord(column) - ord('A')] is None), None)\n        if row is None:\n            continue\n\n        grid[row][ord(column) - ord('A')] = color\n        if any(all(grid[i][ord(c) - ord('A')] == color for c, i in line) for line in LINES):\n            return color\n\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n            \ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[COLUMNS.index(column)].index(None)\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    players = {'Red', 'Yellow'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column][grid[column].index(None)] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_positions.add((column, ROWS[len(red_positions)]))\n        else:\n            yellow_positions.add((column, ROWS[len(yellow_positions)]))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n\n    return 'Draw'"
        ]
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the moves\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_to_player = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over each move\n    for move in pieces_positions:\n        # Extract the column and color from the move\n        column, color = move.split('_')\n        \n        # Convert the column to an index\n        column_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][column_index].index('')\n        \n        # Update the grid with the move\n        grid[row_index][column_index] = color\n        \n        # Check if the move results in a winning position\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return color_to_player[color]\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {column: [] for column in COLUMNS}\n    players = {'Red': [], 'Yellow': []}\n    \n    for move in pieces_positions:\n        column, player = move.split('_')\n        board[column].append(player)\n        \n        for line in LINES:\n            if set(board[column]) == set(player) == 4:\n                return player\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    \n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_index = COLUMNS.index(column)\n        row_index = next((i for i, cell in enumerate(board[column_index]) if cell is None), None)\n        if row_index is None:\n            return \"Draw\"\n        board[column_index][row_index] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for piece_position in pieces_positions:\n        column, color = piece_position.split('_')\n        board[COLUMNS.index(column)][ROWS.index(next(i for i, v in enumerate(board[COLUMNS.index(column)]) if not v)) - 1] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(column)][ROWS.index(row)] == color for column, row in line):\n                return color\n    return \"Draw\"",
            "```python\n    board = [[None for _ in range(7)] for _ in range(6)]\n    \n    for position in pieces_positions:\n        column = position[0]\n        color = position[2:]\n        \n        for row in range(6):\n            if board[row][column] == None:\n                board[row][column] = color\n                break\n    \n    for line in LINES:\n        for row, column in line:\n            if board[row][column] != None:\n                color = board[row][column]\n                if all(board[r][c] == color for r, c in line):\n                    return color\n    \n    if all(board[r][c] != None for r in range(6) for c in range(7)):\n        return \"Draw\"\n    else:\n        return \"Draw\"\n```",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a grid to store the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # iterate through the pieces positions\n    for pos in pieces_positions:\n        # get the column and color from the position\n        column, color = pos.split('_')\n        \n        # find the next empty row in the column\n        row = 5\n        while row >= 0 and grid[row][ord(column)-65] != '':\n            row -= 1\n        \n        # if the row is valid, place the piece\n        if row >= 0:\n            grid[row][ord(column)-65] = color\n    \n    # check for a win\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n    \n    # if there are no empty spaces, it's a draw\n    if all(all(cell != '' for cell in row) for row in grid):\n        return 'Draw'\n    \n    # if no one has won and there are still empty spaces, the game is ongoing\n    return 'Ongoing'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell in the grid with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each line, check if all the cells are occupied by the same player's color.\n7. If a winner is found, return the corresponding color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[:-3]:\n                if all(board[COLUMNS[i+k]][row+k] == board[COLUMNS[i+k+1]][row+k+1] == board[COLUMNS[i+k+2]][row+k+2] == board[COLUMNS[i+k+3]][row+k+3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row+k]\n        for col in COLUMNS[:-3]:\n            for row in ROWS[3:]:\n                if all(board[COLUMNS[i+k]][row-k] == board[COLUMNS[i+k+1]][row-k-1] == board[COLUMNS[i+k+2]][row-k-2] == board[COLUMNS[i+k+3]][row-k-3] for k in range(4)):\n                    return board[COLUMNS[i+k]][row-k]\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'"
        ],
        "1": [
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        grid[COLUMNS.index(column)][next(i for i in range(len(ROWS)) if grid[COLUMNS.index(column)][i] is None)] = color\n\n    for line in LINES:\n        colors = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if colors.count(colors[0]) == 4 and colors[0] is not None:\n            return colors[0]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max([row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n\n    if len(red_positions) + len(yellow_positions) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(5, -1, -1):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n    \n    for line in LINES:\n        cells = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        if all(cell == 'Red' for cell in cells):\n            return 'Red'\n        elif all(cell == 'Yellow' for cell in cells):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [['' for _ in range(len(ROWS))] for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index('')] = color\n\n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][ROW] == color for column, ROW in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {}\n    for pp in pieces_positions:\n        col, color = pp.split('_')\n        row = ROWS[-1]\n        while (col, row) in grid:\n            row = row - 1\n        if row < 0:\n            raise ValueError('column full')\n        grid[col, row] = color\n        if any(line <= grid.keys() for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None]*len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in ROWS:\n            if board[COLUMNS.index(column)][row] is None:\n                board[COLUMNS.index(column)][row] = color\n                break\n\n    for line in LINES:\n        if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n            return 'Red'\n        elif all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [None] * len(ROWS) for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col][board[col].index(None)] = color\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line]\n        if all(color == 'Yellow' for color in colors):\n            return 'Yellow'\n        elif all(color == 'Red' for color in colors):\n            return 'Red'\n\n    if all(board[col][row] is not None for col in COLUMNS for row in ROWS):\n        return 'Draw'\n\n    return None",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        else:\n            raise ValueError(\"Invalid color\")\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for position in line:\n            column, row = position\n            column_index = COLUMNS.index(column)\n            if board[column_index][row] == 'Red':\n                red_count += 1\n            elif board[column_index][row] == 'Yellow':\n                yellow_count += 1\n        \n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red = set()\n    yellow = set()\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red.add((column, ROWS[len(red)]))\n        else:\n            yellow.add((column, ROWS[len(yellow)]))\n        \n        for line in LINES:\n            if line.issubset(red):\n                return 'Red'\n            elif line.issubset(yellow):\n                return 'Yellow'\n            \n    if len(pieces_positions) == len(COLUMNS) * len(ROWS):\n        return 'Draw'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the board\n    board = [[''] * 7 for _ in range(6)]\n    \n    # Iterate over the moves\n    for move in pieces_positions:\n        # Get the column and color from the move\n        column, color = move.split('_')\n        \n        # Find the next empty row in the column\n        row = 5\n        while board[row][ord(column) - ord('A')]:\n            row -= 1\n        \n        # Place the color in the board\n        board[row][ord(column) - ord('A')] = color\n    \n        # Check for a winning condition\n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no winning condition is found, return Draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Keep track of the last player who placed a piece\n    last_player = None\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Split the piece position into column and player\n        column, player = piece.split('_')\n        \n        # Find the next available row in the column\n        row = -1\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n        \n        # Place the player's color in the grid\n        grid[row][ord(column) - ord('A')] = player\n        \n        # Check if the player has won\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == player for column, row in line):\n                return player\n        \n        # Update the last player\n        last_player = player\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    # Initialize the game grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[column_index][i] == '':\n                row_index = i\n                break\n        \n        # Place the piece in the grid\n        grid[column_index][row_index] = color\n        \n        # Check if the game has been won\n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    # If no one has won and the grid is full, it's a draw\n    if all(grid[column_index][i] != '' for column_index in range(7) for i in range(6)):\n        return 'Draw'\n    \n    # Otherwise, the game is still ongoing\n    return 'Ongoing'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to store the positions of the pieces\n    grid = [[None] * 7 for _ in range(6)]\n\n    # Iterate through the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split(\"_\")\n        row = 0\n        # Iterate through the rows of the column to find an empty space\n        while row < 6 and grid[row][ord(column) - ord('A')] is not None:\n            row += 1\n        # If a empty space is found, place the piece in the grid\n        if row < 6:\n            grid[row][ord(column) - ord('A')] = color\n\n        # Check if the player who placed the piece is the winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    board = [[''] * 7 for _ in range(6)]\n    colors = {'Red': 'R', 'Yellow': 'Y'}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_index = ord(column) - 65\n        \n        for row in range(5, -1, -1):\n            if board[row][col_index] == '':\n                board[row][col_index] = colors[color]\n                break\n        \n        for line in LINES:\n            if all(board[row][ord(column) - 65] == colors[color] for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        col, color = move.split(\"_\")\n        if color == \"Red\":\n            red_moves.append((col, ROWS[len([m for m in red_moves if m[0] == col])]))\n            if any(line.issubset(red_moves) for line in LINES):\n                return \"Red\"\n        else:\n            yellow_moves.append((col, ROWS[len([m for m in yellow_moves if m[0] == col])]))\n            if any(line.issubset(yellow_moves) for line in LINES):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {column: [None] * len(ROWS) for column in COLUMNS}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        board[column][board[column].index(None)] = color\n\n    for line in LINES:\n        if all(board[column][row] == 'Yellow' for column, row in line):\n            return 'Yellow'\n        if all(board[column][row] == 'Red' for column, row in line):\n            return 'Red'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty spaces\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map player color to their corresponding symbol\n    colors = {'Red': 'R', 'Yellow': 'Y'}\n    \n    # Iterate through the pieces_positions list\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Find the empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] == ' ':\n            row += 1\n        \n        # Update the grid with the player's color symbol\n        grid[row - 1][ord(column) - ord('A')] = colors[color]\n        \n        # Check if the player has won\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == colors[color] for column, row in line):\n                return color\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\""
        ],
        "2": [
            "```python\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        col, color = move.split('_')\n        row = next((i for i in range(6) if board[i][ord(col) - ord('A')] == ' '), None)\n        if row is not None:\n            board[row][ord(col) - ord('A')] = color[0]\n            for line in LINES:\n                if all(board[i][ord(j) - ord('A')] == color[0] for j, i in line):\n                    return color\n    return 'Draw'\n```",
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n        for row in range(len(ROWS)-1, -1, -1):\n            if board[ord(column) - ord('A')][row] is None:\n                board[ord(column) - ord('A')][row] = color\n                break\n    \n    for line in LINES:\n        for column, row in line:\n            if all(board[ord(c) - ord('A')][r] == 'Yellow' for c, r in line):\n                return 'Yellow'\n            elif all(board[ord(c) - ord('A')][r] == 'Red' for c, r in line):\n                return 'Red'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    # create a board with all empty positions\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    # iterate through the pieces positions and update the board accordingly\n    for piece in pieces_positions:\n        column, color = piece.split(\"_\")\n        col_index = COLUMNS.index(column)\n        for row in range(len(ROWS) - 1, -1, -1):\n            if board[col_index][row] is None:\n                board[col_index][row] = color\n                break\n    # check for a winning line\n    for line in LINES:\n        line_values = set()\n        for pos in line:\n            col, row = pos\n            col_index = COLUMNS.index(col)\n            line_values.add(board[col_index][row])\n        if len(line_values) == 1 and None not in line_values:\n            return line_values.pop()\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        \n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_pieces = set()\n    yellow_pieces = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(5, -1, -1) if (column, i) not in red_pieces and (column, i) not in yellow_pieces)\n        if color == 'Red':\n            red_pieces.add((column, row))\n            if any(line <= red_pieces for line in LINES):\n                return 'Red'\n        else:\n            yellow_pieces.add((column, row))\n            if any(line <= yellow_pieces for line in LINES):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to keep track of the game\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the next available row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        line_colors = {grid[row][ord(column) - ord('A')] for column, row in line}\n        if line_colors == {'Red'}:\n            return 'Red'\n        elif line_colors == {'Yellow'}:\n            return 'Yellow'\n    \n    # If no player has won, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [[None] * 7 for _ in range(6)]\n    \n    # Loop through each piece position\n    for piece_position in pieces_positions:\n        # Get the column and color of the piece\n        column, color = piece_position.split('_')\n        row = 0\n        \n        # Find the lowest empty row in the column\n        while row < 6 and grid[row][ord(column) - ord('A')] is not None:\n            row += 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n        # Check if the current player has won\n        for line in LINES:\n            # Check if all the positions in the line have the same color\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                # Return the color of the winner\n                return color\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # fill in the grid with the pieces positions\n    for position in pieces_positions:\n        col, color = position.split('_')\n        col_index = ord(col) - ord('A')\n        for row in range(6):\n            if grid[row][col_index] == '':\n                grid[row][col_index] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        colors = set(grid[row][ord(col) - ord('A')] for col, row in line)\n        if len(colors) == 1 and '' not in colors:\n            return colors.pop()\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def get_color(piece):\n        return piece.split('_')[1]\n\n    def get_column(piece):\n        return piece.split('_')[0]\n\n    def check_winner(color, moves):\n        for line in LINES:\n            if all(piece in moves[color] for piece in line):\n                return color\n        return None\n\n    moves = {'Red': set(), 'Yellow': set()}\n    for piece in pieces_positions:\n        color = get_color(piece)\n        column = get_column(piece)\n        row = max((r for r in ROWS if (column, r) not in moves[color]), default=None)\n        if row is not None:\n            moves[color].add((column, row))\n            winner = check_winner(color, moves)\n            if winner is not None:\n                return winner\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    def extract_color(piece_position):\n        return piece_position.split(\"_\")[1]\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n\n    for piece_position in pieces_positions:\n        column, color = piece_position.split(\"_\")\n        column_index = ord(column) - ord('A')\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n\n        for line in LINES:\n            if all(board[row][ord(column)-ord('A')] == color for column, row in line):\n                return color\n\n    return \"Draw\""
        ],
        "3": [
            "```python\n    board = [['']*6 for _ in range(7)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[ord(column)-ord('A')][board[ord(column)-ord('A')].index('')] = players[color]\n\n        for line in LINES:\n            if all(board[ord(column)-ord('A')][row] == players[color] for column, row in line):\n                return color\n    return 'Draw'\n```",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n        \n        # Find the row to place the piece\n        row = -1\n        for i in range(6):\n            if grid[i][ord(column) - ord('A')] == ' ':\n                row = i\n                break\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Check if all positions in the line have the same color\n        colors = set()\n        for position in line:\n            colors.add(grid[position[1]][ord(position[0]) - ord('A')])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * 7 for _ in range(6)]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if grid[i][ord(column) - ord('A')] is None), None)\n        grid[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(grid[j][ord(i) - ord('A')] == color for i, j in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n            \ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[COLUMNS.index(column)].index(None)\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    players = {'Red', 'Yellow'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column][grid[column].index(None)] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_positions.add((column, ROWS[len(red_positions)]))\n        else:\n            yellow_positions.add((column, ROWS[len(yellow_positions)]))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    pieces = {'Yellow': set(), 'Red': set()}\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        pieces[color].add((column, max(ROWS) - sum(1 for other in pieces[color] if other[0] == column)))\n        for line in LINES:\n            if line.issubset(pieces[color]):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        row_index = -1\n        while grid[row_index][column_index] is not None:\n            row_index -= 1\n        grid[row_index][column_index] = color\n\n    for line in LINES:\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if all(color == 'Red' for color in colors):\n            return 'Red'\n        if all(color == 'Yellow' for color in colors):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = len({r for c,r in red | yellow if c == column})\n        if color == 'Red':\n            red.add((column, row))\n        else:\n            yellow.add((column, row))\n        for line in LINES:\n            if line <= red:\n                return 'Red'\n            elif line <= yellow:\n                return 'Yellow'\n    return 'Draw'"
        ],
        "4": [
            "```python\n    board = [['']*6 for _ in range(7)]\n    players = {'Red': 'R', 'Yellow': 'Y'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[ord(column)-ord('A')][board[ord(column)-ord('A')].index('')] = players[color]\n\n        for line in LINES:\n            if all(board[ord(column)-ord('A')][row] == players[color] for column, row in line):\n                return color\n    return 'Draw'\n```",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n        \n        # Find the row to place the piece\n        row = -1\n        for i in range(6):\n            if grid[i][ord(column) - ord('A')] == ' ':\n                row = i\n                break\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create an empty board with 6 rows and 7 columns\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map the column names to their indices\n    column_indices = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate over the pieces_positions list\n    for piece_position in pieces_positions:\n        # Extract the column name and color from the piece_position string\n        column_name, color = piece_position.split('_')\n        \n        # Get the column index from the column_indices dictionary\n        column_index = column_indices[column_name]\n        \n        # Find the first empty row in the column\n        for row_index in range(5, -1, -1):\n            if board[row_index][column_index] == '':\n                # Place the color in the empty cell\n                board[row_index][column_index] = color\n                break\n    \n    # Check for a winning condition\n    for line in LINES:\n        # Create a list of colors in the line\n        colors = [board[row][column_indices[column]] for column, row in line]\n        \n        # Check if all the colors in the line are the same and not empty\n        if all(color == colors[0] and color != '' for color in colors):\n            return colors[0]\n    \n    # If no winning condition is found, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * 7 for _ in range(6)]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if grid[i][ord(column) - ord('A')] is None), None)\n        grid[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(grid[j][ord(i) - ord('A')] == color for i, j in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n            \ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[COLUMNS.index(column)].index(None)\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    players = {'Red', 'Yellow'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column][grid[column].index(None)] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_positions.add((column, ROWS[len(red_positions)]))\n        else:\n            yellow_positions.add((column, ROWS[len(yellow_positions)]))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        row_index = -1\n        while grid[row_index][column_index] is not None:\n            row_index -= 1\n        grid[row_index][column_index] = color\n\n    for line in LINES:\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if all(color == 'Red' for color in colors):\n            return 'Red'\n        if all(color == 'Yellow' for color in colors):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty spaces\n    grid = [[' '] * 7 for _ in range(6)]\n    \n    # Loop through each piece position\n    for piece in pieces_positions:\n        # Split the piece position into column and color\n        column, color = piece.split('_')\n        \n        # Find the first available row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != ' ':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all colors are the same and not empty\n        if all(color != ' ' and color == colors[0] for color in colors):\n            return colors[0]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = len({r for c,r in red | yellow if c == column})\n        if color == 'Red':\n            red.add((column, row))\n        else:\n            yellow.add((column, row))\n        for line in LINES:\n            if line <= red:\n                return 'Red'\n            elif line <= yellow:\n                return 'Yellow'\n    return 'Draw'"
        ]
    },
    "2": {
        "0": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in range(len(ROWS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if grid[row][column_idx] == '':\n                grid[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(grid[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # create a dictionary to store the number of pieces in each position\n    board = {}\n    \n    # create a dictionary to store the current player's color\n    current_player = {'Red': 0, 'Yellow': 0}\n    \n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # extract the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # check if the column is already in the board dictionary\n        if column not in board:\n            # if not, add the column to the board dictionary with an empty list\n            board[column] = []\n        \n        # append the color to the column list in the board dictionary\n        board[column].append(color)\n        \n        # check if there are four consecutive pieces of the same color in the board\n        for line in LINES:\n            # get the colors in the current line\n            line_colors = [board[column][index] for column, index in line]\n            \n            # check if there are four consecutive pieces of the same color in the current line\n            if line_colors.count(color) == 4:\n                # return the current player's color as the winner\n                return color\n        \n        # switch the current player's color\n        current_player[color] += 1\n        \n        # check if all the positions in the board are occupied\n        if all(len(board[column]) == 6 for column in board):\n            # if so, return 'Draw'\n            return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    board = [['' for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i, cell in enumerate(board[column]) if cell == '')\n        board[column][row] = color\n        for line in LINES:\n            if all(board[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty slots\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    players = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column)-65] == '':\n                grid[row][ord(column)-65] = color\n                break\n                \n        # Check for a winner after each move\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return players[color]\n    \n    # If no winner is found, it's a draw\n    return 'Draw'",
            "# Approach\n\nWe can start by creating a 2D grid to represent the game board. We can initialize it with a value of `None` for each cell, indicating that it is empty. Then, we can iterate over the `pieces_positions` list and update the grid accordingly. After each move, we can check if there is a winner by iterating over the `LINES` list of winning configurations and checking if all the cells in any of those configurations are occupied by the same player's piece. If we find a winning configuration, we can return the corresponding player's color. If no winner is found after all the moves have been made, we can return \"Draw\".\n\n# Plan\n\n1. Create an empty 2D grid with dimensions 6x7.\n2. Iterate over the `pieces_positions` list.\n3. Parse each move in the format `column_color` and extract the column and color.\n4. Find the first empty row in the specified column and update the corresponding cell with the player's color.\n5. Check if there is a winner by iterating over the `LINES` list.\n6. For each winning configuration, check if all the cells are occupied by the same player's piece.\n7. If a winner is found, return the corresponding player's color.\n8. If no winner is found after all moves have been made, return \"Draw\".\n\nLet's implement this plan in the `who_is_winner` function.",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [] for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col].append(color)\n\n    for line in LINES:\n        for col in COLUMNS:\n            if len(board[col]) < 4:\n                continue\n            if all(board[col][i] == board[col][i+1] == board[col][i+2] == board[col][i+3] for i in range(len(board[col]) - 3)):\n                return board[col][0]\n        for row in ROWS:\n            if all(board[COLUMNS[i]][row] == board[COLUMNS[i+1]][row] == board[COLUMNS[i+2]][row] == board[COLUMNS[i+3]][row] for i in range(len(COLUMNS) - 3)):\n                return board[COLUMNS[i]][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j+1]] == board[COLUMNS[i+2]][ROWS[j+2]] == board[COLUMNS[i+3]][ROWS[j+3]] for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)):\n            return board[col][row]\n        if all(board[col][row] == board[COLUMNS[i+1]][ROWS[j-1]] == board[COLUMNS[i+2]][ROWS[j-2]] == board[COLUMNS[i+3]][ROWS[j-3]] for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))):\n            return board[col][row]\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max((r for r in ROWS if (column, r) not in red_moves and (column, r) not in yellow_moves), default=None)\n        if row is not None:\n            if color == 'Red':\n                red_moves.add((column, row))\n                if any(line <= red_moves for line in LINES):\n                    return 'Red'\n            else:\n                yellow_moves.add((column, row))\n                if any(line <= yellow_moves for line in LINES):\n                    return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None] * 6 for _ in range(7)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_idx = COLUMNS.index(column)\n        row_idx = next((i for i in range(6) if board[col_idx][i] is None), None)\n        if row_idx is not None:\n            board[col_idx][row_idx] = color\n        \n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = {}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[column] = board.get(column, '') + color[0]\n\n        for line in LINES:\n            if all(board.get(cell, '') == color[0] for cell in line):\n                return color\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for move in pieces_positions:\n        column, color = move.split(\"_\")\n        column_idx = COLUMNS.index(column)\n        for row_idx in range(len(ROWS)-1, -1, -1):\n            if board[column_idx][row_idx] is None:\n                board[column_idx][row_idx] = color\n                break\n    \n    for line in LINES:\n        colors = [board[column_idx][row_idx] for column_idx, row_idx in line]\n        if all(color == \"Red\" for color in colors):\n            return \"Red\"\n        elif all(color == \"Yellow\" for color in colors):\n            return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the game grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Dictionary to map colors to players\n    player_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the moves\n    for move in pieces_positions:\n        # Split the move into column and color\n        column, color = move.split('_')\n        \n        # Find the column index\n        column_index = ord(column) - ord('A')\n        \n        # Find the row index\n        row_index = 5 - grid[::-1][column_index].count('')\n        \n        # Place the piece in the grid\n        grid[row_index][column_index] = color\n    \n        # Check for a winner\n        for line in LINES:\n            if all(grid[j][i] == color for i, j in line):\n                return player_map[color]\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {}\n    for i in range(len(pieces_positions)):\n        col, player = pieces_positions[i].split('_')\n        row = len(board.get(col, []))\n        board.setdefault(col, []).append(player)\n\n        for line in LINES:\n            if all((col, row) in line for col, row in line):\n                return player\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_positions = set()\n    yellow_positions = set()\n    \n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max([row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        elif color == \"Yellow\":\n            yellow_positions.add((column, row))\n        \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    for piece in pieces_positions:\n        column = ord(piece[0]) - ord('A')\n        color = piece[2:]\n        \n        for row in reversed(range(6)):\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(board[row][column] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # Create a dictionary to store the number of pieces for each player in each line\n    count = {'Red': 0, 'Yellow': 0}\n    \n    for move in pieces_positions:\n        # Extract the column and color from the move\n        column, color = move.split('_')\n        \n        # Convert the column to a numeric index\n        column_index = COLUMNS.index(column)\n        \n        # Find the row where the piece will be placed\n        row = ROWS[-1]\n        while (column, row) in count:\n            row -= 1\n        \n        # Update the count dictionary\n        count[color] += 1\n        \n        # Check if the current move results in a win for any player\n        for line in LINES:\n            if (column, row) in line and all((COLUMNS[column_index+k], row) in count for k in range(4)):\n                return color\n    \n    # If no player has won, check if the game is a draw\n    if count['Red'] + count['Yellow'] == len(pieces_positions):\n        return 'Draw'\n    \n    # If the game is not a draw, return None\n    return None",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]"
        ],
        "1": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = max([row for row in ROWS if (column, row) not in red_positions and (column, row) not in yellow_positions])\n        \n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n            \n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n\n    if len(red_positions) + len(yellow_positions) == len(COLUMNS) * len(ROWS):\n        return \"Draw\"\n    else:\n        return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    grid = [[None] * 7 for _ in range(6)]\n    \n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        \n        for row in range(5, -1, -1):\n            if grid[row][column_index] is None:\n                grid[row][column_index] = color\n                break\n    \n    for line in LINES:\n        cells = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        if all(cell == 'Red' for cell in cells):\n            return 'Red'\n        elif all(cell == 'Yellow' for cell in cells):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    grid = {}\n    for pp in pieces_positions:\n        col, color = pp.split('_')\n        row = ROWS[-1]\n        while (col, row) in grid:\n            row = row - 1\n        if row < 0:\n            raise ValueError('column full')\n        grid[col, row] = color\n        if any(line <= grid.keys() for line in LINES):\n            return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None]*len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        for row in ROWS:\n            if board[COLUMNS.index(column)][row] is None:\n                board[COLUMNS.index(column)][row] = color\n                break\n\n    for line in LINES:\n        if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n            return 'Red'\n        elif all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = {col: [None] * len(ROWS) for col in COLUMNS}\n    for piece in pieces_positions:\n        col, color = piece.split('_')\n        board[col][board[col].index(None)] = color\n\n    for line in LINES:\n        colors = [board[col][row] for col, row in line]\n        if all(color == 'Yellow' for color in colors):\n            return 'Yellow'\n        elif all(color == 'Red' for color in colors):\n            return 'Red'\n\n    if all(board[col][row] is not None for col in COLUMNS for row in ROWS):\n        return 'Draw'\n\n    return None",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        else:\n            raise ValueError(\"Invalid color\")\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    \n    if len(red_moves) + len(yellow_moves) == 42:\n        return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    board = [[None for _ in ROWS] for _ in COLUMNS]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n    \n    for line in LINES:\n        red_count, yellow_count = 0, 0\n        for position in line:\n            column, row = position\n            column_index = COLUMNS.index(column)\n            if board[column_index][row] == 'Red':\n                red_count += 1\n            elif board[column_index][row] == 'Yellow':\n                yellow_count += 1\n        \n        if red_count == 4:\n            return 'Red'\n        elif yellow_count == 4:\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    board = [[None] * 7 for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(row for row in range(6) if board[row][ord(column) - ord('A')] is None)\n        board[row][ord(column) - ord('A')] = color\n    \n    for line in LINES:\n        if all(board[row][ord(column) - ord('A')] == 'Red' for column, row in line):\n            return 'Red'\n        if all(board[row][ord(column) - ord('A')] == 'Yellow' for column, row in line):\n            return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Keep track of the last player who placed a piece\n    last_player = None\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Split the piece position into column and player\n        column, player = piece.split('_')\n        \n        # Find the next available row in the column\n        row = -1\n        while grid[row][ord(column) - ord('A')] != '':\n            row -= 1\n        \n        # Place the player's color in the grid\n        grid[row][ord(column) - ord('A')] = player\n        \n        # Check if the player has won\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == player for column, row in line):\n                return player\n        \n        # Update the last player\n        last_player = player\n    \n    # If no player has won, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n               \n    # Initialize the game grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[column_index][i] == '':\n                row_index = i\n                break\n        \n        # Place the piece in the grid\n        grid[column_index][row_index] = color\n        \n        # Check if the game has been won\n        for line in LINES:\n            if all(grid[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    \n    # If no one has won and the grid is full, it's a draw\n    if all(grid[column_index][i] != '' for column_index in range(7) for i in range(6)):\n        return 'Draw'\n    \n    # Otherwise, the game is still ongoing\n    return 'Ongoing'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to store the positions of the pieces\n    grid = [[None] * 7 for _ in range(6)]\n\n    # Iterate through the pieces positions\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split(\"_\")\n        row = 0\n        # Iterate through the rows of the column to find an empty space\n        while row < 6 and grid[row][ord(column) - ord('A')] is not None:\n            row += 1\n        # If a empty space is found, place the piece in the grid\n        if row < 6:\n            grid[row][ord(column) - ord('A')] = color\n\n        # Check if the player who placed the piece is the winner\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    # If no winner is found, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = []\n    yellow_moves = []\n    \n    for move in pieces_positions:\n        col, color = move.split(\"_\")\n        if color == \"Red\":\n            red_moves.append((col, ROWS[len([m for m in red_moves if m[0] == col])]))\n            if any(line.issubset(red_moves) for line in LINES):\n                return \"Red\"\n        else:\n            yellow_moves.append((col, ROWS[len([m for m in yellow_moves if m[0] == col])]))\n            if any(line.issubset(yellow_moves) for line in LINES):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty spaces\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map player color to their corresponding symbol\n    colors = {'Red': 'R', 'Yellow': 'Y'}\n    \n    # Iterate through the pieces_positions list\n    for position in pieces_positions:\n        # Split the position string into column and color\n        column, color = position.split('_')\n        \n        # Find the empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] == ' ':\n            row += 1\n        \n        # Update the grid with the player's color symbol\n        grid[row - 1][ord(column) - ord('A')] = colors[color]\n        \n        # Check if the player has won\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == colors[color] for column, row in line):\n                return color\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_moves = set()\n    yellow_moves = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        if any(line <= red_moves for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_moves for line in LINES):\n            return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[' ' for _ in range(6)] for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row_index, row in enumerate(board[column_index]):\n            if row == ' ':\n                board[column_index][row_index] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            row_index = ROWS.index(row)\n            colors.add(board[column_index][row_index])\n        \n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    return \"Yellow\""
        ],
        "2": [
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    red_moves = set()\n    yellow_moves = set()\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        \n        if color == 'Red':\n            red_moves.add((column, ROWS[len(red_moves)]))\n        elif color == 'Yellow':\n            yellow_moves.add((column, ROWS[len(yellow_moves)]))\n        \n        for line in LINES:\n            if line <= red_moves:\n                return 'Red'\n            elif line <= yellow_moves:\n                return 'Yellow'\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    red_pieces = set()\n    yellow_pieces = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = next(i for i in range(5, -1, -1) if (column, i) not in red_pieces and (column, i) not in yellow_pieces)\n        if color == 'Red':\n            red_pieces.add((column, row))\n            if any(line <= red_pieces for line in LINES):\n                return 'Red'\n        else:\n            yellow_pieces.add((column, row))\n            if any(line <= yellow_pieces for line in LINES):\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((row for row in ROWS if grid[COLUMNS.index(column)][row] is None), None)\n        if row is None:\n            return \"Invalid Move\"\n        grid[COLUMNS.index(column)][row] = color\n    \n    for line in LINES:\n        colors = {grid[COLUMNS.index(column)][row] for column, row in line}\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create a 2D grid to keep track of the game\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Find the next available row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n        \n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        line_colors = {grid[row][ord(column) - ord('A')] for column, row in line}\n        if line_colors == {'Red'}:\n            return 'Red'\n        elif line_colors == {'Yellow'}:\n            return 'Yellow'\n    \n    # If no player has won, it's a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [[None] * 7 for _ in range(6)]\n    \n    # Loop through each piece position\n    for piece_position in pieces_positions:\n        # Get the column and color of the piece\n        column, color = piece_position.split('_')\n        row = 0\n        \n        # Find the lowest empty row in the column\n        while row < 6 and grid[row][ord(column) - ord('A')] is not None:\n            row += 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n        # Check if the current player has won\n        for line in LINES:\n            # Check if all the positions in the line have the same color\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                # Return the color of the winner\n                return color\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_moves = set()\n    yellow_moves = set()\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = ROWS[max(j for j in ROWS if (column, j) not in red_moves and (column, j) not in yellow_moves)]\n        (red_moves if color == 'Red' else yellow_moves).add((column, row))\n\n        if any(line <= red_moves for line in LINES):\n            return 'Red'\n        elif any(line <= yellow_moves for line in LINES):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[None] * 7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_idx = ord(column) - ord('A')\n        for row in range(5, -1, -1):\n            if board[row][column_idx] is None:\n                board[row][column_idx] = color\n                break\n    for line in LINES:\n        for color in ['Yellow', 'Red']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to track the pieces\n    grid = [[None] * 7 for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Split the piece position into column and color\n        column, color = piece.split(\"_\")\n        \n        # Find the first empty row in the column\n        for row in range(6):\n            if grid[row][ord(column) - ord(\"A\")] is None:\n                # Place the piece in the grid\n                grid[row][ord(column) - ord(\"A\")] = color\n                break\n    \n    # Check if there is a winning combination\n    for line in LINES:\n        # Get the colors in the line\n        colors = set(grid[row][ord(column) - ord(\"A\")] for column, row in line)\n        \n        # Check if all the colors are the same and not None\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    # If there is no winner, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        row = len([pos for pos in red_positions.union(yellow_positions) if pos[0] == column])\n        if color == \"Red\":\n            red_positions.add((column, row))\n        else:\n            yellow_positions.add((column, row))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return \"Red\"\n            elif line.issubset(yellow_positions):\n                return \"Yellow\"\n\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    def check_winner(player):\n        for line in LINES:\n            if all(pos in occupied[player] for pos in line):\n                return player\n        return None\n\n    occupied = {'Red': set(), 'Yellow': set()}\n    for position in pieces_positions:\n        column, player = position.split('_')\n        occupied[player].add((column, ROWS[len(occupied[player])]))\n        winner = check_winner(player)\n        if winner is not None:\n            return winner\n\n    return \"Draw\""
        ],
        "3": [
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n        \n        # Find the row to place the piece\n        row = -1\n        for i in range(6):\n            if grid[i][ord(column) - ord('A')] == ' ':\n                row = i\n                break\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Check if all positions in the line have the same color\n        colors = set()\n        for position in line:\n            colors.add(grid[position[1]][ord(position[0]) - ord('A')])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * 7 for _ in range(6)]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if grid[i][ord(column) - ord('A')] is None), None)\n        grid[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(grid[j][ord(i) - ord('A')] == color for i, j in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n            \ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[COLUMNS.index(column)].index(None)\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = {column: [None] * len(ROWS) for column in COLUMNS}\n    players = {'Red', 'Yellow'}\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        grid[column][grid[column].index(None)] = color\n        for line in LINES:\n            if all(grid[column][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_positions.add((column, ROWS[len(red_positions)]))\n        else:\n            yellow_positions.add((column, ROWS[len(yellow_positions)]))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_pieces = set()\n    yellow_pieces = set()\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(5, -1, -1) if (column, i) not in red_pieces and (column, i) not in yellow_pieces), None)\n        if row is not None:\n            if color == 'Red':\n                red_pieces.add((column, row))\n            elif color == 'Yellow':\n                yellow_pieces.add((column, row))\n\n            for line in LINES:\n                if line.issubset(red_pieces):\n                    return 'Red'\n                elif line.issubset(yellow_pieces):\n                    return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        row_index = -1\n        while grid[row_index][column_index] is not None:\n            row_index -= 1\n        grid[row_index][column_index] = color\n\n    for line in LINES:\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if all(color == 'Red' for color in colors):\n            return 'Red'\n        if all(color == 'Yellow' for color in colors):\n            return 'Yellow'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid with empty spaces\n    grid = [[' '] * 7 for _ in range(6)]\n    \n    # Loop through each piece position\n    for piece in pieces_positions:\n        # Split the piece position into column and color\n        column, color = piece.split('_')\n        \n        # Find the first available row in the column\n        row = 5\n        while grid[row][ord(column) - ord('A')] != ' ':\n            row -= 1\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        \n        # Check if all colors are the same and not empty\n        if all(color != ' ' and color == colors[0] for color in colors):\n            return colors[0]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = len({r for c,r in red | yellow if c == column})\n        if color == 'Red':\n            red.add((column, row))\n        else:\n            yellow.add((column, row))\n        for line in LINES:\n            if line <= red:\n                return 'Red'\n            elif line <= yellow:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the pieces\n    grid = [['' for _ in range(7)] for _ in range(6)]\n\n    # Iterate over the pieces_positions list\n    for position in pieces_positions:\n        # Get the column and color from the position string\n        column, color = position.split('_')\n\n        # Find the first empty row in the column\n        row = 0\n        while row < 6 and grid[row][ord(column) - ord('A')] != '':\n            row += 1\n\n        # Place the color in the grid\n        grid[row][ord(column) - ord('A')] = color\n\n        # Check if the current move results in a win\n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n\n    # If no one has won, it is a draw\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['']*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_index = ord(column) - ord('A')\n        for row in range(6):\n            if not board[row][col_index]:\n                board[row][col_index] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'"
        ],
        "4": [
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[row][column_index] == '':\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [[\"\"] * 7 for _ in range(6)]\n    player = \"Red\"\n    for position in pieces_positions:\n        column, color = position.split(\"_\")\n        column_index = ord(column) - ord(\"A\")\n        for row in range(5, -1, -1):\n            if board[row][column_index] == \"\":\n                board[row][column_index] = color\n                break\n        for line in LINES:\n            if all(board[row][ord(column) - ord(\"A\")] == color for column, row in line):\n                return color\n        player = \"Yellow\" if player == \"Red\" else \"Red\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through each piece position\n    for piece_position in pieces_positions:\n        # Split the position into column and color\n        column, color = piece_position.split('_')\n        \n        # Find the row to place the piece\n        row = -1\n        for i in range(6):\n            if grid[i][ord(column) - ord('A')] == ' ':\n                row = i\n                break\n        \n        # Place the piece in the grid\n        grid[row][ord(column) - ord('A')] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Check if all positions in the line have the same color\n        colors = set()\n        for position in line:\n            colors.add(grid[position[1]][ord(position[0]) - ord('A')])\n        if len(colors) == 1 and ' ' not in colors:\n            return colors.pop()\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Create an empty board with 6 rows and 7 columns\n    board = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map the color to the player\n    player_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Loop through the pieces positions\n    for position in pieces_positions:\n        # Get the column index from the position string\n        column = ord(position[0]) - ord('A')\n        \n        # Get the color from the position string\n        color = position.split('_')[1]\n        \n        # Loop through the rows in reverse order\n        for row in range(5, -1, -1):\n            # If the cell is empty, place the color in the cell and break the loop\n            if board[row][column] == '':\n                board[row][column] = color\n                break\n    \n    # Check if there is a winner\n    for line in LINES:\n        # Get the colors in the line\n        colors = [board[row][ord(column) - ord('A')] for column, row in line]\n        \n        # If there are 4 colors in a row, return the player who has the color\n        if len(set(colors)) == 1 and colors[0] != '':\n            return player_map[colors[0]]\n    \n    # If there are no winners, return 'Draw'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    RED, YELLOW = 'Red', 'Yellow'\n    grid = [[None] * 7 for _ in range(6)]\n\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((i for i in range(6) if grid[i][ord(column) - ord('A')] is None), None)\n        grid[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all(grid[j][ord(i) - ord('A')] == color for i, j in line):\n                return color\n\n    return \"Draw\"",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n            \ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = board[COLUMNS.index(column)].index(None)\n        board[COLUMNS.index(column)][row] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(c)][r] == color for c, r in line):\n                return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_positions = set()\n    yellow_positions = set()\n\n    for position in pieces_positions:\n        column, color = position.split('_')\n        if color == 'Red':\n            red_positions.add((column, ROWS[len(red_positions)]))\n        else:\n            yellow_positions.add((column, ROWS[len(yellow_positions)]))\n\n        for line in LINES:\n            if line.issubset(red_positions):\n                return 'Red'\n            elif line.issubset(yellow_positions):\n                return 'Yellow'\n\n    if len(pieces_positions) == 42:\n        return 'Draw'\n\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red_pieces = set()\n    yellow_pieces = set()\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in red_pieces and (column, i) not in yellow_pieces), None)\n        if row is not None:\n            if color == 'Red':\n                red_pieces.add((column, row))\n                if any(line.issubset(red_pieces) for line in LINES):\n                    return \"Red\"\n            elif color == 'Yellow':\n                yellow_pieces.add((column, row))\n                if any(line.issubset(yellow_pieces) for line in LINES):\n                    return \"Yellow\"\n\n    if len(red_pieces) + len(yellow_pieces) == 42:\n        return \"Draw\"\n    \n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    # Initialize the grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate over the pieces positions\n    for position in pieces_positions:\n        # Extract the column and color from the position string\n        column, color = position.split('_')\n        \n        # Convert the column to a numerical index\n        column_index = ord(column) - ord('A')\n        \n        # Iterate over the rows in the column\n        for row in range(6):\n            # Check if the current cell is empty\n            if grid[row][column_index] == '':\n                # Place the color in the current cell\n                grid[row][column_index] = color\n                \n                # Check if the current move results in a win\n                if is_winner(row, column_index, color, grid):\n                    return color\n                \n                # Break out of the loop since the current cell has been filled\n                break\n                \n    # If no one has won, return \"Draw\"\n    return \"Draw\"\n\n\ndef is_winner(row, column, color, grid):\n    # Check horizontal line\n    for i in range(4):\n        if column - i >= 0 and column - i + 3 < 7:\n            if grid[row][column - i] == color and grid[row][column - i + 1] == color and grid[row][column - i + 2] == color and grid[row][column - i + 3] == color:\n                return True\n    \n    # Check vertical line\n    for i in range(4):\n        if row - i >= 0 and row - i + 3 < 6:\n            if grid[row - i][column] == color and grid[row - i + 1][column] == color and grid[row - i + 2][column] == color and grid[row - i + 3][column] == color:\n                return True\n    \n    # Check diagonal line\n    for i in range(4):\n        if row - i >= 0 and row - i + 3 < 6 and column - i >= 0 and column - i + 3 < 7:\n            if grid[row - i][column - i] == color and grid[row - i + 1][column - i + 1] == color and grid[row - i + 2][column - i + 2] == color and grid[row - i + 3][column - i + 3] == color:\n                return True\n    \n    # Check anti-diagonal line\n    for i in range(4):\n        if row + i < 6 and row + i - 3 >= 0 and column - i >= 0 and column - i + 3 < 7:\n            if grid[row + i][column - i] == color and grid[row + i - 1][column - i + 1] == color and grid[row + i - 2][column - i + 2] == color and grid[row + i - 3][column - i + 3] == color:\n                return True\n    \n    return False",
            "def who_is_winner(pieces_positions):\n\n    grid = [[None] * 7 for _ in range(6)]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        column_index = ord(column) - ord('A')\n        row_index = -1\n        while grid[row_index][column_index] is not None:\n            row_index -= 1\n        grid[row_index][column_index] = color\n\n    for line in LINES:\n        colors = [grid[row][ord(column) - ord('A')] for column, row in line]\n        if all(color == 'Red' for color in colors):\n            return 'Red'\n        if all(color == 'Yellow' for color in colors):\n            return 'Yellow'\n\n    return 'Draw'",
            "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[' ']*7 for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next(i for i in range(5, -1, -1) if board[i][COLUMNS.index(column)] == ' ')\n        board[row][COLUMNS.index(column)] = color\n        \n        for line in LINES:\n            if all(board[j][COLUMNS.index(i)] == color for i, j in line):\n                return color\n    \n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    red = set()\n    yellow = set()\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = len({r for c,r in red | yellow if c == column})\n        if color == 'Red':\n            red.add((column, row))\n        else:\n            yellow.add((column, row))\n        for line in LINES:\n            if line <= red:\n                return 'Red'\n            elif line <= yellow:\n                return 'Yellow'\n    return 'Draw'",
            "def who_is_winner(pieces_positions):\n    board = [['']*7 for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        col_index = ord(column) - ord('A')\n        for row in range(6):\n            if not board[row][col_index]:\n                board[row][col_index] = color\n                break\n    for line in LINES:\n        for color in ['Red', 'Yellow']:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    return 'Draw'"
        ]
    }
}