{
    "0": [
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create a grid to keep track of the positions\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a dictionary to map colors to players\n    color_map = {'Red': 'Red', 'Yellow': 'Yellow'}\n    \n    # Iterate over the pieces positions\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Convert the column to an index\n        col_index = ord(column) - ord('A')\n        \n        # Find the lowest empty slot in the column\n        row_index = 5 - grid[::-1][col_index].index('')\n        \n        # Update the grid with the color of the player\n        grid[row_index][col_index] = color\n    \n    # Check if any player has won\n    for line in LINES:\n        # Get the colors of the pieces in the line\n        colors = [grid[row][col] for col, row in line]\n        \n        # Check if all the colors in the line are the same\n        if all(color == colors[0] for color in colors) and colors[0] != '':\n            return color_map[colors[0]]\n    \n    # If no player has won, return \"Draw\"\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    # initialize empty grid\n    grid = [['' for _ in ROWS] for _ in COLUMNS]\n    \n    # iterate over pieces_positions\n    for move in pieces_positions:\n        # get column and color from move\n        column, color = move.split('_')\n        \n        # find next available row in column\n        for row in ROWS:\n            if grid[COLUMNS.index(column)][row] == '':\n                # assign color to the grid cell\n                grid[COLUMNS.index(column)][row] = color\n                break\n    \n    # check if there is a winner\n    for line in LINES:\n        cells = [grid[COLUMNS.index(column)][row] for column, row in line]\n        if cells.count('Red') == 4:\n            return 'Red'\n        elif cells.count('Yellow') == 4:\n            return 'Yellow'\n    \n    # check if the grid is full\n    if all(all(cell != '' for cell in column) for column in grid):\n        return 'Draw'\n    \n    # if there is no winner and the grid is not full, the game is ongoing\n    return 'Ongoing'",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][board[COLUMNS.index(column)].index(None)] = color\n    \n    for line in LINES:\n        for i in range(len(COLUMNS) - 3):\n            for j in range(len(ROWS) - 3):\n                if all(board[COLUMNS.index(column)][row] == 'Yellow' for column, row in line):\n                    return 'Yellow'\n                if all(board[COLUMNS.index(column)][row] == 'Red' for column, row in line):\n                    return 'Red'\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    def get_color(piece):\n        return piece.split('_')[1]\n    \n    def get_column(piece):\n        return piece.split('_')[0]\n    \n    grid = [[None for _ in ROWS] for _ in COLUMNS]\n    for piece in pieces_positions:\n        column = get_column(piece)\n        color = get_color(piece)\n        column_index = COLUMNS.index(column)\n        for row in ROWS:\n            if grid[column_index][row] is None:\n                grid[column_index][row] = color\n                break\n    \n    for line in LINES:\n        colors = set()\n        for cell in line:\n            column, row = cell\n            column_index = COLUMNS.index(column)\n            colors.add(grid[column_index][row])\n        if len(colors) == 1 and None not in colors:\n            return colors.pop()\n    \n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = next((i for i in range(6) if (column, i) not in {piece for line in LINES for piece in line}), None)\n        if row is None:\n            return 'Draw'\n        for line in LINES:\n            if (column, row) in line:\n                if all((column, row) in pieces_positions for (column, row) in line):\n                    return color\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n             for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    grid = [[''] * len(COLUMNS) for _ in ROWS]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in ROWS[::-1]:\n            if grid[row][column_index] == '':\n                grid[row][column_index] = color\n                break\n    \n    for line in LINES:\n        colors = set(grid[row][column] for column, row in line)\n        if colors == {'Red'}:\n            return 'Red'\n        elif colors == {'Yellow'}:\n            return 'Yellow'\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    grid = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = grid[COLUMNS.index(column)].index(None)\n        grid[COLUMNS.index(column)][row] = color\n\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                return color\n\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Create a mapping of column letters to column indices\n    column_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n    \n    # Iterate through each piece position\n    for position in pieces_positions:\n        # Split the position into column and color\n        column, color = position.split('_')\n        \n        # Get the column index\n        column_index = column_map[column]\n        \n        # Find the first empty row in the column\n        row_index = -1\n        for i in range(5, -1, -1):\n            if grid[i][column_index] == '':\n                row_index = i\n                break\n        \n        # Place the color in the grid\n        grid[row_index][column_index] = color\n        \n        # Check if the color wins\n        for line in LINES:\n            if all(grid[i][j] == color for i, j in line):\n                return color\n    \n    # If no one wins, return \"Draw\"\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [[None]*6 for _ in range(7)]\n    \n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        column_index = COLUMNS.index(column)\n        for row in range(6):\n            if board[column_index][row] is None:\n                board[column_index][row] = color\n                break\n                \n    for line in LINES:\n        for color in ('Red', 'Yellow'):\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # create a dictionary to store the number of pieces in each position\n    board = {}\n    \n    # create a dictionary to store the current player's color\n    current_player = {'Red': 0, 'Yellow': 0}\n    \n    # iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # extract the column and color from the piece position\n        column, color = piece.split('_')\n        \n        # check if the column is already in the board dictionary\n        if column not in board:\n            # if not, add the column to the board dictionary with an empty list\n            board[column] = []\n        \n        # append the color to the column list in the board dictionary\n        board[column].append(color)\n        \n        # check if there are four consecutive pieces of the same color in the board\n        for line in LINES:\n            # get the colors in the current line\n            line_colors = [board[column][index] for column, index in line]\n            \n            # check if there are four consecutive pieces of the same color in the current line\n            if line_colors.count(color) == 4:\n                # return the current player's color as the winner\n                return color\n        \n        # switch the current player's color\n        current_player[color] += 1\n        \n        # check if all the positions in the board are occupied\n        if all(len(board[column]) == 6 for column in board):\n            # if so, return 'Draw'\n            return 'Draw'",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[' ' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        for row in range(6):\n            if board[row][COLUMNS.index(column)] == ' ':\n                board[row][COLUMNS.index(column)] = color\n                break\n        for line in LINES:\n            if all(board[row][COLUMNS.index(column)] == color for column, row in line):\n                return color\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n            + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n            + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n               for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    pieces = {'Yellow': set(), 'Red': set()}\n    for position in pieces_positions:\n        column, color = position.split('_')\n        row = max(r for r in ROWS if (column, r) not in pieces['Yellow'] and (column, r) not in pieces['Red'])\n        pieces[color].add((column, row))\n        if any(line.issubset(pieces[color]) for line in LINES):\n            return color\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n\n    def check_line(line):\n        count_red = 0\n        count_yellow = 0\n        for piece in line:\n            if piece.endswith('_Red'):\n                count_red += 1\n                count_yellow = 0\n            elif piece.endswith('_Yellow'):\n                count_yellow += 1\n                count_red = 0\n            if count_red == 4:\n                return 'Red'\n            elif count_yellow == 4:\n                return 'Yellow'\n        return 'Draw'\n\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        row = -1\n        for i in range(6):\n            if board[i][ord(column) - ord('A')] == '':\n                row = i\n                break\n        board[row][ord(column) - ord('A')] = color\n\n        for line in LINES:\n            if all((c, row) in line for c in range(ord(column) - ord('A'), ord(column) - ord('A') + 4)):\n                return check_line([board[row][c] for c in range(ord(column) - ord('A'), ord(column) - ord('A') + 4)])\n            if all((ord(column) - ord('A'), r) in line for r in range(row, row + 4)):\n                return check_line([board[r][ord(column) - ord('A')] for r in range(row, row + 4)])\n            if all((ord(column) - ord('A') + k, row + k) in line for k in range(4)):\n                return check_line([board[row + k][ord(column) - ord('A') + k] for k in range(4)])\n            if all((ord(column) - ord('A') + k, row - k) in line for k in range(4)):\n                return check_line([board[row - k][ord(column) - ord('A') + k] for k in range(4)])\n    return 'Draw'",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def who_is_winner(pieces_positions):\n    # create the board\n    board = [['']*7 for _ in range(6)]\n    \n    # iterate through each move\n    for move in pieces_positions:\n        # get the column and color from the move\n        column, color = move.split('_')\n        # find the lowest empty row in the column\n        row = 0\n        while row < 6 and board[row][ord(column)-ord('A')]:\n            row += 1\n        # update the board with the move\n        board[row][ord(column)-ord('A')] = color\n    \n    # check for winning lines\n    for line in LINES:\n        line_colors = set(board[row][ord(column)-ord('A')] for column, row in line)\n        if len(line_colors) == 1 and '' not in line_colors:\n            return list(line_colors)[0]\n    \n    # check for draw\n    if all(all(cell for cell in row) for row in board):\n        return \"Draw\"\n    \n    # no winner\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n    \n    board = [['' for _ in range(len(COLUMNS))] for _ in range(len(ROWS))]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column_idx = COLUMNS.index(column)\n        for row in range(len(ROWS)-1, -1, -1):\n            if board[row][column_idx] == '':\n                board[row][column_idx] = color\n                break\n    \n    for line in LINES:\n        pieces = set()\n        for cell in line:\n            row, col = cell[1], COLUMNS.index(cell[0])\n            pieces.add(board[row][col])\n        if len(pieces) == 1 and '' not in pieces:\n            return list(pieces)[0]\n    \n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    COLUMNS, ROWS = 'ABCDEFG', range(6)\n    LINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\n    reds = set()\n    yellows = set()\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = next((r for r in ROWS if (column, r) not in reds and (column, r) not in yellows), None)\n        if row is None:\n            return \"Draw\"\n        if color == 'Red':\n            reds.add((column, row))\n            if any(line.issubset(reds) for line in LINES):\n                return \"Red\"\n        else:\n            yellows.add((column, row))\n            if any(line.issubset(yellows) for line in LINES):\n                return \"Yellow\"\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    board = [[None] * len(ROWS) for _ in range(len(COLUMNS))]\n    for piece in pieces_positions:\n        column, color = piece.split('_')\n        board[COLUMNS.index(column)][next(i for i, row in enumerate(board[COLUMNS.index(column)]) if row is None)] = color\n        for line in LINES:\n            if all(board[COLUMNS.index(column)][row] == color for column, row in line):\n                return color\n    return 'Draw'",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def who_is_winner(pieces_positions):\n    grid = [[' ' for _ in range(7)] for _ in range(6)]\n    \n    for move in pieces_positions:\n        column, color = move.split('_')\n        column = ord(column) - ord('A')\n        \n        for row in range(5, -1, -1):\n            if grid[row][column] == ' ':\n                grid[row][column] = color\n                break\n        \n        for line in LINES:\n            if all(grid[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create a dictionary to store the counts of each color\n    color_counts = {\"Red\": 0, \"Yellow\": 0}\n    \n    # Create a grid to track the positions of the pieces\n    grid = [[\"\" for _ in ROWS] for _ in COLUMNS]\n    \n    # Iterate through the pieces positions\n    for piece in pieces_positions:\n        # Split the piece into column and color\n        column, color = piece.split(\"_\")\n        column_index = COLUMNS.index(column)\n        \n        # Get the row index of the next available position in the column\n        row_index = next((index for index, value in enumerate(grid[column_index]) if value == \"\"), None)\n        \n        # If the column is full, ignore the piece\n        if row_index is None:\n            continue\n        \n        # Place the piece in the grid\n        grid[column_index][row_index] = color\n        \n        # Check for a winning condition\n        for line in LINES:\n            if all(grid[COLUMNS.index(col)][row] == color for col, row in line):\n                # If a winning condition is found, return the color\n                return color\n        \n        # Update the color count\n        color_counts[color] += 1\n        \n        # Check for a draw\n        if color_counts[\"Red\"] + color_counts[\"Yellow\"] == 42:\n            return \"Draw\"\n    \n    # If no winning condition or draw is found, return \"Draw\"\n    return \"Draw\"",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    # Create an empty grid\n    grid = [['' for _ in range(7)] for _ in range(6)]\n    \n    # Iterate through the pieces_positions list\n    for piece in pieces_positions:\n        # Extract the column and color from the piece\n        column, color = piece.split('_')\n        \n        # Find the first empty row in the column\n        row = 5\n        while grid[row][ord(column)-65] != '':\n            row -= 1\n        \n        # Place the color in the grid\n        grid[row][ord(column)-65] = color\n        \n        # Check for a winning position\n        for line in LINES:\n            if all(grid[row][ord(column)-65] == color for column, row in line):\n                return color\n    \n    # If no winning position found, return 'Draw'\n    return 'Draw'",
            "logp": null
        },
        {
            "content": "def who_is_winner(pieces_positions):\n    board = [['' for _ in range(7)] for _ in range(6)]\n    for move in pieces_positions:\n        column, color = move.split('_')\n        row = 0\n        while row < 6 and board[row][ord(column) - ord('A')] == '':\n            row += 1\n        if row == 0:\n            return color\n        row -= 1\n        board[row][ord(column) - ord('A')] = color\n        \n        for line in LINES:\n            if all(board[row][ord(column) - ord('A')] == color for column, row in line):\n                return color\n    \n    return 'Draw'",
            "logp": null
        }
    ]
}