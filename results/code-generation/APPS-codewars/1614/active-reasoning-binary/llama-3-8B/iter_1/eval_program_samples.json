{
    "0": {
        "0": [
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    winner = {\"Red\": False, \"Yellow\": False}\n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        for line in LINES:\n            for position in line:\n                if position[0] == column:\n                    if (position[1], color) in [(position[1], color-1), (position[1], color+1)] and (position[1], color) in [(position[1]-1, color), (position[1]+1, color)]:\n                        winner[color] = True\n    if all([winner[\"Red\"], winner[\"Yellow\"]]):\n        return \"Draw\"\n    for k, v in winner.items():\n        if v:\n            return k",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(set([pos.split('_')[1] for pos in column])) == 1:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    return 'Draw' if len(set([pos.split('_')[1] for pos in pieces_positions])) == 1 else 'Unknown'"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "def who_is_winner(pieces_positions):\n    pieces_position_dict = {pos.split('_')[1]: pos.split('_')[0] for pos in pieces_positions}\n    for line in LINES:\n        for pos in line:\n            if all(pieces_position_dict[pos].split('_')[1] == piece for piece in [pieces_position_dict[p] for p in line]):\n                return 'Yellow' if piece == 'Yellow' else 'Red'\n    for col in COLUMNS:\n        column = [pos for pos in pieces_positions if pos.startswith(col)]\n        if len(column) >= 4:\n            return 'Yellow' if column[0].split('_')[1] == 'Yellow' else 'Red'\n    if len(pieces_positions) >= 42:\n        return 'Draw'\n    return 'Game not finished'",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")",
            "```\ndef who_is_winner(pieces_positions):\n    winner = None\n    positions = {}\n    for piece in pieces_positions:\n        position, color = piece[0], piece[3:]\n        if position not in positions:\n            positions[position] = color\n        else:\n            if positions[position] != color:\n                winner = \"Draw\"\n                break\n    for line in LINES:\n        for pos in line:\n            color = positions.get(pos[0], None)\n            if color and color != positions.get(pos[1], None) and color != positions.get(pos[2], None) and color != positions.get(pos[3], None):\n                winner = color\n                break\n        if winner:\n            break\n    return \"Yellow\" if winner == \"Yellow\" else (\"Red\" if winner == \"Red\" else \"Draw\")"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "```\ndef who_is_winner(pieces_positions):\n    pieces = {'Red': 0, 'Yellow': 0}\n    columns = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}\n    \n    for piece in pieces_positions:\n        column, color = piece[0], piece[3]\n        columns[column].append(color)\n        \n    for column in columns:\n        for i in range(len(columns[column])):\n            if columns[column][i] == columns[column][i-1] == columns[column][i-2] == columns[column][i-3]:\n                return \"Yellow\" if columns[column][i] == 'Yellow' else \"Red\"\n    \n    for i in range(len(LINES)):\n        for line in LINES[i]:\n            color = columns[line[0]][len(columns[line[0]]) - 1]\n            for j in range(len(line) - 3):\n                if color == columns[line[j+1]][len(columns[line[j+1]]) - 1] == columns[line[j+2]][len(columns[line[j+2]]) - 1] == columns[line[j+3]][len(columns[line[j+3]]) - 1]:\n                    return \"Yellow\" if color == 'Yellow' else \"Red\"\n            \n    return \"Draw\" if sum(len(column) for column in columns.values()) == 42 else \"Game has not completed\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\"",
            "def who_is_winner(pieces_positions):\n    for piece in pieces_positions:\n        column = piece[0]\n        color = piece[2:]\n        current_row = 5\n        while current_row >= 0 and column not in [f\"{c}_{color}\" for c in COLUMNS]:\n            current_row -= 1\n        if current_row >= 0:\n            for line in LINES:\n                if {(c, r) for c, r in line}.issubset({(c, current_row) for c in COLUMNS if f\"{c}_{color}\" in pieces_positions}):\n                    return color\n    return \"Draw\""
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    }
}