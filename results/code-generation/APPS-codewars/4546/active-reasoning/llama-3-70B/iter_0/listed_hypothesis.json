{
    "0": [
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = []\n        else:\n            mothers[char.upper()].append(char)\n    result = ''\n    for mother, children in sorted(mothers.items()):\n        result += mother + ''.join(sorted(children))\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = []\n        else:\n            mothers[person.upper()].append(person)\n    result = []\n    for mother, children in sorted(mothers.items()):\n        result.append(mother)\n        result.extend(sorted(children))\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = []\n        else:\n            mothers[person.upper()].append(person)\n    result = ''\n    for mother, children in sorted(mothers.items()):\n        result += mother\n        result += ''.join(sorted(children))\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = []\n        else:\n            mothers[char.upper()].append(char)\n    result = \"\"\n    for mother, children in sorted(mothers.items()):\n        result += mother\n        result += ''.join(sorted(children))\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = []\n        else:\n            mothers[char.upper()].append(char)\n    result = \"\"\n    for key in sorted(mothers.keys()):\n        result += key + ''.join(sorted(mothers[key]))\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = []\n        else:\n            mothers[char.upper()].append(char)\n    result = ''\n    for mother, children in sorted(mothers.items()):\n        result += mother\n        result += ''.join(sorted(children))\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = []\n        else:\n            mothers[char.upper()].append(char)\n    result = []\n    for mother in sorted(mothers.keys()):\n        result.append(mother)\n        result.extend(sorted(mothers[mother]))\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = person.lower() * dancing_brigade.count(person.lower())\n    return ''.join(sorted(mothers.keys() + mothers.values(), key=lambda x: x.upper()))",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mother_child_dict = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mother_child_dict[char] = []\n        else:\n            mother = char.upper()\n            if mother in mother_child_dict:\n                mother_child_dict[mother].append(char)\n            else:\n                mother_child_dict[mother] = [char]\n    result = ''\n    for mother in sorted(mother_child_dict.keys()):\n        result += mother\n        result += ''.join(sorted(mother_child_dict[mother]))\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = person.lower() * (dancing_brigade.count(person.lower()))\n    result = ''\n    for key in sorted(mothers):\n        result += key + mothers[key]\n    return result",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([i for i in dancing_brigade if i.isupper()])\n    children = sorted([i for i in dancing_brigade if i.islower()])\n    result = []\n    for mother in mothers:\n        result.append(mother)\n        result.extend([i for i in children if i == mother.lower()])\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = ''\n    for char in dancing_brigade:\n        if char.islower():\n            mothers[char.upper()] += char\n    result = ''\n    for key in sorted(mothers.keys()):\n        result += key + mothers[key]\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([c for c in dancing_brigade if c.isupper()])\n    children = sorted([c for c in dancing_brigade if c.islower()])\n    result = ''\n    for mother in mothers:\n        result += mother\n        for child in children:\n            if child.upper() == mother:\n                result += child\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = char.lower() * dancing_brigade.count(char.lower())\n    sorted_mothers = sorted(mothers.items())\n    return ''.join([mother + kids for mother, kids in sorted_mothers])",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([char for char in dancing_brigade if char.isupper()])\n    children = sorted([char for char in dancing_brigade if char.islower()])\n    result = []\n    for mother in mothers:\n        result.append(mother)\n        result.extend([child for child in children if child == mother.lower()])\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = person.lower() * (dancing_brigade.count(person.lower()))\n    sorted_mothers = sorted(mothers.keys())\n    result = ''\n    for mother in sorted_mothers:\n        result += mother + mothers[mother]\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([i for i in dancing_brigade if i.isupper()])\n    children = sorted([i for i in dancing_brigade if i.islower()])\n    result = []\n    for mother in mothers:\n        result.append(mother)\n        result.extend([child for child in children if child == mother.lower()])\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([mother for mother in dancing_brigade if mother.isupper()])\n    children = [child for child in dancing_brigade if child.islower()]\n    result = []\n    for mother in mothers:\n        result.append(mother)\n        result.extend([child for child in children if child.upper() == mother])\n    return \"\".join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    result = \"\"\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = char.lower() * (dancing_brigade.count(char.lower()))\n    for key in sorted(mothers.keys()):\n        result += key + mothers[key]\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([i for i in dancing_brigade if i.isupper()])\n    result = \"\"\n    for mother in mothers:\n        result += mother\n        result += \"\".join(sorted([i for i in dancing_brigade if i.islower() and i == mother.lower()]))\n    return result",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([i for i in dancing_brigade if i.isupper()])\n    children = sorted([i for i in dancing_brigade if i.islower()])\n    result = ''\n    for mother in mothers:\n        result += mother\n        for child in children:\n            if child.upper() == mother:\n                result += child\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = []\n    for char in dancing_brigade:\n        if char.islower():\n            mothers[char.upper()].append(char)\n    result = \"\"\n    for mother in sorted(mothers.keys()):\n        result += mother\n        for child in sorted(mothers[mother]):\n            result += child\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = person.lower() * (dancing_brigade.count(person.lower()))\n        else:\n            mothers.get(person.upper(), \"\")\n    result = \"\"\n    for key in sorted(mothers.keys()):\n        result += key + mothers[key]\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = char.lower() * dancing_brigade.count(char.lower())\n    sorted_mothers = sorted(mothers.items())\n    return ''.join([mother + kids for mother, kids in sorted_mothers])",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = person.lower() * (dancing_brigade.count(person.lower()))\n    sorted_mothers = sorted(mothers.keys())\n    result = ''\n    for mother in sorted_mothers:\n        result += mother + mothers[mother]\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([mother for mother in dancing_brigade if mother.isupper()])\n    children = [child for child in dancing_brigade if child.islower()]\n    result = []\n    for mother in mothers:\n        result.append(mother)\n        result.extend([child for child in children if child.upper() == mother])\n    return \"\".join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    result = \"\"\n    for mother in sorted(set(char.upper() for char in dancing_brigade)):\n        result += mother\n        result += mother.lower() * dancing_brigade.count(mother.lower())\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = person.lower() * (dancing_brigade.count(person.lower()))\n    return ''.join(mother + children for mother, children in sorted(mothers.items()))",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([i for i in dancing_brigade if i.isupper()])\n    children = sorted([i for i in dancing_brigade if i.islower()])\n    result = []\n    for mother in mothers:\n        result.append(mother)\n        result.extend([i for i in children if i == mother.lower()])\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = char.lower() * dancing_brigade.count(char.lower())\n    sorted_mothers = sorted(mothers.keys())\n    result = \"\"\n    for mother in sorted_mothers:\n        result += mother + mothers[mother]\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([c for c in dancing_brigade if c.isupper()])\n    children = sorted([c for c in dancing_brigade if c.islower()])\n    result = ''\n    for mother in mothers:\n        result += mother\n        for child in children:\n            if child.upper() == mother:\n                result += child\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for char in dancing_brigade:\n        if char.isupper():\n            mothers[char] = ''\n    for char in dancing_brigade:\n        if char.islower():\n            mothers[char.upper()] += char\n    result = ''\n    for key in sorted(mothers.keys()):\n        result += key\n        result += mothers[key]\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = person.lower() * (dancing_brigade.count(person.lower()))\n    sorted_mothers = sorted(mothers.keys())\n    result = ''\n    for mother in sorted_mothers:\n        result += mother + mothers[mother]\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([char for char in dancing_brigade if char.isupper()])\n    children = sorted([char for char in dancing_brigade if char.islower()])\n    result = []\n    for mother in mothers:\n        result.append(mother)\n        result.extend([child for child in children if child == mother.lower()])\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([i for i in dancing_brigade if i.isupper()])\n    children = sorted([i for i in dancing_brigade if i.islower()])\n    result = ''\n    for mother in mothers:\n        result += mother\n        result += ''.join([i for i in children if i == mother.lower()])\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([mother for mother in dancing_brigade if mother.isupper()])\n    children = [child for child in dancing_brigade if child.islower()]\n    result = []\n    for mother in mothers:\n        result.append(mother)\n        result.extend([child for child in children if child == mother.lower()])\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([i for i in dancing_brigade if i.isupper()])\n    result = \"\"\n    for mother in mothers:\n        result += mother\n        result += \"\".join(sorted([i for i in dancing_brigade if i.islower() and i.upper() == mother]))\n    return result",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([char for char in dancing_brigade if char.isupper()])\n    children = sorted([char for char in dancing_brigade if char.islower()])\n    result = []\n    for mother in mothers:\n        result.append(mother)\n        while children and children[0].upper() == mother:\n            result.append(children.pop(0))\n    return ''.join(result)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = {}\n    for person in dancing_brigade:\n        if person.isupper():\n            mothers[person] = person.lower() * (dancing_brigade.count(person.lower()))\n    sorted_mothers = sorted(mothers.keys())\n    return ''.join(mother + mothers[mother] for mother in sorted_mothers)",
            "logp": null
        },
        {
            "content": "def find_children(dancing_brigade):\n    mothers = sorted([x for x in dancing_brigade if x.isupper()])\n    children = sorted([x for x in dancing_brigade if x.islower()])\n    result = \"\"\n    for mother in mothers:\n        result += mother\n        result += \"\".join([child for child in children if child == mother.lower()])\n    return result",
            "logp": null
        }
    ]
}