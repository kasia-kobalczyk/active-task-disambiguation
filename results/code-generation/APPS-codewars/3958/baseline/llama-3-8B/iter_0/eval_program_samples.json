{
    "0": {
        "0": [
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    visited = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[i]\n        for j in indexes:\n            if 0 <= j < len(cur_signature):\n                next_signature = list(cur_signature)\n                next_signature.append(cur_signature[j] + (cur_signature[k] for k in indexes if k != j and 0 <= k < len(cur_signature)).sum())\n                next_signature_tuple = tuple(next_signature)\n                if next_signature_tuple not in visited:\n                    stack.append((next_signature, i + 1))\n                    visited.add(next_signature_tuple)\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```"
        ],
        "1": [
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None",
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None",
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None",
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None",
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None",
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None",
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None",
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None",
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None",
            "```\nfrom collections import deque\n\ndef custom_fib(signature, indexes, n):\n    queue = deque([(signature, indexes, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        prev_signature, prev_indexes, prev_index = queue.popleft()\n        if prev_index == n-1:\n            return prev_signature[-1]\n        for i in range(len(prev_signature)):\n            if i not in prev_indexes:\n                continue\n            next_signature = prev_signature[:]+[sum([prev_signature[j] for j in range(len(prev_signature)) if j in indexes])]\n            if tuple(next_signature) not in seen:\n                seen.add(tuple(next_signature))\n                queue.append((next_signature, indexes, prev_index+1))\n    return None"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current = queue.popleft()\n        if len(current) == n:\n            return current[-1]\n        next_val = sum([current[i] for i in indexes])\n        queue.append(list(current) + [next_val])\n```",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    }
}