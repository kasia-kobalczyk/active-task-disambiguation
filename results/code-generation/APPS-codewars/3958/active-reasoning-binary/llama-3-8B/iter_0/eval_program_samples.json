{
    "0": {
        "0": [
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    stack = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while stack:\n        cur_signature, i = stack.popleft()\n        if i >= n:\n            return cur_signature[n-1]\n        next_signature = list(cur_signature)\n        for idx in indexes:\n            next_signature.append(sum(cur_signature[idx]))\n        if tuple(next_signature) not in seen:\n            seen.add(tuple(next_signature))\n            stack.append((next_signature, i + 1))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    visited = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new_tuple = tuple(new)\n            if new_tuple not in visited:\n                visited.add(new_tuple)\n                queue.append((new, len(cur)))\n    return None"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = set(tuple(signature))\n    while queue:\n        cur, idx = queue.popleft()\n        if len(cur) > n:\n            continue\n        if len(cur) == n:\n            return cur[-1]\n        for i in range(len(cur)):\n            if i not in indexes:\n                continue\n            new = list(cur)\n            new.append(sum(new[j] for j in [k-1 for k in indexes if k > 0 and k - 1 < len(new)]))\n            new = tuple(new)\n            if new not in seen:\n                seen.add(new)\n                queue.append((new, idx + 1))",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "```\ndef custom_fib(signature, indexes, n):\n    queue = deque([signature])\n    while True:\n        current_signature = list(queue[-1])\n        if len(current_signature) > n:\n            queue.pop()\n        else:\n            break\n    return current_signature[n-1]\n```",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))",
            "def custom_fib(signature, indexes, n):\n    queue = deque([(signature, 0)])\n    seen = {tuple(signature)}\n    while queue:\n        nums, i = queue.popleft()\n        if i == n-1:\n            return nums[i]\n        for j in range(len(nums)-1):\n            if j in indexes:\n                for k in range(len(nums)-1):\n                    if k in indexes:\n                        next_nums = list(nums)\n                        next_nums.append(nums[k] + nums[j])\n                        if tuple(next_nums) not in seen:\n                            queue.append((next_nums, i+1))\n                            seen.add(tuple(next_nums))"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": []
    }
}