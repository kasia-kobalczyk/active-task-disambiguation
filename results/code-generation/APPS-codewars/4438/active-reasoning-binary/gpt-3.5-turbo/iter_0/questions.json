{
    "0": [
        "assert middle_point(2, 2, 2, 3, 3, 3, 1, 1, 1) == 1",
        "assert middle_point(2, 2, 2, 5, 5, 5, 3, 3, 3) == 2",
        "assert middle_point(3, 3, 3, 2, 2, 2, 1, 1, 1) == 2",
        "assert middle_point(1, 1, 1, 4, 4, 4, 2, 2, 2) == 2",
        "assert middle_point(1, 1, 1, 2, 2, 2, 3, 3, 3) == 2",
        "assert middle_point(1, 1, 1, 3, 3, 3, 2, 2, 2) == 3",
        "assert middle_point(2, 2, 2, 1, 1, 1, 3, 3, 3) == 1",
        "assert middle_point(5, 5, 5, 7, 7, 7, 3, 3, 3) == 5",
        "assert middle_point(0, 0, 0, 10, 10, 10, 5, 5, 5) == 5"
    ],
    "1": [
        "assert middle_point(-1, -2, -3, 0, 0, 0, -2, -3, -4) == 2",
        "assert middle_point(1, 1, 1, 1, 1, 1, 1, 1, 1) == 1",
        "assert middle_point(0, 0, 0, 1, 1, 1, 2, 2, 2) == 2",
        "assert middle_point(1, 2, 3, 2, 3, 4, 0, 1, 2) == 1",
        "assert middle_point(5, 6, 7, 10, 12, 14, 2, 3, 4) == 3",
        "assert middle_point(1, 1, 1, 0, 0, 0, 2, 2, 2) == 2",
        "assert middle_point(1, 1, 1, 2, 2, 2, 0, 0, 0) == 1",
        "assert middle_point(3, 2, 1, 4, 3, 2, 5, 4, 3) == 2",
        "assert middle_point(0, 0, 0, 2, 2, 2, 1, 1, 1) == 3",
        "assert middle_point(2, 2, 2, 1, 1, 1, 0, 0, 0) == 3"
    ],
    "2": [
        "assert middle_point(1, 1, 1, 4, 4, 4, 2, 2, 2) == 3",
        "assert middle_point(-1, -1, -1, 0, 0, 0, 1, 1, 1) == 1",
        "assert middle_point(2, 2, 2, 3, 3, 3, 2, 2, 2) == 1",
        "assert middle_point(10, 10, 10, 10, 10, 10, 10, 10, 10) == 1",
        "assert middle_point(2, 5, 8, 1, 2, 3, 4, 9, 6) == 3\n# Explanation: In this case, (4, 9, 6) is the middle point as it lies between the other two points (2, 5, 8) and (1, 2, 3).",
        "assert middle_point(5, 5, 5, 3, 3, 3, 7, 7, 7) == 2",
        "assert middle_point(1, 1, 1, 5, 5, 5, 3, 3, 3) == 2",
        "assert middle_point(0, 0, 0, 2, 2, 2, 1, 1, 1) == 2"
    ],
    "3": [
        "assert middle_point(1, 1, 1, 4, 4, 4, 2, 2, 2) == 3",
        "assert middle_point(-1, -1, -1, 0, 0, 0, 1, 1, 1) == 1",
        "assert middle_point(10, 10, 10, 10, 10, 10, 10, 10, 10) == 1",
        "assert middle_point(2, 5, 8, 1, 2, 3, 4, 9, 6) == 3\n# Explanation: In this case, (4, 9, 6) is the middle point as it lies between the other two points (2, 5, 8) and (1, 2, 3).",
        "assert middle_point(5, 5, 5, 3, 3, 3, 7, 7, 7) == 2",
        "assert middle_point(1, 1, 1, 5, 5, 5, 3, 3, 3) == 2",
        "assert middle_point(0, 0, 0, 2, 2, 2, 1, 1, 1) == 2"
    ]
}