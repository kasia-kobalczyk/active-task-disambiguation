{
    "0": [
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if A <= 0:\n        return 2\n    elif A >= 1:\n        return 3\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if A <= 0:\n        return 2\n    elif A >= 1:\n        return 3\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if A <= 0:\n        return 2\n    elif A >= 1:\n        return 3\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if A <= 0:\n        return 2\n    elif A >= 1:\n        return 3\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if A <= 0:\n        return 2\n    elif A >= 1:\n        return 3\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3): \n    max_val = max(max(abs(x1), abs(x2)), abs(x3)) \n    mid_val = (max_val + 1) if max_val % 2 == 0 else max_val \n    value1 = abs((x1 + x2 + x3) // 3) \n    value2 = abs((y1 + y2 + y3) // 3) \n    value3 = abs((z1 + z2 + z3) // 3) \n    return 1 if (value1 == mid_val and value2 < mid_val and value3 < mid_val) else (2 if (value2 == mid_val and value1 < mid_val and value3 < mid_val) else 3)",
            "logp": null
        }
    ],
    "2": [],
    "3": []
}