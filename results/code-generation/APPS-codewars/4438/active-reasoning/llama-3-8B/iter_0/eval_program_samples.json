{
    "0": {
        "0": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a1 = (x2-x1, y2-y1, z2-z1)\n    a2 = (x3-x2, y3-y2, z3-z2)\n    if (a1[0]*a2[0] + a1[1]*a2[1] + a1[2]*a2[2]) == 0:\n        return 1\n    elif (x3-x1)*(a1[0]+a2[0]) + (y3-y1)*(a1[1]+a2[1]) + (z3-z1)*(a1[2]+a2[2]) >= 0:\n        return 3\n    else:\n        return 2",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1"
        ],
        "1": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 1 if middle[1] == point1 else 3"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1"
        ],
        "1": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 1 if middle[1] == point1 else 3"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3"
        ],
        "1": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[0] == point1:\n        return 2\n    elif middle[0] == point2:\n        return 1\n    else:\n        return 3"
        ],
        "2": [],
        "3": [],
        "4": []
    }
}