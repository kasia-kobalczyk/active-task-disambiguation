{
    "0": [
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 1 if middle[1] == point1 else 3",
            "logp": null
        }
    ],
    "2": [],
    "3": []
}