{
    "0": [
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "logp": null
        },
        {
            "content": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "logp": null
        }
    ],
    "1": [],
    "2": [],
    "3": []
}