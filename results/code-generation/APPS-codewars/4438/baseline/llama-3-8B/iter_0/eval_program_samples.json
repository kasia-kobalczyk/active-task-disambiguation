{
    "0": {
        "0": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    a = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\n    b = (x2 - x3)**2 + (y2 - y3)**2 + (z2 - z3)**2\n    c = (x1 - x3)**2 + (y1 - y3)**2 + (z1 - z3)**2\n    if a > b and a > c:\n        return 2\n    elif b > a and b > c:\n        return 1\n    else:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1"
        ],
        "1": [],
        "2": [],
        "3": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    val1 = (x1-x2)*(y2-y3)-(y1-y2)*(x2-x3)\n    val2 = (x1-x3)*(y3-y1)-(y1-y3)*(x1-x3)\n    val3 = (x2-x3)*(y1-y2)-(y1-y2)*(x2-x3)\n    if val1 > 0 and val2 > 0:\n        return 2\n    elif val1 > 0 and val3 > 0:\n        return 2\n    elif val2 > 0 and val3 > 0:\n        return 2\n    elif val1 < 0 and val2 < 0:\n        return 2\n    elif val1 < 0 and val3 < 0:\n        return 2\n    elif val2 < 0 and val3 < 0:\n        return 2\n    elif val1 == 0 and val2 == 0:\n        return 2\n    elif val1 == 0 and val3 == 0:\n        return 2\n    elif val2 == 0 and val3 == 0:\n        return 2\n    elif val1 > 0:\n        return 3\n    else:\n        return 1"
        ],
        "4": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3"
        ]
    },
    "1": {
        "0": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    x1, y1, z1, x2, y2, z2, x3, y3, z3 = sorted([x1, x2, x3]), sorted([y1, y2, y3]), sorted([z1, z2, z3])\n    if [x1, y1, z1] == [x2, y2, z2]:\n        return 3\n    elif [x1, y1, z1] == [x3, y3, z3]:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3"
        ]
    },
    "2": {
        "0": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    A = ((x1-x2)*(y2-y3)-(y1-y2)*(x2-x3))/((x1-x2)*(y1-y2)-(y1-y2)*(x1-x2))\n    if abs(A-1) < 0.00001:\n        return 3\n    elif abs(A-0) < 0.00001:\n        return 2\n    else:\n        return 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if middle[1] == point2:\n        return 2\n    else:\n        return 3 if middle[1] == point3 else 1"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": [
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3",
            "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    point1 = [x1, y1, z1]\n    point2 = [x2, y2, z2]\n    point3 = [x3, y3, z3]\n    middle = sorted([point1, point2, point3], key=lambda x: (x[0], x[1], x[2]))\n    if len(middle) == 3:\n        if middle[0] == point1:\n            return 2\n        elif middle[0] == point2:\n            return 1\n        elif middle[0] == point3:\n            return 2\n    elif len(middle) == 2:\n        return 3"
        ]
    }
}