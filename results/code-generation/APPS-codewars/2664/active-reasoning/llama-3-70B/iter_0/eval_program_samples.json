{
    "0": {
        "0": [
            "def solve(s):\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return True\n    return False",
            "def solve(s):\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return True\n    return False",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return False\n        l += 1\n        r -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 0)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n            if diff > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff == 1 or (diff == 0 and len(s) > 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - 1 - i]:\n            count += 1\n    return count <= 1",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n        left += 1\n        right -= 1\n    return diff <= 1",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i-1]:\n            count += 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    n = len(s)\n    left = 0\n    right = n - 1\n    diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n        left += 1\n        right -= 1\n    return diff <= 1",
            "def solve(s):\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return True\n    return False",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (diff_count == 0 and len(s) > 1)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return False\n        l += 1\n        r -= 1\n    return count == 1 or (count == 0 and len(s) > 1)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count_diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            count_diff += 1\n            if count_diff > 1:\n                return False\n        left += 1\n        right -= 1\n    return count_diff == 1 or (count_diff == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n            if count > 1:\n                return False\n        l += 1\n        r -= 1\n    return count == 1 or count == 0",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    diff = 0\n    while l < r:\n        if s[l] != s[r]:\n            diff += 1\n        if diff > 1:\n            return False\n        l += 1\n        r -= 1\n    return diff == 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)"
        ],
        "1": [
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return 0\n        l += 1\n        r -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i-1]:\n            count += 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return 0\n        l += 1\n        r -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    diff = 0\n    while l < r:\n        if s[l] != s[r]:\n            diff += 1\n            if diff > 1:\n                return False\n        l += 1\n        r -= 1\n    return diff == 1",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return 0\n    return 1 if count == 1 else 0",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    diff = 0\n    while l < r:\n        if s[l] != s[r]:\n            diff += 1\n        if diff > 1:\n            return 0\n        l += 1\n        r -= 1\n    return 1 if diff == 1 else 0",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n            if diff > 1:\n                return 0\n        left += 1\n        right -= 1\n    return 1 if diff == 1 else 0",
            "def solve(s):\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1",
            "def solve(s):\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return 1\n    return 0",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return 0\n        l, r = l + 1, r - 1\n    return 1 if count == 1 else 0"
        ],
        "2": [],
        "3": [
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return False\n        l += 1\n        r -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    n = len(s)\n    left = 0\n    right = n - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and n % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i-1]:\n            count += 1\n    if count > 1:\n        return 0\n    elif count == 1:\n        return 1\n    else:\n        return True if len(s) % 2 == 1 else False",
            "def solve(s):\n    count = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    n = len(s)\n    l, r = 0, n - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        l, r = l + 1, r - 1\n    return count == 1 or (count == 0 and n % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    if count > 1:\n        return 0\n    elif count == 1:\n        return 1\n    else:\n        if len(s) % 2 == 0:\n            return False\n        else:\n            return True",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or len(s) % 2 == 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n        if diff_count > 1:\n            return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (diff_count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    n = len(s)\n    diff = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            diff += 1\n    if diff > 1:\n        return 0\n    elif diff == 1:\n        return 1\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            return True",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1 or (count == 0 and n % 2 == 1)",
            "def solve(s):\n    n = len(s)\n    l, r = 0, n - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        l += 1\n        r -= 1\n    if count > 1:\n        return 0\n    elif count == 1:\n        return 1\n    else:\n        return True if n % 2 == 1 else False"
        ],
        "4": [
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n            if diff > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff == 1 or (len(s) % 2 == 1 and diff == 0)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    s = list(s)\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (len(s) % 2 == 1 and diff_count == 0)",
            "def solve(s):\n    n = len(s)\n    diff = 0\n    left, right = 0, n - 1\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n        left, right = left + 1, right - 1\n    if n % 2 == 0:\n        return diff == 1\n    else:\n        return diff <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)"
        ]
    },
    "1": {
        "0": [
            "def solve(s):\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return True\n    return False",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (diff_count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (diff_count == 0 and len(s) > 1)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return False\n        l += 1\n        r -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 0)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) > 1)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count_diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            count_diff += 1\n            if count_diff > 1:\n                return False\n        left += 1\n        right -= 1\n    return count_diff == 1 or (count_diff == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n            if count > 1:\n                return False\n        l += 1\n        r -= 1\n    return count == 1 or count == 0",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    diff = 0\n    while l < r:\n        if s[l] != s[r]:\n            diff += 1\n        if diff > 1:\n            return False\n        l += 1\n        r -= 1\n    return diff == 1",
            "def solve(s):\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return True\n    return False",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) > 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or len(s) % 2 == 1",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count_diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            count_diff += 1\n            if count_diff > 1:\n                return False\n        left += 1\n        right -= 1\n    return count_diff == 1 or (count_diff == 0 and len(s) % 2 == 0)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    diff = 0\n    while l < r:\n        if s[l] != s[r]:\n            diff += 1\n        if diff > 1:\n            return False\n        l += 1\n        r -= 1\n    return diff == 1",
            "def solve(s):\n    count = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return count <= 1"
        ],
        "1": [
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return 0\n        l += 1\n        r -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return 0\n        left += 1\n        right -= 1\n    if count == 1:\n        return 1\n    else:\n        return 0",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    diff = 0\n    while l < r:\n        if s[l] != s[r]:\n            diff += 1\n            if diff > 1:\n                return False\n        l += 1\n        r -= 1\n    return diff == 1",
            "def solve(s):\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return 0\n    if s == s[::-1]:\n        return 0\n    return -1",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return 0\n    return 1 if count == 1 else 0",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    diff = 0\n    while l < r:\n        if s[l] != s[r]:\n            diff += 1\n        if diff > 1:\n            return 0\n        l += 1\n        r -= 1\n    return 1 if diff == 1 else 0",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count == 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n            if diff > 1:\n                return 0\n        left += 1\n        right -= 1\n    return 1 if diff == 1 else 0",
            "def solve(s):\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return 0\n        l, r = l + 1, r - 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    if s == s[::-1]:\n        return 0\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return 1\n    return 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return 0\n        l += 1\n        r -= 1\n    return 1 if count == 1 else 0"
        ],
        "2": [
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)"
        ],
        "3": [
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    n = len(s)\n    l, r = 0, n - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        l, r = l + 1, r - 1\n    return count == 1 or (count == 0 and n % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    if count > 1:\n        return 0\n    elif count == 1:\n        return 1\n    else:\n        if len(s) % 2 == 0:\n            return False\n        else:\n            return True",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or len(s) % 2 == 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n        if diff_count > 1:\n            return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (diff_count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    n = len(s)\n    diff = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            diff += 1\n    if diff > 1:\n        return 0\n    elif diff == 1:\n        return 1\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            return True",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1 or (count == 0 and n % 2 == 1)",
            "def solve(s):\n    n = len(s)\n    l, r = 0, n - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        l += 1\n        r -= 1\n    if count > 1:\n        return 0\n    elif count == 1:\n        return 1\n    else:\n        return True if n % 2 == 1 else False",
            "def solve(s):\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            count += 1\n    if count > 1:\n        return 0\n    elif count == 1:\n        return 1\n    else:\n        return False if n % 2 == 0 else True"
        ],
        "4": [
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    s = list(s)\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (len(s) % 2 == 1 and diff_count == 0)",
            "def solve(s):\n    n = len(s)\n    diff = 0\n    left, right = 0, n - 1\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n        left, right = left + 1, right - 1\n    if n % 2 == 0:\n        return diff == 1\n    else:\n        return diff <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1 or (count == 0 and n % 2 == 1)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n            if count > 1:\n                return False\n        l += 1\n        r -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    if count > 1:\n        return False\n    elif count == 1:\n        return True\n    else:\n        if len(s) % 2 == 1:\n            return True\n        else:\n            return False"
        ]
    },
    "2": {
        "0": [
            "def solve(s):\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return True\n    return False",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) > 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or len(s) % 2 == 1",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count_diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            count_diff += 1\n            if count_diff > 1:\n                return False\n        left += 1\n        right -= 1\n    return count_diff == 1 or (count_diff == 0 and len(s) % 2 == 0)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    diff = 0\n    while l < r:\n        if s[l] != s[r]:\n            diff += 1\n        if diff > 1:\n            return False\n        l += 1\n        r -= 1\n    return diff == 1",
            "def solve(s):\n    count = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return count <= 1",
            "def solve(s):\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return True\n    return False",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count <= 1",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n        if diff_count > 1:\n            return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (diff_count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n        left += 1\n        right -= 1\n    return diff_count <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 0 or diff_count == 1",
            "def solve(s):\n    l = 0\n    r = len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return False\n        l += 1\n        r -= 1\n    return count == 1 or (count == 0 and len(s) > 1)"
        ],
        "1": [
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return 0\n    return 1 if count == 1 else 0",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    diff = 0\n    while l < r:\n        if s[l] != s[r]:\n            diff += 1\n        if diff > 1:\n            return 0\n        l += 1\n        r -= 1\n    return 1 if diff == 1 else 0",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 or (count == 0 and len(s) % 2 == 1) else 0",
            "def solve(s):\n    l = 0\n    r = len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return 0\n        l += 1\n        r -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    i, j = 0, len(s) - 1\n    diff = 0\n    while i < j:\n        if s[i] != s[j]:\n            diff += 1\n        if diff > 1:\n            return 0\n        i += 1\n        j -= 1\n    return 1 if diff == 1 else 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n            if diff > 1:\n                return 0\n        left += 1\n        right -= 1\n    return 1 if diff == 1 else 0",
            "def solve(s):\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        if count > 1:\n            return 0\n        l, r = l + 1, r - 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    if s == s[::-1]:\n        return 0\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return 1\n    return 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return 0\n        left += 1\n        right -= 1\n    return 1 if count == 1 else 0",
            "def solve(s):\n    if s == s[::-1]:\n        return 0\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]:\n            return 1\n    return 0",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count == 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return 0\n        left += 1\n        right -= 1\n    if count == 1:\n        return 1\n    else:\n        return 0"
        ],
        "2": [],
        "3": [
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    if count > 1:\n        return 0\n    elif count == 1:\n        return 1\n    else:\n        if len(s) % 2 == 0:\n            return False\n        else:\n            return True",
            "def solve(s):\n    left = 0\n    right = len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or len(s) % 2 == 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n        if diff_count > 1:\n            return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (diff_count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    n = len(s)\n    diff = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            diff += 1\n    if diff > 1:\n        return 0\n    elif diff == 1:\n        return 1\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            return True",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1 or (count == 0 and n % 2 == 1)",
            "def solve(s):\n    n = len(s)\n    l, r = 0, n - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        l += 1\n        r -= 1\n    if count > 1:\n        return 0\n    elif count == 1:\n        return 1\n    else:\n        return True if n % 2 == 1 else False",
            "def solve(s):\n    n = len(s)\n    left, right = 0, n - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and n % 2 == 1)"
        ],
        "4": [
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n        if count > 1:\n            return False\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    s = list(s)\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (len(s) % 2 == 1 and diff_count == 0)",
            "def solve(s):\n    n = len(s)\n    diff = 0\n    left, right = 0, n - 1\n    while left < right:\n        if s[left] != s[right]:\n            diff += 1\n        left, right = left + 1, right - 1\n    if n % 2 == 0:\n        return diff == 1\n    else:\n        return diff <= 1",
            "def solve(s):\n    left, right = 0, len(s) - 1\n    count = 0\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        if count > 1:\n            return False\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 != 0)",
            "def solve(s):\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1 or (count == 0 and n % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    if count > 1:\n        return False\n    elif count == 1:\n        return True\n    else:\n        if len(s) % 2 == 1:\n            return True\n        else:\n            return False",
            "def solve(s):\n    count = 0\n    left = 0\n    right = len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n\n    return count == 1 or (count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    count = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            count += 1\n    if count > 1:\n        return False\n    elif count == 1:\n        return True\n    else:\n        if len(s) % 2 == 0:\n            return False\n        else:\n            return True",
            "def solve(s):\n    if len(s) < 2:\n        return False\n    left, right = 0, len(s) - 1\n    diff_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n        left += 1\n        right -= 1\n    return diff_count == 1 or (diff_count == 0 and len(s) % 2 == 1)",
            "def solve(s):\n    l, r = 0, len(s) - 1\n    count = 0\n    while l < r:\n        if s[l] != s[r]:\n            count += 1\n        l, r = l + 1, r - 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)"
        ]
    }
}