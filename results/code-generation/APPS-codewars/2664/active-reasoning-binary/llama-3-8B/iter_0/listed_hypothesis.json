{
    "0": [
        {
            "content": "def solve(s): \n    for char in s:\n        temp = s.replace(char, '')\n        if temp == temp[::-1]:\n            return True\n    return False",
            "logp": null
        },
        {
            "content": "def solve(s): \n    for char in s:\n        temp = s.replace(char, '')\n        if temp == temp[::-1]:\n            return True\n    return False",
            "logp": null
        },
        {
            "content": "def solve(s): \n    for char in s:\n        temp = s.replace(char, '')\n        if temp == temp[::-1]:\n            return True\n    return False",
            "logp": null
        },
        {
            "content": "def solve(s): \n    for char in s:\n        temp = s.replace(char, '')\n        if temp == temp[::-1]:\n            return True\n    return False",
            "logp": null
        },
        {
            "content": "def solve(s): \n    for char in s:\n        temp = s.replace(char, '')\n        if temp == temp[::-1]:\n            return True\n    return False",
            "logp": null
        },
        {
            "content": "def solve(s): \n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    count_odd = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            count_odd += 1\n        if count_odd > 1:\n            return False\n            \n    return True",
            "logp": null
        },
        {
            "content": "def solve(s): \n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    count_odd = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            count_odd += 1\n        if count_odd > 1:\n            return False\n            \n    return True",
            "logp": null
        },
        {
            "content": "def solve(s): \n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    count_odd = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            count_odd += 1\n        if count_odd > 1:\n            return False\n            \n    return True",
            "logp": null
        },
        {
            "content": "def solve(s): \n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    count_odd = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            count_odd += 1\n        if count_odd > 1:\n            return False\n            \n    return True",
            "logp": null
        },
        {
            "content": "def solve(s): \n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    count_odd = 0\n    for count in char_count.values():\n        if count % 2 != 0:\n            count_odd += 1\n        if count_odd > 1:\n            return False\n            \n    return True",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def solve(s): \n    for i in range(len(s)):\n        temp = list(s)\n        temp[i] = ''\n        for j in temp:\n            if j == '':\n                temp.remove('')\n        if ''.join(temp) == ''.join(reversed(temp)):\n            return True\n    return False",
            "logp": null
        },
        {
            "content": "def solve(s):\n    s = s.lower()\n    for i in range(len(s)):\n        left, right = s[:i], s[i+1:]\n        if left + right == (left + right)[::-1]:\n            return True\n    return False",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def solve(s):\n    left = 0\n    right = len(s) - 1\n    left_count = 0\n    while left < right:\n        if s[left] != s[right]:\n            if left + 1 < right:\n                if s[left + 1] == s[right]:\n                    left += 1\n                else:\n                    left_count += 1\n                    break\n            else:\n                left_count += 1\n                break\n        left += 1\n        right -= 1\n    return left_count == 1",
            "logp": null
        }
    ],
    "3": []
}