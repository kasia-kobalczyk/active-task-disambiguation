{
    "0": {
        "0": [
            "```python\ndef solve(s):\n    mismatch_count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    l, r = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while l < r:\n        if s[l] != s[r]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        l += 1\n        r -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    l, r = 0, len(s) - 1\n    mismatches = 0\n\n    while l < r:\n        if s[l] != s[r]:\n            mismatches += 1\n        l += 1\n        r -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    differences = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            differences += 1\n        left += 1\n        right -= 1\n        \n    return differences == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n        if mismatches > 1:\n            return False\n            \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatch_count = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    changes = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            changes += 1\n        left += 1\n        right -= 1\n        \n    return changes == 1\n```"
        ],
        "1": [
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n        \n    return count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    differences = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            differences += 1\n        left += 1\n        right -= 1\n        \n    return differences == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    l = len(s)\n    mismatches = 0\n    for i in range(l // 2):\n        if s[i] != s[l - 1 - i]:\n            mismatches += 1\n    return mismatches == 1 or (mismatches == 0 and l % 2 == 1)\n```",
            "```python\ndef solve(s):\n    l, r = 0, len(s) - 1\n    mismatches = 0\n    \n    while l < r:\n        if s[l] != s[r]:\n            mismatches += 1\n        l += 1\n        r -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    \n    return count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatch_count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    changes = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes == 1\n```"
        ],
        "2": [
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    changes = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            changes += 1\n        left += 1\n        right -= 1\n        \n    return changes == 1 or (changes == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    differences = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            differences += 1\n        left += 1\n        right -= 1\n        \n    return differences == 1 or (differences == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n\n    return count == 1 or (count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    changes = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            changes += 1\n        left += 1\n        right -= 1\n        \n    return changes == 1 or (changes == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```"
        ],
        "3": [
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1 or (count == 0 and n % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    \n    return count == 1 or (count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```"
        ],
        "4": [
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```"
        ]
    },
    "1": {
        "0": [
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n        if mismatches > 1:\n            return False\n            \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatch_count = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    \n    return count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```"
        ],
        "1": [
            "```python\ndef solve(s):\n    l = len(s)\n    mismatches = 0\n    \n    for i in range(l // 2):\n        if s[i] != s[l - 1 - i]:\n            mismatches += 1\n            \n    return mismatches == 1 or (mismatches == 0 and l % 2 == 1)\n```",
            "```python\ndef solve(s):\n    l, r = 0, len(s) - 1\n    mismatches = 0\n    \n    while l < r:\n        if s[l] != s[r]:\n            mismatches += 1\n        l += 1\n        r -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatch_count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    changes = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    l, r = 0, len(s) - 1\n    mismatches = 0\n    \n    while l < r:\n        if s[l] != s[r]:\n            mismatches += 1\n        l += 1\n        r -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    mismatch_count = 0\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1\n```"
        ],
        "2": [
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    differences = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            differences += 1\n        left += 1\n        right -= 1\n        \n    return differences == 1 or (differences == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n\n    return count == 1 or (count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```"
        ],
        "3": [
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count == 1 or (count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n            \n    return count == 1 or (count == 0 and n % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```"
        ],
        "4": [
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```"
        ]
    },
    "2": {
        "0": [
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n        if mismatch_count > 1:\n            return False\n            \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    \n    return count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatch_count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n        if mismatch_count > 1:\n            return False\n            \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    differences = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            differences += 1\n        left += 1\n        right -= 1\n\n    return differences == 1 or (differences == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n        \n    return count == 1 or (count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    l, r = 0, len(s) - 1\n    mismatches = 0\n\n    while l < r:\n        if s[l] != s[r]:\n            mismatches += 1\n        l += 1\n        r -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n        \n    return count == 1\n```"
        ],
        "1": [
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    l, r = 0, len(s) - 1\n    mismatches = 0\n    \n    while l < r:\n        if s[l] != s[r]:\n            mismatches += 1\n        l += 1\n        r -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    mismatch_count = 0\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n        \n    return count == 1\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    changes = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            changes += 1\n        left += 1\n        right -= 1\n        \n    return changes == 1\n```",
            "```python\ndef solve(s):\n    l, r = 0, len(s) - 1\n    mismatch_count = 0\n\n    while l < r:\n        if s[l] != s[r]:\n            mismatch_count += 1\n            if mismatch_count > 1:\n                return False\n        l += 1\n        r -= 1\n\n    return mismatch_count == 1\n```",
            "```python\ndef solve(s):\n    count = 0\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1 or (count == 0 and n % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n            if count > 1:\n                return False\n        left += 1\n        right -= 1\n    \n    return count == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```"
        ],
        "2": [
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    differences = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            differences += 1\n        left += 1\n        right -= 1\n        \n    return differences == 1 or (differences == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    differences = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            differences += 1\n        left += 1\n        right -= 1\n        \n    return differences == 1 or (differences == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```"
        ],
        "3": [
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            count += 1\n    return count == 1 or (count == 0 and n % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            count += 1\n        left += 1\n        right -= 1\n    \n    return count == 1 or (count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```"
        ],
        "4": [
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n\n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left = 0\n    right = len(s) - 1\n    mismatch_count = 0\n\n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n\n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatch_count = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n        \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n    \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatches = 0\n    left = 0\n    right = len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    mismatch_count = 0\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatch_count += 1\n        left += 1\n        right -= 1\n    \n    return mismatch_count == 1 or (mismatch_count == 0 and len(s) % 2 == 1)\n```",
            "```python\ndef solve(s):\n    left, right = 0, len(s) - 1\n    mismatches = 0\n    \n    while left < right:\n        if s[left] != s[right]:\n            mismatches += 1\n        left += 1\n        right -= 1\n        \n    return mismatches == 1 or (mismatches == 0 and len(s) % 2 == 1)\n```"
        ]
    }
}