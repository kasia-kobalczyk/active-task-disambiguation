{
    "0": [
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            return v\n        if pitch == k * 2 or pitch == k / 2:\n            return v\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            return v\n        if pitch == k * 2 or pitch == k / 2:\n            return v\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            return v\n        if pitch == k * 2 or pitch == k / 2:\n            return v\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            return v\n        if pitch == k * 2 or pitch == k / 2:\n            return v\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            return v\n        if pitch == k * 2 or pitch == k / 2:\n            return v\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_pitch = min(notes, key=lambda x:abs(x-pitch))\n    return notes[closest_pitch]",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_pitch = min(notes, key=lambda x:abs(x-pitch))\n    return notes[closest_pitch]",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_pitch = min(notes, key=lambda x:abs(x-pitch))\n    return notes[closest_pitch]",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_pitch = min(notes, key=lambda x:abs(x-pitch))\n    return notes[closest_pitch]",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_pitch = min(notes, key=lambda x:abs(x-pitch))\n    return notes[closest_pitch]",
            "logp": null
        }
    ],
    "1": [],
    "2": [],
    "3": [
        {
            "content": "def get_note(pitch):\n    for k, v in notes.items():\n        if k == pitch:\n            return v\n    return None",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for frequency, note in notes.items():\n        if pitch == frequency:\n            return note\n        elif pitch < frequency:\n            if frequency - pitch < 10:\n                return note\n            break\n    return \"\"",
            "logp": null
        }
    ]
}