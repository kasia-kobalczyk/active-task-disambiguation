{
    "0": [
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch % (freq * 2) == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for key in notes:\n        if pitch % key == 0:\n            return notes[key]",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        while pitch != freq:\n            pitch *= 2\n            if pitch > freq:\n                pitch /= 2\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch / note_pitch == int(pitch / note_pitch) * 2 ** (1/12):\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        while pitch / note_pitch > 2:\n            pitch /= 2\n        while pitch / note_pitch < 1:\n            pitch *= 2\n        if pitch == note_pitch:\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch / freq == int(pitch / freq):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch * 2 == note_pitch:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % (note_pitch / 440) == 0 or pitch % (440 / note_pitch) == 0:\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch / note_pitch == int(pitch / note_pitch) * 2 ** (1/12):\n            return note_name\n    return None",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch / note_pitch ** (1 / 12) % 2 == 1 or pitch / note_pitch ** (-1 / 12) % 2 == 1:\n            return note",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % note_pitch == 0 or pitch / note_pitch == int(pitch / note_pitch):\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for key in notes:\n        if pitch % key == 0:\n            return notes[key]",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch % (freq * 2) == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        while pitch != freq:\n            pitch /= 2\n        return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        while pitch > note_pitch:\n            pitch /= 2\n        while pitch < note_pitch:\n            pitch *= 2\n        if pitch == note_pitch:\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch / freq == int(pitch / freq):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch / note_pitch == int(pitch / note_pitch):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch % (note_pitch / 2) == 0:\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch / note_pitch == 1:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % note_pitch == 0 or pitch / note_pitch == 1:\n            return note_name",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % note_pitch == 0 or pitch % (note_pitch / 2) == 0:\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch / note_pitch == 2 or pitch / note_pitch == 0.5 or pitch == note_pitch:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch * 2 == note_pitch:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch / note_pitch == int(pitch / note_pitch) or pitch * 2 / note_pitch == int(pitch * 2 / note_pitch) or pitch / (note_pitch * 2) == int(pitch / (note_pitch * 2)):\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch * 2 == note_pitch:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        while pitch % note_pitch == 0:\n            pitch //= 2\n        while pitch * 2 == note_pitch:\n            pitch *= 2\n        if pitch == note_pitch:\n            return note",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % note_pitch == 0 or pitch % (note_pitch / 2) == 0:\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch / note_pitch == int(pitch / note_pitch) or pitch * 2 / note_pitch == int(pitch * 2 / note_pitch) or pitch / (note_pitch * 2) == int(pitch / (note_pitch * 2)):\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch / note_pitch == 2 or pitch / note_pitch == 1 or pitch / note_pitch == 0.5:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch % (note_pitch / 2) == 0:\n            return note_name",
            "logp": null
        }
    ]
}