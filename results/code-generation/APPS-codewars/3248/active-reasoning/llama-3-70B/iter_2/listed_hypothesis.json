{
    "0": [
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch / freq == int(pitch / freq):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch * 2 == note_pitch:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch / note_pitch == int(pitch / note_pitch):\n            return note_name\n    return None",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch / note_pitch == int(pitch / note_pitch) * 2 ** (1/12):\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch / note_pitch ** (1 / 12) % 2 == 1 or pitch / note_pitch ** (-1 / 12) % 2 == 1:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch / freq == int(pitch / freq):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch / note_pitch == int(pitch / note_pitch):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch / note_pitch == int(pitch / note_pitch):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch % (freq * 2) == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch / (note_pitch / 2) == int(pitch / (note_pitch / 2)):\n            return note",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch / freq == int(pitch / freq):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch / freq == round(pitch / freq):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch % (note_pitch / 2) == 0:\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % (freq * 2) == 0 or pitch % (freq / 2) == 0:\n            return note\n    return None",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch / freq == int(pitch / freq):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch / note_pitch == int(pitch / note_pitch):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch / (note_pitch / 2) == int(pitch / (note_pitch / 2)):\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    note = None\n    for key in notes:\n        if pitch % key == 0 or key % pitch == 0:\n            note = notes[key]\n            break\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch % (note_pitch / 2) == 0:\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        while pitch / note_pitch > 2:\n            pitch /= 2\n        while pitch / note_pitch < 0.5:\n            pitch *= 2\n        if abs(pitch - note_pitch) < 0.01:\n            return note",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch * 2 % note_pitch == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch * 2 % note_pitch == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch % (note_pitch / 2) == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch % (freq / 2) == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch * 2 % note_pitch == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        while note_pitch * 2 < pitch:\n            note_pitch *= 2\n        while note_pitch > pitch:\n            note_pitch /= 2\n        if note_pitch == pitch:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch * 2 % note_pitch == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or note_pitch % pitch == 0:\n            return note",
            "logp": null
        }
    ],
    "3": [
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch / note_pitch == int(pitch / note_pitch) or pitch * 2 / note_pitch == int(pitch * 2 / note_pitch) or pitch / (note_pitch * 2) == int(pitch / (note_pitch * 2)):\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch % (note_pitch / 2) == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for freq, note in notes.items():\n        if pitch % freq == 0 or pitch % (freq / 2) == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note_name in notes.items():\n        if pitch % (note_pitch * 2) == 0 or pitch % (note_pitch / 2) == 0:\n            return note_name",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch * 2 % note_pitch == 0:\n            return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    for note_pitch, note in notes.items():\n        if pitch % note_pitch == 0 or pitch * 2 % note_pitch == 0:\n            return note",
            "logp": null
        }
    ]
}