{
    "0": [
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            note = v\n            break\n        if pitch < k:\n            note = \"A\"\n            break\n        if k < pitch <= 2 * k:\n            note = \"A#\" if v == \"A\" else \"B\"\n            break\n        if 2 * k < pitch <= 4 * k:\n            note = \"B\" if v == \"A#\" else \"C\"\n            break\n        if 4 * k < pitch <= 8 * k:\n            note = \"C\" if v == \"B\" else \"C#\"\n            break\n        if 8 * k < pitch <= 16 * k:\n            note = \"C#\" if v == \"C\" else \"D\"\n            break\n        if 16 * k < pitch <= 32 * k:\n            note = \"D\" if v == \"C#\" else \"D#\"\n            break\n        if 32 * k < pitch <= 64 * k:\n            note = \"D#\" if v == \"D\" else \"E\"\n            break\n        if 64 * k < pitch <= 128 * k:\n            note = \"E\" if v == \"D#\" else \"F\"\n            break\n        if 128 * k < pitch <= 256 * k:\n            note = \"F\" if v == \"E\" else \"F#\"\n            break\n        if 256 * k < pitch <= 512 * k:\n            note = \"F#\" if v == \"F\" else \"G\"\n            break\n        if 512 * k < pitch <= 1024 * k:\n            note = \"G\" if v == \"F#\" else \"G#\"\n            break\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            note = v\n            break\n        if pitch < k:\n            note = \"A\"\n            break\n        if k < pitch <= 2 * k:\n            note = \"A#\" if v == \"A\" else \"B\"\n            break\n        if 2 * k < pitch <= 4 * k:\n            note = \"B\" if v == \"A#\" else \"C\"\n            break\n        if 4 * k < pitch <= 8 * k:\n            note = \"C\" if v == \"B\" else \"C#\"\n            break\n        if 8 * k < pitch <= 16 * k:\n            note = \"C#\" if v == \"C\" else \"D\"\n            break\n        if 16 * k < pitch <= 32 * k:\n            note = \"D\" if v == \"C#\" else \"D#\"\n            break\n        if 32 * k < pitch <= 64 * k:\n            note = \"D#\" if v == \"D\" else \"E\"\n            break\n        if 64 * k < pitch <= 128 * k:\n            note = \"E\" if v == \"D#\" else \"F\"\n            break\n        if 128 * k < pitch <= 256 * k:\n            note = \"F\" if v == \"E\" else \"F#\"\n            break\n        if 256 * k < pitch <= 512 * k:\n            note = \"F#\" if v == \"F\" else \"G\"\n            break\n        if 512 * k < pitch <= 1024 * k:\n            note = \"G\" if v == \"F#\" else \"G#\"\n            break\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            note = v\n            break\n        if pitch < k:\n            note = \"A\"\n            break\n        if k < pitch <= 2 * k:\n            note = \"A#\" if v == \"A\" else \"B\"\n            break\n        if 2 * k < pitch <= 4 * k:\n            note = \"B\" if v == \"A#\" else \"C\"\n            break\n        if 4 * k < pitch <= 8 * k:\n            note = \"C\" if v == \"B\" else \"C#\"\n            break\n        if 8 * k < pitch <= 16 * k:\n            note = \"C#\" if v == \"C\" else \"D\"\n            break\n        if 16 * k < pitch <= 32 * k:\n            note = \"D\" if v == \"C#\" else \"D#\"\n            break\n        if 32 * k < pitch <= 64 * k:\n            note = \"D#\" if v == \"D\" else \"E\"\n            break\n        if 64 * k < pitch <= 128 * k:\n            note = \"E\" if v == \"D#\" else \"F\"\n            break\n        if 128 * k < pitch <= 256 * k:\n            note = \"F\" if v == \"E\" else \"F#\"\n            break\n        if 256 * k < pitch <= 512 * k:\n            note = \"F#\" if v == \"F\" else \"G\"\n            break\n        if 512 * k < pitch <= 1024 * k:\n            note = \"G\" if v == \"F#\" else \"G#\"\n            break\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            note = v\n            break\n        if pitch < k:\n            note = \"A\"\n            break\n        if k < pitch <= 2 * k:\n            note = \"A#\" if v == \"A\" else \"B\"\n            break\n        if 2 * k < pitch <= 4 * k:\n            note = \"B\" if v == \"A#\" else \"C\"\n            break\n        if 4 * k < pitch <= 8 * k:\n            note = \"C\" if v == \"B\" else \"C#\"\n            break\n        if 8 * k < pitch <= 16 * k:\n            note = \"C#\" if v == \"C\" else \"D\"\n            break\n        if 16 * k < pitch <= 32 * k:\n            note = \"D\" if v == \"C#\" else \"D#\"\n            break\n        if 32 * k < pitch <= 64 * k:\n            note = \"D#\" if v == \"D\" else \"E\"\n            break\n        if 64 * k < pitch <= 128 * k:\n            note = \"E\" if v == \"D#\" else \"F\"\n            break\n        if 128 * k < pitch <= 256 * k:\n            note = \"F\" if v == \"E\" else \"F#\"\n            break\n        if 256 * k < pitch <= 512 * k:\n            note = \"F#\" if v == \"F\" else \"G\"\n            break\n        if 512 * k < pitch <= 1024 * k:\n            note = \"G\" if v == \"F#\" else \"G#\"\n            break\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    note = \"\"\n    for k, v in notes.items():\n        if pitch == k:\n            note = v\n            break\n        if pitch < k:\n            note = \"A\"\n            break\n        if k < pitch <= 2 * k:\n            note = \"A#\" if v == \"A\" else \"B\"\n            break\n        if 2 * k < pitch <= 4 * k:\n            note = \"B\" if v == \"A#\" else \"C\"\n            break\n        if 4 * k < pitch <= 8 * k:\n            note = \"C\" if v == \"B\" else \"C#\"\n            break\n        if 8 * k < pitch <= 16 * k:\n            note = \"C#\" if v == \"C\" else \"D\"\n            break\n        if 16 * k < pitch <= 32 * k:\n            note = \"D\" if v == \"C#\" else \"D#\"\n            break\n        if 32 * k < pitch <= 64 * k:\n            note = \"D#\" if v == \"D\" else \"E\"\n            break\n        if 64 * k < pitch <= 128 * k:\n            note = \"E\" if v == \"D#\" else \"F\"\n            break\n        if 128 * k < pitch <= 256 * k:\n            note = \"F\" if v == \"E\" else \"F#\"\n            break\n        if 256 * k < pitch <= 512 * k:\n            note = \"F#\" if v == \"F\" else \"G\"\n            break\n        if 512 * k < pitch <= 1024 * k:\n            note = \"G\" if v == \"F#\" else \"G#\"\n            break\n    return note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_distance = float('inf')\n    closest_note = None\n    for note in notes:\n        distance = abs(note - pitch)\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_note = notes.get(note)\n    return closest_note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_distance = float('inf')\n    closest_note = None\n    for note in notes:\n        distance = abs(note - pitch)\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_note = notes.get(note)\n    return closest_note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_distance = float('inf')\n    closest_note = None\n    for note in notes:\n        distance = abs(note - pitch)\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_note = notes.get(note)\n    return closest_note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_distance = float('inf')\n    closest_note = None\n    for note in notes:\n        distance = abs(note - pitch)\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_note = notes.get(note)\n    return closest_note",
            "logp": null
        },
        {
            "content": "def get_note(pitch):\n    closest_distance = float('inf')\n    closest_note = None\n    for note in notes:\n        distance = abs(note - pitch)\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_note = notes.get(note)\n    return closest_note",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def get_note(pitch):\n    for key, value in notes.items():\n        while pitch != key:\n            if pitch > key:\n                key *= 2\n            else:\n                key /= 2\n        return value",
            "logp": null
        }
    ],
    "2": [
        {
            "content": "def get_note(pitch):\n    for key, value in notes.items():\n        while pitch != key:\n            if pitch > key:\n                key *= 2\n            else:\n                key /= 2\n        return value",
            "logp": null
        }
    ],
    "3": []
}