{
    "0": {
        "0": [
            "import math\ndef nth_perm(n,d):\n    # Generate the list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = ''\n    \n    # Loop through each digit position\n    for i in range(d):\n        # Calculate the number of permutations of the remaining digits\n        perm_count = math.factorial(d - i - 1)\n        \n        # Calculate the index of the current digit\n        digit_index = n // perm_count\n        \n        # Add the digit to the result string\n        result += digits[digit_index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(digit_index)\n        \n        # Update n to the remaining permutation index\n        n %= perm_count\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        index = n // div\n        n = n % div\n        \n        result += str(digits[index])\n        digits.pop(index)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    perm = \"\"\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        n = n % fact\n        perm += str(digits[index])\n        digits.pop(index)\n    return perm",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    while digits:\n        total_perms = math.factorial(len(digits) - 1)\n        i = (n - 1) // total_perms\n        result += str(digits.pop(i))\n        n = n - (i * total_perms)\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.floor(n / math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        index = n // div\n        n %= div\n        result.append(digits.pop(index))\n    return ''.join(str(d) for d in result)",
            "def L(n,d):\n    digits = list(range(d))\n    result = ''\n    for i in range(d-1, -1, -1):\n        idx = n // math.factorial(i)\n        result += str(digits[idx])\n        digits.remove(digits[idx])\n        n %= math.factorial(i)\n    return result",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = list(range(d))\n    # create an empty string to store the result\n    result = ''\n    # iterate over the digits\n    for i in range(d):\n        # calculate the factorial of d-i-1\n        fact = math.factorial(d-i-1)\n        # calculate the index of the digit to add to the result\n        index = n // fact\n        # add the digit to the result\n        result += str(digits[index])\n        # remove the digit from the list\n        del digits[index]\n        # update n to the remainder of n divided by fact\n        n %= fact\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Initialize an empty result string\n    result = ''\n    \n    # Iterate through the digits\n    for i in range(d-1, 0, -1):\n        # Find the index of the digit to add to the result string\n        index = n // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n %= factorial\n        factorial //= i\n        \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "def L(n, d):\n    digits = list(range(d))\n    permutation = ''\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        n = n % fact\n        digit = digits[index]\n        permutation += str(digit)\n        digits.remove(digit)\n    return permutation",
            "```python\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    # Calculate the factorials\n    factorials = [math.factorial(i) for i in range(d)]\n    \n    # Calculate the digits in the permutation\n    for i in range(d-1, -1, -1):\n        digit_index = n // factorials[i]\n        n %= factorials[i]\n        perm += digits[digit_index]\n        digits.pop(digit_index)\n    \n    return perm\n```",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_permutations = math.factorial(d)\n    result = []\n    \n    # Adjust n to start from 0\n    n -= 1\n    \n    # Generate the nth permutation\n    for i in range(d, 0, -1):\n        num_permutations //= i\n        index = n // num_permutations\n        result.append(digits[index])\n        digits.pop(index)\n        n %= num_permutations\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Get the digits as a list\n    digits = list(range(d))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Iterate through the digits from left to right\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the digit in the digits list\n        index = n // factorial\n        \n        # Add the digit to the result\n        result.append(str(digits[index]))\n        \n        # Remove the digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update n for the next iteration\n        n %= factorial\n    \n    # Return the result as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = list(str(d))\n    digits.sort()\n    result = \"\"\n    while len(digits) > 0:\n        fac = math.factorial(len(digits) - 1)\n        index = n // fac\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fac\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return \"Invalid input\"\n    \n    while d > 0:\n        total_perms //= d\n        idx = n // total_perms\n        result.append(digits[idx])\n        digits.pop(idx)\n        n %= total_perms\n        d -= 1\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    result = \"\"\n    n = n-1\n    for i in range(d, 0, -1):\n        perms = perms // i\n        index, n = divmod(n, perms)\n        result += nums[index]\n        nums.pop(index)\n    return result\n\nprint(nth_perm(7, 4)) #should return '1023'\nprint(nth_perm(4, 4)) #should return '0231'",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    result = []\n    \n    # Convert n to a 0-based index\n    n -= 1\n    \n    while d > 0:\n        perm_count //= d\n        digit_index = n // perm_count\n        result.append(digits[digit_index])\n        digits.pop(digit_index)\n        n %= perm_count\n        d -= 1\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d-1, 0, -1):\n        factorial = math.factorial(i)\n        index = (n // factorial) % len(digits)\n        digit = digits[index]\n        result += digit\n        digits.remove(digit)\n        \n    result += digits[0]\n    \n    return result\n\n# Testing\nprint(nth_perm(7, 4))  # '1023'\nprint(nth_perm(4, 4))  # '0231'",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]  # create a list of digits\n    \n    result = \"\"\n    \n    # calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # if n is larger than the number of permutations, return an empty string\n    if n > num_permutations:\n        return \"\"\n    \n    for i in range(d, 0, -1):\n        # calculate the index of the current digit in the permutation\n        index = (n % math.factorial(i)) // math.factorial(i-1)\n        \n        # append the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # remove the used digit from the list\n        digits.pop(index)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        divisor = math.factorial(i)\n        quotient, remainder = divmod(n, divisor)\n        result += str(digits.pop(quotient))\n        n = remainder\n    \n    return result"
        ],
        "1": [
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    if n <= 0 or n > perm_count:\n        return \"Invalid input\"\n    n -= 1\n    result = []\n    for i in range(d, 0, -1):\n        perm_count //= i\n        index = n // perm_count\n        result.append(digits[index])\n        digits.pop(index)\n        n = n % perm_count\n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d-1, 0, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the current digit in the remaining digits list\n        index = (n-1) // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the remaining digits list\n        digits.remove(digits[index])\n        \n        # Update n for the next iteration\n        n = n % factorial\n    \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n <= 0 or n > num_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the index of the digit to add to the permutation\n        index = (n - 1) // math.factorial(d - 1 - i)\n        \n        # Add the digit to the permutation\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n - (index * math.factorial(d - 1 - i))\n    \n    return result",
            "```python\nimport math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        digit = digits.pop(index)\n        result += str(digit)\n        n -= index * math.factorial(i-1)\n        \n    return result\n```",
            "import math\n\ndef nth_perm(n, d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # calculate the total number of permutations for d digits\n    total_permutations = math.factorial(d)\n\n    # check if n is greater than the total number of permutations\n    if n > total_permutations:\n        return \"Invalid input\"\n\n    # create an empty result string\n    result = \"\"\n\n    # calculate the index for each digit in the result string\n    for i in range(d, 0, -1):\n        # calculate the number of permutations for the remaining digits\n        perms = total_permutations // i\n\n        # calculate the index of the current digit in the digits list\n        digit_index = (n - 1) // perms\n\n        # append the current digit to the result string\n        result += digits[digit_index]\n\n        # remove the current digit from the digits list\n        digits.pop(digit_index)\n\n        # update the value of n for the next iteration\n        n -= digit_index * perms\n\n        # update the total number of permutations\n        total_permutations = perms\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    n -= 1\n    result = \"\"\n    \n    for i in range(d):\n        perms /= (d - i)\n        index = int(n / perms)\n        result += digits[index]\n        digits.pop(index)\n        n = n % perms\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        digits.remove(digit)\n        result += str(digit)\n\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits)-1)\n        index = (n-1) // factorial\n        result += digits[index]\n        digits.pop(index)\n        n = n % factorial\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d):\n        # calculate the factorial of (d-i-1) to get the number of permutations for the remaining digits\n        fact = math.factorial(d-i-1)\n        # calculate the index of the digit to be added to the result\n        index = n // fact\n        # add the digit to the result\n        result += digits[index]\n        # remove the digit from the list of available digits\n        digits.pop(index)\n        # update the value of n for the next iteration\n        n %= fact\n    return result"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "1": {
        "0": [
            "```python\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    # Calculate the factorials\n    factorials = [math.factorial(i) for i in range(d)]\n    \n    # Calculate the digits in the permutation\n    for i in range(d-1, -1, -1):\n        digit_index = n // factorials[i]\n        n %= factorials[i]\n        perm += digits[digit_index]\n        digits.pop(digit_index)\n    \n    return perm\n```",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_permutations = math.factorial(d)\n    result = []\n    \n    # Adjust n to start from 0\n    n -= 1\n    \n    # Generate the nth permutation\n    for i in range(d, 0, -1):\n        num_permutations //= i\n        index = n // num_permutations\n        result.append(digits[index])\n        digits.pop(index)\n        n %= num_permutations\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Get the digits as a list\n    digits = list(range(d))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Iterate through the digits from left to right\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the digit in the digits list\n        index = n // factorial\n        \n        # Add the digit to the result\n        result.append(str(digits[index]))\n        \n        # Remove the digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update n\n        n = n % factorial\n    \n    # Return the result as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = list(str(d))\n    digits.sort()\n    result = \"\"\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fact\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return \"Invalid input\"\n    \n    while d > 0:\n        total_perms //= d\n        idx = n // total_perms\n        result.append(digits[idx])\n        digits.pop(idx)\n        n %= total_perms\n        d -= 1\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    result = \"\"\n    n = n-1\n    for i in range(d, 0, -1):\n        perms = perms // i\n        index, n = divmod(n, perms)\n        result += nums[index]\n        nums.pop(index)\n    return result\n\nprint(nth_perm(7, 4)) #should return '1023'\nprint(nth_perm(4, 4)) #should return '0231'",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    result = []\n    \n    # Convert n to a 0-based index\n    n -= 1\n    \n    while d > 0:\n        perm_count //= d\n        digit_index = n // perm_count\n        result.append(digits[digit_index])\n        digits.pop(digit_index)\n        n %= perm_count\n        d -= 1\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d-1, 0, -1):\n        factorial = math.factorial(i)\n        index = (n // factorial) % len(digits)\n        digit = digits[index]\n        result += digit\n        digits.remove(digit)\n        \n    result += digits[0]\n    \n    return result\n\n# Testing\nprint(nth_perm(7, 4))  # '1023'\nprint(nth_perm(4, 4))  # '0231'",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]  # create a list of digits\n    \n    result = \"\"\n    \n    # calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # if n is larger than the number of permutations, return an empty string\n    if n > num_permutations:\n        return \"\"\n    \n    for i in range(d, 0, -1):\n        # calculate the index of the current digit in the permutation\n        index = (n % math.factorial(i)) // math.factorial(i-1)\n        \n        # append the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # remove the used digit from the list\n        digits.pop(index)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        divisor = math.factorial(i)\n        quotient, remainder = divmod(n, divisor)\n        result += str(digits.pop(quotient))\n        n = remainder\n    \n    return result",
            "def L(n, d):\n    nums = '0123456789'\n    perm = []\n    for i in range(d):\n        perm.append(nums[i])\n\n    result = ''\n    while n > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        if n % fact == 0:\n            index -= 1\n        result += perm[index]\n        perm.pop(index)\n        n %= fact\n        d -= 1\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits.pop(index)\n        n -= index * math.factorial(d-i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        permutation += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(i-1)\n\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutations = math.factorial(d)\n    if n > permutations:\n        return \"Invalid Input\"\n    result = \"\"\n    for i in range(d):\n        permutations = permutations // (d - i)\n        index = n // permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = n % permutations\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        digit = digits.pop(index)\n        result += str(digit)\n\n        n %= math.factorial(d - i - 1)\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n        \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        n = n % div\n        result.append(digits.pop(index))\n        \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Create an empty string to store the permutation\n    perm = \"\"\n    \n    # Iterate from d-1 to 0\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        fact = math.factorial(i)\n        \n        # Calculate the index of the digit to use\n        index = n // fact\n        \n        # Update n for the next iteration\n        n = n % fact\n        \n        # Add the digit to the permutation\n        perm += digits[index]\n        \n        # Remove the used digit from the list\n        digits.remove(digits[index])\n    \n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm_digits = []\n    for i in range(d-1, -1, -1):\n        count = math.factorial(i)\n        index = math.ceil(n/count) - 1\n        digit = digits[index]\n        perm_digits.append(digit)\n        digits.remove(digit)\n        n = n % count\n    return ''.join(perm_digits)"
        ],
        "1": [
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    if n <= 0 or n > perm_count:\n        return \"Invalid input\"\n    n -= 1\n    result = []\n    for i in range(d, 0, -1):\n        perm_count //= i\n        index = n // perm_count\n        result.append(digits[index])\n        digits.pop(index)\n        n = n % perm_count\n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d-1, 0, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the current digit in the remaining digits list\n        index = (n-1) // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the remaining digits list\n        digits.remove(digits[index])\n        \n        # Update n for the next iteration\n        n = n % factorial\n    \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n <= 0 or n > num_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the index of the digit to add to the permutation\n        index = (n - 1) // math.factorial(d - 1 - i)\n        \n        # Add the digit to the permutation\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n - (index * math.factorial(d - 1 - i))\n    \n    return result",
            "```python\nimport math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        digit = digits.pop(index)\n        result += str(digit)\n        n -= index * math.factorial(i-1)\n        \n    return result\n```",
            "import math\n\ndef nth_perm(n, d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # calculate the total number of permutations for d digits\n    total_permutations = math.factorial(d)\n\n    # check if n is greater than the total number of permutations\n    if n > total_permutations:\n        return \"Invalid input\"\n\n    # create an empty result string\n    result = \"\"\n\n    # calculate the index for each digit in the result string\n    for i in range(d, 0, -1):\n        # calculate the number of permutations for the remaining digits\n        perms = total_permutations // i\n\n        # calculate the index of the current digit in the digits list\n        digit_index = (n - 1) // perms\n\n        # append the current digit to the result string\n        result += digits[digit_index]\n\n        # remove the current digit from the digits list\n        digits.pop(digit_index)\n\n        # update the value of n for the next iteration\n        n -= digit_index * perms\n\n        # update the total number of permutations\n        total_permutations = perms\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    n -= 1\n    result = \"\"\n    \n    for i in range(d):\n        perms /= (d - i)\n        index = int(n / perms)\n        result += digits[index]\n        digits.pop(index)\n        n = n % perms\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        digits.remove(digit)\n        result += str(digit)\n\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits)-1)\n        index = (n-1) // factorial\n        result += digits[index]\n        digits.pop(index)\n        n = n % factorial\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d):\n        # calculate the factorial of (d-i-1) to get the number of permutations for the remaining digits\n        fact = math.factorial(d-i-1)\n        # calculate the index of the digit to be added to the result\n        index = n // fact\n        # add the digit to the result\n        result += digits[index]\n        # remove the digit from the list of available digits\n        digits.pop(index)\n        # update the value of n for the next iteration\n        n %= fact\n    return result",
            "def nth_perm(n, d):\n    digits = ''.join(str(x) for x in range(d))\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return None\n    \n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        total_perms //= i\n        index = n // total_perms\n        digit = digits[index]\n        result.append(digit)\n        \n        digits = digits[:index] + digits[index+1:]\n        n %= total_perms\n        \n    return ''.join(result)",
            "def nth_perm(n, d):\n    digits = list(map(str, range(d)))  # List of digits from 0 to d-1\n    num_permutations = math.factorial(d)  # Total number of permutations\n\n    if n < 1 or n > num_permutations:\n        return \"Invalid input\"\n\n    result = \"\"\n    remaining = d - 1\n\n    for i in range(d-1, 0, -1):\n        fact = math.factorial(i)\n        index = (n-1) // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n\n    result += digits[0]\n    return result",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = list(range(d))\n    \n    # Calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate through each digit\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the current digit in the remaining digits\n        index = n // fact\n        \n        # Add the digit at the calculated index to the result string\n        result += str(digits[index])\n        \n        # Remove the digit from the list\n        digits.remove(digits[index])\n        \n        # Update n and fact for the next iteration\n        n %= fact\n        fact //= i\n    \n    # Add the last digit to the result string\n    result += str(digits[0])\n    \n    return result"
        ],
        "2": [],
        "3": [],
        "4": []
    },
    "2": {
        "0": [
            "def L(n, d):\n    nums = '0123456789'\n    perm = []\n    for i in range(d):\n        perm.append(nums[i])\n\n    result = ''\n    while n > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        if n % fact == 0:\n            index -= 1\n        result += perm[index]\n        perm.pop(index)\n        n %= fact\n        d -= 1\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits.pop(index)\n        n -= index * math.factorial(d-i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        permutation += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(i-1)\n\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutations = math.factorial(d)\n    if n > permutations:\n        return \"Invalid Input\"\n    result = \"\"\n    for i in range(d):\n        permutations = permutations // (d - i)\n        index = n // permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = n % permutations\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        digit = digits.pop(index)\n        result += str(digit)\n\n        n %= math.factorial(d - i - 1)\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n        \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        n = n % div\n        result.append(digits.pop(index))\n        \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Create an empty string to store the permutation\n    perm = \"\"\n    \n    # Iterate from d-1 to 0\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        fact = math.factorial(i)\n        \n        # Calculate the index of the digit to use\n        index = n // fact\n        \n        # Update n for the next iteration\n        n = n % fact\n        \n        # Add the digit to the permutation\n        perm += digits[index]\n        \n        # Remove the used digit from the list\n        digits.remove(digits[index])\n    \n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm_digits = []\n    for i in range(d-1, -1, -1):\n        count = math.factorial(i)\n        index = math.ceil(n/count) - 1\n        digit = digits[index]\n        perm_digits.append(digit)\n        digits.remove(digit)\n        n = n % count\n    return ''.join(perm_digits)",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    # calculate the total number of permutations for d digits\n    num_perm = math.factorial(d)\n    \n    # iterate through each digit position\n    for i in range(d, 0, -1):\n        # calculate the index of the current digit\n        index = (n-1) // (num_perm // i)\n        \n        # append the digit at the calculated index to the result\n        result += digits[index]\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update n and num_perm for the next digit position\n        n = n - index * (num_perm // i)\n        num_perm = num_perm // i\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n %= math.factorial(i)\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # initialize result as an empty string\n    result = ''\n    \n    # iterate from d-1 down to 0\n    for i in range(d-1, -1, -1):\n        # calculate the factorial of i\n        fact = math.factorial(i)\n        \n        # calculate the index of the digit in digits that should be added to result\n        index = (n // fact) % (i + 1)\n        \n        # add the digit to result and remove it from digits\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "```python\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        idx = n // div\n        n %= div\n        result += str(digits[idx])\n        digits.pop(idx)\n        \n    return result\n```",
            "import math\n\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        n = n % div\n        result += str(digits.pop(index))\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    if n > perm_count or n < 1:\n        return \"Invalid input\"\n    n -= 1  # 0-indexing\n    \n    result = []\n    while d > 0:\n        perm_count //= d\n        index = n // perm_count\n        digit = digits.pop(index)\n        result.append(digit)\n        n %= perm_count\n        d -= 1\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Get the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Create an empty string to store the resulting permutation\n    permutation = ''\n    \n    # Iterate through each digit\n    for i in range(d-1, 0, -1):\n        # Get the index of the digit to be added to the permutation\n        index = (n-1) // factorial\n        \n        # Add the digit to the permutation\n        permutation += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n % factorial\n        \n        # Update the factorial\n        factorial = factorial // i\n    \n    # Add the last remaining digit to the permutation\n    permutation += digits[0]\n    \n    return permutation",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # Create a list to store the result\n    result = []\n\n    # Calculate the factorial of d\n    factorial = math.factorial(d)\n\n    # Iterate through the digits\n    for i in range(d, 0, -1):\n        # Calculate the index of the next digit\n        index = math.ceil(n / (factorial // i)) - 1\n\n        # Add the next digit to the result\n        result.append(digits[index])\n\n        # Remove the next digit from the list of digits\n        digits.pop(index)\n\n        # Update n and factorial\n        n = n % (factorial // i)\n        factorial = factorial // i\n\n    # Return the result as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.floor((n - 1) / math.factorial(i - 1))\n        result += nums[index]\n        nums.pop(index)\n        n = n - (index * math.factorial(i - 1))\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_permutations = math.factorial(d)\n    \n    # Check if n is within the range of valid permutations\n    if n <= 0 or n > total_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty result string\n    result = \"\"\n    \n    # Iterate over the digits\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the current digit\n        index = (n - 1) // math.factorial(i)\n        \n        # Add the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # Remove the added digit from the list\n        digits.pop(index)\n        \n        # Update the value of n for the next iteration\n        n = n - (index * math.factorial(i))\n    \n    return result"
        ],
        "1": [
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d-1, 0, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the current digit in the remaining digits list\n        index = (n-1) // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the remaining digits list\n        digits.remove(digits[index])\n        \n        # Update n for the next iteration\n        n = n % factorial\n    \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n <= 0 or n > num_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the index of the digit to add to the permutation\n        index = (n - 1) // math.factorial(d - 1 - i)\n        \n        # Add the digit to the permutation\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n - (index * math.factorial(d - 1 - i))\n    \n    return result",
            "```python\nimport math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        digit = digits.pop(index)\n        result += str(digit)\n        n -= index * math.factorial(i-1)\n        \n    return result\n```",
            "import math\n\ndef nth_perm(n, d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # calculate the total number of permutations for d digits\n    total_permutations = math.factorial(d)\n\n    # check if n is greater than the total number of permutations\n    if n > total_permutations:\n        return \"Invalid input\"\n\n    # create an empty result string\n    result = \"\"\n\n    # calculate the index for each digit in the result string\n    for i in range(d, 0, -1):\n        # calculate the number of permutations for the remaining digits\n        perms = total_permutations // i\n\n        # calculate the index of the current digit in the digits list\n        digit_index = (n - 1) // perms\n\n        # append the current digit to the result string\n        result += digits[digit_index]\n\n        # remove the current digit from the digits list\n        digits.pop(digit_index)\n\n        # update the value of n for the next iteration\n        n -= digit_index * perms\n\n        # update the total number of permutations\n        total_permutations = perms\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    n -= 1\n    result = \"\"\n    \n    for i in range(d):\n        perms /= (d - i)\n        index = int(n / perms)\n        result += digits[index]\n        digits.pop(index)\n        n = n % perms\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        digits.remove(digit)\n        result += str(digit)\n\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits)-1)\n        index = (n-1) // factorial\n        result += digits[index]\n        digits.pop(index)\n        n = n % factorial\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d):\n        # calculate the factorial of (d-i-1) to get the number of permutations for the remaining digits\n        fact = math.factorial(d-i-1)\n        # calculate the index of the digit to be added to the result\n        index = n // fact\n        # add the digit to the result\n        result += digits[index]\n        # remove the digit from the list of available digits\n        digits.pop(index)\n        # update the value of n for the next iteration\n        n %= fact\n    return result",
            "def nth_perm(n, d):\n    digits = list(map(str, range(d)))  # List of digits from 0 to d-1\n    num_permutations = math.factorial(d)  # Total number of permutations\n\n    if n < 1 or n > num_permutations:\n        return \"Invalid input\"\n\n    result = \"\"\n    remaining = d - 1\n\n    for i in range(d-1, 0, -1):\n        fact = math.factorial(i)\n        index = (n-1) // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n\n    result += digits[0]\n    return result",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = list(range(d))\n    \n    # Calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate through each digit\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the current digit in the remaining digits\n        index = n // fact\n        \n        # Add the digit at the calculated index to the result string\n        result += str(digits[index])\n        \n        # Remove the digit from the list\n        digits.remove(digits[index])\n        \n        # Update n and fact for the next iteration\n        n %= fact\n        fact //= i\n    \n    # Add the last digit to the result string\n    result += str(digits[0])\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        digit_index = n // math.factorial(i-1)\n        result += digits[digit_index]\n        digits.remove(digits[digit_index])\n        n %= math.factorial(i-1)\n    return result",
            "import math\n\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # calculate the total number of permutations of d digits\n    total_permutations = math.factorial(d)\n    \n    # if n is greater than the total number of permutations or less than 1, return an empty string\n    if n >= total_permutations or n < 1:\n        return \"\"\n    \n    # create an empty string to store the result\n    result = \"\"\n    \n    # decrement n by 1 to align with 0-based indexing\n    n -= 1\n    \n    # iterate through the digits in reverse order\n    for i in range(d-1, -1, -1):\n        # calculate the index of the digit to be added to the result\n        index = n // math.factorial(i)\n        \n        # add the digit to the result and remove it from the list of digits\n        result += digits[index]\n        digits.pop(index)\n        \n        # update n to the remaining permutations\n        n %= math.factorial(i)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    if n <= 0:\n        return \"\"\n    \n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = math.ceil(n / div) - 1\n        n = n % div\n        \n        perm += digits.pop(index)\n    \n    return perm",
            "def nth_perm(n,d):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // factorial(i-1)\n        perm += digits[index]\n        digits.remove(digits[index])\n        n = n % factorial(i-1)\n\n    return perm"
        ],
        "2": [],
        "3": [],
        "4": []
    }
}