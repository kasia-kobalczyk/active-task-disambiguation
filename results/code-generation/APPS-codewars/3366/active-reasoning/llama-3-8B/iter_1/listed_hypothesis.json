{
    "0": [
        {
            "content": "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "logp": null
        },
        {
            "content": "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "logp": null
        },
        {
            "content": "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "logp": null
        },
        {
            "content": "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "logp": null
        },
        {
            "content": "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "logp": null
        },
        {
            "content": "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "logp": null
        },
        {
            "content": "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "logp": null
        }
    ],
    "1": [
        {
            "content": "def nth_perm(n, d):\n    if n == 1:\n        return ''.join(map(str, range(d)))\n    fact = math.factorial(d - 1)\n    n -= 1\n    digits = list(map(str, range(d)))\n    result = []\n    d -= 1\n    while d > 0:\n        fact //= d\n        index = n // fact\n        n %= fact\n        result.append(digits[index])\n        digits.pop(index)\n        d -= 1\n    result.extend(digits)\n    return ''.join(result)",
            "logp": null
        }
    ],
    "2": [],
    "3": []
}