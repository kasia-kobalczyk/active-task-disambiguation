{
    "0": {
        "0": [
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n, d):\n    res = ''\n    nums = [str(i) for i in range(d)]\n    for i in range(d, 0, -1):\n        idx, nums = divmod(n, math.factorial(i-1))\n        res += nums[idx]\n        nums.pop(idx)\n        n = nums[0]\n    return res",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": [
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result"
        ]
    },
    "1": {
        "0": [
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "def nth_perm(n,d):\n    factors = [math.factorial(i) for i in range(1,d)]\n    num = list(str(range(d)))\n    result = \"\"\n    n -= 1\n    for i in range(d,0,-1):\n        index = n // factors[i-1]\n        n %= factors[i-1]\n        result += str(num.pop(index))\n    return result",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": [
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        del digits[index]\n        n %= math.factorial(d)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result"
        ]
    },
    "2": {
        "0": [
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "```\nimport math\n\ndef nth_perm(n, d):\n    result = list(range(d))\n    for i in range(d - 1, 0, -1):\n        i_index = (n - 1) // math.factorial(i)\n        n %= math.factorial(i)\n        result[0], result[i_index] = result[i_index], result[0]\n        result = result[1:]\n    return ''.join(map(str, result))\n```",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))",
            "def nth_perm(n, d):\n    result = list(range(d))\n    k, temp = divmod(n-1, math.factorial(d-1))\n    result[k], result[temp] = result[temp], result[k]\n    return ''.join(map(str, result))"
        ],
        "1": [],
        "2": [],
        "3": [],
        "4": [
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx = (n // math.factorial(i-1)) % i\n        result += digits[idx]\n        digits.pop(idx)\n        n %= math.factorial(i-1)\n    return result"
        ]
    }
}