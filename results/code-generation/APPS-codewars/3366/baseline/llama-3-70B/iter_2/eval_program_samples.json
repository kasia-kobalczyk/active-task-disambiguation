{
    "0": {
        "0": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d,0,-1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        i_fact = math.factorial(i - 1)\n        index = n // i_fact\n        n %= i_fact\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # adjust n to be 0-indexed\n    while d > 0:\n        d -= 1\n        n, index = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        i -= 1\n        idx, n = divmod(n, math.factorial(i))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10 or n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index = n // fact\n        n %= fact\n        perm += digits[index]\n        del digits[index]\n    return perm"
        ],
        "1": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index = n // fact\n        n %= fact\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = []\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result.append(digits[idx])\n        digits.pop(idx)\n    return ''.join(result)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        i_fact = math.factorial(i - 1)\n        index = n // i_fact\n        n %= i_fact\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n, d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    perm = []\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm.append(digits.pop(idx))\n    return ''.join(perm)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    # Calculate the factorial of d\n    factorial = [math.factorial(i) for i in range(d+1)]\n    \n    # Initialize the digits and the result\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    # Calculate the nth permutation\n    for i in range(d, 0, -1):\n        index = (n - 1) // factorial[i-1]\n        result += digits[index]\n        digits.pop(index)\n        n -= index * factorial[i-1]\n    \n    # Add the remaining digits to the result\n    result += ''.join(digits)\n    \n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10 or n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        index = n // fac\n        n %= fac\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation"
        ],
        "2": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        i_fact = math.factorial(i - 1)\n        index = n // i_fact\n        n %= i_fact\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = []\n    for i in range(d, 0, -1):\n        i -= 1\n        index, n = divmod(n, math.factorial(i))\n        result.append(digits[index])\n        del digits[index]\n    return ''.join(result)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.remove(digits[index])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        idx = n // fac\n        n %= fac\n        perm += digs[idx]\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        i -= 1\n        idx, n = divmod(n, math.factorial(i))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.pop(idx)\n\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation"
        ],
        "3": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = n // fact\n        n %= fact\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        i_fact = math.factorial(i - 1)\n        index = n // i_fact\n        n %= i_fact\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = []\n    for i in range(d,0,-1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result.append(digits[idx])\n        digits.pop(idx)\n    return ''.join(result)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n, d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    perm = []\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        perm.append(digits[idx])\n        digits.pop(idx)\n    return ''.join(perm)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        idx = n // fac\n        n %= fac\n        perm += digs[idx]\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    \n    digits = [str(i) for i in range(d)]\n    n -= 1\n    \n    result = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits.pop(index)\n\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        result += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        index = n // fac\n        n %= fac\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        index, n = divmod(n, fac)\n        perm += digits[index]\n        del digits[index]\n    return perm"
        ],
        "4": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = n // fact\n        permutation += digits[index]\n        digits.pop(index)\n        n %= fact\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while digits:\n        d -= 1\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1  # To make n 0-indexed\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = []\n    for i in range(d, 0, -1):\n        i -= 1\n        index, n = divmod(n, math.factorial(i))\n        result.append(digits[index])\n        del digits[index]\n    return ''.join(result)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index = n // fact\n        n %= fact\n        result += digits[index]\n        del digits[index]\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    \n    digits = [str(i) for i in range(d)]\n    n -= 1\n    \n    result = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        index, n = divmod(n, fac)\n        perm += digits[index]\n        digits.remove(digits[index])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    \n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    n -= 1\n    \n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n        \n    return perm"
        ]
    },
    "1": {
        "0": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        n, idx = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digs[idx]\n        # remove handled digit\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1  # adjust n to be 0-indexed\n    while d > 0:\n        d -= 1\n        n, index = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        i -= 1\n        idx, n = divmod(n, math.factorial(i))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10 or n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index = n // fact\n        n %= fact\n        perm += digits[index]\n        del digits[index]\n    return perm",
            "def nth_perm(n,d):\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10 inclusive\")\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        n %= fact\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return None\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        n %= fact\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n should be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation"
        ],
        "1": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        idx = n // fac\n        n %= fac\n        perm += digs[idx]\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10 or n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        del digits[index]\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        return \"d must be between 1 and 10\"\n    if n < 1:\n        return \"n must be a positive integer\"\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        perm += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    \n    return permutation",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        return \"\"\n    \n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-based\n    result = []\n    \n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index = n // fact\n        n %= fact\n        result.append(digits[index])\n        digits.pop(index)\n        \n    return ''.join(result)"
        ],
        "2": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digs = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        idx = n // fac\n        n %= fac\n        perm += digs[idx]\n        digs.remove(digs[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        i -= 1\n        idx, n = divmod(n, math.factorial(i))\n        perm += digits.pop(idx)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10 or n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n %= fact\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.pop(idx)\n\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        result += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        perm += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms = math.factorial(d)\n        \n        # find the index of current digit\n        index = n // perms\n        n %= perms\n        \n        # append the current digit\n        permutation += digits[index]\n        \n        # remove handled digit\n        digits.pop(index)\n    \n    return permutation"
        ],
        "3": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    \n    digits = [str(i) for i in range(d)]\n    n -= 1\n    \n    result = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        result += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    \n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    n -= 1\n    \n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n    \n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        perm += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return perm",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        result += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n, d):\n    nums = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += nums[index]\n        nums.remove(nums[index])\n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        n %= fact\n        result.append(digits.pop(idx))\n    \n    return ''.join(result)"
        ],
        "4": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    for i in range(d, 0, -1):\n        i_factorial = math.factorial(i - 1)\n        index, n = divmod(n, i_factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    \n    digits = [str(i) for i in range(d)]\n    n -= 1\n    \n    result = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.pop(idx)\n\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        result += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        index = n // fac\n        n %= fac\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        index, n = divmod(n, fac)\n        perm += digits[index]\n        del digits[index]\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        perm += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return perm",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        result += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms_for_d = math.factorial(d)\n        \n        index = n // perms_for_d\n        n %= perms_for_d\n        \n        permutation += digits[index]\n        del digits[index]\n        \n    return permutation",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n    \n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        i = n // fact\n        n %= fact\n        result.append(digits[i])\n        digits.pop(i)\n    \n    return ''.join(result)"
        ]
    },
    "2": {
        "0": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    if n < 1:\n        return None\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while digits:\n        fact = math.factorial(len(digits) - 1)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d should be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n should be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    n -= 1\n    digits = [str(i) for i in range(d)]\n    result = ''\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        permutation += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        perm += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        n, idx = divmod(n, math.factorial(d))\n        permutation += digits.pop(idx)\n    \n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return ''\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        n %= fact\n        result.append(digits.pop(idx))\n    \n    return ''.join(result)"
        ],
        "1": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        del digits[index]\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        index = n // fac\n        n %= fac\n        perm += digits[index]\n        digits.remove(digits[index])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        perm += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return perm",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms_for_d = math.factorial(d)\n        \n        index = n // perms_for_d\n        n %= perms_for_d\n        \n        permutation += digits[index]\n        digits.pop(index)\n        \n    return permutation",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result.append(digits[index])\n        digits.pop(index)\n    \n    return ''.join(result)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        a, n = divmod(n, math.factorial(d))\n        perm += digits[a]\n        digits.pop(a)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        num_permutations = math.factorial(d)\n        index, n = divmod(n, num_permutations)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        permutation += digits[idx]\n        digits.pop(idx)\n        \n    return permutation"
        ],
        "2": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        result += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        result += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        perm += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result.append(digits.pop(index))\n    \n    return ''.join(result)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms = math.factorial(d)\n        \n        # find the index of current digit\n        index = n // perms\n        \n        # append the current digit\n        permutation += digits[index]\n        \n        # remove the current digit from the list\n        digits.pop(index)\n        \n        # update n\n        n %= perms\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    n -= 1\n    digits = [str(i) for i in range(d)]\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        a, n = divmod(n, math.factorial(d))\n        perm += digits[a]\n        digits.pop(a)\n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        num_permutations = math.factorial(d)\n        index, n = divmod(n, num_permutations)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        permutation += digits[idx]\n        digits.pop(idx)\n        \n    return permutation"
        ],
        "3": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        result += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index = n // factorial\n        n %= factorial\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        result += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return result",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    \n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    n -= 1\n    \n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        idx = n // fact\n        n %= fact\n        perm += digits[idx]\n        digits.pop(idx)\n        \n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        perm_factorial = math.factorial(d)\n        index, n = divmod(n, perm_factorial)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result.append(digits[index])\n        digits.pop(index)\n        \n    return ''.join(result)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # number of permutations for d digits\n        perms_for_d = math.factorial(d)\n        \n        index = n // perms_for_d\n        n %= perms_for_d\n        \n        permutation += digits[index]\n        del digits[index]\n        \n    return permutation",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        return \"\"\n    \n    digits = [str(i) for i in range(d)]\n    n -= 1  # to make n 0-indexed\n    result = ''\n    \n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx = n // math.factorial(d)\n        n %= math.factorial(d)\n        \n        # add the current digit to result\n        result += digits[idx]\n        \n        # remove handled digit\n        digits.pop(idx)\n    \n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    n -= 1\n    digits = [str(i) for i in range(d)]\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        a, n = divmod(n, math.factorial(d))\n        perm += digits[a]\n        digits.pop(a)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        permutation += digits[idx]\n        digits.pop(idx)\n        \n    return permutation"
        ],
        "4": [
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        idx, n = divmod(n, math.factorial(d))\n        perm += digits[idx]\n        # remove handled digit\n        digits.remove(digits[idx])\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        nth_factorial = math.factorial(d)\n        index, n = divmod(n, nth_factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        first_index, n = divmod(n, math.factorial(d))\n        permutation += digits.pop(first_index)\n    return permutation",
            "def nth_perm(n,d):\n    if d == 1:\n        return '0'\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        fac = math.factorial(d)\n        index, n = divmod(n, fac)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1  # Make n 0-indexed\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    permutation = \"\"\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        n %= fact\n        permutation += digits[idx]\n        digits.pop(idx)\n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    \n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    n -= 1\n    \n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        idx = n // fact\n        n %= fact\n        \n        perm += digits[idx]\n        digits.pop(idx)\n    \n    return perm",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i - 1))\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        # get the index of current digit\n        index, n = divmod(n, math.factorial(d))\n        permutation += digits[index]\n        # remove handled digit\n        digits.remove(digits[index])\n    \n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        perm += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return perm",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        idx = n // fact\n        result += digits[idx]\n        digits.pop(idx)\n        n %= fact\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    n -= 1\n    perm = ''\n    while d > 0:\n        d -= 1\n        fact = math.factorial(d)\n        index, n = divmod(n, fact)\n        perm += digits[index]\n        digits.pop(index)\n    return perm",
            "def nth_perm(n,d):\n    if d < 1 or d > 10:\n        raise ValueError(\"d must be between 1 and 10\")\n    if n < 1:\n        raise ValueError(\"n must be 1 or greater\")\n    \n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        idx = n // fact\n        n %= fact\n        result.append(digits.pop(idx))\n    \n    return ''.join(result)",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        permutation += digits[index]\n        digits.remove(digits[index])\n    return permutation",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        factorial = math.factorial(d)\n        index, n = divmod(n, factorial)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i - 1))\n        result += digits[idx]\n        digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    n -= 1\n    digits = [str(i) for i in range(d)]\n    result = ''\n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        result += digits.pop(idx)\n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    while d > 0:\n        d -= 1\n        num_permutations = math.factorial(d)\n        index, n = divmod(n, num_permutations)\n        permutation += digits[index]\n        digits.pop(index)\n    return permutation",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        idx, n = divmod(n, math.factorial(i-1))\n        permutation += digits[idx]\n        digits.pop(idx)\n        \n    return permutation",
            "def nth_perm(n,d):\n    if n < 1:\n        return \"\"\n    digits = [str(i) for i in range(d)]\n    res = \"\"\n    n -= 1\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        i = n // fact\n        n %= fact\n        res += digits[i]\n        digits.pop(i)\n    return res"
        ]
    }
}