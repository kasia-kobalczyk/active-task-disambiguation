{
    "0": {
        "0": [
            "import math\ndef nth_perm(n,d):\n    # Generate the list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = ''\n    \n    # Loop through each digit position\n    for i in range(d):\n        # Calculate the number of permutations of the remaining digits\n        perm_count = math.factorial(d - i - 1)\n        \n        # Calculate the index of the current digit\n        digit_index = n // perm_count\n        \n        # Add the digit to the result string\n        result += digits[digit_index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(digit_index)\n        \n        # Update n to the remaining permutation index\n        n %= perm_count\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        index = n // div\n        n = n % div\n        \n        result += str(digits[index])\n        digits.pop(index)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    perm = \"\"\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        n = n % fact\n        perm += str(digits[index])\n        digits.pop(index)\n    return perm",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    while digits:\n        total_perms = math.factorial(len(digits) - 1)\n        i = (n - 1) // total_perms\n        result += str(digits.pop(i))\n        n = n - (i * total_perms)\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.floor(n / math.factorial(i-1))\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        index = n // div\n        n %= div\n        result.append(digits.pop(index))\n    return ''.join(str(d) for d in result)",
            "def L(n,d):\n    digits = list(range(d))\n    result = ''\n    for i in range(d-1, -1, -1):\n        idx = n // math.factorial(i)\n        result += str(digits[idx])\n        digits.remove(digits[idx])\n        n %= math.factorial(i)\n    return result",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = list(range(d))\n    # create an empty string to store the result\n    result = ''\n    # iterate over the digits\n    for i in range(d):\n        # calculate the factorial of d-i-1\n        fact = math.factorial(d-i-1)\n        # calculate the index of the digit to add to the result\n        index = n // fact\n        # add the digit to the result\n        result += str(digits[index])\n        # remove the digit from the list\n        del digits[index]\n        # update n to the remainder of n/fact\n        n = n % fact\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Initialize an empty result string\n    result = ''\n    \n    # Iterate through the digits\n    for i in range(d-1, 0, -1):\n        # Find the index of the digit to add to the result string\n        index = n // factorial\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n %= factorial\n        factorial //= i\n        \n    # Add the last digit to the result string\n    result += digits[0]\n    \n    return result",
            "def L(n, d):\n    digits = list(range(d))\n    permutation = ''\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        n = n % fact\n        digit = digits[index]\n        permutation += str(digit)\n        digits.remove(digit)\n    return permutation",
            "```python\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    # Calculate the factorials\n    factorials = [math.factorial(i) for i in range(d)]\n    \n    # Calculate the digits in the permutation\n    for i in range(d-1, -1, -1):\n        digit_index = n // factorials[i]\n        n %= factorials[i]\n        perm += digits[digit_index]\n        digits.pop(digit_index)\n    \n    return perm\n```",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_permutations = math.factorial(d)\n    result = []\n    \n    # Adjust n to start from 0\n    n -= 1\n    \n    # Generate the nth permutation\n    for i in range(d, 0, -1):\n        num_permutations //= i\n        index = n // num_permutations\n        result.append(digits[index])\n        digits.pop(index)\n        n %= num_permutations\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Get the digits as a list\n    digits = list(range(d))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Iterate through the digits from left to right\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the digit in the digits list\n        index = n // factorial\n        \n        # Add the digit to the result\n        result.append(str(digits[index]))\n        \n        # Remove the digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update n\n        n = n % factorial\n    \n    # Return the result as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = list(str(d))\n    digits.sort()\n    result = \"\"\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fact\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return \"Invalid input\"\n    \n    while d > 0:\n        total_perms //= d\n        idx = n // total_perms\n        result.append(digits[idx])\n        digits.pop(idx)\n        n %= total_perms\n        d -= 1\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    result = \"\"\n    n = n-1\n    for i in range(d, 0, -1):\n        perms = perms // i\n        index, n = divmod(n, perms)\n        result += nums[index]\n        nums.pop(index)\n    return result\n\nprint(nth_perm(7, 4)) #should return '1023'\nprint(nth_perm(4, 4)) #should return '0231'",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    result = []\n    \n    # Convert n to a 0-based index\n    n -= 1\n    \n    while d > 0:\n        perm_count //= d\n        digit_index = n // perm_count\n        result.append(digits[digit_index])\n        digits.pop(digit_index)\n        n %= perm_count\n        d -= 1\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d-1, 0, -1):\n        factorial = math.factorial(i)\n        index = (n // factorial) % len(digits)\n        digit = digits[index]\n        result += digit\n        digits.remove(digit)\n        \n    result += digits[0]\n    \n    return result\n\n# Testing\nprint(nth_perm(7, 4))  # '1023'\nprint(nth_perm(4, 4))  # '0231'",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]  # create a list of digits\n    \n    result = \"\"\n    \n    # calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # if n is larger than the number of permutations, return an empty string\n    if n > num_permutations:\n        return \"\"\n    \n    for i in range(d, 0, -1):\n        # calculate the index of the current digit in the permutation\n        index = (n % math.factorial(i)) // math.factorial(i-1)\n        \n        # append the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # remove the used digit from the list\n        digits.pop(index)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        divisor = math.factorial(i)\n        quotient, remainder = divmod(n, divisor)\n        result += str(digits.pop(quotient))\n        n = remainder\n    \n    return result"
        ],
        "1": [
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    result = \"\"\n\n    while d > 0:\n        perms //= d\n        index = (n-1) // perms\n        result += digits.pop(index)\n        n = n - index * perms\n        d -= 1\n\n    return result\n\nprint(nth_perm(1, 4))",
            "def nth_perm(n,d):\n    digits = list(map(str, range(d)))\n    perms = math.factorial(d)\n    if n <= 0 or n > perms:\n        return \"Invalid input\"\n    result = \"\"\n    n -= 1\n    for i in range(d, 0, -1):\n        perms = perms // i\n        index, n = divmod(n, perms)\n        result += digits[index]\n        digits.remove(digits[index])\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n    \n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(d - i - 1)\n        \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    if n <= 0 or n > perm_count:\n        return \"Invalid input\"\n    n -= 1\n    result = []\n    for i in range(d, 0, -1):\n        perm_count //= i\n        index = n // perm_count\n        result.append(digits[index])\n        digits.pop(index)\n        n = n % perm_count\n    return \"\".join(result)",
            "import math\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    num_perms = math.factorial(d)\n    \n    if n < 1 or n > num_perms:\n        return \"\"\n    \n    result = \"\"\n    n -= 1\n    \n    for i in range(d):\n        num_perms //= d - i\n        index = n // num_perms\n        digit = digits[index]\n        digits.remove(digit)\n        result += digit\n        n %= num_perms\n    \n    return result",
            "def nth_perm(n, d):\n\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # initialize the result\n    result = \"\"\n\n    # calculate the number of permutations of d digits\n    num_perms = math.factorial(d)\n\n    # check if n is within the valid range\n    if n < 1 or n > num_perms:\n        return \"Invalid input\"\n\n    # loop through each digit\n    for i in range(d, 0, -1):\n\n        # calculate the index of the current digit\n        index = (n - 1) // math.factorial(i - 1)\n\n        # append the current digit to the result\n        result += digits[index]\n\n        # remove the current digit from the list\n        digits.pop(index)\n\n        # update n\n        n = n - (index * math.factorial(i - 1))\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    while d > 0:\n        group_size = math.factorial(d - 1)\n        index = (n - 1) // group_size\n        result += digits[index]\n        digits.pop(index)\n        n -= index * group_size\n        d -= 1\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n <= 0 or n > num_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the index of the digit to add to the permutation\n        index = (n - 1) // math.factorial(d - 1 - i)\n        \n        # Add the digit to the permutation\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n - (index * math.factorial(d - 1 - i))\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n    \n    while digits:\n        fact = math.factorial(len(digits)-1)\n        index = n // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n %= fact\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # calculate the total number of permutations\n    total_permutations = math.factorial(d)\n\n    # if n is greater than the total number of permutations, return an empty string\n    if n > total_permutations:\n        return \"\"\n\n    # create an empty list to store the result\n    result = []\n\n    # calculate the indices of the digits to be used for the nth permutation\n    indices = []\n\n    # calculate the factorials of each digit\n    factorials = [math.factorial(i) for i in range(d)]\n\n    # iterate over the factorials in reverse order\n    for factorial in factorials[::-1]:\n        # calculate the index of the digit to be used\n        index = (n-1) // factorial\n\n        # add the index to the indices list\n        indices.append(index)\n\n        # update n\n        n -= index * factorial\n\n    # iterate over the indices in reverse order\n    for index in indices[::-1]:\n        # add the digit at the index to the result list\n        result.append(digits.pop(index))\n\n    # convert the result list to a string and return it\n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = (n-1) // math.factorial(i)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n - (index * math.factorial(i-1))\n        \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    n -= 1\n    result = \"\"\n    \n    for i in range(d):\n        perms /= (d - i)\n        index = int(n / perms)\n        result += digits[index]\n        digits.pop(index)\n        n = n % perms\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        digits.remove(digit)\n        result += str(digit)\n\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += digits[0]\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # Create an empty result string\n    result = \"\"\n\n    # Iterate through the digits\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n\n        # Find the index of the digit to append to the result\n        index = n // factorial\n\n        # Append the digit to the result\n        result += digits[index]\n\n        # Remove the digit from the digits list\n        digits.pop(index)\n\n        # Update n to the remaining permutation\n        n %= factorial\n\n    return result\n\n# Test cases\nprint(nth_perm(1, 4)) # Expected output: \"0123\"\nprint(nth_perm(7, 4)) # Expected output: \"1023\"\nprint(nth_perm(4, 4)) # Expected output: \"0231\"",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    fact = math.factorial(d-1)\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits.pop(index)\n        n %= fact\n        fact //= i\n    \n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = math.ceil(n / fact) - 1\n        \n        result += str(digits[index])\n        digits.pop(index)\n        \n        n %= fact\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    \n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = math.ceil(n / fact) - 1\n        n = n % fact\n        permutation += digits.pop(index)\n    \n    return permutation\n\nprint(nth_perm(1, 4))"
        ],
        "2": [
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1  # Convert to zero-based index\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the digit to add to the result\n        index = n // math.factorial(i)\n        result += digits[index]\n        # Remove the digit from the list\n        digits.pop(index)\n        # Update n for the next iteration\n        n %= math.factorial(i)\n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n\n    perm = \"\"\n    for i in range(d, 0, -1):\n        # Determine the index of the next digit in the permutation\n        index = (n - 1) // math.factorial(i - 1)\n        digit = digits[index]\n\n        # Remove the digit from the list of available digits\n        digits.remove(digit)\n\n        # Add the digit to the permutation\n        perm += str(digit)\n\n        # Update n for the next iteration\n        n = n - (index * math.factorial(i - 1))\n\n    return perm",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        fact = math.factorial(i - 1)\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n %= fact\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    # Convert n to 0-indexed\n    n -= 1\n    \n    # Create a list of digits\n    digits = list(range(d))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Calculate the factorial of d\n    factorial = math.factorial(d)\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the factorial of d-i-1\n        factorial //= (d - i)\n        \n        # Calculate the index of the digit in the list\n        index = n // factorial\n        \n        # Append the digit to the result\n        result.append(str(digits[index]))\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n\n        n = n % factorial\n    \n    # Return the result as a string\n    return ''.join(result)",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_perm = math.factorial(d)\n    \n    if n > num_perm:\n        return \"Invalid input\"\n    \n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        num_perm //= i\n        index = n // num_perm\n        result.append(digits[index])\n        digits.remove(digits[index])\n        n %= num_perm\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = '0123456789'[:d]\n    result = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        div = math.factorial(i - 1)\n        idx = n // div\n        result += digits[idx]\n        digits = digits[:idx] + digits[idx+1:]\n        n %= div\n\n    return result",
            "def nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over the digits in descending order\n    for i in range(d, 0, -1):\n        # Calculate the factorial of i-1\n        fact = math.factorial(i-1)\n        \n        # Calculate the index of the next digit in the list\n        index = (n-1) // fact\n        \n        # Append the digit to the result list\n        result.append(digits[index])\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update the value of n\n        n = n % fact\n    \n    # Convert the result list to a string and return it\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_permutations = math.factorial(d)\n    \n    # Check if n is valid\n    if n <= 0 or n > total_permutations:\n        return \"Invalid n\"\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the index for each digit\n    for i in range(d, 0, -1):\n        # Calculate the index for the current digit\n        index = (n-1) // math.factorial(i-1)\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update the value of n\n        n = n % math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    result = ''\n    \n    for i in range(1, d):\n        index = math.ceil(n / math.factorial(d - i))\n        result += digits[index - 1]\n        digits.remove(digits[index - 1])\n        n = n % math.factorial(d - i)\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(d-i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    while len(result) < d:\n        fact = math.factorial(d - len(result) - 1)\n        index = (n - 1) // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n - index * fact\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    num_digits = len(digits)\n    result = []\n    n -= 1 # convert to 0-indexed\n    for i in range(num_digits):\n        fact = math.factorial(num_digits-i-1)\n        index = n // fact\n        result.append(digits.pop(index))\n        n %= fact\n    return ''.join(result)",
            "def nth_perm(n, d):\n    digits = ''.join(map(str, range(d)))\n    num_perm = math.factorial(d)\n    if n >= num_perm or n < 1:\n        return \"Invalid input\"\n    perm = ''\n    for i in range(d, 0, -1):\n        num_perm //= i\n        index = (n-1) // num_perm\n        n = (n-1) % num_perm + 1\n        perm += digits[index]\n        digits = digits[:index] + digits[index+1:]\n    return perm",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate over the digits\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the current digit\n        index = n // factorial\n        \n        # Append the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n and factorial\n        n %= factorial\n        factorial //= i\n    \n    # Append the last digit to the result string\n    result += digits[0]\n    \n    # Return the result string\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        result += str(digit)\n        digits.remove(digit)\n        n = n - index * math.factorial(i-1)\n        \n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    while len(digits) > 0:\n        perm_count = math.factorial(len(digits) - 1)\n        index = math.ceil(n / perm_count) - 1\n        result += digits[index]\n        digits.pop(index)\n        n = n % perm_count\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    for i in range(d, 0, -1):\n        f = math.factorial(i-1)\n        index = math.ceil(n / f) - 1\n        result.append(digits[index])\n        digits.pop(index)\n        n = n % f\n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_perm = math.factorial(d)\n    if n > num_perm:\n        return \"Invalid input\"\n    res = []\n    n -= 1\n    for i in range(d, 0, -1):\n        num_perm //= i\n        idx = n // num_perm\n        res.append(digits[idx])\n        digits.pop(idx)\n        n %= num_perm\n    return \"\".join(res)",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate from d-1 down to 1\n    while d > 1:\n        # Calculate the index of the digit to be used in the result\n        index = (n-1) // factorial\n        \n        # Add the digit to the result\n        result.append(digits[index])\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n = (n-1) % factorial + 1\n        factorial //= (d-1)\n        d -= 1\n    \n    # Add the last remaining digit to the result\n    result.append(digits[0])\n    \n    # Convert the result to a string and return it\n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    \n    # iterate through each digit\n    for i in range(d, 0, -1):\n        # calculate the factorial of (i-1)\n        f = math.factorial(i-1)\n        # calculate the index of the current digit in the permutation\n        index = math.ceil(n / f) - 1\n        # append the digit to the result\n        result.append(digits[index])\n        # remove the digit from the list of available digits\n        digits.pop(index)\n        # update n to the remaining part of the permutation\n        n %= f\n    \n    # convert the result to a string\n    return ''.join(str(x) for x in result)"
        ],
        "3": [
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d, 0, -1):\n        factorial = math.factorial(i-1)\n        index = (n-1) // factorial\n        result += digits.pop(index)\n        n = (n-1) % factorial + 1\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    if n > perms or n <= 0:\n        return \"Invalid input\"\n    \n    result = \"\"\n    while len(digits) > 0:\n        perms = perms // len(digits)\n        index = (n - 1) // perms\n        result += digits.pop(index)\n        n -= index * perms\n        \n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        result += str(digit)\n        digits.remove(digit)\n        n = (n-1) % math.factorial(i-1) + 1\n    \n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    # Calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # Subtract 1 from n since permutations start from 0\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.remove(digits[index])\n        \n        # Update n and fact for the next iteration\n        n %= fact\n        fact //= i\n    \n    # Add the last digit to the result\n    result += digits[0]\n    \n    return result",
            "def nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    n -= 1\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result.append(digits[index])\n        digits.remove(digits[index])\n        n %= math.factorial(i-1)\n    return ''.join(result)",
            "import math\n\ndef nth_perm(n,d):\n    digits = list(map(str, range(d)))\n    result = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d-1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i)\n    result += digits[0]\n    return result\n\nprint(nth_perm(1, 4))  # expected \"0123\"\nprint(nth_perm(7,4))  # expected \"1023\"\nprint(nth_perm(1, 5))  # expected \"01234\"",
            "def nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_permutations = math.factorial(d)\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each digit position from left to right\n    for i in range(d, 0, -1):\n        # Calculate the number of permutations for the remaining digits\n        permutations_per_digit = total_permutations // i\n        \n        # Calculate the index of the selected digit\n        digit_index = (n - 1) // permutations_per_digit\n        \n        # Append the selected digit to the result\n        result += digits[digit_index]\n        \n        # Remove the selected digit from the list of digits\n        digits.pop(digit_index)\n        \n        # Update the remaining number of permutations\n        total_permutations = permutations_per_digit\n        \n        # Update the value of n\n        n = n % permutations_per_digit\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    perm_index = n - 1\n    result = \"\"\n\n    for i in range(d, 0, -1):\n        perm_count //= i\n        index = perm_index // perm_count\n        result += digits[index]\n        digits.remove(digits[index])\n        perm_index %= perm_count\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        digit = digits.pop(index)\n        result += digit\n        n %= fact\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n\n    # calculate the number of permutations\n    total_permutations = math.factorial(d)\n\n    # calculate the number of permutations per digit\n    perms_per_digit = total_permutations // d\n\n    # subtract 1 from n because we are starting from 0\n    n -= 1\n\n    # initialize the result string\n    result = ''\n\n    # iterate through each digit\n    for i in range(d-1, -1, -1):\n        # find the index of the digit to use\n        index = n // perms_per_digit\n\n        # append the digit to the result string\n        result += str(digits[index])\n\n        # remove the digit from the list\n        digits.pop(index)\n\n        # update n and perms_per_digit for the next iteration\n        n = n % perms_per_digit\n        if i > 0:\n            perms_per_digit = perms_per_digit // i\n\n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        div = math.factorial(d)\n        index = n // div\n        n %= div\n        result += str(digits[index])\n        digits.pop(index)\n\n    return result",
            "def nth_perm(n, d):\n    nums = list(range(d))  # create a list of digits from 0 to d-1\n    result = ''\n    \n    for i in range(d-1, 0, -1):\n        # calculate the index of the digit to include in the result\n        index = math.ceil(n / math.factorial(i))\n        result += str(nums.pop(index-1))\n        \n        # update n for the next iteration\n        n = n % math.factorial(i)\n    \n    # add the last digit to the result\n    result += str(nums[0])\n    \n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = []\n    n -= 1 # convert to 0-indexed\n    for i in range(d-1, -1, -1):\n        idx = n // math.factorial(i)\n        result.append(str(digits[idx]))\n        digits.pop(idx)\n        n %= math.factorial(i)\n    \n    return ''.join(result)",
            "def nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through each digit position\n    for i in range(d):\n        # Calculate the number of permutations for the remaining digits\n        num_perms = math.factorial(d - i - 1)\n        \n        # Calculate the index of the selected digit in the remaining digits\n        digit_index = n // num_perms\n        \n        # Add the selected digit to the result string\n        result += digits[digit_index]\n        \n        # Remove the selected digit from the list of digits\n        digits.pop(digit_index)\n        \n        # Update n to the remainder\n        n %= num_perms\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n = n - 1\n\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        result += digits[index]\n        digits.pop(index)\n        n = n % factorial\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    \n    for i in range(d, 0, -1):\n        divisor = math.factorial(i-1)\n        index = (n-1) // divisor\n        result.append(str(digits[index]))\n        digits.remove(digits[index])\n        n = (n-1) % divisor + 1\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = list(map(str, range(d)))\n\n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n\n    # Check if n is valid\n    if n < 1 or n > num_permutations:\n        return \"Invalid n\"\n\n    # Subtract 1 from n to account for 0-based indexing\n    n -= 1\n\n    # Calculate the permutation\n    permutation = ''\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the current digit\n        index = n // math.factorial(i)\n\n        # Append the digit to the permutation string\n        permutation += digits[index]\n\n        # Remove the digit from the list\n        digits.pop(index)\n\n        # Update n\n        n %= math.factorial(i)\n\n    return permutation"
        ],
        "4": [
            "def nth_perm(n,d):\n    # convert n to 0-based index\n    n = n - 1\n    \n    # create a list of digits from 0 to d-1\n    digits = list(range(d))\n    \n    # calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # initialize the result string\n    result = \"\"\n    \n    # loop through the digits\n    for i in range(d-1, 0, -1):\n        # calculate the index of the next digit\n        index = n // factorial\n        \n        # append the digit to the result string\n        result += str(digits[index])\n        \n        # remove the digit from the list of digits\n        digits.pop(index)\n        \n        # update the value of n for the next iteration\n        n = n % factorial\n        \n        # update the value of factorial for the next iteration\n        factorial = factorial // i\n    \n    # append the last digit to the result string\n    result += str(digits[0])\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(map(str, range(d)))\n    result = \"\"\n    while d > 0:\n        fact = math.factorial(d-1)\n        index = math.ceil(n/fact) - 1\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        d -= 1\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-indexed\n    n -= 1\n    \n    # Get the list of digits\n    digits = list(range(d))\n    \n    # Initialize the result\n    result = ''\n    \n    # Iterate through each digit\n    for i in range(d):\n        # Get the index of the current digit in the remaining digits list\n        index = n // math.factorial(d - i - 1)\n        \n        # Append the current digit to the result\n        result += str(digits[index])\n        \n        # Remove the current digit from the remaining digits list\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n %= math.factorial(d - i - 1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    result = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        result += digits[index]\n        digits.pop(index)\n        n %= div\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # calculate the total number of permutations\n    total_perms = math.factorial(d)\n\n    # check if n is valid\n    if n > total_perms or n < 1:\n        return \"Invalid input\"\n\n    # initialize the result string\n    result = \"\"\n\n    # iterate through each digit position\n    for i in range(d, 0, -1):\n        # calculate the index of the next digit\n        index = (n-1) // math.factorial(i-1)\n        # append the digit to the result string\n        result += digits[index]\n        # remove the used digit from the list\n        digits.pop(index)\n        # update n\n        n = n % math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result.append(digits.pop(index))\n        \n    return ''.join(str(x) for x in result)",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(d)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    remaining = n - 1\n    \n    for i in range(d, 0, -1):\n        index = remaining // math.factorial(i - 1)\n        result += digits[index]\n        digits.pop(index)\n        remaining = remaining % math.factorial(i - 1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = math.floor((n-1) / math.factorial(i-1))\n        result += str(digits.pop(index))\n        n -= index * math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    for i in range(1, d+1):\n        total_permutations = math.factorial(d-i)\n        index = (n-1) // total_permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = (n-1) % total_permutations + 1\n    return result",
            "import math\ndef nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate through each digit position\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the digit in the permutation\n        index = n // factorial\n        \n        # Append the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next digit position\n        n %= factorial\n        factorial //= i\n    \n    # Append the last remaining digit to the result string\n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = math.ceil(n / fact) - 1\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n %= fact\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        divisor = math.factorial(i)\n        index = n // divisor\n        n %= divisor\n        result += digits.pop(index)\n    \n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize result string\n    result = ''\n    \n    # Iterate through digits from most significant to least significant\n    for i in range(d-1, -1, -1):\n        # Calculate the number of permutations for the remaining digits\n        num_perms = math.factorial(i)\n        \n        # Calculate the index of the next digit in the current iteration\n        index = n // num_perms\n        \n        # Append the next digit to the result\n        result += digits[index]\n        \n        # Remove the used digit from the list\n        digits.pop(index)\n        \n        # Update the value of n for the next iteration\n        n = n % num_perms\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i-1)\n    return result"
        ]
    },
    "1": {
        "0": [
            "```python\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    # Calculate the factorials\n    factorials = [math.factorial(i) for i in range(d)]\n    \n    # Calculate the digits in the permutation\n    for i in range(d-1, -1, -1):\n        digit_index = n // factorials[i]\n        n %= factorials[i]\n        perm += digits[digit_index]\n        digits.pop(digit_index)\n    \n    return perm\n```",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_permutations = math.factorial(d)\n    result = []\n    \n    # Adjust n to start from 0\n    n -= 1\n    \n    # Generate the nth permutation\n    for i in range(d, 0, -1):\n        num_permutations //= i\n        index = n // num_permutations\n        result.append(digits[index])\n        digits.pop(index)\n        n %= num_permutations\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Get the digits as a list\n    digits = list(range(d))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Iterate through the digits from left to right\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        factorial = math.factorial(i)\n        \n        # Calculate the index of the digit in the digits list\n        index = n // factorial\n        \n        # Add the digit to the result\n        result.append(str(digits[index]))\n        \n        # Remove the digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update n\n        n = n % factorial\n    \n    # Return the result as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = list(str(d))\n    digits.sort()\n    result = \"\"\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n = n % fact\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return \"Invalid input\"\n    \n    while d > 0:\n        total_perms //= d\n        idx = n // total_perms\n        result.append(digits[idx])\n        digits.pop(idx)\n        n %= total_perms\n        d -= 1\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    result = \"\"\n    n = n-1\n    for i in range(d, 0, -1):\n        perms = perms // i\n        index, n = divmod(n, perms)\n        result += nums[index]\n        nums.pop(index)\n    return result\n\nprint(nth_perm(7, 4)) #should return '1023'\nprint(nth_perm(4, 4)) #should return '0231'",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    result = []\n    \n    # Convert n to a 0-based index\n    n -= 1\n    \n    while d > 0:\n        perm_count //= d\n        digit_index = n // perm_count\n        result.append(digits[digit_index])\n        digits.pop(digit_index)\n        n %= perm_count\n        d -= 1\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d-1, 0, -1):\n        factorial = math.factorial(i)\n        index = (n // factorial) % len(digits)\n        digit = digits[index]\n        result += digit\n        digits.remove(digit)\n        \n    result += digits[0]\n    \n    return result\n\n# Testing\nprint(nth_perm(7, 4))  # '1023'\nprint(nth_perm(4, 4))  # '0231'",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]  # create a list of digits\n    \n    result = \"\"\n    \n    # calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # if n is larger than the number of permutations, return an empty string\n    if n > num_permutations:\n        return \"\"\n    \n    for i in range(d, 0, -1):\n        # calculate the index of the current digit in the permutation\n        index = (n % math.factorial(i)) // math.factorial(i-1)\n        \n        # append the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # remove the used digit from the list\n        digits.pop(index)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        divisor = math.factorial(i)\n        quotient, remainder = divmod(n, divisor)\n        result += str(digits.pop(quotient))\n        n = remainder\n    \n    return result",
            "def L(n, d):\n    nums = '0123456789'\n    perm = []\n    for i in range(d):\n        perm.append(nums[i])\n\n    result = ''\n    while n > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        if n % fact == 0:\n            index -= 1\n        result += perm[index]\n        perm.pop(index)\n        n %= fact\n        d -= 1\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits.pop(index)\n        n -= index * math.factorial(d-i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        permutation += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(i-1)\n\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutations = math.factorial(d)\n    if n > permutations:\n        return \"Invalid Input\"\n    result = \"\"\n    for i in range(d):\n        permutations = permutations // (d - i)\n        index = n // permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = n % permutations\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        digit = digits.pop(index)\n        result += str(digit)\n\n        n %= math.factorial(d - i - 1)\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n        \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        n = n % div\n        result.append(digits.pop(index))\n        \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Create an empty string to store the permutation\n    perm = \"\"\n    \n    # Iterate from d-1 to 0\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        fact = math.factorial(i)\n        \n        # Calculate the index of the digit to use\n        index = n // fact\n        \n        # Update n for the next iteration\n        n = n % fact\n        \n        # Add the digit to the permutation\n        perm += digits[index]\n        \n        # Remove the used digit from the list\n        digits.remove(digits[index])\n    \n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm_digits = []\n    for i in range(d-1, -1, -1):\n        count = math.factorial(i)\n        index = math.ceil(n/count) - 1\n        digit = digits[index]\n        perm_digits.append(digit)\n        digits.remove(digit)\n        n = n % count\n    return ''.join(perm_digits)"
        ],
        "1": [
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    if n <= 0 or n > perm_count:\n        return \"Invalid input\"\n    n -= 1\n    result = []\n    for i in range(d, 0, -1):\n        perm_count //= i\n        index = n // perm_count\n        result.append(digits[index])\n        digits.pop(index)\n        n = n % perm_count\n    return \"\".join(result)",
            "import math\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    num_perms = math.factorial(d)\n    \n    if n < 1 or n > num_perms:\n        return \"\"\n    \n    result = \"\"\n    n -= 1\n    \n    for i in range(d):\n        num_perms //= d - i\n        index = n // num_perms\n        digit = digits[index]\n        digits.remove(digit)\n        result += digit\n        n %= num_perms\n    \n    return result",
            "def nth_perm(n, d):\n\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n\n    # initialize the result\n    result = \"\"\n\n    # calculate the number of permutations of d digits\n    num_perms = math.factorial(d)\n\n    # check if n is within the valid range\n    if n < 1 or n > num_perms:\n        return \"Invalid input\"\n\n    # loop through each digit\n    for i in range(d, 0, -1):\n\n        # calculate the index of the current digit\n        index = (n - 1) // math.factorial(i - 1)\n\n        # append the current digit to the result\n        result += digits[index]\n\n        # remove the current digit from the list\n        digits.pop(index)\n\n        # update n\n        n = n - (index * math.factorial(i - 1))\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    while d > 0:\n        group_size = math.factorial(d - 1)\n        index = (n - 1) // group_size\n        result += digits[index]\n        digits.pop(index)\n        n -= index * group_size\n        d -= 1\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n <= 0 or n > num_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the index of the digit to add to the permutation\n        index = (n - 1) // math.factorial(d - 1 - i)\n        \n        # Add the digit to the permutation\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n - (index * math.factorial(d - 1 - i))\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n    \n    while digits:\n        fact = math.factorial(len(digits)-1)\n        index = n // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n %= fact\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # calculate the total number of permutations\n    total_permutations = math.factorial(d)\n\n    # if n is greater than the total number of permutations, return an empty string\n    if n > total_permutations:\n        return \"\"\n\n    # create an empty list to store the result\n    result = []\n\n    # calculate the indices of the digits to be used for the nth permutation\n    indices = []\n\n    # calculate the factorials of each digit\n    factorials = [math.factorial(i) for i in range(d)]\n\n    # iterate over the factorials in reverse order\n    for factorial in factorials[::-1]:\n        # calculate the index of the digit to be used\n        index = (n - 1) // factorial\n        # append the index to the list of indices\n        indices.append(index)\n        # update n for the next iteration\n        n -= index * factorial\n\n    # iterate over the indices in reverse order\n    for index in indices[::-1]:\n        # append the digit at the corresponding index to the result\n        result.append(digits[index])\n        # remove the digit from the list of digits\n        digits.pop(index)\n\n    # convert the result to a string and return it\n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = (n-1) // math.factorial(i)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n - (index * math.factorial(i-1))\n        \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    n -= 1\n    result = \"\"\n    \n    for i in range(d):\n        perms /= (d - i)\n        index = int(n / perms)\n        result += digits[index]\n        digits.pop(index)\n        n = n % perms\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        digits.remove(digit)\n        result += str(digit)\n\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # Initialize an empty result string\n    result = ''\n\n    # Loop through each digit position\n    for i in range(d):\n        # Calculate the index of the current digit in the remaining digits\n        index = n // math.factorial(d - 1 - i)\n\n        # Add the current digit to the result string\n        result += digits[index]\n\n        # Remove the current digit from the list of remaining digits\n        digits.pop(index)\n\n        # Update n to the remainder after removing the current digit\n        n %= math.factorial(d - 1 - i)\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    fact = math.factorial(d-1)\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits.pop(index)\n        n %= fact\n        fact //= i\n    \n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = math.ceil(n / fact) - 1\n        \n        result += str(digits[index])\n        digits.pop(index)\n        \n        n %= fact\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    \n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = math.ceil(n / fact) - 1\n        n = n % fact\n        permutation += digits.pop(index)\n    \n    return permutation\n\nprint(nth_perm(1, 4))",
            "def nth_perm(n, d):\n    digits = ''.join(str(x) for x in range(d))\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return None\n    \n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        total_perms //= i\n        index = n // total_perms\n        digit = digits[index]\n        result.append(digit)\n        \n        digits = digits[:index] + digits[index+1:]\n        n %= total_perms\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = ''.join(str(i) for i in range(d))\n    return ''.join(sorted(digits, key=lambda x: int(x)**n))",
            "def nth_perm(n, d):\n    digits = list(map(str, range(d)))  # List of digits from 0 to d-1\n    num_permutations = math.factorial(d)  # Total number of permutations\n\n    if n < 1 or n > num_permutations:\n        return \"Invalid input\"\n\n    result = \"\"\n    remaining = d - 1\n\n    for i in range(d-1, 0, -1):\n        fact = math.factorial(i)\n        index = (n-1) // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n\n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_perm = math.factorial(d)\n    perm_index = n-1\n    result = ''\n    \n    for i in range(d):\n        num_perm = num_perm//(d-i)\n        index = perm_index//num_perm\n        result += digits.pop(index)\n        perm_index = perm_index%num_perm\n        \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize an empty result string\n    result = \"\"\n    \n    # Loop through the digits and calculate the factorial of the remaining digits\n    for i in range(d, 0, -1):\n        # Calculate the index of the current digit\n        index = math.ceil(n / math.factorial(i - 1)) - 1\n        \n        # Append the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update the value of n\n        n = n % math.factorial(i - 1)\n    \n    return result",
            "def nth_perm(n, d):\n    if n < 1:\n        return \"\"\n    \n    digits = list(map(str, range(d)))\n    result = \"\"\n    \n    for i in range(d):\n        fact = math.factorial(d - 1 - i)\n        index = (n - 1) // fact\n        result += digits[index]\n        digits.pop(index)\n        n = (n - 1) % fact + 1\n    \n    return result"
        ],
        "2": [
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_perm = math.factorial(d)\n    \n    if n > num_perm:\n        return \"Invalid input\"\n    \n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        num_perm //= i\n        index = n // num_perm\n        result.append(digits.pop(index))\n        n -= index * num_perm\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = '0123456789'[:d]\n    result = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        div = math.factorial(i - 1)\n        idx = n // div\n        result += digits[idx]\n        digits = digits[:idx] + digits[idx+1:]\n        n %= div\n\n    return result",
            "def nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over the digits in descending order\n    for i in range(d, 0, -1):\n        # Calculate the factorial of i-1\n        fact = math.factorial(i-1)\n        \n        # Calculate the index of the next digit in the list\n        index = (n-1) // fact\n        \n        # Append the digit at the calculated index to the result\n        result.append(digits[index])\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update the value of n for the next iteration\n        n = (n-1) % fact + 1\n    \n    # Convert the result list to a string and return it\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_permutations = math.factorial(d)\n    \n    # Check if n is valid\n    if n <= 0 or n > total_permutations:\n        return \"Invalid n\"\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the index for each digit\n    for i in range(d, 0, -1):\n        # Calculate the index for the current digit\n        index = (n-1) // math.factorial(i-1)\n        \n        # Add the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the digits list\n        digits.remove(digits[index])\n        \n        # Update the value of n\n        n = n % math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    result = ''\n    \n    for i in range(1, d):\n        index = math.ceil(n / math.factorial(d - i))\n        result += digits[index - 1]\n        digits.remove(digits[index - 1])\n        n = n % math.factorial(d - i)\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(d-i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    while len(result) < d:\n        fact = math.factorial(d - len(result) - 1)\n        index = (n - 1) // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n - index * fact\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    num_digits = len(digits)\n    result = []\n    n -= 1 # convert to 0-indexed\n    for i in range(num_digits):\n        fact = math.factorial(num_digits-i-1)\n        index = n // fact\n        result.append(digits.pop(index))\n        n %= fact\n    return ''.join(result)",
            "def nth_perm(n, d):\n    digits = ''.join(map(str, range(d)))\n    num_perm = math.factorial(d)\n    if n >= num_perm or n < 1:\n        return \"Invalid input\"\n    perm = ''\n    for i in range(d, 0, -1):\n        num_perm //= i\n        index = (n-1) // num_perm\n        n = (n-1) % num_perm + 1\n        perm += digits[index]\n        digits = digits[:index] + digits[index+1:]\n    return perm",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate over the digits\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the current digit\n        index = n // factorial\n        \n        # Append the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n and factorial\n        n %= factorial\n        factorial //= i\n    \n    # Append the last digit to the result string\n    result += digits[0]\n    \n    # Return the result string\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        result += str(digit)\n        digits.remove(digit)\n        n = n - index * math.factorial(i-1)\n        \n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    while len(digits) > 0:\n        perm_count = math.factorial(len(digits) - 1)\n        index = math.ceil(n / perm_count) - 1\n        result += digits[index]\n        digits.pop(index)\n        n = n % perm_count\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    for i in range(d, 0, -1):\n        f = math.factorial(i-1)\n        index = math.ceil(n / f) - 1\n        result.append(digits[index])\n        digits.pop(index)\n        n = n % f\n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_perm = math.factorial(d)\n    if n > num_perm:\n        return \"Invalid input\"\n    res = []\n    n -= 1\n    for i in range(d, 0, -1):\n        num_perm //= i\n        idx = n // num_perm\n        res.append(digits[idx])\n        digits.pop(idx)\n        n %= num_perm\n    return \"\".join(res)",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate from d-1 down to 1\n    while d > 1:\n        # Calculate the index of the digit to be used in the result\n        index = (n-1) // factorial\n        \n        # Add the digit to the result\n        result.append(digits[index])\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n = (n-1) % factorial + 1\n        factorial //= (d-1)\n        d -= 1\n    \n    # Add the last remaining digit to the result\n    result.append(digits[0])\n    \n    # Convert the result to a string and return it\n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    \n    # iterate through each digit\n    for i in range(d, 0, -1):\n        # calculate the factorial of (i-1)\n        f = math.factorial(i-1)\n        # calculate the index of the current digit in the permutation\n        index = math.ceil(n / f) - 1\n        # append the digit to the result\n        result.append(digits[index])\n        # remove the digit from the list of available digits\n        digits.pop(index)\n        # update n to the remaining part of the permutation\n        n %= f\n    \n    # convert the result to a string\n    return ''.join(str(x) for x in result)",
            "def nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    result = []\n    \n    # calculate the factorial of d\n    f = math.factorial(d)\n    \n    # iterate through each digit position\n    for i in range(d, 0, -1):\n        # calculate the value of index for the current digit position\n        f = f // i\n        index = (n-1) // f\n        # add the corresponding digit to the result\n        result.append(nums[index])\n        # remove the used digit from the list of available digits\n        nums.pop(index)\n        # update the value of n for the next digit position\n        n = n - (index * f)\n    \n    # join the digits in the result list and return as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = ''.join(str(i) for i in range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n %= fact\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Generate the list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate through the digits from left to right\n    for i in range(d, 0, -1):\n        # Calculate the index of the digit to add to the result\n        index = n // math.factorial(i-1)\n        \n        # Add the digit to the result and remove it from the list of digits\n        result += digits[index]\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n % math.factorial(i-1)\n    \n    return result"
        ],
        "3": [
            "import math\n\ndef nth_perm(n,d):\n    digits = list(map(str, range(d)))\n    result = ''\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d-1, 0, -1):\n        index = n // math.factorial(i)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i)\n    result += digits[0]\n    return result\n\nprint(nth_perm(1, 4))  # expected \"0123\"\nprint(nth_perm(7,4))  # expected \"1023\"\nprint(nth_perm(1, 5))  # expected \"01234\"",
            "def nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_permutations = math.factorial(d)\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each digit position from left to right\n    for i in range(d, 0, -1):\n        # Calculate the number of permutations for the remaining digits\n        permutations = total_permutations // i\n        \n        # Calculate the index of the digit to be used\n        index = (n - 1) // permutations\n        \n        # Append the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update the value of n for the next iteration\n        n = n - (index * permutations)\n        \n        # Update the total number of permutations for the remaining digits\n        total_permutations = permutations\n    \n    # Return the result as a string\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    perm_index = n - 1\n    result = \"\"\n\n    for i in range(d, 0, -1):\n        perm_count //= i\n        index = perm_index // perm_count\n        result += digits[index]\n        digits.remove(digits[index])\n        perm_index %= perm_count\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    while len(digits) > 0:\n        fact = math.factorial(len(digits) - 1)\n        index = n // fact\n        digit = digits.pop(index)\n        result += digit\n        n %= fact\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n\n    # calculate the number of permutations\n    total_permutations = math.factorial(d)\n\n    # calculate the number of permutations per digit\n    perms_per_digit = total_permutations // d\n\n    # subtract 1 from n because we are starting from 0\n    n -= 1\n\n    # initialize the result string\n    result = ''\n\n    # iterate through each digit\n    for i in range(d-1, -1, -1):\n        # find the index of the digit to use\n        index = n // perms_per_digit\n\n        # append the digit to the result string\n        result += str(digits[index])\n\n        # remove the digit from the list\n        digits.pop(index)\n\n        # update n and perms_per_digit for the next iteration\n        n = n % perms_per_digit\n        if i > 0:\n            perms_per_digit = perms_per_digit // i\n\n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        div = math.factorial(d)\n        index = n // div\n        n %= div\n        result += str(digits[index])\n        digits.pop(index)\n\n    return result",
            "```python\ndef nth_perm(n, d):\n    # Get the digits\n    digits = list(range(d))\n\n    # Initialize the result string\n    result = \"\"\n\n    # Iterate from the largest digit to the smallest\n    for i in range(d, 0, -1):\n        # Calculate the number of permutations of the remaining digits\n        count = math.factorial(i - 1)\n\n        # Calculate the index of the current digit\n        index = (n - 1) // count\n\n        # Add the current digit to the result string\n        result += str(digits[index])\n\n        # Remove the current digit from the list of digits\n        digits.pop(index)\n\n        # Update n for the next iteration\n        n = n % count\n\n    return result\n```",
            "def nth_perm(n, d):\n    nums = list(range(d))  # create a list of digits from 0 to d-1\n    result = ''\n    \n    for i in range(d-1, 0, -1):\n        # calculate the index of the digit to include in the result\n        index = math.ceil(n / math.factorial(i))\n        result += str(nums.pop(index-1))\n        \n        # update n for the next iteration\n        n = n % math.factorial(i)\n    \n    # add the last digit to the result\n    result += str(nums[0])\n    \n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = []\n    n -= 1 # convert to 0-indexed\n    for i in range(d-1, -1, -1):\n        idx = n // math.factorial(i)\n        result.append(str(digits[idx]))\n        digits.pop(idx)\n        n %= math.factorial(i)\n    \n    return ''.join(result)\n\nprint(nth_perm(1, 4))\nprint(nth_perm(7, 4))\nprint(nth_perm(1, 5))",
            "def nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through each digit position\n    for i in range(d):\n        # Calculate the number of permutations for the remaining digits\n        num_perms = math.factorial(d - i - 1)\n        \n        # Calculate the index of the selected digit in the remaining digits\n        digit_index = n // num_perms\n        \n        # Add the selected digit to the result string\n        result += digits[digit_index]\n        \n        # Remove the selected digit from the list of digits\n        digits.pop(digit_index)\n        \n        # Update n to the remainder\n        n %= num_perms\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n = n - 1\n\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        result += digits[index]\n        digits.pop(index)\n        n = n % factorial\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    \n    for i in range(d, 0, -1):\n        divisor = math.factorial(i-1)\n        index = (n-1) // divisor\n        result.append(digits.pop(index))\n        n = (n-1) % divisor + 1\n    \n    return ''.join(map(str, result))",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = list(map(str, range(d)))\n\n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n\n    # Check if n is valid\n    if n < 1 or n > num_permutations:\n        return \"Invalid n\"\n\n    # Subtract 1 from n to account for 0-based indexing\n    n -= 1\n\n    # Calculate the permutation\n    permutation = ''\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the current digit\n        index = n // math.factorial(i)\n\n        # Append the digit to the permutation string\n        permutation += digits[index]\n\n        # Remove the digit from the list\n        digits.pop(index)\n\n        # Update n\n        n %= math.factorial(i)\n\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Generate the list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate over the digits\n    for i in range(d):\n        # Calculate the factorial of d-i-1\n        factorial = math.factorial(d-i-1)\n        \n        # Calculate the index of the digit to be added to the result\n        index = n // factorial\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n to the remainder\n        n %= factorial\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1))\n        result += digits.pop(index-1)\n        n = n % math.factorial(i-1)\n    return result",
            "def nth_perm(n,d):\n    # Create a list of digits\n    digits = list(map(str, range(d)))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Calculate the number of permutations\n    num_perm = math.factorial(d)\n    \n    # Check if n is valid\n    if n < 1 or n > num_perm:\n        return \"Invalid n\"\n    \n    # Loop through the digits\n    for i in range(d):\n        # Calculate the number of permutations for the remaining digits\n        num_perm = num_perm // (d - i)\n        \n        # Calculate the index of the digit to be added to the result\n        index = (n - 1) // num_perm\n        \n        # Add the digit to the result\n        result.append(digits[index])\n        \n        # Remove the digit from the list of digits\n        digits.remove(digits[index])\n        \n        # Update n\n        n = n - (index * num_perm)\n    \n    # Return the result as a string\n    return ''.join(result)",
            "def nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # Find the factorial of d\n    factorial = math.factorial(d)\n\n    # Decrement n by 1 to account for 0-based indexing\n    n -= 1\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the digits in reverse order\n    for i in range(d, 0, -1):\n        # Calculate the index of the digit to add to the result\n        index = n // (factorial // i)\n\n        # Add the digit to the result\n        result.append(digits[index])\n\n        # Remove the digit from the list of digits\n        digits.pop(index)\n\n        # Update n and factorial\n        n %= factorial // i\n        factorial //= i\n\n    # Convert the result list to a string and return it\n    return ''.join(result)",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n - 1) // math.factorial(i - 1)\n        digit = digits[index]\n        result += str(digit)\n        digits.remove(digit)\n        n -= index * math.factorial(i - 1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    perm = ''\n    n -= 1\n    while d > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        perm += str(digits.pop(index))\n        n = n % fact\n        d -= 1\n    return perm",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    # Calculate the factorial of (d-1)\n    fact = math.factorial(d-1)\n    \n    # Decrement n by 1 because permutations are 0-indexed\n    n -= 1\n    \n    # Iterate through each digit\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the digit to add to the permutation\n        index = n // fact\n        \n        # Add the digit to the permutation\n        perm += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n to get the remaining digits\n        n %= fact\n        \n        # Update the factorial for the next iteration\n        fact //= i\n    \n    # Add the last remaining digit to the permutation\n    perm += digits[0]\n    \n    return perm"
        ],
        "4": [
            "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-indexed\n    n -= 1\n    \n    # Get the list of digits\n    digits = list(range(d))\n    \n    # Initialize the result\n    result = ''\n    \n    # Iterate through each digit\n    for i in range(d):\n        # Get the index of the current digit in the remaining digits list\n        index = n // math.factorial(d - i - 1)\n        \n        # Append the current digit to the result\n        result += str(digits[index])\n        \n        # Remove the current digit from the remaining digits list\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n %= math.factorial(d - i - 1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    result = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        result += digits[index]\n        digits.pop(index)\n        n %= div\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = ''.join(str(i) for i in range(d))\n    total_permutations = math.factorial(d)\n    if n > total_permutations:\n        return \"Invalid input\"\n    \n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        total_permutations //= i\n        index = n // total_permutations\n        result += digits[index]\n        digits = digits[:index] + digits[index + 1:]\n        n %= total_permutations\n    \n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index, n = divmod(n, math.factorial(i-1))\n        result.append(digits.pop(index))\n        \n    return ''.join(str(x) for x in result)",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(d)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)] # create a list of digits from 0 to d-1\n    result = [] # list to store the digits of the nth permutation\n    \n    n = n - 1 # adjust n to account for 0-based indexing\n    \n    # calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # iterate through the digits to determine each digit in the nth permutation\n    for i in range(d-1, 0, -1):\n        index = n // factorial # calculate the index of the digit in the digits list\n        result.append(digits[index]) # add the digit to the result list\n        digits.pop(index) # remove the digit from the digits list\n        n = n % factorial # update n\n        factorial = factorial // i # update factorial\n    \n    result.append(digits[0]) # add the last digit to the result list\n    \n    return ''.join(result) # join the digits in the result list and return as a string",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    remaining = n - 1\n    \n    for i in range(d, 0, -1):\n        index = remaining // math.factorial(i - 1)\n        result += digits[index]\n        digits.pop(index)\n        remaining = remaining % math.factorial(i - 1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = math.floor((n-1) / math.factorial(i-1))\n        result += str(digits.pop(index))\n        n -= index * math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    for i in range(1, d+1):\n        total_permutations = math.factorial(d-i)\n        index = (n-1) // total_permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = (n-1) % total_permutations + 1\n    return result",
            "```python\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # create an empty string to store the result\n    result = \"\"\n    \n    # iterate through the digits from the largest to the smallest\n    for i in range(d-1, 0, -1):\n        # calculate the index of the digit to be added to the result\n        index = (n - 1) // fact\n        \n        # add the digit at the calculated index to the result\n        result += digits[index]\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update the value of n\n        n = (n - 1) % fact + 1\n        \n        # update the value of fact\n        fact //= i\n    \n    # add the last digit to the result\n    result += digits[0]\n    \n    # return the result\n    return result\n```",
            "import math\ndef nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate through each digit position\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the digit in the permutation\n        index = n // factorial\n        \n        # Append the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next digit position\n        n %= factorial\n        factorial //= i\n    \n    # Append the last remaining digit to the result string\n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = math.ceil(n / fact) - 1\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n %= fact\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        divisor = math.factorial(i)\n        index = n // divisor\n        n %= divisor\n        result += digits.pop(index)\n    \n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize result string\n    result = ''\n    \n    # Iterate through digits from most significant to least significant\n    for i in range(d-1, -1, -1):\n        # Calculate the number of permutations for the remaining digits\n        num_perms = math.factorial(i)\n        \n        # Calculate the index of the next digit in the current iteration\n        index = n // num_perms\n        \n        # Append the next digit to the result\n        result += digits[index]\n        \n        # Remove the used digit from the list\n        digits.pop(index)\n        \n        # Update the value of n for the next iteration\n        n = n % num_perms\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i-1)\n    return result",
            "```python\n    digits = list(range(d))\n    perm = []\n    for i in range(d, 0, -1):\n        idx = math.floor((n-1)/math.factorial(i-1))\n        perm.append(digits[idx])\n        digits.pop(idx)\n        n = n - (idx * math.factorial(i-1))\n    return ''.join(map(str, perm))\n```",
            "def nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        result += str(digits[index])\n        digits.pop(index)\n    \n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        # Find the index of the digit to add to the result\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the available digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n % math.factorial(i-1)\n        \n    return result",
            "import math\ndef nth_perm(n,d):\n    if n < 1:\n        return None\n    digits = [str(i) for i in range(d)]\n    result = ''\n    for i in range(d, 0, -1):\n        pos = math.ceil(n / math.factorial(i-1)) - 1\n        result += digits[pos]\n        digits.remove(digits[pos])\n        n = n % math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result.append(digits[index])\n        digits.remove(digits[index])\n        n %= fact\n        fact //= i\n    \n    result.append(digits[0])\n    return ''.join(result)\n\nprint(nth_perm(1, 4))\nprint(nth_perm(7, 4))\nprint(nth_perm(1, 5))\nprint(nth_perm(1, 4))"
        ]
    },
    "2": {
        "0": [
            "def L(n, d):\n    nums = '0123456789'\n    perm = []\n    for i in range(d):\n        perm.append(nums[i])\n\n    result = ''\n    while n > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        if n % fact == 0:\n            index -= 1\n        result += perm[index]\n        perm.pop(index)\n        n %= fact\n        d -= 1\n\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits.pop(index)\n        n -= index * math.factorial(d-i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        permutation += digits[index]\n        digits.remove(digits[index])\n        n %= math.factorial(i-1)\n\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutations = math.factorial(d)\n    if n > permutations:\n        return \"Invalid Input\"\n    result = \"\"\n    for i in range(d):\n        permutations = permutations // (d - i)\n        index = n // permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = n % permutations\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n\n    for i in range(d):\n        index = n // math.factorial(d - i - 1)\n        digit = digits.pop(index)\n        result += str(digit)\n\n        n %= math.factorial(d - i - 1)\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = math.floor(n / math.factorial(i))\n        result += str(digits[index])\n        digits.pop(index)\n        n %= math.factorial(i)\n        \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        n = n % div\n        result.append(digits.pop(index))\n        \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Create an empty string to store the permutation\n    perm = \"\"\n    \n    # Iterate from d-1 to 0\n    for i in range(d-1, -1, -1):\n        # Calculate the factorial of i\n        fact = math.factorial(i)\n        \n        # Calculate the index of the digit to use\n        index = n // fact\n        \n        # Update n for the next iteration\n        n = n % fact\n        \n        # Add the digit to the permutation\n        perm += digits[index]\n        \n        # Remove the used digit from the list\n        digits.remove(digits[index])\n    \n    return perm",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    perm_digits = []\n    for i in range(d-1, -1, -1):\n        count = math.factorial(i)\n        index = math.ceil(n/count) - 1\n        digit = digits[index]\n        perm_digits.append(digit)\n        digits.remove(digit)\n        n = n % count\n    return ''.join(perm_digits)",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    # calculate the total number of permutations for d digits\n    num_perm = math.factorial(d)\n    \n    # iterate through each digit position\n    for i in range(d, 0, -1):\n        # calculate the index of the current digit\n        index = (n-1) // (num_perm // i)\n        \n        # append the digit at the calculated index to the result\n        result += digits[index]\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update n and num_perm for the next digit position\n        n = n - index * (num_perm // i)\n        num_perm = num_perm // i\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n\n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n %= math.factorial(i)\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # initialize result as an empty string\n    result = ''\n    \n    # iterate from d-1 down to 0\n    for i in range(d-1, -1, -1):\n        # calculate the factorial of i\n        fact = math.factorial(i)\n        \n        # calculate the index of the digit in digits that should be added to result\n        index = (n // fact) % (i + 1)\n        \n        # add the digit to result and remove it from digits\n        result += digits[index]\n        digits.pop(index)\n    \n    return result",
            "```python\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        div = math.factorial(i)\n        idx = n // div\n        n %= div\n        result += str(digits[idx])\n        digits.pop(idx)\n        \n    return result\n```",
            "import math\n\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        div = math.factorial(i-1)\n        index = n // div\n        n = n % div\n        result += str(digits.pop(index))\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm_count = math.factorial(d)\n    if n > perm_count or n < 1:\n        return \"Invalid input\"\n    n -= 1  # 0-indexing\n    \n    result = []\n    while d > 0:\n        perm_count //= d\n        index = n // perm_count\n        digit = digits.pop(index)\n        result.append(digit)\n        n %= perm_count\n        d -= 1\n    \n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Get the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Create an empty string to store the resulting permutation\n    permutation = ''\n    \n    # Iterate through each digit\n    for i in range(d-1, 0, -1):\n        # Get the index of the digit to be added to the permutation\n        index = (n-1) // factorial\n        \n        # Add the digit to the permutation\n        permutation += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n % factorial\n        \n        # Update the factorial\n        factorial = factorial // i\n    \n    # Add the last remaining digit to the permutation\n    permutation += digits[0]\n    \n    return permutation",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # Create a list to store the result\n    result = []\n\n    # Calculate the factorial of d\n    factorial = math.factorial(d)\n\n    # Iterate through the digits\n    for i in range(d, 0, -1):\n        # Calculate the index of the next digit\n        index = math.ceil(n / (factorial // i)) - 1\n\n        # Add the next digit to the result\n        result.append(digits[index])\n\n        # Remove the next digit from the list of digits\n        digits.pop(index)\n\n        # Update n and factorial\n        n = n % (factorial // i)\n        factorial = factorial // i\n\n    # Return the result as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.floor((n - 1) / math.factorial(i - 1))\n        result += nums[index]\n        nums.pop(index)\n        n = n - (index * math.factorial(i - 1))\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_permutations = math.factorial(d)\n    \n    # Check if n is within the range of valid permutations\n    if n <= 0 or n > total_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty result string\n    result = \"\"\n    \n    # Loop through the digits\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the current digit\n        index = (n - 1) // math.factorial(i)\n        \n        # Add the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # Remove the added digit from the list\n        digits.pop(index)\n        \n        # Update the value of n for the next iteration\n        n = n - (index * math.factorial(i))\n    \n    return result"
        ],
        "1": [
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    while d > 0:\n        group_size = math.factorial(d - 1)\n        index = (n - 1) // group_size\n        result += digits[index]\n        digits.pop(index)\n        n -= index * group_size\n        d -= 1\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n <= 0 or n > num_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d):\n        # Calculate the index of the digit to add to the permutation\n        index = (n - 1) // math.factorial(d - 1 - i)\n        \n        # Add the digit to the permutation\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n - (index * math.factorial(d - 1 - i))\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    n -= 1\n    \n    while digits:\n        fact = math.factorial(len(digits)-1)\n        index = n // fact\n        result += str(digits[index])\n        digits.pop(index)\n        n %= fact\n    \n    return result",
            "```python\nimport math\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        digit = digits.pop(index)\n        result += str(digit)\n        n -= index * math.factorial(i-1)\n        \n    return result\n```",
            "import math\n\ndef nth_perm(n, d):\n    # create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # calculate the total number of permutations\n    total_permutations = math.factorial(d)\n\n    # if n is greater than the total number of permutations, return an empty string\n    if n > total_permutations:\n        return \"\"\n\n    # create an empty list to store the result\n    result = []\n\n    # calculate the indices of the digits to be used for the nth permutation\n    indices = []\n\n    # calculate the factorials of each digit\n    factorials = [math.factorial(i) for i in range(d)]\n\n    # iterate over the factorials in reverse order\n    for factorial in factorials[::-1]:\n        # calculate the index of the digit to be used\n        index = (n - 1) // factorial\n        # append the index to the list of indices\n        indices.append(index)\n        # update n for the next iteration\n        n -= index * factorial\n\n    # iterate over the indices in reverse order\n    for index in indices[::-1]:\n        # append the digit at the corresponding index to the result\n        result.append(digits[index])\n        # remove the digit from the list of digits\n        digits.pop(index)\n\n    # convert the result to a string and return it\n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d-1, -1, -1):\n        index = (n-1) // math.factorial(i)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n % math.factorial(i)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n = n - (index * math.factorial(i-1))\n        \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perms = math.factorial(d)\n    n -= 1\n    result = \"\"\n    \n    for i in range(d):\n        perms /= (d - i)\n        index = int(n / perms)\n        result += digits[index]\n        digits.pop(index)\n        n = n % perms\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n\n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        digits.remove(digit)\n        result += str(digit)\n\n        n -= index * math.factorial(i-1)\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n        fact = fact // i\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # Initialize an empty result string\n    result = ''\n\n    # Loop through each digit position\n    for i in range(d):\n        # Calculate the index of the current digit in the remaining digits\n        index = n // math.factorial(d - 1 - i)\n\n        # Add the current digit to the result string\n        result += digits[index]\n\n        # Remove the current digit from the list of remaining digits\n        digits.pop(index)\n\n        # Update n to the remainder after removing the current digit\n        n %= math.factorial(d - 1 - i)\n\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    fact = math.factorial(d-1)\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result += digits.pop(index)\n        n %= fact\n        fact //= i\n    \n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = math.ceil(n / fact) - 1\n        \n        result += str(digits[index])\n        digits.pop(index)\n        \n        n %= fact\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    \n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = math.ceil(n / fact) - 1\n        n = n % fact\n        permutation += digits.pop(index)\n    \n    return permutation\n\nprint(nth_perm(1, 4))",
            "def nth_perm(n, d):\n    digits = ''.join(str(x) for x in range(d))\n    total_perms = math.factorial(d)\n    \n    if n < 1 or n > total_perms:\n        return None\n    \n    result = []\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        total_perms //= i\n        index = n // total_perms\n        digit = digits[index]\n        result.append(digit)\n        \n        digits = digits[:index] + digits[index+1:]\n        n %= total_perms\n        \n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = ''.join(str(i) for i in range(d))\n    return ''.join(sorted(digits, key=lambda x: int(x)**n))",
            "def nth_perm(n, d):\n    digits = list(map(str, range(d)))  # List of digits from 0 to d-1\n    num_permutations = math.factorial(d)  # Total number of permutations\n\n    if n < 1 or n > num_permutations:\n        return \"Invalid input\"\n\n    result = \"\"\n    remaining = d - 1\n\n    for i in range(d-1, 0, -1):\n        fact = math.factorial(i)\n        index = (n-1) // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n % fact\n\n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_perm = math.factorial(d)\n    perm_index = n-1\n    result = ''\n    \n    for i in range(d):\n        num_perm = num_perm//(d-i)\n        index = perm_index//num_perm\n        result += digits.pop(index)\n        perm_index = perm_index%num_perm\n        \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize an empty result string\n    result = \"\"\n    \n    # Loop through the digits and calculate the factorial of the remaining digits\n    for i in range(d, 0, -1):\n        # Calculate the index of the current digit\n        index = math.ceil(n / math.factorial(i - 1)) - 1\n        \n        # Append the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update the value of n\n        n = n % math.factorial(i - 1)\n    \n    return result",
            "def nth_perm(n, d):\n    if n < 1:\n        return \"\"\n    \n    digits = list(map(str, range(d)))\n    result = \"\"\n    \n    for i in range(d):\n        fact = math.factorial(d - 1 - i)\n        index = (n - 1) // fact\n        result += digits[index]\n        digits.pop(index)\n        n = (n - 1) % fact + 1\n    \n    return result"
        ],
        "2": [
            "def nth_perm(n, d):\n    digits = list(map(str, range(d)))\n    result = ''\n    \n    for i in range(1, d):\n        index = math.ceil(n / math.factorial(d - i))\n        result += digits[index - 1]\n        digits.remove(digits[index - 1])\n        n = n % math.factorial(d - i)\n    \n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d):\n        index = n // math.factorial(d-i-1)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(d-i-1)\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    \n    while len(result) < d:\n        fact = math.factorial(d - len(result) - 1)\n        index = (n - 1) // fact\n        result += digits[index]\n        digits.pop(index)\n        n = n - index * fact\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    num_digits = len(digits)\n    result = []\n    n -= 1 # convert to 0-indexed\n    for i in range(num_digits):\n        fact = math.factorial(num_digits-i-1)\n        index = n // fact\n        result.append(digits.pop(index))\n        n %= fact\n    return ''.join(result)",
            "def nth_perm(n, d):\n    digits = ''.join(map(str, range(d)))\n    num_perm = math.factorial(d)\n    if n >= num_perm or n < 1:\n        return \"Invalid input\"\n    perm = ''\n    for i in range(d, 0, -1):\n        num_perm //= i\n        index = (n-1) // num_perm\n        n = (n-1) % num_perm + 1\n        perm += digits[index]\n        digits = digits[:index] + digits[index+1:]\n    return perm",
            "def nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate over the digits\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the current digit\n        index = n // factorial\n        \n        # Append the digit to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n and factorial\n        n %= factorial\n        factorial //= i\n    \n    # Append the last digit to the result string\n    result += digits[0]\n    \n    # Return the result string\n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        digit = digits[index]\n        result += str(digit)\n        digits.remove(digit)\n        n = n - index * math.factorial(i-1)\n        \n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    while len(digits) > 0:\n        perm_count = math.factorial(len(digits) - 1)\n        index = math.ceil(n / perm_count) - 1\n        result += digits[index]\n        digits.pop(index)\n        n = n % perm_count\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    for i in range(d, 0, -1):\n        f = math.factorial(i-1)\n        index = math.ceil(n / f) - 1\n        result.append(digits[index])\n        digits.pop(index)\n        n = n % f\n    return ''.join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    num_perm = math.factorial(d)\n    if n > num_perm:\n        return \"Invalid input\"\n    res = []\n    n -= 1\n    for i in range(d, 0, -1):\n        num_perm //= i\n        idx = n // num_perm\n        res.append(digits[idx])\n        digits.pop(idx)\n        n %= num_perm\n    return \"\".join(res)",
            "def nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate from d-1 down to 1\n    while d > 1:\n        # Calculate the index of the digit to be used in the result\n        index = (n-1) // factorial\n        \n        # Add the digit to the result\n        result.append(digits[index])\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next iteration\n        n = (n-1) % factorial + 1\n        factorial //= (d-1)\n        d -= 1\n    \n    # Add the last remaining digit to the result\n    result.append(digits[0])\n    \n    # Convert the result to a string and return it\n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    \n    # iterate through each digit\n    for i in range(d, 0, -1):\n        # calculate the factorial of (i-1)\n        f = math.factorial(i-1)\n        # calculate the index of the current digit in the permutation\n        index = math.ceil(n / f) - 1\n        # append the digit to the result\n        result.append(digits[index])\n        # remove the digit from the list of available digits\n        digits.pop(index)\n        # update n to the remaining part of the permutation\n        n %= f\n    \n    # convert the result to a string\n    return ''.join(str(x) for x in result)",
            "def nth_perm(n,d):\n    nums = [str(i) for i in range(d)]\n    result = []\n    \n    # calculate the factorial of d\n    f = math.factorial(d)\n    \n    # iterate through each digit position\n    for i in range(d, 0, -1):\n        # calculate the value of index for the current digit position\n        f = f // i\n        index = (n-1) // f\n        # add the corresponding digit to the result\n        result.append(nums[index])\n        # remove the used digit from the list of available digits\n        nums.pop(index)\n        # update the value of n for the next digit position\n        n = n - (index * f)\n    \n    # join the digits in the result list and return as a string\n    return ''.join(result)",
            "import math\ndef nth_perm(n,d):\n    digits = ''.join(str(i) for i in range(d))\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = n // fact\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n        n %= fact\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Generate the list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate through the digits from left to right\n    for i in range(d, 0, -1):\n        # Calculate the index of the digit to add to the result\n        index = n // math.factorial(i-1)\n        \n        # Add the digit to the result and remove it from the list of digits\n        result += digits[index]\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n % math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)] # Create a list of all digits from 0 to d-1\n    fact = math.factorial(d-1) # Calculate the factorial of d-1\n    result = '' # Initialize an empty string to store the resulting permutation\n    \n    for i in range(d-1, 0, -1): # Iterate through the digits in reverse order\n        index = (n-1) // fact # Calculate the index of the next digit in the list\n        result += digits[index] # Add the next digit to the result\n        digits.pop(index) # Remove the added digit from the list\n        n -= index * fact # Update the value of n\n        fact //= i # Update the value of fact\n        \n    result += digits[0] # Add the last digit to the result\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations for d digits\n    total_permutations = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n < 1 or n > total_permutations:\n        return \"Invalid input\"\n    \n    # Create an empty string to store the resulting permutation\n    result = \"\"\n    \n    # Iterate through the digits\n    for i in range(d, 0, -1):\n        # Calculate the index of the digit to be added to the result\n        index = (n-1) // math.factorial(i-1)\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update the value of n\n        n -= index * math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n,d):\n    digits = list(range(d))\n    result = []\n    \n    for i in range(d, 0, -1):\n        index = (n-1) // math.factorial(i-1)\n        result.append(str(digits.pop(index)))\n        n = n - index*math.factorial(i-1)\n    \n    return ''.join(result)",
            "def nth_perm(n,d):\n\n    digits = ''.join([str(x) for x in range(d)])\n\n    # calculate the number of permutations for the given digits\n    num_perms = math.factorial(d)\n\n    # check if n is valid\n    if n <= 0 or n > num_perms:\n        return \"Invalid input\"\n\n    # create a list of the digits\n    digits_list = list(digits)\n\n    # initialize an empty string to store the result\n    result = \"\"\n\n    # iterate through the range of digits\n    for i in range(d, 0, -1):\n\n        # calculate the index of the current digit\n        index = (n - 1) // math.factorial(i - 1)\n\n        # append the digit to the result\n        result += digits_list[index]\n\n        # remove the digit from the list\n        digits_list.pop(index)\n\n        # update n\n        n -= index * math.factorial(i - 1)\n\n    return result",
            "def nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_perm = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n < 1 or n > total_perm:\n        return \"Invalid input\"\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate through each digit\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the current digit\n        index = (n-1) // math.factorial(i)\n        \n        # Append the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.remove(digits[index])\n        \n        # Update n\n        n = n - (index * math.factorial(i))\n    \n    return result\n\nprint(nth_perm(1, 4)) # \"0123\"\nprint(nth_perm(7, 4)) # \"1023\""
        ],
        "3": [
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n\n    # calculate the number of permutations\n    total_permutations = math.factorial(d)\n\n    # calculate the number of permutations per digit\n    perms_per_digit = total_permutations // d\n\n    # subtract 1 from n because we are starting from 0\n    n -= 1\n\n    # initialize the result string\n    result = ''\n\n    # iterate through each digit\n    for i in range(d-1, -1, -1):\n        # find the index of the digit to use\n        index = n // perms_per_digit\n\n        # append the digit to the result string\n        result += str(digits[index])\n\n        # remove the digit from the list\n        digits.pop(index)\n\n        # update n and perms_per_digit for the next iteration\n        n = n % perms_per_digit\n        if i > 0:\n            perms_per_digit = perms_per_digit // i\n\n    return result",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n\n    while d > 0:\n        d -= 1\n        div = math.factorial(d)\n        index = n // div\n        n %= div\n        result += str(digits[index])\n        digits.pop(index)\n\n    return result",
            "```python\ndef nth_perm(n, d):\n    # Get the digits\n    digits = list(range(d))\n\n    # Initialize the result string\n    result = \"\"\n\n    # Iterate from the largest digit to the smallest\n    for i in range(d, 0, -1):\n        # Calculate the number of permutations of the remaining digits\n        count = math.factorial(i - 1)\n\n        # Calculate the index of the current digit\n        index = (n - 1) // count\n\n        # Add the current digit to the result string\n        result += str(digits[index])\n\n        # Remove the current digit from the list of digits\n        digits.pop(index)\n\n        # Update n for the next iteration\n        n = n % count\n\n    return result\n```",
            "def nth_perm(n, d):\n    nums = list(range(d))  # create a list of digits from 0 to d-1\n    result = ''\n    \n    for i in range(d-1, 0, -1):\n        # calculate the index of the digit to include in the result\n        index = math.ceil(n / math.factorial(i))\n        result += str(nums.pop(index-1))\n        \n        # update n for the next iteration\n        n = n % math.factorial(i)\n    \n    # add the last digit to the result\n    result += str(nums[0])\n    \n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = []\n    n -= 1 # convert to 0-indexed\n    for i in range(d-1, -1, -1):\n        idx = n // math.factorial(i)\n        result.append(str(digits[idx]))\n        digits.pop(idx)\n        n %= math.factorial(i)\n    \n    return ''.join(result)",
            "def nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through each digit position\n    for i in range(d):\n        # Calculate the number of permutations for the remaining digits\n        num_perms = math.factorial(d - i - 1)\n        \n        # Calculate the index of the selected digit in the remaining digits\n        digit_index = n // num_perms\n        \n        # Add the selected digit to the result string\n        result += digits[digit_index]\n        \n        # Remove the selected digit from the list of digits\n        digits.pop(digit_index)\n        \n        # Update n to the remainder\n        n %= num_perms\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n = n - 1\n\n    while len(digits) > 0:\n        factorial = math.factorial(len(digits) - 1)\n        index = n // factorial\n        result += digits[index]\n        digits.pop(index)\n        n = n % factorial\n\n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = []\n    \n    for i in range(d, 0, -1):\n        divisor = math.factorial(i-1)\n        index = (n-1) // divisor\n        result.append(str(digits[index]))\n        digits.remove(digits[index])\n        n = (n-1) % divisor + 1\n    \n    return \"\".join(result)",
            "import math\n\ndef nth_perm(n, d):\n    # Create a list of digits from 0 to d-1\n    digits = list(map(str, range(d)))\n\n    # Calculate the number of permutations\n    num_permutations = math.factorial(d)\n\n    # Check if n is valid\n    if n < 1 or n > num_permutations:\n        return \"Invalid n\"\n\n    # Subtract 1 from n to account for 0-based indexing\n    n -= 1\n\n    # Calculate the permutation\n    permutation = ''\n    for i in range(d-1, -1, -1):\n        # Calculate the index of the current digit\n        index = n // math.factorial(i)\n\n        # Append the digit to the permutation string\n        permutation += digits[index]\n\n        # Remove the digit from the list\n        digits.pop(index)\n\n        # Update n\n        n %= math.factorial(i)\n\n    return permutation",
            "import math\ndef nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Generate the list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate over the digits\n    for i in range(d):\n        # Calculate the factorial of d-i-1\n        factorial = math.factorial(d-i-1)\n        \n        # Calculate the index of the digit to be added to the result\n        index = n // factorial\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n to the remainder\n        n %= factorial\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    for i in range(d, 0, -1):\n        index = math.ceil(n / math.factorial(i-1))\n        result += digits.pop(index-1)\n        n = n % math.factorial(i-1)\n    return result",
            "def nth_perm(n,d):\n    # Create a list of digits\n    digits = list(map(str, range(d)))\n    \n    # Create a list to store the result\n    result = []\n    \n    # Calculate the number of permutations\n    num_perm = math.factorial(d)\n    \n    # Check if n is valid\n    if n < 1 or n > num_perm:\n        return \"Invalid n\"\n    \n    # Loop through the digits\n    for i in range(d):\n        # Calculate the number of permutations for the remaining digits\n        num_perm = num_perm // (d - i)\n        \n        # Calculate the index of the digit to be added to the result\n        index = (n - 1) // num_perm\n        \n        # Add the digit to the result\n        result.append(digits[index])\n        \n        # Remove the digit from the list of digits\n        digits.remove(digits[index])\n        \n        # Update n\n        n = n - (index * num_perm)\n    \n    # Return the result as a string\n    return ''.join(result)",
            "def nth_perm(n, d):\n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n\n    # Find the factorial of d\n    factorial = math.factorial(d)\n\n    # Decrement n by 1 to account for 0-based indexing\n    n -= 1\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the digits in reverse order\n    for i in range(d, 0, -1):\n        # Calculate the index of the digit to add to the result\n        index = n // (factorial // i)\n\n        # Add the digit to the result\n        result.append(digits[index])\n\n        # Remove the digit from the list of digits\n        digits.pop(index)\n\n        # Update n and factorial\n        n %= factorial // i\n        factorial //= i\n\n    # Convert the result list to a string and return it\n    return ''.join(result)",
            "def nth_perm(n, d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = (n - 1) // math.factorial(i - 1)\n        digit = digits[index]\n        result += str(digit)\n        digits.remove(digit)\n        n -= index * math.factorial(i - 1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    perm = ''\n    n -= 1\n    while d > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        perm += str(digits.pop(index))\n        n = n % fact\n        d -= 1\n    return perm",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    perm = \"\"\n    \n    # Calculate the factorial of (d-1)\n    fact = math.factorial(d-1)\n    \n    # Decrement n by 1 because permutations are 0-indexed\n    n -= 1\n    \n    # Iterate through each digit\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the digit to add to the permutation\n        index = n // fact\n        \n        # Add the digit to the permutation\n        perm += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n to get the remaining digits\n        n %= fact\n        \n        # Update the factorial for the next iteration\n        fact //= i\n    \n    # Add the last remaining digit to the permutation\n    perm += digits[0]\n    \n    return perm",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    permutation = \"\"\n    n -= 1\n    while d > 0:\n        fact = math.factorial(d-1)\n        index = n // fact\n        permutation += digits[index]\n        digits.pop(index)\n        n = n % fact\n        d -= 1\n    return permutation\n\nprint(nth_perm(1, 4))\nprint(nth_perm(7,4))\nprint(nth_perm(1, 5))",
            "import math\n\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    \n    for i in range(d, 0, -1):\n        fact = math.factorial(i-1)\n        index = (n-1) // fact\n        result.append(digits.pop(index))\n        n = (n-1) % fact + 1\n    \n    return \"\".join(result)",
            "def nth_perm(n, d):\n    # Generate a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Calculate the total number of permutations\n    total_perms = math.factorial(d)\n    \n    # Check if n is a valid input\n    if n < 1 or n > total_perms:\n        return \"Invalid input\"\n    \n    # Initialize the result\n    result = \"\"\n    \n    # Iterate over the digits\n    for i in range(d):\n        # Calculate the number of permutations for the remaining digits\n        perms_remaining = total_perms // (d - i)\n        \n        # Calculate the index of the digit to append\n        index = (n - 1) // perms_remaining\n        \n        # Append the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the list\n        digits.pop(index)\n        \n        # Update n and total_perms\n        n = n - index * perms_remaining\n        total_perms = perms_remaining\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d-1, -1, -1):\n        digit_index = n // math.factorial(i)\n        result += digits[digit_index]\n        digits.pop(digit_index)\n        n -= digit_index * math.factorial(i)\n    return result"
        ],
        "4": [
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        index = n // math.factorial(d)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(d)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    remaining = n - 1\n    \n    for i in range(d, 0, -1):\n        index = remaining // math.factorial(i - 1)\n        result += digits[index]\n        digits.pop(index)\n        remaining = remaining % math.factorial(i - 1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    n -= 1\n    \n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.pop(index)\n        n = n % math.factorial(i-1)\n    \n    return result",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    \n    for i in range(d, 0, -1):\n        index = math.floor((n-1) / math.factorial(i-1))\n        result += str(digits.pop(index))\n        n -= index * math.factorial(i-1)\n    \n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    for i in range(1, d+1):\n        total_permutations = math.factorial(d-i)\n        index = (n-1) // total_permutations\n        result += digits[index]\n        digits.remove(digits[index])\n        n = (n-1) % total_permutations + 1\n    return result",
            "```python\n    # create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # calculate the factorial of d-1\n    fact = math.factorial(d-1)\n    \n    # create an empty string to store the result\n    result = \"\"\n    \n    # iterate through the digits from the largest to the smallest\n    for i in range(d-1, 0, -1):\n        # calculate the index of the digit to be added to the result\n        index = (n - 1) // fact\n        \n        # add the digit at the calculated index to the result\n        result += digits[index]\n        \n        # remove the digit from the list\n        digits.pop(index)\n        \n        # update the value of n\n        n = (n - 1) % fact + 1\n        \n        # update the value of fact\n        fact //= i\n    \n    # add the last digit to the result\n    result += digits[0]\n    \n    # return the result\n    return result\n```",
            "import math\ndef nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits from 0 to d-1\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Calculate the factorial of d-1\n    factorial = math.factorial(d-1)\n    \n    # Iterate through each digit position\n    for i in range(d-1, 0, -1):\n        # Calculate the index of the digit in the permutation\n        index = n // factorial\n        \n        # Append the digit at the calculated index to the result string\n        result += digits[index]\n        \n        # Remove the digit from the list of digits\n        digits.pop(index)\n        \n        # Update n and factorial for the next digit position\n        n %= factorial\n        factorial //= i\n    \n    # Append the last remaining digit to the result string\n    result += digits[0]\n    \n    return result",
            "import math\n\ndef nth_perm(n, d):\n    digits = list(range(d))\n    result = \"\"\n\n    for i in range(d-1, -1, -1):\n        fact = math.factorial(i)\n        index = math.ceil(n / fact) - 1\n        result += str(digits[index])\n        digits.remove(digits[index])\n        n %= fact\n\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        divisor = math.factorial(i)\n        index = n // divisor\n        n %= divisor\n        result += digits.pop(index)\n    \n    result += digits[0]\n    return result",
            "import math\ndef nth_perm(n,d):\n    # Convert n to 0-based index\n    n -= 1\n    \n    # Create a list of digits\n    digits = [str(i) for i in range(d)]\n    \n    # Initialize result string\n    result = ''\n    \n    # Iterate through digits from most significant to least significant\n    for i in range(d-1, -1, -1):\n        # Calculate the number of permutations for the remaining digits\n        num_perms = math.factorial(i)\n        \n        # Calculate the index of the next digit in the current iteration\n        index = n // num_perms\n        \n        # Append the next digit to the result\n        result += digits[index]\n        \n        # Remove the used digit from the list\n        digits.pop(index)\n        \n        # Update the value of n for the next iteration\n        n = n % num_perms\n    \n    return result",
            "import math\ndef nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = ''\n    n -= 1\n    for i in range(d, 0, -1):\n        index = n // math.factorial(i-1)\n        result += digits[index]\n        digits.pop(index)\n        n %= math.factorial(i-1)\n    return result",
            "```python\n    digits = list(range(d))\n    perm = []\n    for i in range(d, 0, -1):\n        idx = math.floor((n-1)/math.factorial(i-1))\n        perm.append(digits[idx])\n        digits.pop(idx)\n        n = n - (idx * math.factorial(i-1))\n    return ''.join(map(str, perm))\n```",
            "def nth_perm(n,d):\n    digits = list(range(d))\n    result = ''\n    n -= 1\n    \n    while d > 0:\n        d -= 1\n        index, n = divmod(n, math.factorial(d))\n        result += str(digits[index])\n        digits.pop(index)\n    \n    return result",
            "import math\n\ndef nth_perm(n,d):\n    digits = [str(i) for i in range(d)]\n    result = \"\"\n    \n    for i in range(d, 0, -1):\n        # Find the index of the digit to add to the result\n        index = math.ceil(n / math.factorial(i-1)) - 1\n        \n        # Add the digit to the result\n        result += digits[index]\n        \n        # Remove the digit from the available digits\n        digits.pop(index)\n        \n        # Update n for the next iteration\n        n = n % math.factorial(i-1)\n        \n    return result",
            "import math\ndef nth_perm(n,d):\n    if n < 1:\n        return None\n    digits = [str(i) for i in range(d)]\n    result = ''\n    for i in range(d, 0, -1):\n        pos = math.ceil(n / math.factorial(i-1)) - 1\n        result += digits[pos]\n        digits.remove(digits[pos])\n        n = n % math.factorial(i-1)\n    return result",
            "def nth_perm(n, d):\n    digits = [str(i) for i in range(d)]\n    result = []\n    fact = math.factorial(d-1)\n    \n    n -= 1\n    \n    for i in range(d-1, 0, -1):\n        index = n // fact\n        result.append(digits[index])\n        digits.remove(digits[index])\n        n %= fact\n        fact //= i\n    \n    result.append(digits[0])\n    return ''.join(result)\n\nprint(nth_perm(1, 4))\nprint(nth_perm(7, 4))\nprint(nth_perm(1, 5))\nprint(nth_perm(1, 4))",
            "import math\ndef nth_perm(n,d):\n    digits = list(range(d))\n    permutation = ''\n    n -= 1\n    \n    for i in range(d-1, -1, -1):\n        index = n // math.factorial(i)\n        n %= math.factorial(i)\n        permutation += str(digits[index])\n        digits.pop(index)\n    \n    return permutation",
            "import math\n\ndef nth_perm(n, d):\n    digits = ''.join(str(i) for i in range(d))\n\n    result = ''\n    for i in range(1, d+1):\n        fact = math.factorial(d-i)\n        index = (n-1) // fact\n        result += digits[index]\n        digits = digits[:index] + digits[index+1:]\n\n        n = (n-1) % fact + 1\n\n    return result"
        ]
    }
}